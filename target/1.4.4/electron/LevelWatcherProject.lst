
h:/OneDrive/Development/Particle/projects/LevelWatcherProject/target/1.4.4/electron/LevelWatcherProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008200  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08088220  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000100  20000000  08088224  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005e0  20000100  20000100  00040100  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08088324  08088324  00038324  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808834c  0808834c  0003834c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000beceb  00000000  00000000  00038350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011ded  00000000  00000000  000f703b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000190b5  00000000  00000000  00108e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002570  00000000  00000000  00121edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003b58  00000000  00000000  0012444d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a46f  00000000  00000000  00127fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002aad4  00000000  00000000  00152414  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000abe12  00000000  00000000  0017cee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d45c  00000000  00000000  00228cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f004 fa01 	bl	8084438 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f004 fa06 	bl	808444e <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08088224 	.word	0x08088224
 8080050:	20000100 	.word	0x20000100
 8080054:	20000100 	.word	0x20000100
 8080058:	200006e0 	.word	0x200006e0
 808005c:	200006e0 	.word	0x200006e0

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f002 fb99 	bl	8082798 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	080881dc 	.word	0x080881dc
 8080088:	08088220 	.word	0x08088220

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 b942 	b.w	8080314 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 f9ad 	bl	80803f0 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f002 bb3f 	b.w	808271c <_post_loop>

0808009e <_Znwj>:
 808009e:	f001 bf0f 	b.w	8081ec0 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f001 bf15 	b.w	8081ed0 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr
	...

080800b8 <_ZN16JsonParserStaticILj256ELj20EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80800b8:	b510      	push	{r4, lr}
 80800ba:	4604      	mov	r4, r0
 80800bc:	4b02      	ldr	r3, [pc, #8]	; (80800c8 <_ZN16JsonParserStaticILj256ELj20EED1Ev+0x10>)
 80800be:	6003      	str	r3, [r0, #0]
 80800c0:	f000 fe46 	bl	8080d50 <_ZN10JsonParserD1Ev>
 80800c4:	4620      	mov	r0, r4
 80800c6:	bd10      	pop	{r4, pc}
 80800c8:	0808732c 	.word	0x0808732c

080800cc <_ZN16JsonParserStaticILj256ELj20EED0Ev>:
 80800cc:	b510      	push	{r4, lr}
 80800ce:	4604      	mov	r4, r0
 80800d0:	f7ff fff2 	bl	80800b8 <_ZN16JsonParserStaticILj256ELj20EED1Ev>
 80800d4:	4620      	mov	r0, r4
 80800d6:	f44f 711b 	mov.w	r1, #620	; 0x26c
 80800da:	f003 fa16 	bl	808350a <_ZdlPvj>
 80800de:	4620      	mov	r0, r4
 80800e0:	bd10      	pop	{r4, pc}
	...

080800e4 <_Z5blinkm>:
  blinkLong(3);
  blinkShort(3);
}

void blink(unsigned long onTime)
{
 80800e4:	b538      	push	{r3, r4, r5, lr}
 80800e6:	4605      	mov	r5, r0
    digitalWrite(onboardLed, HIGH);
 80800e8:	4c08      	ldr	r4, [pc, #32]	; (808010c <_Z5blinkm+0x28>)
 80800ea:	2101      	movs	r1, #1
 80800ec:	8820      	ldrh	r0, [r4, #0]
 80800ee:	f003 f988 	bl	8083402 <digitalWrite>
    // We'll leave it on for 1 second...
    delay(onTime);
 80800f2:	4628      	mov	r0, r5
 80800f4:	f002 faa4 	bl	8082640 <delay>
    // Then we'll turn it off...
    digitalWrite(onboardLed, LOW);
 80800f8:	8820      	ldrh	r0, [r4, #0]
 80800fa:	2100      	movs	r1, #0
 80800fc:	f003 f981 	bl	8083402 <digitalWrite>
    delay(200);
}
 8080100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(onboardLed, HIGH);
    // We'll leave it on for 1 second...
    delay(onTime);
    // Then we'll turn it off...
    digitalWrite(onboardLed, LOW);
    delay(200);
 8080104:	20c8      	movs	r0, #200	; 0xc8
 8080106:	f002 ba9b 	b.w	8082640 <delay>
 808010a:	bf00      	nop
 808010c:	20000004 	.word	0x20000004

08080110 <_Z9blinkLongi>:
}

void blinkLong(int times)
{
 8080110:	b538      	push	{r3, r4, r5, lr}
 8080112:	4605      	mov	r5, r0
    for (int i = 0; i < times ; i++)
 8080114:	2400      	movs	r4, #0
 8080116:	42ac      	cmp	r4, r5
 8080118:	da05      	bge.n	8080126 <_Z9blinkLongi+0x16>
    {
        blink(600);
 808011a:	f44f 7016 	mov.w	r0, #600	; 0x258
 808011e:	f7ff ffe1 	bl	80800e4 <_Z5blinkm>
    delay(200);
}

void blinkLong(int times)
{
    for (int i = 0; i < times ; i++)
 8080122:	3401      	adds	r4, #1
 8080124:	e7f7      	b.n	8080116 <_Z9blinkLongi+0x6>
 8080126:	bd38      	pop	{r3, r4, r5, pc}

08080128 <_Z10blinkShorti>:
        blink(600);
    }
}

void blinkShort(int times)
{
 8080128:	b538      	push	{r3, r4, r5, lr}
 808012a:	4605      	mov	r5, r0
    for (int i = 0; i < times ; i++)
 808012c:	2400      	movs	r4, #0
 808012e:	42ac      	cmp	r4, r5
 8080130:	da04      	bge.n	808013c <_Z10blinkShorti+0x14>
    {
        blink(200);
 8080132:	20c8      	movs	r0, #200	; 0xc8
 8080134:	f7ff ffd6 	bl	80800e4 <_Z5blinkm>
    }
}

void blinkShort(int times)
{
    for (int i = 0; i < times ; i++)
 8080138:	3401      	adds	r4, #1
 808013a:	e7f8      	b.n	808012e <_Z10blinkShorti+0x6>
 808013c:	bd38      	pop	{r3, r4, r5, pc}

0808013e <_Z3sosv>:
       resetFlag = true;
       rebootSync = millis();
       return 0;
}

void sos () {
 808013e:	b508      	push	{r3, lr}
  blinkShort(3);
 8080140:	2003      	movs	r0, #3
 8080142:	f7ff fff1 	bl	8080128 <_Z10blinkShorti>
  blinkLong(3);
 8080146:	2003      	movs	r0, #3
 8080148:	f7ff ffe2 	bl	8080110 <_Z9blinkLongi>
  blinkShort(3);
}
 808014c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void sos () {
  blinkShort(3);
  blinkLong(3);
  blinkShort(3);
 8080150:	2003      	movs	r0, #3
 8080152:	f7ff bfe9 	b.w	8080128 <_Z10blinkShorti>

08080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080156:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080158:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808015a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808015c:	b17c      	cbz	r4, 808017e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808015e:	6863      	ldr	r3, [r4, #4]
 8080160:	3b01      	subs	r3, #1
 8080162:	6063      	str	r3, [r4, #4]
 8080164:	b95b      	cbnz	r3, 808017e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080166:	6823      	ldr	r3, [r4, #0]
 8080168:	4620      	mov	r0, r4
 808016a:	689b      	ldr	r3, [r3, #8]
 808016c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808016e:	68a3      	ldr	r3, [r4, #8]
 8080170:	3b01      	subs	r3, #1
 8080172:	60a3      	str	r3, [r4, #8]
 8080174:	b91b      	cbnz	r3, 808017e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080176:	6823      	ldr	r3, [r4, #0]
 8080178:	4620      	mov	r0, r4
 808017a:	68db      	ldr	r3, [r3, #12]
 808017c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808017e:	4628      	mov	r0, r5
 8080180:	bd38      	pop	{r3, r4, r5, pc}

08080182 <_ZN5Print8printlnfIIEEEjPKcDpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8080182:	460a      	mov	r2, r1
 8080184:	2101      	movs	r1, #1
 8080186:	f002 b920 	b.w	80823ca <_ZN5Print11printf_implEbPKcz>
	...

0808018c <_Z7setZero6String>:
//STARTUP(cellular_credentials_set("mokanix", "", "", NULL));
//STARTUP(cellular_credentials_set("globaldata", "", "", NULL));  //globalM2M SIM starting 89234 or 89444


int setZero(String command)
{
 808018c:	b507      	push	{r0, r1, r2, lr}
    Serial.printlnf("Set Zero Function called from cloud");
 808018e:	f002 fecd 	bl	8082f2c <_Z16_fetch_usbserialv>
 8080192:	490b      	ldr	r1, [pc, #44]	; (80801c0 <_Z7setZero6String+0x34>)
 8080194:	f7ff fff5 	bl	8080182 <_ZN5Print8printlnfIIEEEjPKcDpT_>
    zeroOffsetInMm = 0.0;  //Reset zero offset to allow re-calculation
 8080198:	490a      	ldr	r1, [pc, #40]	; (80801c4 <_Z7setZero6String+0x38>)
 808019a:	2200      	movs	r2, #0
 808019c:	2300      	movs	r3, #0
 808019e:	e9c1 2300 	strd	r2, r3, [r1]
    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
 80801a2:	2118      	movs	r1, #24
 80801a4:	9100      	str	r1, [sp, #0]
 80801a6:	4808      	ldr	r0, [pc, #32]	; (80801c8 <_Z7setZero6String+0x3c>)
 80801a8:	f001 fa36 	bl	8081618 <_ZN14RunningAverage9fillValueEdh>
    zeroingInProgress = true;
 80801ac:	4a07      	ldr	r2, [pc, #28]	; (80801cc <_Z7setZero6String+0x40>)
 80801ae:	2301      	movs	r3, #1
 80801b0:	7013      	strb	r3, [r2, #0]
    sample =1;
 80801b2:	4a07      	ldr	r2, [pc, #28]	; (80801d0 <_Z7setZero6String+0x44>)
    return 0;
}
 80801b4:	2000      	movs	r0, #0
{
    Serial.printlnf("Set Zero Function called from cloud");
    zeroOffsetInMm = 0.0;  //Reset zero offset to allow re-calculation
    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
    zeroingInProgress = true;
    sample =1;
 80801b6:	6013      	str	r3, [r2, #0]
    return 0;
}
 80801b8:	b003      	add	sp, #12
 80801ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80801be:	bf00      	nop
 80801c0:	08087334 	.word	0x08087334
 80801c4:	200003d0 	.word	0x200003d0
 80801c8:	20000370 	.word	0x20000370
 80801cc:	200003a8 	.word	0x200003a8
 80801d0:	20000008 	.word	0x20000008

080801d4 <_Z18cloudResetFunction6String>:
    String("\"}");
    Particle.publish("Loop Delay updated", loopDelayData, 600, PRIVATE);
    return 0;
}

int cloudResetFunction(String command) {
 80801d4:	b508      	push	{r3, lr}
      Serial.printlnf("Restart triggered");
 80801d6:	f002 fea9 	bl	8082f2c <_Z16_fetch_usbserialv>
 80801da:	4906      	ldr	r1, [pc, #24]	; (80801f4 <_Z18cloudResetFunction6String+0x20>)
 80801dc:	f7ff ffd1 	bl	8080182 <_ZN5Print8printlnfIIEEEjPKcDpT_>
       resetFlag = true;
 80801e0:	4b05      	ldr	r3, [pc, #20]	; (80801f8 <_Z18cloudResetFunction6String+0x24>)
 80801e2:	2201      	movs	r2, #1
 80801e4:	701a      	strb	r2, [r3, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80801e6:	f001 fc8f 	bl	8081b08 <HAL_Timer_Get_Milli_Seconds>
       rebootSync = millis();
 80801ea:	4b04      	ldr	r3, [pc, #16]	; (80801fc <_Z18cloudResetFunction6String+0x28>)
 80801ec:	6018      	str	r0, [r3, #0]
       return 0;
}
 80801ee:	2000      	movs	r0, #0
 80801f0:	bd08      	pop	{r3, pc}
 80801f2:	bf00      	nop
 80801f4:	08087358 	.word	0x08087358
 80801f8:	20000388 	.word	0x20000388
 80801fc:	200003ac 	.word	0x200003ac

08080200 <_Z12setLoopDelay6String>:
    startupCompleted = true;  //We can now run loop
}

int setLoopDelay(String delay)
//Set loop delay in seconds
{
 8080200:	b570      	push	{r4, r5, r6, lr}
 8080202:	b09a      	sub	sp, #104	; 0x68
    loopDelay = atol(delay);
 8080204:	6800      	ldr	r0, [r0, #0]
 8080206:	f004 f809 	bl	808421c <atol>
 808020a:	4c38      	ldr	r4, [pc, #224]	; (80802ec <_Z12setLoopDelay6String+0xec>)
    Serial.printlnf("Loop Delay updated to: " + String::format("%u", loopDelay));
 808020c:	4d38      	ldr	r5, [pc, #224]	; (80802f0 <_Z12setLoopDelay6String+0xf0>)
}

int setLoopDelay(String delay)
//Set loop delay in seconds
{
    loopDelay = atol(delay);
 808020e:	6020      	str	r0, [r4, #0]
    Serial.printlnf("Loop Delay updated to: " + String::format("%u", loopDelay));
 8080210:	f002 fe8c 	bl	8082f2c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080214:	4937      	ldr	r1, [pc, #220]	; (80802f4 <_Z12setLoopDelay6String+0xf4>)
 8080216:	4606      	mov	r6, r0
 8080218:	a816      	add	r0, sp, #88	; 0x58
 808021a:	f001 ff73 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808021e:	6822      	ldr	r2, [r4, #0]
 8080220:	4629      	mov	r1, r5
 8080222:	a812      	add	r0, sp, #72	; 0x48
 8080224:	f002 f848 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080228:	a912      	add	r1, sp, #72	; 0x48
 808022a:	a816      	add	r0, sp, #88	; 0x58
 808022c:	f002 f813 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080230:	6801      	ldr	r1, [r0, #0]
 8080232:	4630      	mov	r0, r6
 8080234:	f7ff ffa5 	bl	8080182 <_ZN5Print8printlnfIIEEEjPKcDpT_>
 8080238:	a812      	add	r0, sp, #72	; 0x48
 808023a:	f001 ff1c 	bl	8082076 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808023e:	a816      	add	r0, sp, #88	; 0x58
 8080240:	f001 ff19 	bl	8082076 <_ZN6StringD1Ev>
    loopDelayData = String("{") +
    String("\"LoopDelay\":") +  String("\"") + String::format("%u", loopDelay)  +
 8080244:	492c      	ldr	r1, [pc, #176]	; (80802f8 <_Z12setLoopDelay6String+0xf8>)
 8080246:	a802      	add	r0, sp, #8
 8080248:	f001 ff5c 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808024c:	a902      	add	r1, sp, #8
 808024e:	a80a      	add	r0, sp, #40	; 0x28
 8080250:	f001 ff97 	bl	8082182 <_ZN6StringC1ERKS_>
 8080254:	4929      	ldr	r1, [pc, #164]	; (80802fc <_Z12setLoopDelay6String+0xfc>)
 8080256:	a806      	add	r0, sp, #24
 8080258:	f001 ff54 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808025c:	a906      	add	r1, sp, #24
 808025e:	a80a      	add	r0, sp, #40	; 0x28
 8080260:	f001 fff9 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080264:	4606      	mov	r6, r0
 8080266:	4926      	ldr	r1, [pc, #152]	; (8080300 <_Z12setLoopDelay6String+0x100>)
 8080268:	a80e      	add	r0, sp, #56	; 0x38
 808026a:	f001 ff4b 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808026e:	a90e      	add	r1, sp, #56	; 0x38
 8080270:	4630      	mov	r0, r6
 8080272:	f001 fff0 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080276:	4606      	mov	r6, r0
 8080278:	6822      	ldr	r2, [r4, #0]
 808027a:	4629      	mov	r1, r5
 808027c:	a812      	add	r0, sp, #72	; 0x48
 808027e:	f002 f81b 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080282:	a912      	add	r1, sp, #72	; 0x48
 8080284:	4630      	mov	r0, r6
 8080286:	f001 ffe6 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808028a:	4604      	mov	r4, r0
    String("\"}");
 808028c:	491d      	ldr	r1, [pc, #116]	; (8080304 <_Z12setLoopDelay6String+0x104>)
 808028e:	a816      	add	r0, sp, #88	; 0x58
 8080290:	f001 ff38 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080294:	a916      	add	r1, sp, #88	; 0x58
 8080296:	4620      	mov	r0, r4
 8080298:	f001 ffdd 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808029c:	4c1a      	ldr	r4, [pc, #104]	; (8080308 <_Z12setLoopDelay6String+0x108>)
 808029e:	4601      	mov	r1, r0
 80802a0:	4620      	mov	r0, r4
 80802a2:	f001 ff5f 	bl	8082164 <_ZN6StringaSERKS_>
 80802a6:	a816      	add	r0, sp, #88	; 0x58
 80802a8:	f001 fee5 	bl	8082076 <_ZN6StringD1Ev>
//Set loop delay in seconds
{
    loopDelay = atol(delay);
    Serial.printlnf("Loop Delay updated to: " + String::format("%u", loopDelay));
    loopDelayData = String("{") +
    String("\"LoopDelay\":") +  String("\"") + String::format("%u", loopDelay)  +
 80802ac:	a812      	add	r0, sp, #72	; 0x48
 80802ae:	f001 fee2 	bl	8082076 <_ZN6StringD1Ev>
 80802b2:	a80e      	add	r0, sp, #56	; 0x38
 80802b4:	f001 fedf 	bl	8082076 <_ZN6StringD1Ev>
 80802b8:	a806      	add	r0, sp, #24
 80802ba:	f001 fedc 	bl	8082076 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80802be:	a80a      	add	r0, sp, #40	; 0x28
 80802c0:	f001 fed9 	bl	8082076 <_ZN6StringD1Ev>
 80802c4:	a802      	add	r0, sp, #8
 80802c6:	f001 fed6 	bl	8082076 <_ZN6StringD1Ev>
 80802ca:	4b10      	ldr	r3, [pc, #64]	; (808030c <_Z12setLoopDelay6String+0x10c>)
 80802cc:	6822      	ldr	r2, [r4, #0]
 80802ce:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80802d0:	490f      	ldr	r1, [pc, #60]	; (8080310 <_Z12setLoopDelay6String+0x110>)
 80802d2:	f88d 3000 	strb.w	r3, [sp]
 80802d6:	a816      	add	r0, sp, #88	; 0x58
 80802d8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80802dc:	f002 fbf6 	bl	8082acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80802e0:	a817      	add	r0, sp, #92	; 0x5c
 80802e2:	f7ff ff38 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String("\"}");
    Particle.publish("Loop Delay updated", loopDelayData, 600, PRIVATE);
    return 0;
}
 80802e6:	2000      	movs	r0, #0
 80802e8:	b01a      	add	sp, #104	; 0x68
 80802ea:	bd70      	pop	{r4, r5, r6, pc}
 80802ec:	20000000 	.word	0x20000000
 80802f0:	0808795e 	.word	0x0808795e
 80802f4:	0808736a 	.word	0x0808736a
 80802f8:	08087382 	.word	0x08087382
 80802fc:	08087384 	.word	0x08087384
 8080300:	08087391 	.word	0x08087391
 8080304:	08087393 	.word	0x08087393
 8080308:	200003d8 	.word	0x200003d8
 808030c:	200003a9 	.word	0x200003a9
 8080310:	08087396 	.word	0x08087396

08080314 <setup>:
    {
        blink(200);
    }
}

void setup() {
 8080314:	b5f0      	push	{r4, r5, r6, r7, lr}
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080316:	4c26      	ldr	r4, [pc, #152]	; (80803b0 <setup+0x9c>)
 8080318:	b085      	sub	sp, #20
    //
    Serial.printlnf("Startup: Running Setup");
 808031a:	f002 fe07 	bl	8082f2c <_Z16_fetch_usbserialv>
 808031e:	4925      	ldr	r1, [pc, #148]	; (80803b4 <setup+0xa0>)
 8080320:	f7ff ff2f 	bl	8080182 <_ZN5Print8printlnfIIEEEjPKcDpT_>
 8080324:	4a24      	ldr	r2, [pc, #144]	; (80803b8 <setup+0xa4>)
 8080326:	4925      	ldr	r1, [pc, #148]	; (80803bc <setup+0xa8>)
 8080328:	4620      	mov	r0, r4
 808032a:	f002 fabf 	bl	80828ac <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808032e:	4a24      	ldr	r2, [pc, #144]	; (80803c0 <setup+0xac>)
 8080330:	4924      	ldr	r1, [pc, #144]	; (80803c4 <setup+0xb0>)
 8080332:	4620      	mov	r0, r4
 8080334:	f002 faba 	bl	80828ac <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080338:	4a23      	ldr	r2, [pc, #140]	; (80803c8 <setup+0xb4>)
 808033a:	4924      	ldr	r1, [pc, #144]	; (80803cc <setup+0xb8>)
 808033c:	4620      	mov	r0, r4
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 808033e:	2400      	movs	r4, #0
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080340:	f002 fab4 	bl	80828ac <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080344:	4922      	ldr	r1, [pc, #136]	; (80803d0 <setup+0xbc>)
 8080346:	4623      	mov	r3, r4
 8080348:	4622      	mov	r2, r4
 808034a:	9401      	str	r4, [sp, #4]
 808034c:	9400      	str	r4, [sp, #0]
 808034e:	4821      	ldr	r0, [pc, #132]	; (80803d4 <setup+0xc0>)
 8080350:	f001 fd9e 	bl	8081e90 <spark_subscribe>
    Particle.function("SetZero", setZero);

    // Subscribe to the webhook response event
    Particle.subscribe("hook-response/startup", startupHandler, MY_DEVICES);

    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);  // Clear out averaging array
 8080354:	2600      	movs	r6, #0
 8080356:	2700      	movs	r7, #0
 8080358:	2318      	movs	r3, #24
 808035a:	9300      	str	r3, [sp, #0]
 808035c:	4632      	mov	r2, r6
 808035e:	463b      	mov	r3, r7
 8080360:	481d      	ldr	r0, [pc, #116]	; (80803d8 <setup+0xc4>)
 8080362:	f001 f959 	bl	8081618 <_ZN14RunningAverage9fillValueEdh>
    shortAveragingArray.fillValue(0.0, SHORT_SAMPLE_SIZE);  // Clear out averaging array
 8080366:	2303      	movs	r3, #3
 8080368:	4632      	mov	r2, r6
 808036a:	9300      	str	r3, [sp, #0]
 808036c:	481b      	ldr	r0, [pc, #108]	; (80803dc <setup+0xc8>)
 808036e:	463b      	mov	r3, r7
 8080370:	f001 f952 	bl	8081618 <_ZN14RunningAverage9fillValueEdh>
    pinMode(onboardLed, OUTPUT);  //Setup activity led so we can blink it to show we're rolling...
 8080374:	4b1a      	ldr	r3, [pc, #104]	; (80803e0 <setup+0xcc>)
    //   setADCSampleTime(ADC_SampleTime_3Cycles);
    //set ADC gain  ads.setGain(GAIN_ONE);        // 1x gain   +/- 4.096V  1 bit=0.125mV
    //Setup ADC
    ads.setGain(GAIN_TWO);  //GAIN_ONE for ...
 8080376:	4d1b      	ldr	r5, [pc, #108]	; (80803e4 <setup+0xd0>)
    // Subscribe to the webhook response event
    Particle.subscribe("hook-response/startup", startupHandler, MY_DEVICES);

    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);  // Clear out averaging array
    shortAveragingArray.fillValue(0.0, SHORT_SAMPLE_SIZE);  // Clear out averaging array
    pinMode(onboardLed, OUTPUT);  //Setup activity led so we can blink it to show we're rolling...
 8080378:	8818      	ldrh	r0, [r3, #0]
 808037a:	2101      	movs	r1, #1
 808037c:	f003 f830 	bl	80833e0 <pinMode>
    //   setADCSampleTime(ADC_SampleTime_3Cycles);
    //set ADC gain  ads.setGain(GAIN_ONE);        // 1x gain   +/- 4.096V  1 bit=0.125mV
    //Setup ADC
    ads.setGain(GAIN_TWO);  //GAIN_ONE for ...
 8080380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8080384:	4628      	mov	r0, r5
 8080386:	f001 f9b3 	bl	80816f0 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    ads.begin();
 808038a:	4628      	mov	r0, r5
 808038c:	f001 f9a9 	bl	80816e2 <_ZN16Adafruit_ADS10155beginEv>
 8080390:	4b15      	ldr	r3, [pc, #84]	; (80803e8 <setup+0xd4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080392:	4622      	mov	r2, r4
 8080394:	781b      	ldrb	r3, [r3, #0]
 8080396:	4915      	ldr	r1, [pc, #84]	; (80803ec <setup+0xd8>)
 8080398:	f88d 3000 	strb.w	r3, [sp]
 808039c:	a802      	add	r0, sp, #8
 808039e:	f44f 7316 	mov.w	r3, #600	; 0x258
 80803a2:	f002 fb93 	bl	8082acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80803a6:	a803      	add	r0, sp, #12
 80803a8:	f7ff fed5 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("startup", NULL, 600, PRIVATE);  //TODO:  Specify and send sensor ID so as to retrieve correct offset.
}
 80803ac:	b005      	add	sp, #20
 80803ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80803b0:	08082881 	.word	0x08082881
 80803b4:	080873a9 	.word	0x080873a9
 80803b8:	080873c0 	.word	0x080873c0
 80803bc:	080801d5 	.word	0x080801d5
 80803c0:	080873d3 	.word	0x080873d3
 80803c4:	08080201 	.word	0x08080201
 80803c8:	080873e0 	.word	0x080873e0
 80803cc:	0808018d 	.word	0x0808018d
 80803d0:	08080b8d 	.word	0x08080b8d
 80803d4:	080873e8 	.word	0x080873e8
 80803d8:	20000370 	.word	0x20000370
 80803dc:	20000390 	.word	0x20000390
 80803e0:	20000004 	.word	0x20000004
 80803e4:	200003c4 	.word	0x200003c4
 80803e8:	200003a9 	.word	0x200003a9
 80803ec:	080873f6 	.word	0x080873f6

080803f0 <loop>:
//
// Main loop
//
void loop() {
 80803f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80803f2:	b0f9      	sub	sp, #484	; 0x1e4
 80803f4:	f001 fb88 	bl	8081b08 <HAL_Timer_Get_Milli_Seconds>
  if ((millis() >=  REBOOT_INTERVAL_IN_MS)) {
 80803f8:	4b18      	ldr	r3, [pc, #96]	; (808045c <loop+0x6c>)
 80803fa:	4298      	cmp	r0, r3
 80803fc:	d911      	bls.n	8080422 <loop+0x32>
    //Reboot regularly to freshen up
    // do things here  before reset and then push the button
    sos();
 80803fe:	f7ff fe9e 	bl	808013e <_Z3sosv>
 8080402:	4b17      	ldr	r3, [pc, #92]	; (8080460 <loop+0x70>)
 8080404:	4a17      	ldr	r2, [pc, #92]	; (8080464 <loop+0x74>)
 8080406:	781b      	ldrb	r3, [r3, #0]
 8080408:	4917      	ldr	r1, [pc, #92]	; (8080468 <loop+0x78>)
 808040a:	f88d 3000 	strb.w	r3, [sp]
 808040e:	a86b      	add	r0, sp, #428	; 0x1ac
 8080410:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8080414:	f002 fb5a 	bl	8082acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080418:	a86c      	add	r0, sp, #432	; 0x1b0
 808041a:	f7ff fe9c 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Debug","Reboot intiated", 300, PRIVATE);
    System.reset();
 808041e:	f001 fdcb 	bl	8081fb8 <_ZN11SystemClass5resetEv>
  }


    if ((resetFlag) && (millis() - rebootSync >=  REBOOT_DELAY_IN_MS)) {
 8080422:	4b12      	ldr	r3, [pc, #72]	; (808046c <loop+0x7c>)
 8080424:	781b      	ldrb	r3, [r3, #0]
 8080426:	b14b      	cbz	r3, 808043c <loop+0x4c>
 8080428:	f001 fb6e 	bl	8081b08 <HAL_Timer_Get_Milli_Seconds>
 808042c:	4b10      	ldr	r3, [pc, #64]	; (8080470 <loop+0x80>)
 808042e:	681b      	ldr	r3, [r3, #0]
 8080430:	1ac0      	subs	r0, r0, r3
 8080432:	f643 2397 	movw	r3, #14999	; 0x3a97
 8080436:	4298      	cmp	r0, r3
 8080438:	f200 82f5 	bhi.w	8080a26 <loop+0x636>
      sos();
      Particle.publish("Debug","Remote Reset Initiated", 300, PRIVATE);
      System.reset();
    }

    time_t time = Time.now();
 808043c:	f002 f8ef 	bl	808261e <_ZN9TimeClass3nowEv>

    CellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();
 8080440:	490c      	ldr	r1, [pc, #48]	; (8080474 <loop+0x84>)
      sos();
      Particle.publish("Debug","Remote Reset Initiated", 300, PRIVATE);
      System.reset();
    }

    time_t time = Time.now();
 8080442:	4607      	mov	r7, r0

    CellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();
 8080444:	a86b      	add	r0, sp, #428	; 0x1ac
 8080446:	f001 fa99 	bl	808197c <_ZNK19CellularHelperClass11getRSSIQualEv>

    if (!startupCompleted)
 808044a:	4b0b      	ldr	r3, [pc, #44]	; (8080478 <loop+0x88>)
 808044c:	781b      	ldrb	r3, [r3, #0]
 808044e:	b9ab      	cbnz	r3, 808047c <loop+0x8c>
    {
        blinkShort(4);  // Let know i'm waiting...
 8080450:	2004      	movs	r0, #4
 8080452:	f7ff fe69 	bl	8080128 <_Z10blinkShorti>
        delay(STARTUP_LOOP_DELAY);   //Wait a bit to  let syseem run ok
 8080456:	f242 7010 	movw	r0, #10000	; 0x2710
 808045a:	e2d8      	b.n	8080a0e <loop+0x61e>
 808045c:	481907ff 	.word	0x481907ff
 8080460:	200003a9 	.word	0x200003a9
 8080464:	080873fe 	.word	0x080873fe
 8080468:	0808740e 	.word	0x0808740e
 808046c:	20000388 	.word	0x20000388
 8080470:	200003ac 	.word	0x200003ac
 8080474:	20000408 	.word	0x20000408
 8080478:	200003b0 	.word	0x200003b0
        return;
    }

    blinkShort (1);  //Signal normal running loop
 808047c:	2001      	movs	r0, #1
 808047e:	f7ff fe53 	bl	8080128 <_Z10blinkShorti>

//  System.sleep(10);
//  delay(8000);
    waterLevelSample = ads.readADC_SingleEnded(0); //FOR NDC setup -- ads.readADC_Differential_0_1() for ...;
 8080482:	2100      	movs	r1, #0
 8080484:	48b8      	ldr	r0, [pc, #736]	; (8080768 <loop+0x378>)
 8080486:	f001 f935 	bl	80816f4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 808048a:	4ab8      	ldr	r2, [pc, #736]	; (808076c <loop+0x37c>)
    if (waterLevelSample > 1 and waterLevelSample <= MAX_16_BIT_ANALOGUE_BIT_VALUE) {
 808048c:	2801      	cmp	r0, #1

    blinkShort (1);  //Signal normal running loop

//  System.sleep(10);
//  delay(8000);
    waterLevelSample = ads.readADC_SingleEnded(0); //FOR NDC setup -- ads.readADC_Differential_0_1() for ...;
 808048e:	6010      	str	r0, [r2, #0]
    if (waterLevelSample > 1 and waterLevelSample <= MAX_16_BIT_ANALOGUE_BIT_VALUE) {
 8080490:	dd27      	ble.n	80804e2 <loop+0xf2>
 8080492:	f003 fad9 	bl	8083a48 <__aeabi_i2d>
 8080496:	a3ae      	add	r3, pc, #696	; (adr r3, 8080750 <loop+0x360>)
 8080498:	e9d3 2300 	ldrd	r2, r3, [r3]
 808049c:	4604      	mov	r4, r0
 808049e:	460d      	mov	r5, r1
 80804a0:	f003 fdb4 	bl	808400c <__aeabi_dcmple>
 80804a4:	b1e8      	cbz	r0, 80804e2 <loop+0xf2>
        //add sample if not an outlier
        //sometimes you get a duff reading, usually 0.  As we are 4-20mA must be greater than ...
        waterLevelInMm = (waterLevelSample - FOUR_MA_OFFSET_IN_BITS) * ( SENSOR_FULL_RANGE_IN_MM / (MAX_16_BIT_ANALOGUE_BIT_VALUE - FOUR_MA_OFFSET_IN_BITS)) - zeroOffsetInMm;
 80804a6:	a3ac      	add	r3, pc, #688	; (adr r3, 8080758 <loop+0x368>)
 80804a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804ac:	4620      	mov	r0, r4
 80804ae:	4629      	mov	r1, r5
 80804b0:	f003 f97c 	bl	80837ac <__aeabi_dsub>
 80804b4:	a3aa      	add	r3, pc, #680	; (adr r3, 8080760 <loop+0x370>)
 80804b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804ba:	f003 fb2b 	bl	8083b14 <__aeabi_dmul>
 80804be:	4bac      	ldr	r3, [pc, #688]	; (8080770 <loop+0x380>)
 80804c0:	4cac      	ldr	r4, [pc, #688]	; (8080774 <loop+0x384>)
 80804c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804c6:	f003 f971 	bl	80837ac <__aeabi_dsub>
 80804ca:	4602      	mov	r2, r0
 80804cc:	460b      	mov	r3, r1
        longAveragingArray.addValue(waterLevelInMm);
 80804ce:	48aa      	ldr	r0, [pc, #680]	; (8080778 <loop+0x388>)
//  delay(8000);
    waterLevelSample = ads.readADC_SingleEnded(0); //FOR NDC setup -- ads.readADC_Differential_0_1() for ...;
    if (waterLevelSample > 1 and waterLevelSample <= MAX_16_BIT_ANALOGUE_BIT_VALUE) {
        //add sample if not an outlier
        //sometimes you get a duff reading, usually 0.  As we are 4-20mA must be greater than ...
        waterLevelInMm = (waterLevelSample - FOUR_MA_OFFSET_IN_BITS) * ( SENSOR_FULL_RANGE_IN_MM / (MAX_16_BIT_ANALOGUE_BIT_VALUE - FOUR_MA_OFFSET_IN_BITS)) - zeroOffsetInMm;
 80804d0:	e9c4 2300 	strd	r2, r3, [r4]
        longAveragingArray.addValue(waterLevelInMm);
 80804d4:	f001 f860 	bl	8081598 <_ZN14RunningAverage8addValueEd>
        shortAveragingArray.addValue(waterLevelInMm);
 80804d8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80804dc:	48a7      	ldr	r0, [pc, #668]	; (808077c <loop+0x38c>)
 80804de:	f001 f85b 	bl	8081598 <_ZN14RunningAverage8addValueEd>
    }
    Serial.printlnf(String::format("%i", sample)  + ", " + String::format("%u", waterLevelSample)  + ", " + String::format("%4.1f", waterLevelInMm) + ", " + String::format("%4.1f", longAveragingArray.getAverage()) + ", " + String::format("%4.1f", shortAveragingArray.getAverage()));
 80804e2:	f002 fd23 	bl	8082f2c <_Z16_fetch_usbserialv>
 80804e6:	4ca6      	ldr	r4, [pc, #664]	; (8080780 <loop+0x390>)
 80804e8:	4605      	mov	r5, r0
 80804ea:	6822      	ldr	r2, [r4, #0]
 80804ec:	49a5      	ldr	r1, [pc, #660]	; (8080784 <loop+0x394>)
 80804ee:	a853      	add	r0, sp, #332	; 0x14c
 80804f0:	f001 fee2 	bl	80822b8 <_ZN6String6formatEPKcz>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80804f4:	a953      	add	r1, sp, #332	; 0x14c
 80804f6:	a857      	add	r0, sp, #348	; 0x15c
 80804f8:	f001 fe43 	bl	8082182 <_ZN6StringC1ERKS_>
 80804fc:	49a2      	ldr	r1, [pc, #648]	; (8080788 <loop+0x398>)
 80804fe:	a857      	add	r0, sp, #348	; 0x15c
 8080500:	f001 feb5 	bl	808226e <_ZplRK15StringSumHelperPKc>
 8080504:	4606      	mov	r6, r0
 8080506:	4b99      	ldr	r3, [pc, #612]	; (808076c <loop+0x37c>)
 8080508:	49a0      	ldr	r1, [pc, #640]	; (808078c <loop+0x39c>)
 808050a:	681a      	ldr	r2, [r3, #0]
 808050c:	a85b      	add	r0, sp, #364	; 0x16c
 808050e:	f001 fed3 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080512:	a95b      	add	r1, sp, #364	; 0x16c
 8080514:	4630      	mov	r0, r6
 8080516:	f001 fe9e 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808051a:	499b      	ldr	r1, [pc, #620]	; (8080788 <loop+0x398>)
 808051c:	f001 fea7 	bl	808226e <_ZplRK15StringSumHelperPKc>
 8080520:	4606      	mov	r6, r0
 8080522:	4b94      	ldr	r3, [pc, #592]	; (8080774 <loop+0x384>)
 8080524:	499a      	ldr	r1, [pc, #616]	; (8080790 <loop+0x3a0>)
 8080526:	e9d3 2300 	ldrd	r2, r3, [r3]
 808052a:	a85f      	add	r0, sp, #380	; 0x17c
 808052c:	f001 fec4 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080530:	a95f      	add	r1, sp, #380	; 0x17c
 8080532:	4630      	mov	r0, r6
 8080534:	f001 fe8f 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080538:	4993      	ldr	r1, [pc, #588]	; (8080788 <loop+0x398>)
 808053a:	f001 fe98 	bl	808226e <_ZplRK15StringSumHelperPKc>
 808053e:	4606      	mov	r6, r0
 8080540:	488d      	ldr	r0, [pc, #564]	; (8080778 <loop+0x388>)
 8080542:	f001 f859 	bl	80815f8 <_ZN14RunningAverage10getAverageEv>
 8080546:	4602      	mov	r2, r0
 8080548:	460b      	mov	r3, r1
 808054a:	a863      	add	r0, sp, #396	; 0x18c
 808054c:	4990      	ldr	r1, [pc, #576]	; (8080790 <loop+0x3a0>)
 808054e:	f001 feb3 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080552:	a963      	add	r1, sp, #396	; 0x18c
 8080554:	4630      	mov	r0, r6
 8080556:	f001 fe7e 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808055a:	498b      	ldr	r1, [pc, #556]	; (8080788 <loop+0x398>)
 808055c:	f001 fe87 	bl	808226e <_ZplRK15StringSumHelperPKc>
 8080560:	4606      	mov	r6, r0
 8080562:	4886      	ldr	r0, [pc, #536]	; (808077c <loop+0x38c>)
 8080564:	f001 f848 	bl	80815f8 <_ZN14RunningAverage10getAverageEv>
 8080568:	4602      	mov	r2, r0
 808056a:	460b      	mov	r3, r1
 808056c:	a867      	add	r0, sp, #412	; 0x19c
 808056e:	4988      	ldr	r1, [pc, #544]	; (8080790 <loop+0x3a0>)
 8080570:	f001 fea2 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080574:	a967      	add	r1, sp, #412	; 0x19c
 8080576:	4630      	mov	r0, r6
 8080578:	f001 fe6d 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808057c:	6801      	ldr	r1, [r0, #0]
 808057e:	4628      	mov	r0, r5
 8080580:	f7ff fdff 	bl	8080182 <_ZN5Print8printlnfIIEEEjPKcDpT_>
 8080584:	a867      	add	r0, sp, #412	; 0x19c
 8080586:	f001 fd76 	bl	8082076 <_ZN6StringD1Ev>
 808058a:	a863      	add	r0, sp, #396	; 0x18c
 808058c:	f001 fd73 	bl	8082076 <_ZN6StringD1Ev>
 8080590:	a85f      	add	r0, sp, #380	; 0x17c
 8080592:	f001 fd70 	bl	8082076 <_ZN6StringD1Ev>
 8080596:	a85b      	add	r0, sp, #364	; 0x16c
 8080598:	f001 fd6d 	bl	8082076 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808059c:	a857      	add	r0, sp, #348	; 0x15c
 808059e:	f001 fd6a 	bl	8082076 <_ZN6StringD1Ev>
 80805a2:	a853      	add	r0, sp, #332	; 0x14c
 80805a4:	f001 fd67 	bl	8082076 <_ZN6StringD1Ev>

    if(sample == LONG_SAMPLE_SIZE)
 80805a8:	6826      	ldr	r6, [r4, #0]
 80805aa:	2e18      	cmp	r6, #24
 80805ac:	f040 808a 	bne.w	80806c4 <loop+0x2d4>
    {
        sample = -1;  //  Hit the buffers no need to count anymore
        if(zeroingInProgress)
 80805b0:	4d78      	ldr	r5, [pc, #480]	; (8080794 <loop+0x3a4>)
    }
    Serial.printlnf(String::format("%i", sample)  + ", " + String::format("%u", waterLevelSample)  + ", " + String::format("%4.1f", waterLevelInMm) + ", " + String::format("%4.1f", longAveragingArray.getAverage()) + ", " + String::format("%4.1f", shortAveragingArray.getAverage()));

    if(sample == LONG_SAMPLE_SIZE)
    {
        sample = -1;  //  Hit the buffers no need to count anymore
 80805b2:	f04f 33ff 	mov.w	r3, #4294967295
 80805b6:	6023      	str	r3, [r4, #0]
        if(zeroingInProgress)
 80805b8:	782b      	ldrb	r3, [r5, #0]
 80805ba:	2b00      	cmp	r3, #0
 80805bc:	f000 8082 	beq.w	80806c4 <loop+0x2d4>
        {

            zeroOffsetInMm = longAveragingArray.getAverage();
 80805c0:	486d      	ldr	r0, [pc, #436]	; (8080778 <loop+0x388>)
 80805c2:	f001 f819 	bl	80815f8 <_ZN14RunningAverage10getAverageEv>
 80805c6:	4c6a      	ldr	r4, [pc, #424]	; (8080770 <loop+0x380>)
 80805c8:	e9c4 0100 	strd	r0, r1, [r4]
            longAveragingArray.clear();
 80805cc:	486a      	ldr	r0, [pc, #424]	; (8080778 <loop+0x388>)
 80805ce:	f000 ffc0 	bl	8081552 <_ZN14RunningAverage5clearEv>
            longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
 80805d2:	2200      	movs	r2, #0
 80805d4:	2300      	movs	r3, #0
 80805d6:	9600      	str	r6, [sp, #0]
 80805d8:	4867      	ldr	r0, [pc, #412]	; (8080778 <loop+0x388>)
 80805da:	f001 f81d 	bl	8081618 <_ZN14RunningAverage9fillValueEdh>
            shortAveragingArray.clear();
 80805de:	4867      	ldr	r0, [pc, #412]	; (808077c <loop+0x38c>)
 80805e0:	f000 ffb7 	bl	8081552 <_ZN14RunningAverage5clearEv>
            shortAveragingArray.fillValue(0.0, SHORT_SAMPLE_SIZE);
 80805e4:	2303      	movs	r3, #3
 80805e6:	2200      	movs	r2, #0
 80805e8:	9300      	str	r3, [sp, #0]
 80805ea:	4864      	ldr	r0, [pc, #400]	; (808077c <loop+0x38c>)
 80805ec:	2300      	movs	r3, #0
 80805ee:	f001 f813 	bl	8081618 <_ZN14RunningAverage9fillValueEdh>
            zeroData = String("{") +
            String("\"ZeroOffsetInMm\":") +  String("\"") + String::format("%4.1f", zeroOffsetInMm)  +
 80805f2:	4969      	ldr	r1, [pc, #420]	; (8080798 <loop+0x3a8>)
 80805f4:	a853      	add	r0, sp, #332	; 0x14c
 80805f6:	f001 fd85 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80805fa:	a953      	add	r1, sp, #332	; 0x14c
 80805fc:	a85b      	add	r0, sp, #364	; 0x16c
 80805fe:	f001 fdc0 	bl	8082182 <_ZN6StringC1ERKS_>
 8080602:	4966      	ldr	r1, [pc, #408]	; (808079c <loop+0x3ac>)
 8080604:	a857      	add	r0, sp, #348	; 0x15c
 8080606:	f001 fd7d 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808060a:	a957      	add	r1, sp, #348	; 0x15c
 808060c:	a85b      	add	r0, sp, #364	; 0x16c
 808060e:	f001 fe22 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080612:	4606      	mov	r6, r0
 8080614:	4962      	ldr	r1, [pc, #392]	; (80807a0 <loop+0x3b0>)
 8080616:	a85f      	add	r0, sp, #380	; 0x17c
 8080618:	f001 fd74 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808061c:	a95f      	add	r1, sp, #380	; 0x17c
 808061e:	4630      	mov	r0, r6
 8080620:	f001 fe19 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080624:	e9d4 2300 	ldrd	r2, r3, [r4]
 8080628:	4606      	mov	r6, r0
 808062a:	4959      	ldr	r1, [pc, #356]	; (8080790 <loop+0x3a0>)
 808062c:	a863      	add	r0, sp, #396	; 0x18c
 808062e:	f001 fe43 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080632:	a963      	add	r1, sp, #396	; 0x18c
 8080634:	4630      	mov	r0, r6
 8080636:	f001 fe0e 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808063a:	4604      	mov	r4, r0
            String("\"}");
 808063c:	4959      	ldr	r1, [pc, #356]	; (80807a4 <loop+0x3b4>)
 808063e:	a867      	add	r0, sp, #412	; 0x19c
 8080640:	f001 fd60 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080644:	a967      	add	r1, sp, #412	; 0x19c
 8080646:	4620      	mov	r0, r4
 8080648:	f001 fe05 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808064c:	4c56      	ldr	r4, [pc, #344]	; (80807a8 <loop+0x3b8>)
 808064e:	4601      	mov	r1, r0
 8080650:	4620      	mov	r0, r4
 8080652:	f001 fd87 	bl	8082164 <_ZN6StringaSERKS_>
 8080656:	a867      	add	r0, sp, #412	; 0x19c
 8080658:	f001 fd0d 	bl	8082076 <_ZN6StringD1Ev>
            longAveragingArray.clear();
            longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
            shortAveragingArray.clear();
            shortAveragingArray.fillValue(0.0, SHORT_SAMPLE_SIZE);
            zeroData = String("{") +
            String("\"ZeroOffsetInMm\":") +  String("\"") + String::format("%4.1f", zeroOffsetInMm)  +
 808065c:	a863      	add	r0, sp, #396	; 0x18c
 808065e:	f001 fd0a 	bl	8082076 <_ZN6StringD1Ev>
 8080662:	a85f      	add	r0, sp, #380	; 0x17c
 8080664:	f001 fd07 	bl	8082076 <_ZN6StringD1Ev>
 8080668:	a857      	add	r0, sp, #348	; 0x15c
 808066a:	f001 fd04 	bl	8082076 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808066e:	a85b      	add	r0, sp, #364	; 0x16c
 8080670:	f001 fd01 	bl	8082076 <_ZN6StringD1Ev>
 8080674:	a853      	add	r0, sp, #332	; 0x14c
 8080676:	f001 fcfe 	bl	8082076 <_ZN6StringD1Ev>
 808067a:	4b4c      	ldr	r3, [pc, #304]	; (80807ac <loop+0x3bc>)
 808067c:	494c      	ldr	r1, [pc, #304]	; (80807b0 <loop+0x3c0>)
 808067e:	781b      	ldrb	r3, [r3, #0]
 8080680:	a867      	add	r0, sp, #412	; 0x19c
 8080682:	f88d 3000 	strb.w	r3, [sp]
 8080686:	6822      	ldr	r2, [r4, #0]
 8080688:	f44f 7316 	mov.w	r3, #600	; 0x258
 808068c:	f002 fa1e 	bl	8082acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080690:	a868      	add	r0, sp, #416	; 0x1a0
 8080692:	f7ff fd60 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            String("\"}");
            Particle.publish("saveZero", zeroData, 600, PRIVATE);
            Serial.printlnf("New zeroOffset (saved to cloud): " + zeroData);
 8080696:	f002 fc49 	bl	8082f2c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 808069a:	4946      	ldr	r1, [pc, #280]	; (80807b4 <loop+0x3c4>)
 808069c:	4606      	mov	r6, r0
 808069e:	a867      	add	r0, sp, #412	; 0x19c
 80806a0:	f001 fd30 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80806a4:	4621      	mov	r1, r4
 80806a6:	a867      	add	r0, sp, #412	; 0x19c
 80806a8:	f001 fdd5 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80806ac:	6801      	ldr	r1, [r0, #0]
 80806ae:	4630      	mov	r0, r6
 80806b0:	f7ff fd67 	bl	8080182 <_ZN5Print8printlnfIIEEEjPKcDpT_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80806b4:	a867      	add	r0, sp, #412	; 0x19c
 80806b6:	f001 fcde 	bl	8082076 <_ZN6StringD1Ev>
            blinkLong(5);  // Signal zeroing complete.
 80806ba:	2005      	movs	r0, #5
 80806bc:	f7ff fd28 	bl	8080110 <_Z9blinkLongi>
            zeroingInProgress = false;
 80806c0:	2300      	movs	r3, #0
 80806c2:	702b      	strb	r3, [r5, #0]
        }
    }
    // Trigger the integration
    data = String("{") +
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
 80806c4:	4934      	ldr	r1, [pc, #208]	; (8080798 <loop+0x3a8>)
 80806c6:	a803      	add	r0, sp, #12
 80806c8:	f001 fd1c 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80806cc:	a903      	add	r1, sp, #12
 80806ce:	a80b      	add	r0, sp, #44	; 0x2c
 80806d0:	f001 fd57 	bl	8082182 <_ZN6StringC1ERKS_>
 80806d4:	4938      	ldr	r1, [pc, #224]	; (80807b8 <loop+0x3c8>)
 80806d6:	a807      	add	r0, sp, #28
 80806d8:	f001 fd14 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80806dc:	a907      	add	r1, sp, #28
 80806de:	a80b      	add	r0, sp, #44	; 0x2c
 80806e0:	f001 fdb9 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80806e4:	4604      	mov	r4, r0
 80806e6:	492e      	ldr	r1, [pc, #184]	; (80807a0 <loop+0x3b0>)
 80806e8:	a80f      	add	r0, sp, #60	; 0x3c
 80806ea:	f001 fd0b 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80806ee:	a90f      	add	r1, sp, #60	; 0x3c
 80806f0:	4620      	mov	r0, r4
 80806f2:	f001 fdb0 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80806f6:	4604      	mov	r4, r0
 80806f8:	4b30      	ldr	r3, [pc, #192]	; (80807bc <loop+0x3cc>)
 80806fa:	463a      	mov	r2, r7
 80806fc:	681b      	ldr	r3, [r3, #0]
 80806fe:	4930      	ldr	r1, [pc, #192]	; (80807c0 <loop+0x3d0>)
 8080700:	a813      	add	r0, sp, #76	; 0x4c
 8080702:	f001 ff39 	bl	8082578 <_ZN9TimeClass6formatElPKc>
 8080706:	a913      	add	r1, sp, #76	; 0x4c
 8080708:	4620      	mov	r0, r4
 808070a:	f001 fda4 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808070e:	4604      	mov	r4, r0
 8080710:	492c      	ldr	r1, [pc, #176]	; (80807c4 <loop+0x3d4>)
 8080712:	a817      	add	r0, sp, #92	; 0x5c
 8080714:	f001 fcf6 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080718:	a917      	add	r1, sp, #92	; 0x5c
 808071a:	4620      	mov	r0, r4
 808071c:	f001 fd9b 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080720:	4604      	mov	r4, r0
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
 8080722:	4929      	ldr	r1, [pc, #164]	; (80807c8 <loop+0x3d8>)
 8080724:	a81b      	add	r0, sp, #108	; 0x6c
 8080726:	f001 fced 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808072a:	a91b      	add	r1, sp, #108	; 0x6c
 808072c:	4620      	mov	r0, r4
 808072e:	f001 fd92 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080732:	4604      	mov	r4, r0
 8080734:	491a      	ldr	r1, [pc, #104]	; (80807a0 <loop+0x3b0>)
 8080736:	a81f      	add	r0, sp, #124	; 0x7c
 8080738:	f001 fce4 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808073c:	a91f      	add	r1, sp, #124	; 0x7c
 808073e:	4620      	mov	r0, r4
 8080740:	f001 fd89 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080744:	4604      	mov	r4, r0
 8080746:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8080748:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 808074a:	e03f      	b.n	80807cc <loop+0x3dc>
 808074c:	f3af 8000 	nop.w
 8080750:	00000000 	.word	0x00000000
 8080754:	40df6680 	.word	0x40df6680
 8080758:	00000000 	.word	0x00000000
 808075c:	40b91e00 	.word	0x40b91e00
 8080760:	cdc369d9 	.word	0xcdc369d9
 8080764:	3fb3e751 	.word	0x3fb3e751
 8080768:	200003c4 	.word	0x200003c4
 808076c:	200003e8 	.word	0x200003e8
 8080770:	200003d0 	.word	0x200003d0
 8080774:	200003f0 	.word	0x200003f0
 8080778:	20000370 	.word	0x20000370
 808077c:	20000390 	.word	0x20000390
 8080780:	20000008 	.word	0x20000008
 8080784:	08087414 	.word	0x08087414
 8080788:	08087417 	.word	0x08087417
 808078c:	0808795e 	.word	0x0808795e
 8080790:	0808741a 	.word	0x0808741a
 8080794:	200003a8 	.word	0x200003a8
 8080798:	08087382 	.word	0x08087382
 808079c:	08087420 	.word	0x08087420
 80807a0:	08087391 	.word	0x08087391
 80807a4:	08087393 	.word	0x08087393
 80807a8:	200003f8 	.word	0x200003f8
 80807ac:	200003a9 	.word	0x200003a9
 80807b0:	08087432 	.word	0x08087432
 80807b4:	0808743b 	.word	0x0808743b
 80807b8:	0808745d 	.word	0x0808745d
 80807bc:	2000000c 	.word	0x2000000c
 80807c0:	20000414 	.word	0x20000414
 80807c4:	08087463 	.word	0x08087463
 80807c8:	08087466 	.word	0x08087466
 80807cc:	499f      	ldr	r1, [pc, #636]	; (8080a4c <loop+0x65c>)
 80807ce:	a823      	add	r0, sp, #140	; 0x8c
 80807d0:	f001 fd72 	bl	80822b8 <_ZN6String6formatEPKcz>
 80807d4:	a923      	add	r1, sp, #140	; 0x8c
 80807d6:	4620      	mov	r0, r4
 80807d8:	f001 fd3d 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80807dc:	4604      	mov	r4, r0
 80807de:	499c      	ldr	r1, [pc, #624]	; (8080a50 <loop+0x660>)
 80807e0:	a827      	add	r0, sp, #156	; 0x9c
 80807e2:	f001 fc8f 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80807e6:	a927      	add	r1, sp, #156	; 0x9c
 80807e8:	4620      	mov	r0, r4
 80807ea:	f001 fd34 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80807ee:	4604      	mov	r4, r0
           String("\"LsBits\":") +  String("\"") + String::format("%u", waterLevelSample)  + String("\",") +
 80807f0:	4998      	ldr	r1, [pc, #608]	; (8080a54 <loop+0x664>)
 80807f2:	a82b      	add	r0, sp, #172	; 0xac
 80807f4:	f001 fc86 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80807f8:	a92b      	add	r1, sp, #172	; 0xac
 80807fa:	4620      	mov	r0, r4
 80807fc:	f001 fd2b 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080800:	4604      	mov	r4, r0
 8080802:	4995      	ldr	r1, [pc, #596]	; (8080a58 <loop+0x668>)
 8080804:	a82f      	add	r0, sp, #188	; 0xbc
 8080806:	f001 fc7d 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808080a:	a92f      	add	r1, sp, #188	; 0xbc
 808080c:	4620      	mov	r0, r4
 808080e:	f001 fd22 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080812:	4604      	mov	r4, r0
 8080814:	4b91      	ldr	r3, [pc, #580]	; (8080a5c <loop+0x66c>)
 8080816:	4992      	ldr	r1, [pc, #584]	; (8080a60 <loop+0x670>)
 8080818:	681a      	ldr	r2, [r3, #0]
 808081a:	a833      	add	r0, sp, #204	; 0xcc
 808081c:	f001 fd4c 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080820:	a933      	add	r1, sp, #204	; 0xcc
 8080822:	4620      	mov	r0, r4
 8080824:	f001 fd17 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080828:	4604      	mov	r4, r0
 808082a:	4989      	ldr	r1, [pc, #548]	; (8080a50 <loop+0x660>)
 808082c:	a837      	add	r0, sp, #220	; 0xdc
 808082e:	f001 fc69 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080832:	a937      	add	r1, sp, #220	; 0xdc
 8080834:	4620      	mov	r0, r4
 8080836:	f001 fd0e 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808083a:	4604      	mov	r4, r0
           String("\"LsMm\":") +  String("\"") + String::format("%4.1f", waterLevelInMm) + String("\",") +
 808083c:	4989      	ldr	r1, [pc, #548]	; (8080a64 <loop+0x674>)
 808083e:	a83b      	add	r0, sp, #236	; 0xec
 8080840:	f001 fc60 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080844:	a93b      	add	r1, sp, #236	; 0xec
 8080846:	4620      	mov	r0, r4
 8080848:	f001 fd05 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808084c:	4604      	mov	r4, r0
 808084e:	4982      	ldr	r1, [pc, #520]	; (8080a58 <loop+0x668>)
 8080850:	a83f      	add	r0, sp, #252	; 0xfc
 8080852:	f001 fc57 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080856:	a93f      	add	r1, sp, #252	; 0xfc
 8080858:	4620      	mov	r0, r4
 808085a:	f001 fcfc 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808085e:	4604      	mov	r4, r0
 8080860:	4b81      	ldr	r3, [pc, #516]	; (8080a68 <loop+0x678>)
 8080862:	4982      	ldr	r1, [pc, #520]	; (8080a6c <loop+0x67c>)
 8080864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080868:	a843      	add	r0, sp, #268	; 0x10c
 808086a:	f001 fd25 	bl	80822b8 <_ZN6String6formatEPKcz>
 808086e:	a943      	add	r1, sp, #268	; 0x10c
 8080870:	4620      	mov	r0, r4
 8080872:	f001 fcf0 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080876:	4604      	mov	r4, r0
 8080878:	4975      	ldr	r1, [pc, #468]	; (8080a50 <loop+0x660>)
 808087a:	a847      	add	r0, sp, #284	; 0x11c
 808087c:	f001 fc42 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080880:	a947      	add	r1, sp, #284	; 0x11c
 8080882:	4620      	mov	r0, r4
 8080884:	f001 fce7 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080888:	4604      	mov	r4, r0
           String("\"LsAv\":") +  String("\"") + String::format("%4.1f", longAveragingArray.getAverage()) + String("\",") +
 808088a:	4979      	ldr	r1, [pc, #484]	; (8080a70 <loop+0x680>)
 808088c:	a84b      	add	r0, sp, #300	; 0x12c
 808088e:	f001 fc39 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080892:	a94b      	add	r1, sp, #300	; 0x12c
 8080894:	4620      	mov	r0, r4
 8080896:	f001 fcde 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808089a:	4604      	mov	r4, r0
 808089c:	496e      	ldr	r1, [pc, #440]	; (8080a58 <loop+0x668>)
 808089e:	a84f      	add	r0, sp, #316	; 0x13c
 80808a0:	f001 fc30 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80808a4:	a94f      	add	r1, sp, #316	; 0x13c
 80808a6:	4620      	mov	r0, r4
 80808a8:	f001 fcd5 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80808ac:	4604      	mov	r4, r0
 80808ae:	4871      	ldr	r0, [pc, #452]	; (8080a74 <loop+0x684>)
 80808b0:	f000 fea2 	bl	80815f8 <_ZN14RunningAverage10getAverageEv>
 80808b4:	4602      	mov	r2, r0
 80808b6:	460b      	mov	r3, r1
 80808b8:	a853      	add	r0, sp, #332	; 0x14c
 80808ba:	496c      	ldr	r1, [pc, #432]	; (8080a6c <loop+0x67c>)
 80808bc:	f001 fcfc 	bl	80822b8 <_ZN6String6formatEPKcz>
 80808c0:	a953      	add	r1, sp, #332	; 0x14c
 80808c2:	4620      	mov	r0, r4
 80808c4:	f001 fcc7 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80808c8:	4604      	mov	r4, r0
 80808ca:	4961      	ldr	r1, [pc, #388]	; (8080a50 <loop+0x660>)
 80808cc:	a857      	add	r0, sp, #348	; 0x15c
 80808ce:	f001 fc19 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80808d2:	a957      	add	r1, sp, #348	; 0x15c
 80808d4:	4620      	mov	r0, r4
 80808d6:	f001 fcbe 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80808da:	4604      	mov	r4, r0
           String("\"LsShAv\":") +  String("\"") + String::format("%4.1f", shortAveragingArray.getAverage()) +
 80808dc:	4966      	ldr	r1, [pc, #408]	; (8080a78 <loop+0x688>)
 80808de:	a85b      	add	r0, sp, #364	; 0x16c
 80808e0:	f001 fc10 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80808e4:	a95b      	add	r1, sp, #364	; 0x16c
 80808e6:	4620      	mov	r0, r4
 80808e8:	f001 fcb5 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80808ec:	4604      	mov	r4, r0
 80808ee:	495a      	ldr	r1, [pc, #360]	; (8080a58 <loop+0x668>)
 80808f0:	a85f      	add	r0, sp, #380	; 0x17c
 80808f2:	f001 fc07 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 80808f6:	a95f      	add	r1, sp, #380	; 0x17c
 80808f8:	4620      	mov	r0, r4
 80808fa:	f001 fcac 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 80808fe:	4604      	mov	r4, r0
 8080900:	485e      	ldr	r0, [pc, #376]	; (8080a7c <loop+0x68c>)
 8080902:	f000 fe79 	bl	80815f8 <_ZN14RunningAverage10getAverageEv>
 8080906:	4602      	mov	r2, r0
 8080908:	460b      	mov	r3, r1
 808090a:	a863      	add	r0, sp, #396	; 0x18c
 808090c:	4957      	ldr	r1, [pc, #348]	; (8080a6c <loop+0x67c>)
 808090e:	f001 fcd3 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080912:	a963      	add	r1, sp, #396	; 0x18c
 8080914:	4620      	mov	r0, r4
 8080916:	f001 fc9e 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808091a:	4604      	mov	r4, r0
           String("\"}");
 808091c:	4958      	ldr	r1, [pc, #352]	; (8080a80 <loop+0x690>)
 808091e:	a867      	add	r0, sp, #412	; 0x19c
 8080920:	f001 fbf0 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080924:	a967      	add	r1, sp, #412	; 0x19c
 8080926:	4620      	mov	r0, r4
 8080928:	f001 fc95 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 808092c:	4c55      	ldr	r4, [pc, #340]	; (8080a84 <loop+0x694>)
 808092e:	4601      	mov	r1, r0
 8080930:	4620      	mov	r0, r4
 8080932:	f001 fc17 	bl	8082164 <_ZN6StringaSERKS_>
 8080936:	a867      	add	r0, sp, #412	; 0x19c
 8080938:	f001 fb9d 	bl	8082076 <_ZN6StringD1Ev>
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
           String("\"LsBits\":") +  String("\"") + String::format("%u", waterLevelSample)  + String("\",") +
           String("\"LsMm\":") +  String("\"") + String::format("%4.1f", waterLevelInMm) + String("\",") +
           String("\"LsAv\":") +  String("\"") + String::format("%4.1f", longAveragingArray.getAverage()) + String("\",") +
           String("\"LsShAv\":") +  String("\"") + String::format("%4.1f", shortAveragingArray.getAverage()) +
 808093c:	a863      	add	r0, sp, #396	; 0x18c
 808093e:	f001 fb9a 	bl	8082076 <_ZN6StringD1Ev>
 8080942:	a85f      	add	r0, sp, #380	; 0x17c
 8080944:	f001 fb97 	bl	8082076 <_ZN6StringD1Ev>
 8080948:	a85b      	add	r0, sp, #364	; 0x16c
 808094a:	f001 fb94 	bl	8082076 <_ZN6StringD1Ev>
    data = String("{") +
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
           String("\"LsBits\":") +  String("\"") + String::format("%u", waterLevelSample)  + String("\",") +
           String("\"LsMm\":") +  String("\"") + String::format("%4.1f", waterLevelInMm) + String("\",") +
           String("\"LsAv\":") +  String("\"") + String::format("%4.1f", longAveragingArray.getAverage()) + String("\",") +
 808094e:	a857      	add	r0, sp, #348	; 0x15c
 8080950:	f001 fb91 	bl	8082076 <_ZN6StringD1Ev>
 8080954:	a853      	add	r0, sp, #332	; 0x14c
 8080956:	f001 fb8e 	bl	8082076 <_ZN6StringD1Ev>
 808095a:	a84f      	add	r0, sp, #316	; 0x13c
 808095c:	f001 fb8b 	bl	8082076 <_ZN6StringD1Ev>
 8080960:	a84b      	add	r0, sp, #300	; 0x12c
 8080962:	f001 fb88 	bl	8082076 <_ZN6StringD1Ev>
    // Trigger the integration
    data = String("{") +
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
           String("\"LsBits\":") +  String("\"") + String::format("%u", waterLevelSample)  + String("\",") +
           String("\"LsMm\":") +  String("\"") + String::format("%4.1f", waterLevelInMm) + String("\",") +
 8080966:	a847      	add	r0, sp, #284	; 0x11c
 8080968:	f001 fb85 	bl	8082076 <_ZN6StringD1Ev>
 808096c:	a843      	add	r0, sp, #268	; 0x10c
 808096e:	f001 fb82 	bl	8082076 <_ZN6StringD1Ev>
 8080972:	a83f      	add	r0, sp, #252	; 0xfc
 8080974:	f001 fb7f 	bl	8082076 <_ZN6StringD1Ev>
 8080978:	a83b      	add	r0, sp, #236	; 0xec
 808097a:	f001 fb7c 	bl	8082076 <_ZN6StringD1Ev>
    }
    // Trigger the integration
    data = String("{") +
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
           String("\"LsBits\":") +  String("\"") + String::format("%u", waterLevelSample)  + String("\",") +
 808097e:	a837      	add	r0, sp, #220	; 0xdc
 8080980:	f001 fb79 	bl	8082076 <_ZN6StringD1Ev>
 8080984:	a833      	add	r0, sp, #204	; 0xcc
 8080986:	f001 fb76 	bl	8082076 <_ZN6StringD1Ev>
 808098a:	a82f      	add	r0, sp, #188	; 0xbc
 808098c:	f001 fb73 	bl	8082076 <_ZN6StringD1Ev>
 8080990:	a82b      	add	r0, sp, #172	; 0xac
 8080992:	f001 fb70 	bl	8082076 <_ZN6StringD1Ev>
        }
    }
    // Trigger the integration
    data = String("{") +
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
 8080996:	a827      	add	r0, sp, #156	; 0x9c
 8080998:	f001 fb6d 	bl	8082076 <_ZN6StringD1Ev>
 808099c:	a823      	add	r0, sp, #140	; 0x8c
 808099e:	f001 fb6a 	bl	8082076 <_ZN6StringD1Ev>
 80809a2:	a81f      	add	r0, sp, #124	; 0x7c
 80809a4:	f001 fb67 	bl	8082076 <_ZN6StringD1Ev>
 80809a8:	a81b      	add	r0, sp, #108	; 0x6c
 80809aa:	f001 fb64 	bl	8082076 <_ZN6StringD1Ev>
            zeroingInProgress = false;
        }
    }
    // Trigger the integration
    data = String("{") +
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
 80809ae:	a817      	add	r0, sp, #92	; 0x5c
 80809b0:	f001 fb61 	bl	8082076 <_ZN6StringD1Ev>
 80809b4:	a813      	add	r0, sp, #76	; 0x4c
 80809b6:	f001 fb5e 	bl	8082076 <_ZN6StringD1Ev>
 80809ba:	a80f      	add	r0, sp, #60	; 0x3c
 80809bc:	f001 fb5b 	bl	8082076 <_ZN6StringD1Ev>
 80809c0:	a807      	add	r0, sp, #28
 80809c2:	f001 fb58 	bl	8082076 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80809c6:	a80b      	add	r0, sp, #44	; 0x2c
 80809c8:	f001 fb55 	bl	8082076 <_ZN6StringD1Ev>
 80809cc:	a803      	add	r0, sp, #12
 80809ce:	f001 fb52 	bl	8082076 <_ZN6StringD1Ev>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80809d2:	f001 fa45 	bl	8081e60 <spark_cloud_flag_connect>
 80809d6:	4b2c      	ldr	r3, [pc, #176]	; (8080a88 <loop+0x698>)
 80809d8:	6822      	ldr	r2, [r4, #0]
 80809da:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80809dc:	492b      	ldr	r1, [pc, #172]	; (8080a8c <loop+0x69c>)
 80809de:	f88d 3000 	strb.w	r3, [sp]
 80809e2:	a867      	add	r0, sp, #412	; 0x19c
 80809e4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80809e8:	f002 f870 	bl	8082acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80809ec:	a868      	add	r0, sp, #416	; 0x1a0
 80809ee:	f7ff fbb2 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("tickLevel", data, 600,  PRIVATE);  //TTL set to 3600s (may not yet be implemented)
//Serial.printlnf(data);
//  Serial.printlnf(String::format("%f", waterLevelInMm));
//  Serial.printlnf(data);

    if (sample > 0)
 80809f2:	4a27      	ldr	r2, [pc, #156]	; (8080a90 <loop+0x6a0>)
 80809f4:	6813      	ldr	r3, [r2, #0]
 80809f6:	2b00      	cmp	r3, #0
        ++sample;  //Increase sample count if on initial fill
 80809f8:	bfc4      	itt	gt
 80809fa:	3301      	addgt	r3, #1
 80809fc:	6013      	strgt	r3, [r2, #0]

    // Wait nn seconds
    if (zeroingInProgress)
 80809fe:	4b25      	ldr	r3, [pc, #148]	; (8080a94 <loop+0x6a4>)
 8080a00:	781b      	ldrb	r3, [r3, #0]
 8080a02:	b113      	cbz	r3, 8080a0a <loop+0x61a>
        delay(ZEROING_LOOP_DELAY);  //Use shorter delay when averaging for zero...
 8080a04:	f241 3088 	movw	r0, #5000	; 0x1388
 8080a08:	e001      	b.n	8080a0e <loop+0x61e>
    else
        delay(loopDelay);  //10 min: 600000, 1 min: 60000, 10 sec: 10000,
 8080a0a:	4b23      	ldr	r3, [pc, #140]	; (8080a98 <loop+0x6a8>)
 8080a0c:	6818      	ldr	r0, [r3, #0]
 8080a0e:	f001 fe17 	bl	8082640 <delay>
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8080a12:	4b22      	ldr	r3, [pc, #136]	; (8080a9c <loop+0x6ac>)
 8080a14:	a872      	add	r0, sp, #456	; 0x1c8
 8080a16:	936b      	str	r3, [sp, #428]	; 0x1ac
 8080a18:	f001 fb2d 	bl	8082076 <_ZN6StringD1Ev>
 8080a1c:	a86e      	add	r0, sp, #440	; 0x1b8
 8080a1e:	f001 fb2a 	bl	8082076 <_ZN6StringD1Ev>
}
 8080a22:	b079      	add	sp, #484	; 0x1e4
 8080a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }


    if ((resetFlag) && (millis() - rebootSync >=  REBOOT_DELAY_IN_MS)) {
      // do things here  before reset and then push the button
      sos();
 8080a26:	f7ff fb8a 	bl	808013e <_Z3sosv>
 8080a2a:	4b17      	ldr	r3, [pc, #92]	; (8080a88 <loop+0x698>)
 8080a2c:	4a1c      	ldr	r2, [pc, #112]	; (8080aa0 <loop+0x6b0>)
 8080a2e:	781b      	ldrb	r3, [r3, #0]
 8080a30:	491c      	ldr	r1, [pc, #112]	; (8080aa4 <loop+0x6b4>)
 8080a32:	f88d 3000 	strb.w	r3, [sp]
 8080a36:	a86b      	add	r0, sp, #428	; 0x1ac
 8080a38:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8080a3c:	f002 f846 	bl	8082acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080a40:	a86c      	add	r0, sp, #432	; 0x1b0
 8080a42:	f7ff fb88 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("Debug","Remote Reset Initiated", 300, PRIVATE);
      System.reset();
 8080a46:	f001 fab7 	bl	8081fb8 <_ZN11SystemClass5resetEv>
 8080a4a:	e4f7      	b.n	808043c <loop+0x4c>
 8080a4c:	0808746c 	.word	0x0808746c
 8080a50:	08087463 	.word	0x08087463
 8080a54:	0808747d 	.word	0x0808747d
 8080a58:	08087391 	.word	0x08087391
 8080a5c:	200003e8 	.word	0x200003e8
 8080a60:	0808795e 	.word	0x0808795e
 8080a64:	08087487 	.word	0x08087487
 8080a68:	200003f0 	.word	0x200003f0
 8080a6c:	0808741a 	.word	0x0808741a
 8080a70:	0808748f 	.word	0x0808748f
 8080a74:	20000370 	.word	0x20000370
 8080a78:	08087497 	.word	0x08087497
 8080a7c:	20000390 	.word	0x20000390
 8080a80:	08087393 	.word	0x08087393
 8080a84:	200003b4 	.word	0x200003b4
 8080a88:	200003a9 	.word	0x200003a9
 8080a8c:	080874a1 	.word	0x080874a1
 8080a90:	20000008 	.word	0x20000008
 8080a94:	200003a8 	.word	0x200003a8
 8080a98:	20000000 	.word	0x20000000
 8080a9c:	08087970 	.word	0x08087970
 8080aa0:	080874ab 	.word	0x080874ab
 8080aa4:	0808740e 	.word	0x0808740e

08080aa8 <_GLOBAL__sub_I_rebootSync>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080aa8:	4b2b      	ldr	r3, [pc, #172]	; (8080b58 <_GLOBAL__sub_I_rebootSync+0xb0>)
    // Wait nn seconds
    if (zeroingInProgress)
        delay(ZEROING_LOOP_DELAY);  //Use shorter delay when averaging for zero...
    else
        delay(loopDelay);  //10 min: 600000, 1 min: 60000, 10 sec: 10000,
}
 8080aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080aac:	2201      	movs	r2, #1
int levelSensor = A0; //  Analogue input channel
int zeroVolt = A1;
int  zeroVoltSample = 0;
int  waterLevelSample = 0;
int sample = 1;
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);  //averaging bucket
 8080aae:	4d2b      	ldr	r5, [pc, #172]	; (8080b5c <_GLOBAL__sub_I_rebootSync+0xb4>)
 8080ab0:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080ab2:	f000 fff1 	bl	8081a98 <HAL_Pin_Map>
const double MAX_16_BIT_ANALOGUE_BIT_VALUE = 32154; // 19200.0;  //19200 for 120 Ohm, 32000 for 200 Ohm-- see ndc datasheet on ADS1015
const double SENSOR_FULL_RANGE_IN_MM = 2000.0 ;

unsigned long rebootSync = 0;
bool resetFlag = false;
Adafruit_ADS1115 ads;
 8080ab6:	2148      	movs	r1, #72	; 0x48
 8080ab8:	4829      	ldr	r0, [pc, #164]	; (8080b60 <_GLOBAL__sub_I_rebootSync+0xb8>)
int levelSensor = A0; //  Analogue input channel
int zeroVolt = A1;
int  zeroVoltSample = 0;
int  waterLevelSample = 0;
int sample = 1;
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);  //averaging bucket
 8080aba:	4c2a      	ldr	r4, [pc, #168]	; (8080b64 <_GLOBAL__sub_I_rebootSync+0xbc>)
const double MAX_16_BIT_ANALOGUE_BIT_VALUE = 32154; // 19200.0;  //19200 for 120 Ohm, 32000 for 200 Ohm-- see ndc datasheet on ADS1015
const double SENSOR_FULL_RANGE_IN_MM = 2000.0 ;

unsigned long rebootSync = 0;
bool resetFlag = false;
Adafruit_ADS1115 ads;
 8080abc:	f000 fe0a 	bl	80816d4 <_ZN16Adafruit_ADS1115C1Eh>
int levelSensor = A0; //  Analogue input channel
int zeroVolt = A1;
int  zeroVoltSample = 0;
int  waterLevelSample = 0;
int sample = 1;
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);  //averaging bucket
 8080ac0:	4e29      	ldr	r6, [pc, #164]	; (8080b68 <_GLOBAL__sub_I_rebootSync+0xc0>)
 8080ac2:	2118      	movs	r1, #24
 8080ac4:	4628      	mov	r0, r5
 8080ac6:	f000 fd59 	bl	808157c <_ZN14RunningAverageC1Eh>
 8080aca:	4628      	mov	r0, r5
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE);  //averaging bucket
 8080acc:	4d27      	ldr	r5, [pc, #156]	; (8080b6c <_GLOBAL__sub_I_rebootSync+0xc4>)
int levelSensor = A0; //  Analogue input channel
int zeroVolt = A1;
int  zeroVoltSample = 0;
int  waterLevelSample = 0;
int sample = 1;
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);  //averaging bucket
 8080ace:	4622      	mov	r2, r4
 8080ad0:	4631      	mov	r1, r6
 8080ad2:	f002 fd15 	bl	8083500 <__aeabi_atexit>
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE);  //averaging bucket
 8080ad6:	2103      	movs	r1, #3
 8080ad8:	4628      	mov	r0, r5
 8080ada:	f000 fd4f 	bl	808157c <_ZN14RunningAverageC1Eh>
 8080ade:	4631      	mov	r1, r6
String data = String(80);
 8080ae0:	4e23      	ldr	r6, [pc, #140]	; (8080b70 <_GLOBAL__sub_I_rebootSync+0xc8>)
int zeroVolt = A1;
int  zeroVoltSample = 0;
int  waterLevelSample = 0;
int sample = 1;
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);  //averaging bucket
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE);  //averaging bucket
 8080ae2:	4622      	mov	r2, r4
 8080ae4:	4628      	mov	r0, r5
 8080ae6:	f002 fd0b 	bl	8083500 <__aeabi_atexit>
String data = String(80);
 8080aea:	4d22      	ldr	r5, [pc, #136]	; (8080b74 <_GLOBAL__sub_I_rebootSync+0xcc>)
 8080aec:	220a      	movs	r2, #10
 8080aee:	2150      	movs	r1, #80	; 0x50
 8080af0:	4630      	mov	r0, r6
 8080af2:	f001 fb6a 	bl	80821ca <_ZN6StringC1Eih>
 8080af6:	4630      	mov	r0, r6
String zeroData = String(80);
 8080af8:	4e1f      	ldr	r6, [pc, #124]	; (8080b78 <_GLOBAL__sub_I_rebootSync+0xd0>)
int  zeroVoltSample = 0;
int  waterLevelSample = 0;
int sample = 1;
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);  //averaging bucket
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE);  //averaging bucket
String data = String(80);
 8080afa:	4622      	mov	r2, r4
 8080afc:	4629      	mov	r1, r5
 8080afe:	f002 fcff 	bl	8083500 <__aeabi_atexit>
String zeroData = String(80);
 8080b02:	220a      	movs	r2, #10
 8080b04:	2150      	movs	r1, #80	; 0x50
 8080b06:	4630      	mov	r0, r6
 8080b08:	f001 fb5f 	bl	80821ca <_ZN6StringC1Eih>
 8080b0c:	4630      	mov	r0, r6
String loopDelayData = String(80);
 8080b0e:	4e1b      	ldr	r6, [pc, #108]	; (8080b7c <_GLOBAL__sub_I_rebootSync+0xd4>)
int  waterLevelSample = 0;
int sample = 1;
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);  //averaging bucket
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE);  //averaging bucket
String data = String(80);
String zeroData = String(80);
 8080b10:	4622      	mov	r2, r4
 8080b12:	4629      	mov	r1, r5
 8080b14:	f002 fcf4 	bl	8083500 <__aeabi_atexit>
String loopDelayData = String(80);
 8080b18:	220a      	movs	r2, #10
 8080b1a:	2150      	movs	r1, #80	; 0x50
 8080b1c:	4630      	mov	r0, r6
 8080b1e:	f001 fb54 	bl	80821ca <_ZN6StringC1Eih>
 8080b22:	4622      	mov	r2, r4
 8080b24:	4629      	mov	r1, r5
 8080b26:	4630      	mov	r0, r6
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 8080b28:	4d15      	ldr	r5, [pc, #84]	; (8080b80 <_GLOBAL__sub_I_rebootSync+0xd8>)
 8080b2a:	f002 fce9 	bl	8083500 <__aeabi_atexit>
 8080b2e:	2314      	movs	r3, #20
 8080b30:	9300      	str	r3, [sp, #0]
 8080b32:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8080b36:	f505 7396 	add.w	r3, r5, #300	; 0x12c
 8080b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8080b3e:	4628      	mov	r0, r5
 8080b40:	f000 f958 	bl	8080df4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
double zeroOffsetInMm = 0.0;  //zeroing offset
int onboardLed = D7;  // Instead of writing D7 over and over again, we'll write led2
// This one is the little blue LED on your board. On the Photon it is next to D7, and on the Core it is next to the USB jack.
bool zeroingInProgress = false;
bool startupCompleted = false;
JsonParserStatic<256, 20> parser;
 8080b44:	4622      	mov	r2, r4
 8080b46:	4628      	mov	r0, r5
 8080b48:	4b0e      	ldr	r3, [pc, #56]	; (8080b84 <_GLOBAL__sub_I_rebootSync+0xdc>)
 8080b4a:	490f      	ldr	r1, [pc, #60]	; (8080b88 <_GLOBAL__sub_I_rebootSync+0xe0>)
 8080b4c:	602b      	str	r3, [r5, #0]
    // Wait nn seconds
    if (zeroingInProgress)
        delay(ZEROING_LOOP_DELAY);  //Use shorter delay when averaging for zero...
    else
        delay(loopDelay);  //10 min: 600000, 1 min: 60000, 10 sec: 10000,
}
 8080b4e:	b002      	add	sp, #8
 8080b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
double zeroOffsetInMm = 0.0;  //zeroing offset
int onboardLed = D7;  // Instead of writing D7 over and over again, we'll write led2
// This one is the little blue LED on your board. On the Photon it is next to D7, and on the Core it is next to the USB jack.
bool zeroingInProgress = false;
bool startupCompleted = false;
JsonParserStatic<256, 20> parser;
 8080b54:	f002 bcd4 	b.w	8083500 <__aeabi_atexit>
 8080b58:	200003a9 	.word	0x200003a9
 8080b5c:	20000370 	.word	0x20000370
 8080b60:	200003c4 	.word	0x200003c4
 8080b64:	20000100 	.word	0x20000100
 8080b68:	08081543 	.word	0x08081543
 8080b6c:	20000390 	.word	0x20000390
 8080b70:	200003b4 	.word	0x200003b4
 8080b74:	08082077 	.word	0x08082077
 8080b78:	200003f8 	.word	0x200003f8
 8080b7c:	200003d8 	.word	0x200003d8
 8080b80:	20000104 	.word	0x20000104
 8080b84:	0808732c 	.word	0x0808732c
 8080b88:	080800b9 	.word	0x080800b9

08080b8c <_Z14startupHandlerPKcS0_>:
    sample =1;
    return 0;
}

void startupHandler(const char *event, const char *data)
{
 8080b8c:	b530      	push	{r4, r5, lr}
 8080b8e:	460c      	mov	r4, r1
 8080b90:	b09b      	sub	sp, #108	; 0x6c
    // Handle the webhook response

    parser.clear();
 8080b92:	4850      	ldr	r0, [pc, #320]	; (8080cd4 <_Z14startupHandlerPKcS0_+0x148>)
 8080b94:	f000 f92b 	bl	8080dee <_ZN10JsonBuffer5clearEv>
	/**
	 * @brief Add a c-string to the end of the buffer
	 *
	 * @param data Pointer to a c-string (null terminated).
	 */
	bool addString(const char *data) { return addData(data, strlen(data)); }
 8080b98:	4620      	mov	r0, r4
 8080b9a:	f004 f9d9 	bl	8084f50 <strlen>
 8080b9e:	4621      	mov	r1, r4
 8080ba0:	4602      	mov	r2, r0
 8080ba2:	484c      	ldr	r0, [pc, #304]	; (8080cd4 <_Z14startupHandlerPKcS0_+0x148>)
 8080ba4:	f000 f905 	bl	8080db2 <_ZN10JsonBuffer7addDataEPKcj>
    parser.addString(data);
    if (parser.parse()) {
 8080ba8:	484a      	ldr	r0, [pc, #296]	; (8080cd4 <_Z14startupHandlerPKcS0_+0x148>)
 8080baa:	f000 fc79 	bl	80814a0 <_ZN10JsonParser5parseEv>
 8080bae:	4c4a      	ldr	r4, [pc, #296]	; (8080cd8 <_Z14startupHandlerPKcS0_+0x14c>)
 8080bb0:	b1b8      	cbz	r0, 8080be2 <_Z14startupHandlerPKcS0_+0x56>
        zeroOffsetInMm = parser.getReference().key("zeroOffsetInMm").valueFloat();
 8080bb2:	a812      	add	r0, sp, #72	; 0x48
 8080bb4:	4947      	ldr	r1, [pc, #284]	; (8080cd4 <_Z14startupHandlerPKcS0_+0x148>)
 8080bb6:	f000 f92d 	bl	8080e14 <_ZNK10JsonParser12getReferenceEv>
 8080bba:	4a48      	ldr	r2, [pc, #288]	; (8080cdc <_Z14startupHandlerPKcS0_+0x150>)
 8080bbc:	a912      	add	r1, sp, #72	; 0x48
 8080bbe:	a816      	add	r0, sp, #88	; 0x58
 8080bc0:	f000 fa88 	bl	80810d4 <_ZNK13JsonReference3keyEPKc>
 8080bc4:	2100      	movs	r1, #0
 8080bc6:	a816      	add	r0, sp, #88	; 0x58
 8080bc8:	f000 f99f 	bl	8080f0a <_ZNK13JsonReference10valueFloatEf>
 8080bcc:	f002 ff4e 	bl	8083a6c <__aeabi_f2d>
 8080bd0:	e9c4 0100 	strd	r0, r1, [r4]
 8080bd4:	a816      	add	r0, sp, #88	; 0x58
 8080bd6:	f000 f89b 	bl	8080d10 <_ZN13JsonReferenceD1Ev>
 8080bda:	a812      	add	r0, sp, #72	; 0x48
 8080bdc:	f000 f898 	bl	8080d10 <_ZN13JsonReferenceD1Ev>
 8080be0:	e006      	b.n	8080bf0 <_Z14startupHandlerPKcS0_+0x64>
    }
    else {
        Serial.printlnf("error","could not parse json");
 8080be2:	f002 f9a3 	bl	8082f2c <_Z16_fetch_usbserialv>
 8080be6:	4b3e      	ldr	r3, [pc, #248]	; (8080ce0 <_Z14startupHandlerPKcS0_+0x154>)
 8080be8:	4a3e      	ldr	r2, [pc, #248]	; (8080ce4 <_Z14startupHandlerPKcS0_+0x158>)
 8080bea:	2101      	movs	r1, #1
 8080bec:	f001 fbed 	bl	80823ca <_ZN5Print11printf_implEbPKcz>
    }
    Serial.printlnf("zeroOffsetInMm (as stored on Azure): " + String::format("%4.1f", zeroOffsetInMm));
 8080bf0:	f002 f99c 	bl	8082f2c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080bf4:	493c      	ldr	r1, [pc, #240]	; (8080ce8 <_Z14startupHandlerPKcS0_+0x15c>)
 8080bf6:	4605      	mov	r5, r0
 8080bf8:	a816      	add	r0, sp, #88	; 0x58
 8080bfa:	f001 fa83 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080bfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8080c02:	a812      	add	r0, sp, #72	; 0x48
 8080c04:	4939      	ldr	r1, [pc, #228]	; (8080cec <_Z14startupHandlerPKcS0_+0x160>)
 8080c06:	f001 fb57 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080c0a:	a912      	add	r1, sp, #72	; 0x48
 8080c0c:	a816      	add	r0, sp, #88	; 0x58
 8080c0e:	f001 fb22 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080c12:	6801      	ldr	r1, [r0, #0]
 8080c14:	4628      	mov	r0, r5
 8080c16:	f7ff fab4 	bl	8080182 <_ZN5Print8printlnfIIEEEjPKcDpT_>
 8080c1a:	a812      	add	r0, sp, #72	; 0x48
 8080c1c:	f001 fa2b 	bl	8082076 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080c20:	a816      	add	r0, sp, #88	; 0x58
 8080c22:	f001 fa28 	bl	8082076 <_ZN6StringD1Ev>
    zeroData = String("{") +
    String("\"ZeroOffsetInMm\":") +  String("\"") + String::format("%4.1f", zeroOffsetInMm)  +
 8080c26:	4932      	ldr	r1, [pc, #200]	; (8080cf0 <_Z14startupHandlerPKcS0_+0x164>)
 8080c28:	a802      	add	r0, sp, #8
 8080c2a:	f001 fa6b 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080c2e:	a902      	add	r1, sp, #8
 8080c30:	a80a      	add	r0, sp, #40	; 0x28
 8080c32:	f001 faa6 	bl	8082182 <_ZN6StringC1ERKS_>
 8080c36:	492f      	ldr	r1, [pc, #188]	; (8080cf4 <_Z14startupHandlerPKcS0_+0x168>)
 8080c38:	a806      	add	r0, sp, #24
 8080c3a:	f001 fa63 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080c3e:	a906      	add	r1, sp, #24
 8080c40:	a80a      	add	r0, sp, #40	; 0x28
 8080c42:	f001 fb08 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080c46:	4605      	mov	r5, r0
 8080c48:	492b      	ldr	r1, [pc, #172]	; (8080cf8 <_Z14startupHandlerPKcS0_+0x16c>)
 8080c4a:	a80e      	add	r0, sp, #56	; 0x38
 8080c4c:	f001 fa5a 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080c50:	a90e      	add	r1, sp, #56	; 0x38
 8080c52:	4628      	mov	r0, r5
 8080c54:	f001 faff 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080c58:	e9d4 2300 	ldrd	r2, r3, [r4]
 8080c5c:	4605      	mov	r5, r0
 8080c5e:	4923      	ldr	r1, [pc, #140]	; (8080cec <_Z14startupHandlerPKcS0_+0x160>)
 8080c60:	a812      	add	r0, sp, #72	; 0x48
 8080c62:	f001 fb29 	bl	80822b8 <_ZN6String6formatEPKcz>
 8080c66:	a912      	add	r1, sp, #72	; 0x48
 8080c68:	4628      	mov	r0, r5
 8080c6a:	f001 faf4 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080c6e:	4604      	mov	r4, r0
    String("\"}");
 8080c70:	4922      	ldr	r1, [pc, #136]	; (8080cfc <_Z14startupHandlerPKcS0_+0x170>)
 8080c72:	a816      	add	r0, sp, #88	; 0x58
 8080c74:	f001 fa46 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8080c78:	a916      	add	r1, sp, #88	; 0x58
 8080c7a:	4620      	mov	r0, r4
 8080c7c:	f001 faeb 	bl	8082256 <_ZplRK15StringSumHelperRK6String>
 8080c80:	4c1f      	ldr	r4, [pc, #124]	; (8080d00 <_Z14startupHandlerPKcS0_+0x174>)
 8080c82:	4601      	mov	r1, r0
 8080c84:	4620      	mov	r0, r4
 8080c86:	f001 fa6d 	bl	8082164 <_ZN6StringaSERKS_>
 8080c8a:	a816      	add	r0, sp, #88	; 0x58
 8080c8c:	f001 f9f3 	bl	8082076 <_ZN6StringD1Ev>
    else {
        Serial.printlnf("error","could not parse json");
    }
    Serial.printlnf("zeroOffsetInMm (as stored on Azure): " + String::format("%4.1f", zeroOffsetInMm));
    zeroData = String("{") +
    String("\"ZeroOffsetInMm\":") +  String("\"") + String::format("%4.1f", zeroOffsetInMm)  +
 8080c90:	a812      	add	r0, sp, #72	; 0x48
 8080c92:	f001 f9f0 	bl	8082076 <_ZN6StringD1Ev>
 8080c96:	a80e      	add	r0, sp, #56	; 0x38
 8080c98:	f001 f9ed 	bl	8082076 <_ZN6StringD1Ev>
 8080c9c:	a806      	add	r0, sp, #24
 8080c9e:	f001 f9ea 	bl	8082076 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080ca2:	a80a      	add	r0, sp, #40	; 0x28
 8080ca4:	f001 f9e7 	bl	8082076 <_ZN6StringD1Ev>
 8080ca8:	a802      	add	r0, sp, #8
 8080caa:	f001 f9e4 	bl	8082076 <_ZN6StringD1Ev>
 8080cae:	4b15      	ldr	r3, [pc, #84]	; (8080d04 <_Z14startupHandlerPKcS0_+0x178>)
 8080cb0:	6822      	ldr	r2, [r4, #0]
 8080cb2:	781b      	ldrb	r3, [r3, #0]
 8080cb4:	4914      	ldr	r1, [pc, #80]	; (8080d08 <_Z14startupHandlerPKcS0_+0x17c>)
 8080cb6:	f88d 3000 	strb.w	r3, [sp]
 8080cba:	a816      	add	r0, sp, #88	; 0x58
 8080cbc:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080cc0:	f001 ff04 	bl	8082acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080cc4:	a817      	add	r0, sp, #92	; 0x5c
 8080cc6:	f7ff fa46 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String("\"}");
    Particle.publish("Setting zeroOffsetInMm", zeroData, 600, PRIVATE);


    startupCompleted = true;  //We can now run loop
 8080cca:	4b10      	ldr	r3, [pc, #64]	; (8080d0c <_Z14startupHandlerPKcS0_+0x180>)
 8080ccc:	2201      	movs	r2, #1
 8080cce:	701a      	strb	r2, [r3, #0]
}
 8080cd0:	b01b      	add	sp, #108	; 0x6c
 8080cd2:	bd30      	pop	{r4, r5, pc}
 8080cd4:	20000104 	.word	0x20000104
 8080cd8:	200003d0 	.word	0x200003d0
 8080cdc:	0808750b 	.word	0x0808750b
 8080ce0:	080874c2 	.word	0x080874c2
 8080ce4:	080874d7 	.word	0x080874d7
 8080ce8:	080874dd 	.word	0x080874dd
 8080cec:	0808741a 	.word	0x0808741a
 8080cf0:	08087382 	.word	0x08087382
 8080cf4:	08087420 	.word	0x08087420
 8080cf8:	08087391 	.word	0x08087391
 8080cfc:	08087393 	.word	0x08087393
 8080d00:	200003f8 	.word	0x200003f8
 8080d04:	200003a9 	.word	0x200003a9
 8080d08:	08087503 	.word	0x08087503
 8080d0c:	200003b0 	.word	0x200003b0

08080d10 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
 8080d10:	4770      	bx	lr

08080d12 <_ZN13JsonReferenceD0Ev>:

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
 8080d12:	b510      	push	{r4, lr}
 8080d14:	4604      	mov	r4, r0
}
 8080d16:	210c      	movs	r1, #12
 8080d18:	f002 fbf7 	bl	808350a <_ZdlPvj>
 8080d1c:	4620      	mov	r0, r4
 8080d1e:	bd10      	pop	{r4, pc}

08080d20 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 8080d20:	b510      	push	{r4, lr}
 8080d22:	4b05      	ldr	r3, [pc, #20]	; (8080d38 <_ZN10JsonBufferD1Ev+0x18>)
 8080d24:	4604      	mov	r4, r0
 8080d26:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 8080d28:	7c03      	ldrb	r3, [r0, #16]
 8080d2a:	b91b      	cbnz	r3, 8080d34 <_ZN10JsonBufferD1Ev+0x14>
 8080d2c:	6840      	ldr	r0, [r0, #4]
 8080d2e:	b108      	cbz	r0, 8080d34 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 8080d30:	f001 f8ce 	bl	8081ed0 <free>
	}
}
 8080d34:	4620      	mov	r0, r4
 8080d36:	bd10      	pop	{r4, pc}
 8080d38:	08087534 	.word	0x08087534

08080d3c <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 8080d3c:	b510      	push	{r4, lr}
 8080d3e:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
 8080d40:	f7ff ffee 	bl	8080d20 <_ZN10JsonBufferD1Ev>
 8080d44:	4620      	mov	r0, r4
 8080d46:	2114      	movs	r1, #20
 8080d48:	f002 fbdf 	bl	808350a <_ZdlPvj>
 8080d4c:	4620      	mov	r0, r4
 8080d4e:	bd10      	pop	{r4, pc}

08080d50 <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 8080d50:	b510      	push	{r4, lr}
 8080d52:	4b07      	ldr	r3, [pc, #28]	; (8080d70 <_ZN10JsonParserD1Ev+0x20>)
 8080d54:	4604      	mov	r4, r0
 8080d56:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 8080d58:	7c03      	ldrb	r3, [r0, #16]
 8080d5a:	b91b      	cbnz	r3, 8080d64 <_ZN10JsonParserD1Ev+0x14>
 8080d5c:	6940      	ldr	r0, [r0, #20]
 8080d5e:	b108      	cbz	r0, 8080d64 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 8080d60:	f001 f8b6 	bl	8081ed0 <free>
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 8080d64:	4620      	mov	r0, r4
 8080d66:	f7ff ffdb 	bl	8080d20 <_ZN10JsonBufferD1Ev>
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
 8080d6a:	4620      	mov	r0, r4
 8080d6c:	bd10      	pop	{r4, pc}
 8080d6e:	bf00      	nop
 8080d70:	0808756c 	.word	0x0808756c

08080d74 <_ZN10JsonParserD0Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 8080d74:	b510      	push	{r4, lr}
 8080d76:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
 8080d78:	f7ff ffea 	bl	8080d50 <_ZN10JsonParserD1Ev>
 8080d7c:	4620      	mov	r0, r4
 8080d7e:	212c      	movs	r1, #44	; 0x2c
 8080d80:	f002 fbc3 	bl	808350a <_ZdlPvj>
 8080d84:	4620      	mov	r0, r4
 8080d86:	bd10      	pop	{r4, pc}

08080d88 <_ZN10JsonBuffer8allocateEj>:

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
 8080d88:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 8080d8a:	7c03      	ldrb	r3, [r0, #16]

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
 8080d8c:	4604      	mov	r4, r0
 8080d8e:	460d      	mov	r5, r1
	if (!staticBuffers) {
 8080d90:	b10b      	cbz	r3, 8080d96 <_ZN10JsonBuffer8allocateEj+0xe>
		else {
			return false;
		}
	}
	else {
		return false;
 8080d92:	2000      	movs	r0, #0
 8080d94:	bd38      	pop	{r3, r4, r5, pc}
}

bool JsonBuffer::allocate(size_t len) {
	if (!staticBuffers) {
		char *newBuffer;
		if (buffer) {
 8080d96:	6840      	ldr	r0, [r0, #4]
 8080d98:	b110      	cbz	r0, 8080da0 <_ZN10JsonBuffer8allocateEj+0x18>
			newBuffer = (char *) realloc(buffer, len);
 8080d9a:	f001 f8a1 	bl	8081ee0 <realloc>
 8080d9e:	e002      	b.n	8080da6 <_ZN10JsonBuffer8allocateEj+0x1e>
		}
		else {
			newBuffer = (char *) malloc(len);
 8080da0:	4608      	mov	r0, r1
 8080da2:	f001 f88d 	bl	8081ec0 <malloc>
		}
		if (newBuffer) {
 8080da6:	2800      	cmp	r0, #0
 8080da8:	d0f3      	beq.n	8080d92 <_ZN10JsonBuffer8allocateEj+0xa>
			buffer = newBuffer;
 8080daa:	6060      	str	r0, [r4, #4]
			bufferLen = len;
 8080dac:	60a5      	str	r5, [r4, #8]
			return true;
 8080dae:	2001      	movs	r0, #1
		}
	}
	else {
		return false;
	}
}
 8080db0:	bd38      	pop	{r3, r4, r5, pc}

08080db2 <_ZN10JsonBuffer7addDataEPKcj>:

bool JsonBuffer::addData(const char *data, size_t dataLen) {
 8080db2:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
 8080db4:	6843      	ldr	r3, [r0, #4]
	else {
		return false;
	}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
 8080db6:	460e      	mov	r6, r1
 8080db8:	4604      	mov	r4, r0
 8080dba:	4615      	mov	r5, r2
 8080dbc:	68c1      	ldr	r1, [r0, #12]
	if (!buffer || (offset + dataLen) > bufferLen) {
 8080dbe:	b17b      	cbz	r3, 8080de0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 8080dc0:	1853      	adds	r3, r2, r1
 8080dc2:	6882      	ldr	r2, [r0, #8]
 8080dc4:	4293      	cmp	r3, r2
 8080dc6:	d80b      	bhi.n	8080de0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
		if (!allocate(offset + dataLen)) {
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
 8080dc8:	68e3      	ldr	r3, [r4, #12]
 8080dca:	6860      	ldr	r0, [r4, #4]
 8080dcc:	462a      	mov	r2, r5
 8080dce:	4631      	mov	r1, r6
 8080dd0:	4418      	add	r0, r3
 8080dd2:	f003 fb31 	bl	8084438 <memcpy>
	offset += dataLen;
 8080dd6:	68e3      	ldr	r3, [r4, #12]

	return true;
 8080dd8:	2001      	movs	r0, #1
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;
 8080dda:	441d      	add	r5, r3
 8080ddc:	60e5      	str	r5, [r4, #12]

	return true;
 8080dde:	bd70      	pop	{r4, r5, r6, pc}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
	if (!buffer || (offset + dataLen) > bufferLen) {
		// Need to allocate more space for data
		if (!allocate(offset + dataLen)) {
 8080de0:	4429      	add	r1, r5
 8080de2:	4620      	mov	r0, r4
 8080de4:	f7ff ffd0 	bl	8080d88 <_ZN10JsonBuffer8allocateEj>
 8080de8:	2800      	cmp	r0, #0
 8080dea:	d1ed      	bne.n	8080dc8 <_ZN10JsonBuffer7addDataEPKcj+0x16>

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;

	return true;
}
 8080dec:	bd70      	pop	{r4, r5, r6, pc}

08080dee <_ZN10JsonBuffer5clearEv>:

void JsonBuffer::clear() {
	offset = 0;
 8080dee:	2300      	movs	r3, #0
 8080df0:	60c3      	str	r3, [r0, #12]
 8080df2:	4770      	bx	lr

08080df4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
//

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 8080df4:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 8080df6:	6082      	str	r2, [r0, #8]
 8080df8:	2200      	movs	r2, #0
 8080dfa:	60c2      	str	r2, [r0, #12]
 8080dfc:	2201      	movs	r2, #1
 8080dfe:	7402      	strb	r2, [r0, #16]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 8080e00:	6143      	str	r3, [r0, #20]
 8080e02:	4a03      	ldr	r2, [pc, #12]	; (8080e10 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 8080e04:	9b02      	ldr	r3, [sp, #8]
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 8080e06:	6041      	str	r1, [r0, #4]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 8080e08:	6002      	str	r2, [r0, #0]
 8080e0a:	61c3      	str	r3, [r0, #28]

}
 8080e0c:	bd10      	pop	{r4, pc}
 8080e0e:	bf00      	nop
 8080e10:	0808756c 	.word	0x0808756c

08080e14 <_ZNK10JsonParser12getReferenceEv>:
	return true;
}

JsonReference JsonParser::getReference() const {

	if (tokens < tokensEnd) {
 8080e14:	698b      	ldr	r3, [r1, #24]
 8080e16:	694a      	ldr	r2, [r1, #20]
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 8080e18:	6041      	str	r1, [r0, #4]
	return true;
}

JsonReference JsonParser::getReference() const {

	if (tokens < tokensEnd) {
 8080e1a:	429a      	cmp	r2, r3
 8080e1c:	4b03      	ldr	r3, [pc, #12]	; (8080e2c <_ZNK10JsonParser12getReferenceEv+0x18>)
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 8080e1e:	bf38      	it	cc
 8080e20:	6082      	strcc	r2, [r0, #8]
 8080e22:	6003      	str	r3, [r0, #0]

//
//
//

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 8080e24:	bf24      	itt	cs
 8080e26:	2300      	movcs	r3, #0
 8080e28:	6083      	strcs	r3, [r0, #8]
		return JsonReference(this, &tokens[0]);
	}
	else {
		return JsonReference(this);
	}
}
 8080e2a:	4770      	bx	lr
 8080e2c:	08087524 	.word	0x08087524

08080e30 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 8080e30:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 8080e32:	6813      	ldr	r3, [r2, #0]
 8080e34:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 8080e36:	6813      	ldr	r3, [r2, #0]
 8080e38:	f103 0410 	add.w	r4, r3, #16
 8080e3c:	6014      	str	r4, [r2, #0]
 8080e3e:	6986      	ldr	r6, [r0, #24]
 8080e40:	42b4      	cmp	r4, r6
 8080e42:	d20a      	bcs.n	8080e5a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 8080e44:	699b      	ldr	r3, [r3, #24]
 8080e46:	688c      	ldr	r4, [r1, #8]
 8080e48:	42a3      	cmp	r3, r4
 8080e4a:	da01      	bge.n	8080e50 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 8080e4c:	429d      	cmp	r5, r3
 8080e4e:	daf2      	bge.n	8080e36 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
 8080e50:	42a3      	cmp	r3, r4
 8080e52:	bfcc      	ite	gt
 8080e54:	2000      	movgt	r0, #0
 8080e56:	2001      	movle	r0, #1
 8080e58:	bd70      	pop	{r4, r5, r6, pc}
		// No object after index
		return false;
 8080e5a:	2000      	movs	r0, #0
	}
	return true;
}
 8080e5c:	bd70      	pop	{r4, r5, r6, pc}

08080e5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 8080e5e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8080e62:	4607      	mov	r7, r0
 8080e64:	460c      	mov	r4, r1
 8080e66:	4691      	mov	r9, r2
 8080e68:	469a      	mov	sl, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 8080e6a:	ad02      	add	r5, sp, #8
 8080e6c:	f101 0310 	add.w	r3, r1, #16
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 8080e70:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 8080e72:	f845 3d04 	str.w	r3, [r5, #-4]!
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
 8080e76:	f04f 0800 	mov.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
 8080e7a:	9b01      	ldr	r3, [sp, #4]
 8080e7c:	69ba      	ldr	r2, [r7, #24]
 8080e7e:	429a      	cmp	r2, r3
 8080e80:	d91e      	bls.n	8080ec0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
 8080e82:	6899      	ldr	r1, [r3, #8]
 8080e84:	68a2      	ldr	r2, [r4, #8]
 8080e86:	4291      	cmp	r1, r2
 8080e88:	da1a      	bge.n	8080ec0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
		if (desiredIndex == index) {
 8080e8a:	45b0      	cmp	r8, r6
 8080e8c:	d10b      	bne.n	8080ea6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
			key = token;
 8080e8e:	f8c9 3000 	str.w	r3, [r9]
			if (skipObject(container, token)) {
 8080e92:	462a      	mov	r2, r5
 8080e94:	4621      	mov	r1, r4
 8080e96:	4638      	mov	r0, r7
 8080e98:	f7ff ffca 	bl	8080e30 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 8080e9c:	b118      	cbz	r0, 8080ea6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
				value = token;
 8080e9e:	9b01      	ldr	r3, [sp, #4]
 8080ea0:	f8ca 3000 	str.w	r3, [sl]
				return true;
 8080ea4:	e00d      	b.n	8080ec2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x64>
			}
		}
		index++;
		skipObject(container, token);
 8080ea6:	462a      	mov	r2, r5
 8080ea8:	4621      	mov	r1, r4
 8080eaa:	4638      	mov	r0, r7
 8080eac:	f7ff ffc0 	bl	8080e30 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 8080eb0:	462a      	mov	r2, r5
 8080eb2:	4621      	mov	r1, r4
 8080eb4:	4638      	mov	r0, r7
			if (skipObject(container, token)) {
				value = token;
				return true;
			}
		}
		index++;
 8080eb6:	f108 0801 	add.w	r8, r8, #1
		skipObject(container, token);
		skipObject(container, token);
 8080eba:	f7ff ffb9 	bl	8080e30 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
 8080ebe:	e7dc      	b.n	8080e7a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x1c>
		index++;
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
 8080ec0:	2000      	movs	r0, #0
}
 8080ec2:	b002      	add	sp, #8
 8080ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08080ec8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
	}

	return index;
}

void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 8080ec8:	b570      	push	{r4, r5, r6, lr}

	int ii;
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 8080eca:	3b01      	subs	r3, #1
 8080ecc:	2400      	movs	r4, #0
 8080ece:	684e      	ldr	r6, [r1, #4]
 8080ed0:	688d      	ldr	r5, [r1, #8]
 8080ed2:	1bad      	subs	r5, r5, r6
 8080ed4:	42ac      	cmp	r4, r5
 8080ed6:	da07      	bge.n	8080ee8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x20>
 8080ed8:	429c      	cmp	r4, r3
 8080eda:	da05      	bge.n	8080ee8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x20>
		dst[ii] = buffer[token->start + ii];
 8080edc:	6845      	ldr	r5, [r0, #4]
 8080ede:	4425      	add	r5, r4
 8080ee0:	5dad      	ldrb	r5, [r5, r6]
 8080ee2:	5515      	strb	r5, [r2, r4]
}

void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {

	int ii;
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 8080ee4:	3401      	adds	r4, #1
 8080ee6:	e7f2      	b.n	8080ece <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
		dst[ii] = buffer[token->start + ii];
 	}
	dst[ii] = 0;
 8080ee8:	2300      	movs	r3, #0
 8080eea:	5513      	strb	r3, [r2, r4]
 8080eec:	bd70      	pop	{r4, r5, r6, pc}

08080eee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
	}
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
 8080eee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8080ef0:	4614      	mov	r4, r2
	// Copy data here, because tokens are not null terminated
	char tmp[16];
	copyTokenValue(token, tmp, sizeof(tmp));
 8080ef2:	2310      	movs	r3, #16
 8080ef4:	466a      	mov	r2, sp
 8080ef6:	f7ff ffe7 	bl	8080ec8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>

	result = strtof(tmp, 0);
 8080efa:	2100      	movs	r1, #0
 8080efc:	4668      	mov	r0, sp
 8080efe:	f004 fe93 	bl	8085c28 <strtof>
 8080f02:	6020      	str	r0, [r4, #0]
	return true;
}
 8080f04:	2001      	movs	r0, #1
 8080f06:	b004      	add	sp, #16
 8080f08:	bd10      	pop	{r4, pc}

08080f0a <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
 8080f0a:	b507      	push	{r0, r1, r2, lr}
 8080f0c:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
 8080f0e:	6881      	ldr	r1, [r0, #8]
 8080f10:	b119      	cbz	r1, 8080f1a <_ZNK13JsonReference10valueFloatEf+0x10>
 8080f12:	aa01      	add	r2, sp, #4
 8080f14:	6840      	ldr	r0, [r0, #4]
 8080f16:	f7ff ffea 	bl	8080eee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
 8080f1a:	9801      	ldr	r0, [sp, #4]
 8080f1c:	b003      	add	sp, #12
 8080f1e:	f85d fb04 	ldr.w	pc, [sp], #4

08080f22 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
 8080f22:	b538      	push	{r3, r4, r5, lr}
 8080f24:	4604      	mov	r4, r0
	if (str) {
 8080f26:	6800      	ldr	r0, [r0, #0]
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
 8080f28:	460d      	mov	r5, r1
	if (str) {
 8080f2a:	b110      	cbz	r0, 8080f32 <_ZN16JsonParserString6appendEc+0x10>
		str->concat(ch);
 8080f2c:	f001 f986 	bl	808223c <_ZN6String6concatEc>
 8080f30:	e007      	b.n	8080f42 <_ZN16JsonParserString6appendEc+0x20>
		length++;
	}
	else {
		if (buf && length < (bufLen - 1)) {
 8080f32:	6861      	ldr	r1, [r4, #4]
 8080f34:	b129      	cbz	r1, 8080f42 <_ZN16JsonParserString6appendEc+0x20>
 8080f36:	68a3      	ldr	r3, [r4, #8]
 8080f38:	68e2      	ldr	r2, [r4, #12]
 8080f3a:	3b01      	subs	r3, #1
 8080f3c:	429a      	cmp	r2, r3
			buf[length] = ch;
 8080f3e:	bf38      	it	cc
 8080f40:	548d      	strbcc	r5, [r1, r2]
		}
		length++;
 8080f42:	68e3      	ldr	r3, [r4, #12]
 8080f44:	3301      	adds	r3, #1
 8080f46:	60e3      	str	r3, [r4, #12]
 8080f48:	bd38      	pop	{r3, r4, r5, pc}

08080f4a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {

	unsigned char value;

	if (unicode <= 0x007f) {
 8080f4a:	287f      	cmp	r0, #127	; 0x7f
	return true;
}


// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 8080f4c:	b570      	push	{r4, r5, r6, lr}
 8080f4e:	460c      	mov	r4, r1

	unsigned char value;

	if (unicode <= 0x007f) {
 8080f50:	d801      	bhi.n	8080f56 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		// 0x00000000 - 0x0000007F:
		str.append((char)unicode);
 8080f52:	b2c1      	uxtb	r1, r0
 8080f54:	e019      	b.n	8080f8a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x40>
	}
	else
	if (unicode <= 0x7ff) {
 8080f56:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8080f5a:	ea4f 15a0 	mov.w	r5, r0, asr #6
 8080f5e:	f000 063f 	and.w	r6, r0, #63	; 0x3f
 8080f62:	d203      	bcs.n	8080f6c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x22>
		// 0x00000080 - 0x000007FF:
		// 110xxxxx 10xxxxxx

		value = (0b11000000 | ((unicode >> 6) & 0b11111));
		str.append((char)value);
 8080f64:	f065 013f 	orn	r1, r5, #63	; 0x3f
 8080f68:	b2c9      	uxtb	r1, r1
 8080f6a:	e009      	b.n	8080f80 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
	}
	else {
		// 0x00000800 - 0x0000FFFF:
		// 1110xxxx 10xxxxxx 10xxxxxx
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
		str.append((char)value);
 8080f6c:	0b01      	lsrs	r1, r0, #12
 8080f6e:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
 8080f72:	4620      	mov	r0, r4
 8080f74:	f7ff ffd5 	bl	8080f22 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);
 8080f78:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 8080f7c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8080f80:	4620      	mov	r0, r4
 8080f82:	f7ff ffce 	bl	8080f22 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
 8080f86:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8080f8a:	4620      	mov	r0, r4
	}
}
 8080f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
 8080f90:	f7ff bfc7 	b.w	8080f22 <_ZN16JsonParserString6appendEc>

08080f94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 8080f94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8080f98:	4680      	mov	r8, r0
 8080f9a:	460f      	mov	r7, r1
 8080f9c:	4616      	mov	r6, r2

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
 8080f9e:	684d      	ldr	r5, [r1, #4]


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;
 8080fa0:	2400      	movs	r4, #0

	for(int ii = token->start; ii < token->end; ii++) {
 8080fa2:	68b8      	ldr	r0, [r7, #8]
 8080fa4:	4285      	cmp	r5, r0
 8080fa6:	da45      	bge.n	8081034 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa0>
 8080fa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
		if (escape) {
 8080fac:	b3c4      	cbz	r4, 8081020 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x8c>
			escape = false;
			switch(buffer[ii]) {
 8080fae:	5d59      	ldrb	r1, [r3, r5]
 8080fb0:	195a      	adds	r2, r3, r5
 8080fb2:	296e      	cmp	r1, #110	; 0x6e
 8080fb4:	d00f      	beq.n	8080fd6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x42>
 8080fb6:	d805      	bhi.n	8080fc4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x30>
 8080fb8:	2962      	cmp	r1, #98	; 0x62
 8080fba:	d00a      	beq.n	8080fd2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 8080fbc:	2966      	cmp	r1, #102	; 0x66
 8080fbe:	d10b      	bne.n	8080fd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
 8080fc0:	210c      	movs	r1, #12
 8080fc2:	e009      	b.n	8080fd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
			switch(buffer[ii]) {
 8080fc4:	2974      	cmp	r1, #116	; 0x74
 8080fc6:	d00e      	beq.n	8080fe6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x52>
 8080fc8:	2975      	cmp	r1, #117	; 0x75
 8080fca:	d00e      	beq.n	8080fea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x56>
 8080fcc:	2972      	cmp	r1, #114	; 0x72
 8080fce:	d103      	bne.n	8080fd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
 8080fd0:	e007      	b.n	8080fe2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4e>
			case 'b':
				str.append('\b');
 8080fd2:	2108      	movs	r1, #8
 8080fd4:	e000      	b.n	8080fd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
			case 'f':
				str.append('\f');
				break;

			case 'n':
				str.append('\n');
 8080fd6:	210a      	movs	r1, #10
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
 8080fd8:	4630      	mov	r0, r6
 8080fda:	f7ff ffa2 	bl	8080f22 <_ZN16JsonParserString6appendEc>
	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
 8080fde:	2400      	movs	r4, #0
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
				break;
 8080fe0:	e026      	b.n	8081030 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
			case 'n':
				str.append('\n');
				break;

			case 'r':
				str.append('\r');
 8080fe2:	210d      	movs	r1, #13
 8080fe4:	e7f8      	b.n	8080fd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
				break;

			case 't':
				str.append('\t');
 8080fe6:	2109      	movs	r1, #9
 8080fe8:	e7f6      	b.n	8080fd8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
				break;

			case 'u':
				if ((ii + 4) < token->end) {
 8080fea:	1d2b      	adds	r3, r5, #4
 8080fec:	4298      	cmp	r0, r3
 8080fee:	ddf6      	ble.n	8080fde <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4a>
 8080ff0:	2300      	movs	r3, #0
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
 8080ff2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8080ff6:	a802      	add	r0, sp, #8
 8080ff8:	5419      	strb	r1, [r3, r0]
			case 'u':
				if ((ii + 4) < token->end) {
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
 8080ffa:	3301      	adds	r3, #1
 8080ffc:	2b04      	cmp	r3, #4
 8080ffe:	d1f8      	bne.n	8080ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x5e>
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
 8081000:	2300      	movs	r3, #0
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 8081002:	aa01      	add	r2, sp, #4
 8081004:	490d      	ldr	r1, [pc, #52]	; (808103c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa8>)
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
 8081006:	f88d 300c 	strb.w	r3, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 808100a:	f000 ff79 	bl	8081f00 <sscanf>
 808100e:	2801      	cmp	r0, #1
 8081010:	d1e5      	bne.n	8080fde <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4a>
						appendUtf8((uint16_t)unicode, str);
 8081012:	4631      	mov	r1, r6
 8081014:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8081018:	f7ff ff97 	bl	8080f4a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 808101c:	3505      	adds	r5, #5
 808101e:	e7de      	b.n	8080fde <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4a>
				str.append(buffer[ii]);
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
 8081020:	5d59      	ldrb	r1, [r3, r5]
 8081022:	295c      	cmp	r1, #92	; 0x5c
 8081024:	d003      	beq.n	808102e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9a>
			escape = true;
		}
		else {
			str.append(buffer[ii]);
 8081026:	4630      	mov	r0, r6
 8081028:	f7ff ff7b 	bl	8080f22 <_ZN16JsonParserString6appendEc>
 808102c:	e000      	b.n	8081030 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
			escape = true;
 808102e:	2401      	movs	r4, #1
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
 8081030:	3501      	adds	r5, #1
 8081032:	e7b6      	b.n	8080fa2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xe>
			str.append(buffer[ii]);
		}
	}

	return true;
}
 8081034:	2001      	movs	r0, #1
 8081036:	b004      	add	sp, #16
 8081038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808103c:	08087540 	.word	0x08087540

08081040 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 8081040:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8081042:	460c      	mov	r4, r1
 8081044:	4615      	mov	r5, r2
 8081046:	4606      	mov	r6, r0

	result = "";
 8081048:	490b      	ldr	r1, [pc, #44]	; (8081078 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 808104a:	4610      	mov	r0, r2
 808104c:	f001 f8ac 	bl	80821a8 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 8081050:	68a3      	ldr	r3, [r4, #8]
 8081052:	6861      	ldr	r1, [r4, #4]
 8081054:	4628      	mov	r0, r5
 8081056:	1a59      	subs	r1, r3, r1
 8081058:	3101      	adds	r1, #1
 808105a:	f001 f82a 	bl	80820b2 <_ZN6String7reserveEj>


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 808105e:	2300      	movs	r3, #0

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
 8081060:	466a      	mov	r2, sp
 8081062:	4621      	mov	r1, r4
 8081064:	4630      	mov	r0, r6


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 8081066:	9500      	str	r5, [sp, #0]
 8081068:	9301      	str	r3, [sp, #4]
 808106a:	9302      	str	r3, [sp, #8]
 808106c:	9303      	str	r3, [sp, #12]

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
 808106e:	f7ff ff91 	bl	8080f94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 8081072:	b004      	add	sp, #16
 8081074:	bd70      	pop	{r4, r5, r6, pc}
 8081076:	bf00      	nop
 8081078:	08087954 	.word	0x08087954

0808107c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 808107c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081080:	b089      	sub	sp, #36	; 0x24
 8081082:	4606      	mov	r6, r0
 8081084:	460f      	mov	r7, r1

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
 8081086:	a804      	add	r0, sp, #16
 8081088:	4911      	ldr	r1, [pc, #68]	; (80810d0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x54>)

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 808108a:	4690      	mov	r8, r2
 808108c:	4699      	mov	r9, r3

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
 808108e:	f001 f839 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 8081092:	2500      	movs	r5, #0
 8081094:	9500      	str	r5, [sp, #0]
 8081096:	464b      	mov	r3, r9
 8081098:	aa03      	add	r2, sp, #12
 808109a:	4639      	mov	r1, r7
 808109c:	4630      	mov	r0, r6
 808109e:	f7ff fede 	bl	8080e5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 80810a2:	4604      	mov	r4, r0
 80810a4:	b168      	cbz	r0, 80810c2 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
		if (getTokenValue(key, keyName) && keyName == name) {
 80810a6:	aa04      	add	r2, sp, #16
 80810a8:	9903      	ldr	r1, [sp, #12]
 80810aa:	4630      	mov	r0, r6
 80810ac:	f7ff ffc8 	bl	8081040 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 80810b0:	4604      	mov	r4, r0
 80810b2:	b120      	cbz	r0, 80810be <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x42>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80810b4:	4641      	mov	r1, r8
 80810b6:	a804      	add	r0, sp, #16
 80810b8:	f001 f8eb 	bl	8082292 <_ZNK6String6equalsEPKc>
 80810bc:	b908      	cbnz	r0, 80810c2 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80810be:	3501      	adds	r5, #1
 80810c0:	e7e8      	b.n	8081094 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
 80810c2:	a804      	add	r0, sp, #16
 80810c4:	f000 ffd7 	bl	8082076 <_ZN6StringD1Ev>
		if (getTokenValue(key, keyName) && keyName == name) {
			return true;
		}
	}
	return false;
}
 80810c8:	4620      	mov	r0, r4
 80810ca:	b009      	add	sp, #36	; 0x24
 80810cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80810d0:	08087954 	.word	0x08087954

080810d4 <_ZNK13JsonReference3keyEPKc>:
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
}

JsonReference JsonReference::key(const char *name) const {
 80810d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80810d6:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 80810d8:	6889      	ldr	r1, [r1, #8]
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
}

JsonReference JsonReference::key(const char *name) const {
 80810da:	4604      	mov	r4, r0
 80810dc:	4e09      	ldr	r6, [pc, #36]	; (8081104 <_ZNK13JsonReference3keyEPKc+0x30>)
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 80810de:	b121      	cbz	r1, 80810ea <_ZNK13JsonReference3keyEPKc+0x16>
 80810e0:	ab01      	add	r3, sp, #4
 80810e2:	6868      	ldr	r0, [r5, #4]
 80810e4:	f7ff ffca 	bl	808107c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80810e8:	b920      	cbnz	r0, 80810f4 <_ZNK13JsonReference3keyEPKc+0x20>
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
 80810ea:	686b      	ldr	r3, [r5, #4]

//
//
//

JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 80810ec:	6026      	str	r6, [r4, #0]
 80810ee:	6063      	str	r3, [r4, #4]
 80810f0:	2300      	movs	r3, #0
 80810f2:	e003      	b.n	80810fc <_ZNK13JsonReference3keyEPKc+0x28>

JsonReference JsonReference::key(const char *name) const {
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByKey(token, name, newToken)) {
		return JsonReference(parser, newToken);
 80810f4:	686b      	ldr	r3, [r5, #4]
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 80810f6:	6026      	str	r6, [r4, #0]
 80810f8:	6063      	str	r3, [r4, #4]
 80810fa:	9b01      	ldr	r3, [sp, #4]
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
	}
}
 80810fc:	4620      	mov	r0, r4
}

JsonReference::~JsonReference() {
}

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 80810fe:	60a3      	str	r3, [r4, #8]
		return JsonReference(parser, newToken);
	}
	else {
		return JsonReference(parser);
	}
}
 8081100:	b002      	add	sp, #8
 8081102:	bd70      	pop	{r4, r5, r6, pc}
 8081104:	08087524 	.word	0x08087524

08081108 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 8081108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 808110c:	6844      	ldr	r4, [r0, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
 808110e:	f04f 35ff 	mov.w	r5, #4294967295
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 8081112:	f04f 0e03 	mov.w	lr, #3
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8081116:	f8d0 c000 	ldr.w	ip, [r0]
 808111a:	4594      	cmp	ip, r2
 808111c:	f080 819d 	bcs.w	808145a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
 8081120:	f811 800c 	ldrb.w	r8, [r1, ip]
 8081124:	f1b8 0f00 	cmp.w	r8, #0
 8081128:	f000 8197 	beq.w	808145a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 808112c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 8081130:	f000 8116 	beq.w	8081360 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x258>
 8081134:	d818      	bhi.n	8081168 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x60>
 8081136:	f1b8 0f0d 	cmp.w	r8, #13
 808113a:	f000 818a 	beq.w	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 808113e:	d806      	bhi.n	808114e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x46>
 8081140:	f1a8 0809 	sub.w	r8, r8, #9
 8081144:	f1b8 0f01 	cmp.w	r8, #1
 8081148:	f240 8183 	bls.w	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 808114c:	e13d      	b.n	80813ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
 808114e:	f1b8 0f20 	cmp.w	r8, #32
 8081152:	f000 817e 	beq.w	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 8081156:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 808115a:	f040 8136 	bne.w	80813ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
 808115e:	f10c 0901 	add.w	r9, ip, #1
 8081162:	f8c0 9000 	str.w	r9, [r0]
 8081166:	e092      	b.n	808128e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x186>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 8081168:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 808116c:	d03c      	beq.n	80811e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
 808116e:	d807      	bhi.n	8081180 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x78>
 8081170:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 8081174:	f000 80f0 	beq.w	8081358 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
 8081178:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 808117c:	d007      	beq.n	808118e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
 808117e:	e124      	b.n	80813ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
 8081180:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 8081184:	d003      	beq.n	808118e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
 8081186:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 808118a:	d02d      	beq.n	80811e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
 808118c:	e11d      	b.n	80813ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
			case '{': case '[':
				count++;
 808118e:	3401      	adds	r4, #1
				if (tokens == NULL) {
 8081190:	2b00      	cmp	r3, #0
 8081192:	f000 815e 	beq.w	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 8081196:	6847      	ldr	r7, [r0, #4]
 8081198:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808119a:	42be      	cmp	r6, r7
 808119c:	f240 817c 	bls.w	8081498 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x390>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 80811a0:	f107 0c01 	add.w	ip, r7, #1
 80811a4:	f8c0 c004 	str.w	ip, [r0, #4]
 80811a8:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 80811ac:	eb03 0a0c 	add.w	sl, r3, ip
	tok->start = tok->end = -1;
	tok->size = 0;
 80811b0:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
 80811b2:	f8ca 5004 	str.w	r5, [sl, #4]
	tok->size = 0;
 80811b6:	f8ca 600c 	str.w	r6, [sl, #12]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
 80811ba:	f8ca 5008 	str.w	r5, [sl, #8]
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
 80811be:	6887      	ldr	r7, [r0, #8]
 80811c0:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80811c2:	bf1f      	itttt	ne
 80811c4:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80811c8:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80811cc:	3701      	addne	r7, #1
 80811ce:	f8c9 700c 	strne.w	r7, [r9, #12]
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80811d2:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80811d6:	bf14      	ite	ne
 80811d8:	2702      	movne	r7, #2
 80811da:	2701      	moveq	r7, #1
 80811dc:	f803 700c 	strb.w	r7, [r3, ip]
				token->start = parser->pos;
 80811e0:	6807      	ldr	r7, [r0, #0]
 80811e2:	f8ca 7004 	str.w	r7, [sl, #4]
 80811e6:	e0b7      	b.n	8081358 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 80811e8:	2b00      	cmp	r3, #0
 80811ea:	f000 8132 	beq.w	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80811ee:	6847      	ldr	r7, [r0, #4]
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80811f0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80811f4:	f107 5880 	add.w	r8, r7, #268435456	; 0x10000000
 80811f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80811fc:	bf14      	ite	ne
 80811fe:	f04f 0a02 	movne.w	sl, #2
 8081202:	f04f 0a01 	moveq.w	sl, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 8081206:	f107 39ff 	add.w	r9, r7, #4294967295
 808120a:	eb03 1808 	add.w	r8, r3, r8, lsl #4
 808120e:	f1b9 0f00 	cmp.w	r9, #0
 8081212:	db19      	blt.n	8081248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x140>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 8081214:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8081218:	3701      	adds	r7, #1
 808121a:	d010      	beq.n	808123e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
 808121c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8081220:	1c7e      	adds	r6, r7, #1
 8081222:	d10c      	bne.n	808123e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
						if (token->type != type) {
 8081224:	f898 b000 	ldrb.w	fp, [r8]
 8081228:	45d3      	cmp	fp, sl
 808122a:	f040 8128 	bne.w	808147e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x376>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 808122e:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
 8081230:	f10c 0701 	add.w	r7, ip, #1
 8081234:	f8c8 7008 	str.w	r7, [r8, #8]
 8081238:	eb03 1c09 	add.w	ip, r3, r9, lsl #4
 808123c:	e011      	b.n	8081262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 808123e:	f109 39ff 	add.w	r9, r9, #4294967295
 8081242:	f1a8 0810 	sub.w	r8, r8, #16
 8081246:	e7e2      	b.n	808120e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x106>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 8081248:	f1b9 3fff 	cmp.w	r9, #4294967295
 808124c:	f040 8101 	bne.w	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 8081250:	e115      	b.n	808147e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x376>
				for (; i >= 0; i--) {
 8081252:	f109 39ff 	add.w	r9, r9, #4294967295
 8081256:	f1b9 3fff 	cmp.w	r9, #4294967295
 808125a:	f1ac 0c10 	sub.w	ip, ip, #16
 808125e:	f000 80f8 	beq.w	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 8081262:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8081266:	3701      	adds	r7, #1
 8081268:	d0f3      	beq.n	8081252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
 808126a:	f8dc 7008 	ldr.w	r7, [ip, #8]
 808126e:	3701      	adds	r7, #1
 8081270:	d1ef      	bne.n	8081252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
						parser->toksuper = i;
 8081272:	f8c0 9008 	str.w	r9, [r0, #8]
						break;
 8081276:	e0ec      	b.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8081278:	f811 7008 	ldrb.w	r7, [r1, r8]
 808127c:	2f00      	cmp	r7, #0
 808127e:	d068      	beq.n	8081352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
 8081280:	2f22      	cmp	r7, #34	; 0x22
 8081282:	d009      	beq.n	8081298 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
 8081284:	2f5c      	cmp	r7, #92	; 0x5c
 8081286:	d026      	beq.n	80812d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ce>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8081288:	6807      	ldr	r7, [r0, #0]
 808128a:	3701      	adds	r7, #1
 808128c:	6007      	str	r7, [r0, #0]
 808128e:	f8d0 8000 	ldr.w	r8, [r0]
 8081292:	4542      	cmp	r2, r8
 8081294:	d8f0      	bhi.n	8081278 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
 8081296:	e05c      	b.n	8081352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
 8081298:	2b00      	cmp	r3, #0
 808129a:	f000 80ce 	beq.w	808143a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 808129e:	6847      	ldr	r7, [r0, #4]
 80812a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80812a2:	42be      	cmp	r6, r7
 80812a4:	f240 80f6 	bls.w	8081494 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 80812a8:	f107 0c01 	add.w	ip, r7, #1
 80812ac:	013f      	lsls	r7, r7, #4
 80812ae:	f8c0 c004 	str.w	ip, [r0, #4]
	tok->start = tok->end = -1;
	tok->size = 0;
 80812b2:	2600      	movs	r6, #0
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 80812b4:	eb03 0c07 	add.w	ip, r3, r7
	tok->start = tok->end = -1;
 80812b8:	f8cc 5008 	str.w	r5, [ip, #8]
 80812bc:	f8cc 5004 	str.w	r5, [ip, #4]
	tok->size = 0;
 80812c0:	f8cc 600c 	str.w	r6, [ip, #12]
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 80812c4:	f8d0 8000 	ldr.w	r8, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 80812c8:	f803 e007 	strb.w	lr, [r3, r7]
	token->start = start;
 80812cc:	f8cc 9004 	str.w	r9, [ip, #4]
	token->end = end;
 80812d0:	f8cc 8008 	str.w	r8, [ip, #8]
 80812d4:	e0b1      	b.n	808143a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
 80812d6:	f108 0701 	add.w	r7, r8, #1
 80812da:	42ba      	cmp	r2, r7
 80812dc:	d9d4      	bls.n	8081288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
			int i;
			parser->pos++;
 80812de:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
 80812e0:	5dcf      	ldrb	r7, [r1, r7]
 80812e2:	2f66      	cmp	r7, #102	; 0x66
 80812e4:	d0d0      	beq.n	8081288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80812e6:	d808      	bhi.n	80812fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f2>
 80812e8:	2f2f      	cmp	r7, #47	; 0x2f
 80812ea:	d0cd      	beq.n	8081288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80812ec:	d801      	bhi.n	80812f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ea>
 80812ee:	2f22      	cmp	r7, #34	; 0x22
 80812f0:	e007      	b.n	8081302 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
 80812f2:	2f5c      	cmp	r7, #92	; 0x5c
 80812f4:	d0c8      	beq.n	8081288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80812f6:	2f62      	cmp	r7, #98	; 0x62
 80812f8:	e003      	b.n	8081302 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
 80812fa:	2f72      	cmp	r7, #114	; 0x72
 80812fc:	d0c4      	beq.n	8081288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80812fe:	d802      	bhi.n	8081306 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fe>
 8081300:	2f6e      	cmp	r7, #110	; 0x6e
 8081302:	d175      	bne.n	80813f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
 8081304:	e7c0      	b.n	8081288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 8081306:	2f74      	cmp	r7, #116	; 0x74
 8081308:	d0be      	beq.n	8081288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 808130a:	2f75      	cmp	r7, #117	; 0x75
 808130c:	d170      	bne.n	80813f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
 808130e:	f108 0702 	add.w	r7, r8, #2
 8081312:	6007      	str	r7, [r0, #0]
 8081314:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8081318:	f8d0 8000 	ldr.w	r8, [r0]
 808131c:	4542      	cmp	r2, r8
 808131e:	d803      	bhi.n	8081328 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x220>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
 8081320:	6807      	ldr	r7, [r0, #0]
 8081322:	3f01      	subs	r7, #1
 8081324:	6007      	str	r7, [r0, #0]
 8081326:	e7af      	b.n	8081288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8081328:	f811 7008 	ldrb.w	r7, [r1, r8]
 808132c:	2f00      	cmp	r7, #0
 808132e:	d0f7      	beq.n	8081320 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 8081330:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 8081334:	f1bb 0f09 	cmp.w	fp, #9
 8081338:	d904      	bls.n	8081344 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23c>
 808133a:	f027 0720 	bic.w	r7, r7, #32
 808133e:	3f41      	subs	r7, #65	; 0x41
 8081340:	2f05      	cmp	r7, #5
 8081342:	d855      	bhi.n	80813f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
 8081344:	f108 0701 	add.w	r7, r8, #1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8081348:	f1ba 0a01 	subs.w	sl, sl, #1
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
 808134c:	6007      	str	r7, [r0, #0]
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 808134e:	d1e3      	bne.n	8081318 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
 8081350:	e7e6      	b.n	8081320 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
 8081352:	f8c0 c000 	str.w	ip, [r0]
 8081356:	e099      	b.n	808148c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x384>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
 8081358:	6847      	ldr	r7, [r0, #4]
 808135a:	3f01      	subs	r7, #1
 808135c:	6087      	str	r7, [r0, #8]
				break;
 808135e:	e078      	b.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
 8081360:	2b00      	cmp	r3, #0
 8081362:	d076      	beq.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 8081364:	6887      	ldr	r7, [r0, #8]
 8081366:	1c7e      	adds	r6, r7, #1
 8081368:	d073      	beq.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 808136a:	013f      	lsls	r7, r7, #4
 808136c:	5ddf      	ldrb	r7, [r3, r7]
 808136e:	3f01      	subs	r7, #1
 8081370:	2f01      	cmp	r7, #1
 8081372:	d96e      	bls.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
 8081374:	6847      	ldr	r7, [r0, #4]
 8081376:	f107 38ff 	add.w	r8, r7, #4294967295
 808137a:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
 808137e:	f1b8 0f00 	cmp.w	r8, #0
 8081382:	db66      	blt.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8081384:	f81c 7c10 	ldrb.w	r7, [ip, #-16]
 8081388:	3f01      	subs	r7, #1
 808138a:	2f01      	cmp	r7, #1
 808138c:	d80a      	bhi.n	80813a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 808138e:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
 8081392:	3701      	adds	r7, #1
 8081394:	d006      	beq.n	80813a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
 8081396:	f85c 7c08 	ldr.w	r7, [ip, #-8]
 808139a:	3701      	adds	r7, #1
 808139c:	d102      	bne.n	80813a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
								parser->toksuper = i;
 808139e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
 80813a2:	e056      	b.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
 80813a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80813a8:	f1ac 0c10 	sub.w	ip, ip, #16
 80813ac:	e7e7      	b.n	808137e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x276>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80813ae:	f811 7008 	ldrb.w	r7, [r1, r8]
 80813b2:	b307      	cbz	r7, 80813f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
 80813b4:	2f20      	cmp	r7, #32
 80813b6:	d01e      	beq.n	80813f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
 80813b8:	d810      	bhi.n	80813dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
 80813ba:	2f09      	cmp	r7, #9
 80813bc:	d20a      	bcs.n	80813d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80813be:	3f20      	subs	r7, #32
 80813c0:	2f5e      	cmp	r7, #94	; 0x5e
 80813c2:	d815      	bhi.n	80813f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80813c4:	f108 0701 	add.w	r7, r8, #1
 80813c8:	6007      	str	r7, [r0, #0]
 80813ca:	f8d0 8000 	ldr.w	r8, [r0]
 80813ce:	4542      	cmp	r2, r8
 80813d0:	d8ed      	bhi.n	80813ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a6>
 80813d2:	e010      	b.n	80813f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
 80813d4:	2f0a      	cmp	r7, #10
 80813d6:	d90e      	bls.n	80813f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
 80813d8:	2f0d      	cmp	r7, #13
 80813da:	e007      	b.n	80813ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
 80813dc:	2f3a      	cmp	r7, #58	; 0x3a
 80813de:	d00a      	beq.n	80813f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
 80813e0:	d801      	bhi.n	80813e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2de>
 80813e2:	2f2c      	cmp	r7, #44	; 0x2c
 80813e4:	e002      	b.n	80813ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
 80813e6:	2f5d      	cmp	r7, #93	; 0x5d
 80813e8:	d005      	beq.n	80813f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
 80813ea:	2f7d      	cmp	r7, #125	; 0x7d
 80813ec:	d1e7      	bne.n	80813be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b6>
 80813ee:	e002      	b.n	80813f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
 80813f0:	f8c0 c000 	str.w	ip, [r0]
 80813f4:	e043      	b.n	808147e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x376>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
 80813f6:	b913      	cbnz	r3, 80813fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f6>
		parser->pos--;
 80813f8:	f108 37ff 	add.w	r7, r8, #4294967295
 80813fc:	e01c      	b.n	8081438 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x330>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 80813fe:	6847      	ldr	r7, [r0, #4]
 8081400:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8081402:	42be      	cmp	r6, r7
 8081404:	d946      	bls.n	8081494 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 8081406:	f107 0801 	add.w	r8, r7, #1
 808140a:	013f      	lsls	r7, r7, #4
 808140c:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
	tok->size = 0;
 8081410:	2600      	movs	r6, #0
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 8081412:	eb03 0807 	add.w	r8, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
 8081416:	f8c8 600c 	str.w	r6, [r8, #12]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 808141a:	f04f 0604 	mov.w	r6, #4
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
 808141e:	f8c8 5008 	str.w	r5, [r8, #8]
 8081422:	f8c8 5004 	str.w	r5, [r8, #4]
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8081426:	f8d0 9000 	ldr.w	r9, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 808142a:	55de      	strb	r6, [r3, r7]
	token->start = start;
 808142c:	f8c8 c004 	str.w	ip, [r8, #4]
	token->end = end;
 8081430:	f8c8 9008 	str.w	r9, [r8, #8]
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
 8081434:	6807      	ldr	r7, [r0, #0]
 8081436:	3f01      	subs	r7, #1
 8081438:	6007      	str	r7, [r0, #0]
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
 808143a:	6887      	ldr	r7, [r0, #8]
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
 808143c:	3401      	adds	r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
 808143e:	1c7e      	adds	r6, r7, #1
 8081440:	d007      	beq.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 8081442:	b133      	cbz	r3, 8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
					tokens[parser->toksuper].size++;
 8081444:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
 8081448:	f8dc 700c 	ldr.w	r7, [ip, #12]
 808144c:	3701      	adds	r7, #1
 808144e:	f8cc 700c 	str.w	r7, [ip, #12]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8081452:	6807      	ldr	r7, [r0, #0]
 8081454:	3701      	adds	r7, #1
 8081456:	6007      	str	r7, [r0, #0]
 8081458:	e65d      	b.n	8081116 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
 808145a:	b1a3      	cbz	r3, 8081486 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x37e>
		for (i = parser->toknext - 1; i >= 0; i--) {
 808145c:	6842      	ldr	r2, [r0, #4]
 808145e:	1e51      	subs	r1, r2, #1
 8081460:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8081464:	2900      	cmp	r1, #0
 8081466:	db0e      	blt.n	8081486 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x37e>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 8081468:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 808146c:	3201      	adds	r2, #1
 808146e:	d003      	beq.n	8081478 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x370>
 8081470:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8081474:	3201      	adds	r2, #1
 8081476:	d009      	beq.n	808148c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x384>
#endif
		}
	}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
 8081478:	3901      	subs	r1, #1
 808147a:	3b10      	subs	r3, #16
 808147c:	e7f2      	b.n	8081464 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35c>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
 808147e:	f06f 0001 	mvn.w	r0, #1
 8081482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081486:	4620      	mov	r0, r4
 8081488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
				return JSMN_ERROR_PART;
 808148c:	f06f 0002 	mvn.w	r0, #2
 8081490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
 8081494:	f8c0 c000 	str.w	ip, [r0]
		return JSMN_ERROR_NOMEM;
 8081498:	f04f 30ff 	mov.w	r0, #4294967295
 808149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080814a0 <_ZN10JsonParser5parseEv>:
	else {
		return false;
	}
}

bool JsonParser::parse() {
 80814a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (tokens) {
 80814a2:	6943      	ldr	r3, [r0, #20]
	else {
		return false;
	}
}

bool JsonParser::parse() {
 80814a4:	4604      	mov	r4, r0
 80814a6:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
 80814aa:	b1f3      	cbz	r3, 80814ea <_ZN10JsonParser5parseEv+0x4a>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80814ac:	2200      	movs	r2, #0
 80814ae:	6202      	str	r2, [r0, #32]
	parser->toknext = 0;
 80814b0:	6242      	str	r2, [r0, #36]	; 0x24
	parser->toksuper = -1;
 80814b2:	f04f 32ff 	mov.w	r2, #4294967295
 80814b6:	6282      	str	r2, [r0, #40]	; 0x28

bool JsonParser::parse() {
	if (tokens) {
		// Try to use the existing token buffer if possible
		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80814b8:	69c2      	ldr	r2, [r0, #28]
 80814ba:	9200      	str	r2, [sp, #0]
 80814bc:	68c2      	ldr	r2, [r0, #12]
 80814be:	6841      	ldr	r1, [r0, #4]
 80814c0:	4630      	mov	r0, r6
 80814c2:	f7ff fe21 	bl	8081108 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 80814c6:	1c43      	adds	r3, r0, #1
 80814c8:	d109      	bne.n	80814de <_ZN10JsonParser5parseEv+0x3e>
			if (staticBuffers) {
 80814ca:	7c25      	ldrb	r5, [r4, #16]
 80814cc:	b10d      	cbz	r5, 80814d2 <_ZN10JsonParser5parseEv+0x32>
				// If using static buffers and there is not enough space, fail
				return false;
 80814ce:	2000      	movs	r0, #0
 80814d0:	e033      	b.n	808153a <_ZN10JsonParser5parseEv+0x9a>
			}
			free(tokens);
 80814d2:	6960      	ldr	r0, [r4, #20]
 80814d4:	f000 fcfc 	bl	8081ed0 <free>
			tokens = 0;
 80814d8:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 80814da:	61e5      	str	r5, [r4, #28]
 80814dc:	e005      	b.n	80814ea <_ZN10JsonParser5parseEv+0x4a>
		}
		else
		if (result < 0) {
 80814de:	2800      	cmp	r0, #0
 80814e0:	dbf5      	blt.n	80814ce <_ZN10JsonParser5parseEv+0x2e>
			// Failed to parse: JSMN_ERROR_INVAL or JSMN_ERROR_PART
			return false;
		}
		else {
			tokensEnd = &tokens[result];
 80814e2:	6963      	ldr	r3, [r4, #20]
 80814e4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80814e8:	e025      	b.n	8081536 <_ZN10JsonParser5parseEv+0x96>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80814ea:	2500      	movs	r5, #0
	parser->toknext = 0;
	parser->toksuper = -1;
 80814ec:	f04f 37ff 	mov.w	r7, #4294967295
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80814f0:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
 80814f2:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
 80814f4:	62a7      	str	r7, [r4, #40]	; 0x28
		}
	}

	// Pass 1: determine now many tokens we need
	JsonParserGeneratorRK::jsmn_init(&parser);
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80814f6:	9500      	str	r5, [sp, #0]
 80814f8:	462b      	mov	r3, r5
 80814fa:	68e2      	ldr	r2, [r4, #12]
 80814fc:	6861      	ldr	r1, [r4, #4]
 80814fe:	4630      	mov	r0, r6
 8081500:	f7ff fe02 	bl	8081108 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 8081504:	2800      	cmp	r0, #0
 8081506:	dbe2      	blt.n	80814ce <_ZN10JsonParser5parseEv+0x2e>
	}

	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
 8081508:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 808150a:	d013      	beq.n	8081534 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 808150c:	0100      	lsls	r0, r0, #4
 808150e:	f000 fcd7 	bl	8081ec0 <malloc>

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 8081512:	69e2      	ldr	r2, [r4, #28]
	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 8081514:	4603      	mov	r3, r0
 8081516:	6160      	str	r0, [r4, #20]

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 8081518:	9200      	str	r2, [sp, #0]
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 808151a:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
 808151c:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
 808151e:	62a7      	str	r7, [r4, #40]	; 0x28
	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 8081520:	68e2      	ldr	r2, [r4, #12]
 8081522:	6861      	ldr	r1, [r4, #4]
 8081524:	4630      	mov	r0, r6
 8081526:	f7ff fdef 	bl	8081108 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>

		tokensEnd = &tokens[result];
 808152a:	6963      	ldr	r3, [r4, #20]
 808152c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8081530:	61a0      	str	r0, [r4, #24]
 8081532:	e001      	b.n	8081538 <_ZN10JsonParser5parseEv+0x98>
	}
	else {
		tokensEnd = tokens;
 8081534:	6963      	ldr	r3, [r4, #20]
 8081536:	61a3      	str	r3, [r4, #24]
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
		printf("%d, %d, %d, %d\n", token->type, token->start, token->end, token->size);
	}
	*/

	return true;
 8081538:	2001      	movs	r0, #1
}
 808153a:	b003      	add	sp, #12
 808153c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808153e <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
 808153e:	f000 baab 	b.w	8081a98 <HAL_Pin_Map>

08081542 <_ZN14RunningAverageD1Ev>:
    _ar = (double*) malloc(_size * sizeof(double));
    if (_ar == NULL) _size = 0;
    clear();
}

RunningAverage::~RunningAverage()
 8081542:	b510      	push	{r4, lr}
 8081544:	4604      	mov	r4, r0
{
    if (_ar != NULL) free(_ar);
 8081546:	6900      	ldr	r0, [r0, #16]
 8081548:	b108      	cbz	r0, 808154e <_ZN14RunningAverageD1Ev+0xc>
 808154a:	f000 fcc1 	bl	8081ed0 <free>
}
 808154e:	4620      	mov	r0, r4
 8081550:	bd10      	pop	{r4, pc}

08081552 <_ZN14RunningAverage5clearEv>:

// resets all counters
void RunningAverage::clear()
{
 8081552:	b530      	push	{r4, r5, lr}
    _cnt = 0;
    _idx = 0;
    _sum = 0.0;
 8081554:	2400      	movs	r4, #0
 8081556:	2500      	movs	r5, #0
 8081558:	e9c0 4502 	strd	r4, r5, [r0, #8]
}

// resets all counters
void RunningAverage::clear()
{
    _cnt = 0;
 808155c:	2300      	movs	r3, #0
 808155e:	7043      	strb	r3, [r0, #1]
    _idx = 0;
 8081560:	7083      	strb	r3, [r0, #2]
    _sum = 0.0;
    for (uint8_t i = 0; i< _size; i++)
 8081562:	7802      	ldrb	r2, [r0, #0]
 8081564:	1c59      	adds	r1, r3, #1
 8081566:	b2db      	uxtb	r3, r3
 8081568:	429a      	cmp	r2, r3
 808156a:	d906      	bls.n	808157a <_ZN14RunningAverage5clearEv+0x28>
    {
        _ar[i] = 0.0; // keeps addValue simple
 808156c:	6902      	ldr	r2, [r0, #16]
 808156e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8081572:	e9c3 4500 	strd	r4, r5, [r3]
void RunningAverage::clear()
{
    _cnt = 0;
    _idx = 0;
    _sum = 0.0;
    for (uint8_t i = 0; i< _size; i++)
 8081576:	460b      	mov	r3, r1
 8081578:	e7f3      	b.n	8081562 <_ZN14RunningAverage5clearEv+0x10>
 808157a:	bd30      	pop	{r4, r5, pc}

0808157c <_ZN14RunningAverageC1Eh>:
//

#include "RunningAverage.h"
#include <stdlib.h>

RunningAverage::RunningAverage(uint8_t size)
 808157c:	b510      	push	{r4, lr}
 808157e:	4604      	mov	r4, r0
{
    _size = size;
 8081580:	7001      	strb	r1, [r0, #0]
    _ar = (double*) malloc(_size * sizeof(double));
 8081582:	00c8      	lsls	r0, r1, #3
 8081584:	f000 fc9c 	bl	8081ec0 <malloc>
 8081588:	6120      	str	r0, [r4, #16]
    if (_ar == NULL) _size = 0;
 808158a:	b900      	cbnz	r0, 808158e <_ZN14RunningAverageC1Eh+0x12>
 808158c:	7020      	strb	r0, [r4, #0]
    clear();
 808158e:	4620      	mov	r0, r4
 8081590:	f7ff ffdf 	bl	8081552 <_ZN14RunningAverage5clearEv>
}
 8081594:	4620      	mov	r0, r4
 8081596:	bd10      	pop	{r4, pc}

08081598 <_ZN14RunningAverage8addValueEd>:
    }
}

// adds a new value to the data-set
void RunningAverage::addValue(double value)
{
 8081598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808159a:	461f      	mov	r7, r3
    if (_ar == NULL) return;
 808159c:	6903      	ldr	r3, [r0, #16]
    }
}

// adds a new value to the data-set
void RunningAverage::addValue(double value)
{
 808159e:	4604      	mov	r4, r0
 80815a0:	4616      	mov	r6, r2
    if (_ar == NULL) return;
 80815a2:	b343      	cbz	r3, 80815f6 <_ZN14RunningAverage8addValueEd+0x5e>
    _sum -= _ar[_idx];
 80815a4:	7885      	ldrb	r5, [r0, #2]
 80815a6:	f100 0108 	add.w	r1, r0, #8
 80815aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80815ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80815b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80815b6:	f002 f8f9 	bl	80837ac <__aeabi_dsub>
 80815ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
    _ar[_idx] = value;
 80815be:	e9c5 6700 	strd	r6, r7, [r5]
    _sum += _ar[_idx];
 80815c2:	78a5      	ldrb	r5, [r4, #2]
 80815c4:	6923      	ldr	r3, [r4, #16]
 80815c6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80815ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80815ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80815d2:	f002 f8ed 	bl	80837b0 <__adddf3>
    _idx++;
 80815d6:	3501      	adds	r5, #1
    if (_idx == _size) _idx = 0;  // faster than %
 80815d8:	7822      	ldrb	r2, [r4, #0]
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
    _idx++;
 80815da:	b2ed      	uxtb	r5, r5
    if (_idx == _size) _idx = 0;  // faster than %
 80815dc:	4295      	cmp	r5, r2
 80815de:	bf08      	it	eq
 80815e0:	2300      	moveq	r3, #0
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
    _idx++;
 80815e2:	70a5      	strb	r5, [r4, #2]
    if (_idx == _size) _idx = 0;  // faster than %
 80815e4:	bf08      	it	eq
 80815e6:	70a3      	strbeq	r3, [r4, #2]
    if (_cnt < _size) _cnt++;
 80815e8:	7863      	ldrb	r3, [r4, #1]
void RunningAverage::addValue(double value)
{
    if (_ar == NULL) return;
    _sum -= _ar[_idx];
    _ar[_idx] = value;
    _sum += _ar[_idx];
 80815ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
    _idx++;
    if (_idx == _size) _idx = 0;  // faster than %
    if (_cnt < _size) _cnt++;
 80815ee:	429a      	cmp	r2, r3
 80815f0:	bf84      	itt	hi
 80815f2:	3301      	addhi	r3, #1
 80815f4:	7063      	strbhi	r3, [r4, #1]
 80815f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080815f8 <_ZN14RunningAverage10getAverageEv>:
}

// returns the average of the data-set added sofar
double RunningAverage::getAverage()
{
 80815f8:	b510      	push	{r4, lr}
 80815fa:	4604      	mov	r4, r0
    if (_cnt == 0) return 0;
 80815fc:	7840      	ldrb	r0, [r0, #1]
 80815fe:	b140      	cbz	r0, 8081612 <_ZN14RunningAverage10getAverageEv+0x1a>
    return _sum / _cnt;
 8081600:	f002 fa22 	bl	8083a48 <__aeabi_i2d>
 8081604:	4602      	mov	r2, r0
 8081606:	460b      	mov	r3, r1
 8081608:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 808160c:	f002 fbac 	bl	8083d68 <__aeabi_ddiv>
 8081610:	bd10      	pop	{r4, pc}
}

// returns the average of the data-set added sofar
double RunningAverage::getAverage()
{
    if (_cnt == 0) return 0;
 8081612:	2000      	movs	r0, #0
 8081614:	2100      	movs	r1, #0
    return _sum / _cnt;
}
 8081616:	bd10      	pop	{r4, pc}

08081618 <_ZN14RunningAverage9fillValueEdh>:

// fill the average with a value
// the param number determines how often value is added (weight)
// number should preferably be between 1 and size
void RunningAverage::fillValue(double value, uint8_t number)
{
 8081618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808161c:	4605      	mov	r5, r0
 808161e:	4616      	mov	r6, r2
 8081620:	461f      	mov	r7, r3
 8081622:	f89d 8018 	ldrb.w	r8, [sp, #24]
    clear(); // TODO conditional?  if (clr) clear();
 8081626:	f7ff ff94 	bl	8081552 <_ZN14RunningAverage5clearEv>
 808162a:	2400      	movs	r4, #0

    for (uint8_t i = 0; i < number; i++)
 808162c:	4544      	cmp	r4, r8
 808162e:	d006      	beq.n	808163e <_ZN14RunningAverage9fillValueEdh+0x26>
    {
        addValue(value);
 8081630:	4632      	mov	r2, r6
 8081632:	463b      	mov	r3, r7
 8081634:	4628      	mov	r0, r5
 8081636:	f7ff ffaf 	bl	8081598 <_ZN14RunningAverage8addValueEd>
 808163a:	3401      	adds	r4, #1
// number should preferably be between 1 and size
void RunningAverage::fillValue(double value, uint8_t number)
{
    clear(); // TODO conditional?  if (clr) clear();

    for (uint8_t i = 0; i < number; i++)
 808163c:	e7f6      	b.n	808162c <_ZN14RunningAverage9fillValueEdh+0x14>
 808163e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081642 <_GLOBAL__sub_I__ZN14RunningAverageC2Eh>:
 8081642:	f000 ba29 	b.w	8081a98 <HAL_Pin_Map>

08081646 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8081646:	b510      	push	{r4, lr}
 8081648:	4604      	mov	r4, r0
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
 808164a:	f001 ff39 	bl	80834c0 <_Z19__fetch_global_Wirev>
 808164e:	6803      	ldr	r3, [r0, #0]
 8081650:	4621      	mov	r1, r4
  #else
  Wire.send(x);
  #endif
}
 8081652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
 8081656:	689b      	ldr	r3, [r3, #8]
 8081658:	4718      	bx	r3

0808165a <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 808165a:	b508      	push	{r3, lr}
  #if ARDUINO >= 100
  return Wire.read();
 808165c:	f001 ff30 	bl	80834c0 <_Z19__fetch_global_Wirev>
 8081660:	6803      	ldr	r3, [r0, #0]
 8081662:	695b      	ldr	r3, [r3, #20]
 8081664:	4798      	blx	r3
  #else
  return Wire.receive();
  #endif
}
 8081666:	b2c0      	uxtb	r0, r0
 8081668:	bd08      	pop	{r3, pc}

0808166a <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 808166a:	b570      	push	{r4, r5, r6, lr}
 808166c:	4606      	mov	r6, r0
 808166e:	460d      	mov	r5, r1
 8081670:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8081672:	f001 ff25 	bl	80834c0 <_Z19__fetch_global_Wirev>
 8081676:	4631      	mov	r1, r6
 8081678:	f001 fe1a 	bl	80832b0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 808167c:	4628      	mov	r0, r5
 808167e:	f7ff ffe2 	bl	8081646 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8081682:	0a20      	lsrs	r0, r4, #8
 8081684:	f7ff ffdf 	bl	8081646 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8081688:	b2e0      	uxtb	r0, r4
 808168a:	f7ff ffdc 	bl	8081646 <_ZL8i2cwriteh>
  Wire.endTransmission();
 808168e:	f001 ff17 	bl	80834c0 <_Z19__fetch_global_Wirev>
}
 8081692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8081696:	f001 be13 	b.w	80832c0 <_ZN7TwoWire15endTransmissionEv>

0808169a <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 808169a:	b510      	push	{r4, lr}
 808169c:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 808169e:	f001 ff0f 	bl	80834c0 <_Z19__fetch_global_Wirev>
 80816a2:	4621      	mov	r1, r4
 80816a4:	f001 fe04 	bl	80832b0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 80816a8:	2000      	movs	r0, #0
 80816aa:	f7ff ffcc 	bl	8081646 <_ZL8i2cwriteh>
  Wire.endTransmission();
 80816ae:	f001 ff07 	bl	80834c0 <_Z19__fetch_global_Wirev>
 80816b2:	f001 fe05 	bl	80832c0 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 80816b6:	f001 ff03 	bl	80834c0 <_Z19__fetch_global_Wirev>
 80816ba:	4621      	mov	r1, r4
 80816bc:	2202      	movs	r2, #2
 80816be:	f001 fdf4 	bl	80832aa <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 80816c2:	f7ff ffca 	bl	808165a <_ZL7i2creadv>
 80816c6:	4604      	mov	r4, r0
 80816c8:	f7ff ffc7 	bl	808165a <_ZL7i2creadv>
 80816cc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 80816d0:	b280      	uxth	r0, r0
 80816d2:	bd10      	pop	{r4, pc}

080816d4 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 80816d4:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 80816d6:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 80816d8:	2102      	movs	r1, #2
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 80816da:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 80816dc:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 80816de:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 80816e0:	4770      	bx	lr

080816e2 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 80816e2:	b508      	push	{r3, lr}
  Wire.begin();
 80816e4:	f001 feec 	bl	80834c0 <_Z19__fetch_global_Wirev>
}
 80816e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 80816ec:	f001 bdce 	b.w	808328c <_ZN7TwoWire5beginEv>

080816f0 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 80816f0:	8081      	strh	r1, [r0, #4]
 80816f2:	4770      	bx	lr

080816f4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 80816f4:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 80816f6:	b510      	push	{r4, lr}
 80816f8:	4604      	mov	r4, r0
  if (channel > 3)
 80816fa:	d822      	bhi.n	8081742 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 80816fc:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 80816fe:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 8081700:	d008      	beq.n	8081714 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 8081702:	2903      	cmp	r1, #3
 8081704:	d009      	beq.n	808171a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8081706:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8081708:	bf14      	ite	ne
 808170a:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 808170e:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 8081712:	e004      	b.n	808171e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8081714:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8081718:	e001      	b.n	808171e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 808171a:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 808171e:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8081722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8081726:	2101      	movs	r1, #1
 8081728:	7820      	ldrb	r0, [r4, #0]
 808172a:	f7ff ff9e 	bl	808166a <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 808172e:	7860      	ldrb	r0, [r4, #1]
 8081730:	f000 ff86 	bl	8082640 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8081734:	7820      	ldrb	r0, [r4, #0]
 8081736:	f7ff ffb0 	bl	808169a <_ZL12readRegisterhh.isra.0>
 808173a:	78a3      	ldrb	r3, [r4, #2]
 808173c:	4118      	asrs	r0, r3
 808173e:	b280      	uxth	r0, r0
 8081740:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 8081742:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 8081744:	bd10      	pop	{r4, pc}

08081746 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 8081746:	f000 b9a7 	b.w	8081a98 <HAL_Pin_Map>

0808174a <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 808174a:	b430      	push	{r4, r5}
 808174c:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 808174e:	681b      	ldr	r3, [r3, #0]
 8081750:	681d      	ldr	r5, [r3, #0]
 8081752:	4613      	mov	r3, r2
 8081754:	46ac      	mov	ip, r5
 8081756:	460a      	mov	r2, r1
 8081758:	4601      	mov	r1, r0
 808175a:	4620      	mov	r0, r4
}
 808175c:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 808175e:	4760      	bx	ip

08081760 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081760:	b40e      	push	{r1, r2, r3}
 8081762:	b500      	push	{lr}
 8081764:	b08c      	sub	sp, #48	; 0x30
 8081766:	aa0d      	add	r2, sp, #52	; 0x34
 8081768:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 808176c:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808176e:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8081772:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081774:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081776:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081778:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808177a:	aa04      	add	r2, sp, #16
 808177c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 808177e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081780:	f000 fac2 	bl	8081d08 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8081784:	b00c      	add	sp, #48	; 0x30
 8081786:	f85d eb04 	ldr.w	lr, [sp], #4
 808178a:	b003      	add	sp, #12
 808178c:	4770      	bx	lr
	...

08081790 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8081790:	b570      	push	{r4, r5, r6, lr}
 8081792:	460c      	mov	r4, r1
 8081794:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8081796:	494c      	ldr	r1, [pc, #304]	; (80818c8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8081798:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 808179a:	4615      	mov	r5, r2
 808179c:	461e      	mov	r6, r3
	String typeStr;
 808179e:	f000 fcb1 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 80817a2:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 80817a6:	d035      	beq.n	8081814 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 80817a8:	dc13      	bgt.n	80817d2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 80817aa:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 80817ae:	d028      	beq.n	8081802 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 80817b0:	dc05      	bgt.n	80817be <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 80817b2:	b324      	cbz	r4, 80817fe <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 80817b4:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 80817b8:	d136      	bne.n	8081828 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 80817ba:	4944      	ldr	r1, [pc, #272]	; (80818cc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 80817bc:	e022      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 80817be:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 80817c2:	d023      	beq.n	808180c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 80817c4:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 80817c8:	d022      	beq.n	8081810 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 80817ca:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 80817ce:	d12b      	bne.n	8081828 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 80817d0:	e017      	b.n	8081802 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 80817d2:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 80817d6:	d021      	beq.n	808181c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 80817d8:	dc07      	bgt.n	80817ea <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 80817da:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 80817de:	d01b      	beq.n	8081818 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 80817e0:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 80817e4:	d120      	bne.n	8081828 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 80817e6:	493a      	ldr	r1, [pc, #232]	; (80818d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80817e8:	e00c      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 80817ea:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 80817ee:	d017      	beq.n	8081820 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 80817f0:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 80817f4:	d016      	beq.n	8081824 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 80817f6:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 80817fa:	d115      	bne.n	8081828 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 80817fc:	e010      	b.n	8081820 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 80817fe:	4935      	ldr	r1, [pc, #212]	; (80818d4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8081800:	e000      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 8081802:	4935      	ldr	r1, [pc, #212]	; (80818d8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8081804:	a804      	add	r0, sp, #16
 8081806:	f000 fccf 	bl	80821a8 <_ZN6StringaSEPKc>
		break;
 808180a:	e019      	b.n	8081840 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 808180c:	4933      	ldr	r1, [pc, #204]	; (80818dc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 808180e:	e7f9      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 8081810:	4933      	ldr	r1, [pc, #204]	; (80818e0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8081812:	e7f7      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8081814:	4933      	ldr	r1, [pc, #204]	; (80818e4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8081816:	e7f5      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8081818:	4933      	ldr	r1, [pc, #204]	; (80818e8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 808181a:	e7f3      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 808181c:	4933      	ldr	r1, [pc, #204]	; (80818ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808181e:	e7f1      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 8081820:	4933      	ldr	r1, [pc, #204]	; (80818f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 8081822:	e7ef      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8081824:	4933      	ldr	r1, [pc, #204]	; (80818f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8081826:	e7ed      	b.n	8081804 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8081828:	4622      	mov	r2, r4
 808182a:	4933      	ldr	r1, [pc, #204]	; (80818f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 808182c:	a808      	add	r0, sp, #32
 808182e:	f000 fd43 	bl	80822b8 <_ZN6String6formatEPKcz>
 8081832:	a908      	add	r1, sp, #32
 8081834:	a804      	add	r0, sp, #16
 8081836:	f000 fcaf 	bl	8082198 <_ZN6StringaSEOS_>
 808183a:	a808      	add	r0, sp, #32
 808183c:	f000 fc1b 	bl	8082076 <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8081840:	4633      	mov	r3, r6
 8081842:	9a04      	ldr	r2, [sp, #16]
 8081844:	492d      	ldr	r1, [pc, #180]	; (80818fc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8081846:	482e      	ldr	r0, [pc, #184]	; (8081900 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8081848:	f7ff ff8a 	bl	8081760 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 808184c:	491e      	ldr	r1, [pc, #120]	; (80818c8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 808184e:	a808      	add	r0, sp, #32
 8081850:	f000 fc58 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8081854:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8081856:	1b63      	subs	r3, r4, r5
 8081858:	429e      	cmp	r6, r3
 808185a:	dd27      	ble.n	80818ac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 808185c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8081860:	2b0a      	cmp	r3, #10
 8081862:	d10c      	bne.n	808187e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8081864:	4927      	ldr	r1, [pc, #156]	; (8081904 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8081866:	a808      	add	r0, sp, #32
 8081868:	f000 fcd9 	bl	808221e <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 808186c:	9908      	ldr	r1, [sp, #32]
 808186e:	4824      	ldr	r0, [pc, #144]	; (8081900 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8081870:	f7ff ff76 	bl	8081760 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8081874:	4914      	ldr	r1, [pc, #80]	; (80818c8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8081876:	a808      	add	r0, sp, #32
 8081878:	f000 fc96 	bl	80821a8 <_ZN6StringaSEPKc>
 808187c:	e7eb      	b.n	8081856 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 808187e:	2b0d      	cmp	r3, #13
 8081880:	d101      	bne.n	8081886 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 8081882:	4921      	ldr	r1, [pc, #132]	; (8081908 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8081884:	e009      	b.n	808189a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8081886:	f1a3 0220 	sub.w	r2, r3, #32
 808188a:	2a5e      	cmp	r2, #94	; 0x5e
 808188c:	d909      	bls.n	80818a2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 808188e:	210a      	movs	r1, #10
 8081890:	4a1e      	ldr	r2, [pc, #120]	; (808190c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8081892:	a801      	add	r0, sp, #4
 8081894:	f000 fb44 	bl	8081f20 <snprintf>
			out.concat(hex);
 8081898:	a901      	add	r1, sp, #4
 808189a:	a808      	add	r0, sp, #32
 808189c:	f000 fcbf 	bl	808221e <_ZN6String6concatEPKc>
 80818a0:	e7d9      	b.n	8081856 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 80818a2:	4619      	mov	r1, r3
 80818a4:	a808      	add	r0, sp, #32
 80818a6:	f000 fcc9 	bl	808223c <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 80818aa:	e7d4      	b.n	8081856 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 80818ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80818ae:	b11b      	cbz	r3, 80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 80818b0:	9908      	ldr	r1, [sp, #32]
 80818b2:	4813      	ldr	r0, [pc, #76]	; (8081900 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 80818b4:	f7ff ff54 	bl	8081760 <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 80818b8:	a808      	add	r0, sp, #32
 80818ba:	f000 fbdc 	bl	8082076 <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 80818be:	a804      	add	r0, sp, #16
 80818c0:	f000 fbd9 	bl	8082076 <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 80818c4:	b00c      	add	sp, #48	; 0x30
 80818c6:	bd70      	pop	{r4, r5, r6, pc}
 80818c8:	08087954 	.word	0x08087954
 80818cc:	0808758d 	.word	0x0808758d
 80818d0:	080875d6 	.word	0x080875d6
 80818d4:	08087580 	.word	0x08087580
 80818d8:	08087595 	.word	0x08087595
 80818dc:	080875a0 	.word	0x080875a0
 80818e0:	080875ad 	.word	0x080875ad
 80818e4:	080875bc 	.word	0x080875bc
 80818e8:	080875cc 	.word	0x080875cc
 80818ec:	080875e4 	.word	0x080875e4
 80818f0:	080875f0 	.word	0x080875f0
 80818f4:	080875fa 	.word	0x080875fa
 80818f8:	08087607 	.word	0x08087607
 80818fc:	08087611 	.word	0x08087611
 8081900:	20000410 	.word	0x20000410
 8081904:	08087632 	.word	0x08087632
 8081908:	08087635 	.word	0x08087635
 808190c:	08087638 	.word	0x08087638

08081910 <_ZN30CellularHelperRSSIQualResponse11postProcessEv>:

	return result;
}


void CellularHelperRSSIQualResponse::postProcess() {
 8081910:	b510      	push	{r4, lr}
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
 8081912:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8081916:	f100 022c 	add.w	r2, r0, #44	; 0x2c

	return result;
}


void CellularHelperRSSIQualResponse::postProcess() {
 808191a:	4604      	mov	r4, r0
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
 808191c:	4909      	ldr	r1, [pc, #36]	; (8081944 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x34>)
 808191e:	69c0      	ldr	r0, [r0, #28]
 8081920:	f000 faee 	bl	8081f00 <sscanf>
 8081924:	2802      	cmp	r0, #2
 8081926:	d109      	bne.n	808193c <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2c>
		// 0: -113 dBm or less
		// 1: -111 dBm
		// 2..30: from -109 to -53 dBm with 2 dBm steps
		// 31: -51 dBm or greater
		// 99: not known or not detectable or currently not available
		if (rssi < 99) {
 8081928:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808192a:	2b62      	cmp	r3, #98	; 0x62
			rssi = -113 + (rssi * 2);
 808192c:	bfda      	itte	le
 808192e:	005b      	lslle	r3, r3, #1
 8081930:	3b71      	suble	r3, #113	; 0x71
		}
		else {
			rssi = 0;
 8081932:	2300      	movgt	r3, #0
 8081934:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		resp = RESP_OK;
 8081936:	f06f 0301 	mvn.w	r3, #1
 808193a:	e001      	b.n	8081940 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x30>
	}
	else {
		// Failed to parse result
		resp = RESP_ERROR;
 808193c:	f06f 0302 	mvn.w	r3, #2
 8081940:	6063      	str	r3, [r4, #4]
 8081942:	bd10      	pop	{r4, pc}
 8081944:	0808763f 	.word	0x0808763f

08081948 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 8081948:	b538      	push	{r3, r4, r5, lr}
 808194a:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 808194c:	f06f 0302 	mvn.w	r3, #2
 8081950:	6043      	str	r3, [r0, #4]
 8081952:	2300      	movs	r3, #0
 8081954:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8081956:	4d07      	ldr	r5, [pc, #28]	; (8081974 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 8081958:	4b07      	ldr	r3, [pc, #28]	; (8081978 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 808195a:	4629      	mov	r1, r5
 808195c:	f840 3b0c 	str.w	r3, [r0], #12
 8081960:	f000 fbd0 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 8081964:	4629      	mov	r1, r5
 8081966:	f104 001c 	add.w	r0, r4, #28
 808196a:	f000 fbcb 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
 808196e:	4620      	mov	r0, r4
 8081970:	bd38      	pop	{r3, r4, r5, pc}
 8081972:	bf00      	nop
 8081974:	08087954 	.word	0x08087954
 8081978:	08087970 	.word	0x08087970

0808197c <_ZNK19CellularHelperClass11getRSSIQualEv>:
/**
 * Get the RSSI and qual values for the receiving cell site.
 *
 * The qual value is always 99 for me on the G350 (2G).
 */
CellularHelperRSSIQualResponse CellularHelperClass::getRSSIQual() const {
 808197c:	b510      	push	{r4, lr}
 808197e:	4604      	mov	r4, r0
 * Note that for 2G, qual is not available and 99 is always returned.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperRSSIQualResponse : public CellularHelperPlusStringResponse {
 8081980:	f7ff ffe2 	bl	8081948 <_ZN32CellularHelperPlusStringResponseC1Ev>
 8081984:	4b0c      	ldr	r3, [pc, #48]	; (80819b8 <_ZNK19CellularHelperClass11getRSSIQualEv+0x3c>)
	CellularHelperRSSIQualResponse resp;
	resp.command = "CSQ";
 8081986:	490d      	ldr	r1, [pc, #52]	; (80819bc <_ZNK19CellularHelperClass11getRSSIQualEv+0x40>)
 8081988:	6023      	str	r3, [r4, #0]
 808198a:	2300      	movs	r3, #0
 808198c:	62e3      	str	r3, [r4, #44]	; 0x2c
 808198e:	6323      	str	r3, [r4, #48]	; 0x30
 8081990:	f104 000c 	add.w	r0, r4, #12
 8081994:	f000 fc08 	bl	80821a8 <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8081998:	4b09      	ldr	r3, [pc, #36]	; (80819c0 <_ZNK19CellularHelperClass11getRSSIQualEv+0x44>)
 808199a:	f242 7210 	movw	r2, #10000	; 0x2710
 808199e:	4621      	mov	r1, r4
 80819a0:	4808      	ldr	r0, [pc, #32]	; (80819c4 <_ZNK19CellularHelperClass11getRSSIQualEv+0x48>)
 80819a2:	f000 f979 	bl	8081c98 <cellular_command>

	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CSQ\r\n");
 80819a6:	6060      	str	r0, [r4, #4]

	if (resp.resp == RESP_OK) {
 80819a8:	3002      	adds	r0, #2
 80819aa:	d102      	bne.n	80819b2 <_ZNK19CellularHelperClass11getRSSIQualEv+0x36>
		resp.postProcess();
 80819ac:	4620      	mov	r0, r4
 80819ae:	f7ff ffaf 	bl	8081910 <_ZN30CellularHelperRSSIQualResponse11postProcessEv>
	}

	return resp;
}
 80819b2:	4620      	mov	r0, r4
 80819b4:	bd10      	pop	{r4, pc}
 80819b6:	bf00      	nop
 80819b8:	0808757c 	.word	0x0808757c
 80819bc:	08087877 	.word	0x08087877
 80819c0:	0808787b 	.word	0x0808787b
 80819c4:	0808174b 	.word	0x0808174b

080819c8 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 80819c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80819cc:	460d      	mov	r5, r1
 80819ce:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 80819d0:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 80819d2:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 80819d4:	68ab      	ldr	r3, [r5, #8]
 80819d6:	4628      	mov	r0, r5
 80819d8:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 80819da:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 80819de:	4634      	mov	r4, r6
 80819e0:	f000 fb67 	bl	80820b2 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 80819e4:	1ba3      	subs	r3, r4, r6
 80819e6:	429f      	cmp	r7, r3
 80819e8:	dd0d      	ble.n	8081a06 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 80819ea:	f1b8 0f00 	cmp.w	r8, #0
 80819ee:	d004      	beq.n	80819fa <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 80819f0:	7823      	ldrb	r3, [r4, #0]
 80819f2:	2b0d      	cmp	r3, #13
 80819f4:	d005      	beq.n	8081a02 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 80819f6:	2b0a      	cmp	r3, #10
 80819f8:	d003      	beq.n	8081a02 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 80819fa:	7821      	ldrb	r1, [r4, #0]
 80819fc:	4628      	mov	r0, r5
 80819fe:	f000 fc1d 	bl	808223c <_ZN6String6concatEc>
 8081a02:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 8081a04:	e7ee      	b.n	80819e4 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 8081a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08081a0c <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8081a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8081a0e:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8081a12:	b08b      	sub	sp, #44	; 0x2c
 8081a14:	4606      	mov	r6, r0
 8081a16:	460d      	mov	r5, r1
 8081a18:	4617      	mov	r7, r2
 8081a1a:	461c      	mov	r4, r3
	if (enableDebug) {
 8081a1c:	f1be 0f00 	cmp.w	lr, #0
 8081a20:	d001      	beq.n	8081a26 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 8081a22:	f7ff feb5 	bl	8081790 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 8081a26:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8081a2a:	d12a      	bne.n	8081a82 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 8081a2c:	1c60      	adds	r0, r4, #1
 8081a2e:	f000 fa47 	bl	8081ec0 <malloc>
		if (copy) {
 8081a32:	4605      	mov	r5, r0
 8081a34:	b328      	cbz	r0, 8081a82 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8081a36:	4622      	mov	r2, r4
 8081a38:	4639      	mov	r1, r7
 8081a3a:	f003 faa6 	bl	8084f8a <strncpy>
			copy[len] = 0;
 8081a3e:	2300      	movs	r3, #0
 8081a40:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8081a42:	68f3      	ldr	r3, [r6, #12]
 8081a44:	4a11      	ldr	r2, [pc, #68]	; (8081a8c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 8081a46:	2120      	movs	r1, #32
 8081a48:	a802      	add	r0, sp, #8
 8081a4a:	f000 fa69 	bl	8081f20 <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 8081a4e:	a902      	add	r1, sp, #8
 8081a50:	4628      	mov	r0, r5
 8081a52:	f003 faad 	bl	8084fb0 <strstr>
			if (start) {
 8081a56:	4604      	mov	r4, r0
 8081a58:	b180      	cbz	r0, 8081a7c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 8081a5a:	a802      	add	r0, sp, #8
 8081a5c:	f003 fa78 	bl	8084f50 <strlen>
 8081a60:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 8081a62:	210d      	movs	r1, #13
 8081a64:	4620      	mov	r0, r4
 8081a66:	f002 fd23 	bl	80844b0 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 8081a6a:	2301      	movs	r3, #1
 8081a6c:	9300      	str	r3, [sp, #0]
 8081a6e:	4622      	mov	r2, r4
 8081a70:	1b03      	subs	r3, r0, r4
 8081a72:	f106 011c 	add.w	r1, r6, #28
 8081a76:	4806      	ldr	r0, [pc, #24]	; (8081a90 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8081a78:	f7ff ffa6 	bl	80819c8 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 8081a7c:	4628      	mov	r0, r5
 8081a7e:	f000 fa27 	bl	8081ed0 <free>
		}
	}
	return WAIT;
}
 8081a82:	f04f 30ff 	mov.w	r0, #4294967295
 8081a86:	b00b      	add	sp, #44	; 0x2c
 8081a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081a8a:	bf00      	nop
 8081a8c:	08087961 	.word	0x08087961
 8081a90:	20000408 	.word	0x20000408

08081a94 <_GLOBAL__sub_I_CellularHelper>:
 8081a94:	f000 b800 	b.w	8081a98 <HAL_Pin_Map>

08081a98 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8081a98:	b508      	push	{r3, lr}
 8081a9a:	4b02      	ldr	r3, [pc, #8]	; (8081aa4 <HAL_Pin_Map+0xc>)
 8081a9c:	681b      	ldr	r3, [r3, #0]
 8081a9e:	681b      	ldr	r3, [r3, #0]
 8081aa0:	9301      	str	r3, [sp, #4]
 8081aa2:	bd08      	pop	{r3, pc}
 8081aa4:	080401b0 	.word	0x080401b0

08081aa8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081aa8:	b508      	push	{r3, lr}
 8081aaa:	4b02      	ldr	r3, [pc, #8]	; (8081ab4 <HAL_Pin_Mode+0xc>)
 8081aac:	681b      	ldr	r3, [r3, #0]
 8081aae:	689b      	ldr	r3, [r3, #8]
 8081ab0:	9301      	str	r3, [sp, #4]
 8081ab2:	bd08      	pop	{r3, pc}
 8081ab4:	080401b0 	.word	0x080401b0

08081ab8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081ab8:	b508      	push	{r3, lr}
 8081aba:	4b02      	ldr	r3, [pc, #8]	; (8081ac4 <HAL_Get_Pin_Mode+0xc>)
 8081abc:	681b      	ldr	r3, [r3, #0]
 8081abe:	68db      	ldr	r3, [r3, #12]
 8081ac0:	9301      	str	r3, [sp, #4]
 8081ac2:	bd08      	pop	{r3, pc}
 8081ac4:	080401b0 	.word	0x080401b0

08081ac8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081ac8:	b508      	push	{r3, lr}
 8081aca:	4b02      	ldr	r3, [pc, #8]	; (8081ad4 <HAL_GPIO_Write+0xc>)
 8081acc:	681b      	ldr	r3, [r3, #0]
 8081ace:	691b      	ldr	r3, [r3, #16]
 8081ad0:	9301      	str	r3, [sp, #4]
 8081ad2:	bd08      	pop	{r3, pc}
 8081ad4:	080401b0 	.word	0x080401b0

08081ad8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081ad8:	b508      	push	{r3, lr}
 8081ada:	4b02      	ldr	r3, [pc, #8]	; (8081ae4 <HAL_SPI_Init+0xc>)
 8081adc:	681b      	ldr	r3, [r3, #0]
 8081ade:	69db      	ldr	r3, [r3, #28]
 8081ae0:	9301      	str	r3, [sp, #4]
 8081ae2:	bd08      	pop	{r3, pc}
 8081ae4:	080401b4 	.word	0x080401b4

08081ae8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081ae8:	b508      	push	{r3, lr}
 8081aea:	4b02      	ldr	r3, [pc, #8]	; (8081af4 <HAL_SPI_Is_Enabled+0xc>)
 8081aec:	681b      	ldr	r3, [r3, #0]
 8081aee:	6a1b      	ldr	r3, [r3, #32]
 8081af0:	9301      	str	r3, [sp, #4]
 8081af2:	bd08      	pop	{r3, pc}
 8081af4:	080401b4 	.word	0x080401b4

08081af8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081af8:	b508      	push	{r3, lr}
 8081afa:	4b02      	ldr	r3, [pc, #8]	; (8081b04 <HAL_RNG_GetRandomNumber+0xc>)
 8081afc:	681b      	ldr	r3, [r3, #0]
 8081afe:	685b      	ldr	r3, [r3, #4]
 8081b00:	9301      	str	r3, [sp, #4]
 8081b02:	bd08      	pop	{r3, pc}
 8081b04:	0804019c 	.word	0x0804019c

08081b08 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081b08:	b508      	push	{r3, lr}
 8081b0a:	4b02      	ldr	r3, [pc, #8]	; (8081b14 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081b0c:	681b      	ldr	r3, [r3, #0]
 8081b0e:	695b      	ldr	r3, [r3, #20]
 8081b10:	9301      	str	r3, [sp, #4]
 8081b12:	bd08      	pop	{r3, pc}
 8081b14:	0804019c 	.word	0x0804019c

08081b18 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081b18:	b508      	push	{r3, lr}
 8081b1a:	4b02      	ldr	r3, [pc, #8]	; (8081b24 <HAL_RTC_Get_UnixTime+0xc>)
 8081b1c:	681b      	ldr	r3, [r3, #0]
 8081b1e:	69db      	ldr	r3, [r3, #28]
 8081b20:	9301      	str	r3, [sp, #4]
 8081b22:	bd08      	pop	{r3, pc}
 8081b24:	0804019c 	.word	0x0804019c

08081b28 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081b28:	b508      	push	{r3, lr}
 8081b2a:	4b02      	ldr	r3, [pc, #8]	; (8081b34 <HAL_RTC_Time_Is_Valid+0xc>)
 8081b2c:	681b      	ldr	r3, [r3, #0]
 8081b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081b30:	9301      	str	r3, [sp, #4]
 8081b32:	bd08      	pop	{r3, pc}
 8081b34:	0804019c 	.word	0x0804019c

08081b38 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081b38:	b508      	push	{r3, lr}
 8081b3a:	4b02      	ldr	r3, [pc, #8]	; (8081b44 <HAL_Core_System_Reset_Ex+0xc>)
 8081b3c:	681b      	ldr	r3, [r3, #0]
 8081b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8081b40:	9301      	str	r3, [sp, #4]
 8081b42:	bd08      	pop	{r3, pc}
 8081b44:	080401b8 	.word	0x080401b8

08081b48 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081b48:	b508      	push	{r3, lr}
 8081b4a:	4b02      	ldr	r3, [pc, #8]	; (8081b54 <os_mutex_create+0xc>)
 8081b4c:	681b      	ldr	r3, [r3, #0]
 8081b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081b50:	9301      	str	r3, [sp, #4]
 8081b52:	bd08      	pop	{r3, pc}
 8081b54:	080401d0 	.word	0x080401d0

08081b58 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081b58:	b508      	push	{r3, lr}
 8081b5a:	4b02      	ldr	r3, [pc, #8]	; (8081b64 <HAL_USART_Init+0xc>)
 8081b5c:	681b      	ldr	r3, [r3, #0]
 8081b5e:	699b      	ldr	r3, [r3, #24]
 8081b60:	9301      	str	r3, [sp, #4]
 8081b62:	bd08      	pop	{r3, pc}
 8081b64:	080401c4 	.word	0x080401c4

08081b68 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081b68:	b508      	push	{r3, lr}
 8081b6a:	4b02      	ldr	r3, [pc, #8]	; (8081b74 <HAL_USART_Write_Data+0xc>)
 8081b6c:	681b      	ldr	r3, [r3, #0]
 8081b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081b70:	9301      	str	r3, [sp, #4]
 8081b72:	bd08      	pop	{r3, pc}
 8081b74:	080401c4 	.word	0x080401c4

08081b78 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081b78:	b508      	push	{r3, lr}
 8081b7a:	4b02      	ldr	r3, [pc, #8]	; (8081b84 <HAL_USART_Available_Data+0xc>)
 8081b7c:	681b      	ldr	r3, [r3, #0]
 8081b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081b80:	9301      	str	r3, [sp, #4]
 8081b82:	bd08      	pop	{r3, pc}
 8081b84:	080401c4 	.word	0x080401c4

08081b88 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081b88:	b508      	push	{r3, lr}
 8081b8a:	4b02      	ldr	r3, [pc, #8]	; (8081b94 <HAL_USART_Read_Data+0xc>)
 8081b8c:	681b      	ldr	r3, [r3, #0]
 8081b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081b90:	9301      	str	r3, [sp, #4]
 8081b92:	bd08      	pop	{r3, pc}
 8081b94:	080401c4 	.word	0x080401c4

08081b98 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081b98:	b508      	push	{r3, lr}
 8081b9a:	4b02      	ldr	r3, [pc, #8]	; (8081ba4 <HAL_USART_Peek_Data+0xc>)
 8081b9c:	681b      	ldr	r3, [r3, #0]
 8081b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ba0:	9301      	str	r3, [sp, #4]
 8081ba2:	bd08      	pop	{r3, pc}
 8081ba4:	080401c4 	.word	0x080401c4

08081ba8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081ba8:	b508      	push	{r3, lr}
 8081baa:	4b02      	ldr	r3, [pc, #8]	; (8081bb4 <HAL_USART_Flush_Data+0xc>)
 8081bac:	681b      	ldr	r3, [r3, #0]
 8081bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081bb0:	9301      	str	r3, [sp, #4]
 8081bb2:	bd08      	pop	{r3, pc}
 8081bb4:	080401c4 	.word	0x080401c4

08081bb8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081bb8:	b508      	push	{r3, lr}
 8081bba:	4b02      	ldr	r3, [pc, #8]	; (8081bc4 <HAL_USART_Is_Enabled+0xc>)
 8081bbc:	681b      	ldr	r3, [r3, #0]
 8081bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081bc0:	9301      	str	r3, [sp, #4]
 8081bc2:	bd08      	pop	{r3, pc}
 8081bc4:	080401c4 	.word	0x080401c4

08081bc8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081bc8:	b508      	push	{r3, lr}
 8081bca:	4b02      	ldr	r3, [pc, #8]	; (8081bd4 <HAL_USART_Available_Data_For_Write+0xc>)
 8081bcc:	681b      	ldr	r3, [r3, #0]
 8081bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081bd0:	9301      	str	r3, [sp, #4]
 8081bd2:	bd08      	pop	{r3, pc}
 8081bd4:	080401c4 	.word	0x080401c4

08081bd8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8081bd8:	b508      	push	{r3, lr}
 8081bda:	4b02      	ldr	r3, [pc, #8]	; (8081be4 <HAL_I2C_Begin+0xc>)
 8081bdc:	681b      	ldr	r3, [r3, #0]
 8081bde:	68db      	ldr	r3, [r3, #12]
 8081be0:	9301      	str	r3, [sp, #4]
 8081be2:	bd08      	pop	{r3, pc}
 8081be4:	080401ac 	.word	0x080401ac

08081be8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8081be8:	b508      	push	{r3, lr}
 8081bea:	4b02      	ldr	r3, [pc, #8]	; (8081bf4 <HAL_I2C_Request_Data+0xc>)
 8081bec:	681b      	ldr	r3, [r3, #0]
 8081bee:	695b      	ldr	r3, [r3, #20]
 8081bf0:	9301      	str	r3, [sp, #4]
 8081bf2:	bd08      	pop	{r3, pc}
 8081bf4:	080401ac 	.word	0x080401ac

08081bf8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8081bf8:	b508      	push	{r3, lr}
 8081bfa:	4b02      	ldr	r3, [pc, #8]	; (8081c04 <HAL_I2C_Begin_Transmission+0xc>)
 8081bfc:	681b      	ldr	r3, [r3, #0]
 8081bfe:	699b      	ldr	r3, [r3, #24]
 8081c00:	9301      	str	r3, [sp, #4]
 8081c02:	bd08      	pop	{r3, pc}
 8081c04:	080401ac 	.word	0x080401ac

08081c08 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081c08:	b508      	push	{r3, lr}
 8081c0a:	4b02      	ldr	r3, [pc, #8]	; (8081c14 <HAL_I2C_End_Transmission+0xc>)
 8081c0c:	681b      	ldr	r3, [r3, #0]
 8081c0e:	69db      	ldr	r3, [r3, #28]
 8081c10:	9301      	str	r3, [sp, #4]
 8081c12:	bd08      	pop	{r3, pc}
 8081c14:	080401ac 	.word	0x080401ac

08081c18 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081c18:	b508      	push	{r3, lr}
 8081c1a:	4b02      	ldr	r3, [pc, #8]	; (8081c24 <HAL_I2C_Write_Data+0xc>)
 8081c1c:	681b      	ldr	r3, [r3, #0]
 8081c1e:	6a1b      	ldr	r3, [r3, #32]
 8081c20:	9301      	str	r3, [sp, #4]
 8081c22:	bd08      	pop	{r3, pc}
 8081c24:	080401ac 	.word	0x080401ac

08081c28 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081c28:	b508      	push	{r3, lr}
 8081c2a:	4b02      	ldr	r3, [pc, #8]	; (8081c34 <HAL_I2C_Available_Data+0xc>)
 8081c2c:	681b      	ldr	r3, [r3, #0]
 8081c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081c30:	9301      	str	r3, [sp, #4]
 8081c32:	bd08      	pop	{r3, pc}
 8081c34:	080401ac 	.word	0x080401ac

08081c38 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081c38:	b508      	push	{r3, lr}
 8081c3a:	4b02      	ldr	r3, [pc, #8]	; (8081c44 <HAL_I2C_Read_Data+0xc>)
 8081c3c:	681b      	ldr	r3, [r3, #0]
 8081c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081c40:	9301      	str	r3, [sp, #4]
 8081c42:	bd08      	pop	{r3, pc}
 8081c44:	080401ac 	.word	0x080401ac

08081c48 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081c48:	b508      	push	{r3, lr}
 8081c4a:	4b02      	ldr	r3, [pc, #8]	; (8081c54 <HAL_I2C_Peek_Data+0xc>)
 8081c4c:	681b      	ldr	r3, [r3, #0]
 8081c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081c50:	9301      	str	r3, [sp, #4]
 8081c52:	bd08      	pop	{r3, pc}
 8081c54:	080401ac 	.word	0x080401ac

08081c58 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081c58:	b508      	push	{r3, lr}
 8081c5a:	4b02      	ldr	r3, [pc, #8]	; (8081c64 <HAL_I2C_Flush_Data+0xc>)
 8081c5c:	681b      	ldr	r3, [r3, #0]
 8081c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081c60:	9301      	str	r3, [sp, #4]
 8081c62:	bd08      	pop	{r3, pc}
 8081c64:	080401ac 	.word	0x080401ac

08081c68 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081c68:	b508      	push	{r3, lr}
 8081c6a:	4b02      	ldr	r3, [pc, #8]	; (8081c74 <HAL_I2C_Is_Enabled+0xc>)
 8081c6c:	681b      	ldr	r3, [r3, #0]
 8081c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081c70:	9301      	str	r3, [sp, #4]
 8081c72:	bd08      	pop	{r3, pc}
 8081c74:	080401ac 	.word	0x080401ac

08081c78 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081c78:	b508      	push	{r3, lr}
 8081c7a:	4b02      	ldr	r3, [pc, #8]	; (8081c84 <HAL_I2C_Init+0xc>)
 8081c7c:	681b      	ldr	r3, [r3, #0]
 8081c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081c80:	9301      	str	r3, [sp, #4]
 8081c82:	bd08      	pop	{r3, pc}
 8081c84:	080401ac 	.word	0x080401ac

08081c88 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081c88:	b508      	push	{r3, lr}
 8081c8a:	4b02      	ldr	r3, [pc, #8]	; (8081c94 <inet_gethostbyname+0xc>)
 8081c8c:	681b      	ldr	r3, [r3, #0]
 8081c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081c90:	9301      	str	r3, [sp, #4]
 8081c92:	bd08      	pop	{r3, pc}
 8081c94:	08060020 	.word	0x08060020

08081c98 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081c98:	b508      	push	{r3, lr}
 8081c9a:	4b02      	ldr	r3, [pc, #8]	; (8081ca4 <cellular_command+0xc>)
 8081c9c:	681b      	ldr	r3, [r3, #0]
 8081c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081ca0:	9301      	str	r3, [sp, #4]
 8081ca2:	bd08      	pop	{r3, pc}
 8081ca4:	08060020 	.word	0x08060020

08081ca8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081ca8:	b508      	push	{r3, lr}
 8081caa:	4b02      	ldr	r3, [pc, #8]	; (8081cb4 <HAL_USB_USART_Init+0xc>)
 8081cac:	681b      	ldr	r3, [r3, #0]
 8081cae:	681b      	ldr	r3, [r3, #0]
 8081cb0:	9301      	str	r3, [sp, #4]
 8081cb2:	bd08      	pop	{r3, pc}
 8081cb4:	0806001c 	.word	0x0806001c

08081cb8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081cb8:	b508      	push	{r3, lr}
 8081cba:	4b02      	ldr	r3, [pc, #8]	; (8081cc4 <HAL_USB_USART_Available_Data+0xc>)
 8081cbc:	681b      	ldr	r3, [r3, #0]
 8081cbe:	691b      	ldr	r3, [r3, #16]
 8081cc0:	9301      	str	r3, [sp, #4]
 8081cc2:	bd08      	pop	{r3, pc}
 8081cc4:	0806001c 	.word	0x0806001c

08081cc8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081cc8:	b508      	push	{r3, lr}
 8081cca:	4b02      	ldr	r3, [pc, #8]	; (8081cd4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081ccc:	681b      	ldr	r3, [r3, #0]
 8081cce:	695b      	ldr	r3, [r3, #20]
 8081cd0:	9301      	str	r3, [sp, #4]
 8081cd2:	bd08      	pop	{r3, pc}
 8081cd4:	0806001c 	.word	0x0806001c

08081cd8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081cd8:	b508      	push	{r3, lr}
 8081cda:	4b02      	ldr	r3, [pc, #8]	; (8081ce4 <HAL_USB_USART_Receive_Data+0xc>)
 8081cdc:	681b      	ldr	r3, [r3, #0]
 8081cde:	699b      	ldr	r3, [r3, #24]
 8081ce0:	9301      	str	r3, [sp, #4]
 8081ce2:	bd08      	pop	{r3, pc}
 8081ce4:	0806001c 	.word	0x0806001c

08081ce8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081ce8:	b508      	push	{r3, lr}
 8081cea:	4b02      	ldr	r3, [pc, #8]	; (8081cf4 <HAL_USB_USART_Send_Data+0xc>)
 8081cec:	681b      	ldr	r3, [r3, #0]
 8081cee:	69db      	ldr	r3, [r3, #28]
 8081cf0:	9301      	str	r3, [sp, #4]
 8081cf2:	bd08      	pop	{r3, pc}
 8081cf4:	0806001c 	.word	0x0806001c

08081cf8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081cf8:	b508      	push	{r3, lr}
 8081cfa:	4b02      	ldr	r3, [pc, #8]	; (8081d04 <HAL_USB_USART_Flush_Data+0xc>)
 8081cfc:	681b      	ldr	r3, [r3, #0]
 8081cfe:	6a1b      	ldr	r3, [r3, #32]
 8081d00:	9301      	str	r3, [sp, #4]
 8081d02:	bd08      	pop	{r3, pc}
 8081d04:	0806001c 	.word	0x0806001c

08081d08 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081d08:	b508      	push	{r3, lr}
 8081d0a:	4b02      	ldr	r3, [pc, #8]	; (8081d14 <log_message_v+0xc>)
 8081d0c:	681b      	ldr	r3, [r3, #0]
 8081d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d10:	9301      	str	r3, [sp, #4]
 8081d12:	bd08      	pop	{r3, pc}
 8081d14:	080201a0 	.word	0x080201a0

08081d18 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081d18:	b508      	push	{r3, lr}
 8081d1a:	4b02      	ldr	r3, [pc, #8]	; (8081d24 <system_mode+0xc>)
 8081d1c:	681b      	ldr	r3, [r3, #0]
 8081d1e:	681b      	ldr	r3, [r3, #0]
 8081d20:	9301      	str	r3, [sp, #4]
 8081d22:	bd08      	pop	{r3, pc}
 8081d24:	080401a4 	.word	0x080401a4

08081d28 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081d28:	b508      	push	{r3, lr}
 8081d2a:	4b02      	ldr	r3, [pc, #8]	; (8081d34 <set_system_mode+0xc>)
 8081d2c:	681b      	ldr	r3, [r3, #0]
 8081d2e:	685b      	ldr	r3, [r3, #4]
 8081d30:	9301      	str	r3, [sp, #4]
 8081d32:	bd08      	pop	{r3, pc}
 8081d34:	080401a4 	.word	0x080401a4

08081d38 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081d38:	b508      	push	{r3, lr}
 8081d3a:	4b02      	ldr	r3, [pc, #8]	; (8081d44 <system_delay_ms+0xc>)
 8081d3c:	681b      	ldr	r3, [r3, #0]
 8081d3e:	695b      	ldr	r3, [r3, #20]
 8081d40:	9301      	str	r3, [sp, #4]
 8081d42:	bd08      	pop	{r3, pc}
 8081d44:	080401a4 	.word	0x080401a4

08081d48 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081d48:	b508      	push	{r3, lr}
 8081d4a:	4b02      	ldr	r3, [pc, #8]	; (8081d54 <application_thread_current+0xc>)
 8081d4c:	681b      	ldr	r3, [r3, #0]
 8081d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081d50:	9301      	str	r3, [sp, #4]
 8081d52:	bd08      	pop	{r3, pc}
 8081d54:	080401a4 	.word	0x080401a4

08081d58 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081d58:	b508      	push	{r3, lr}
 8081d5a:	4b02      	ldr	r3, [pc, #8]	; (8081d64 <application_thread_invoke+0xc>)
 8081d5c:	681b      	ldr	r3, [r3, #0]
 8081d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d60:	9301      	str	r3, [sp, #4]
 8081d62:	bd08      	pop	{r3, pc}
 8081d64:	080401a4 	.word	0x080401a4

08081d68 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081d68:	b508      	push	{r3, lr}
 8081d6a:	4b02      	ldr	r3, [pc, #8]	; (8081d74 <system_thread_get_state+0xc>)
 8081d6c:	681b      	ldr	r3, [r3, #0]
 8081d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081d70:	9301      	str	r3, [sp, #4]
 8081d72:	bd08      	pop	{r3, pc}
 8081d74:	080401a4 	.word	0x080401a4

08081d78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081d78:	b508      	push	{r3, lr}
 8081d7a:	4b03      	ldr	r3, [pc, #12]	; (8081d88 <system_ctrl_set_app_request_handler+0x10>)
 8081d7c:	681b      	ldr	r3, [r3, #0]
 8081d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081d82:	9301      	str	r3, [sp, #4]
 8081d84:	bd08      	pop	{r3, pc}
 8081d86:	0000      	.short	0x0000
 8081d88:	080401a4 	.word	0x080401a4

08081d8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081d8c:	b508      	push	{r3, lr}
 8081d8e:	4b03      	ldr	r3, [pc, #12]	; (8081d9c <system_ctrl_set_result+0x10>)
 8081d90:	681b      	ldr	r3, [r3, #0]
 8081d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081d96:	9301      	str	r3, [sp, #4]
 8081d98:	bd08      	pop	{r3, pc}
 8081d9a:	0000      	.short	0x0000
 8081d9c:	080401a4 	.word	0x080401a4

08081da0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081da0:	b508      	push	{r3, lr}
 8081da2:	4b02      	ldr	r3, [pc, #8]	; (8081dac <network_connect+0xc>)
 8081da4:	681b      	ldr	r3, [r3, #0]
 8081da6:	685b      	ldr	r3, [r3, #4]
 8081da8:	9301      	str	r3, [sp, #4]
 8081daa:	bd08      	pop	{r3, pc}
 8081dac:	080401c8 	.word	0x080401c8

08081db0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081db0:	b508      	push	{r3, lr}
 8081db2:	4b02      	ldr	r3, [pc, #8]	; (8081dbc <network_connecting+0xc>)
 8081db4:	681b      	ldr	r3, [r3, #0]
 8081db6:	689b      	ldr	r3, [r3, #8]
 8081db8:	9301      	str	r3, [sp, #4]
 8081dba:	bd08      	pop	{r3, pc}
 8081dbc:	080401c8 	.word	0x080401c8

08081dc0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081dc0:	b508      	push	{r3, lr}
 8081dc2:	4b02      	ldr	r3, [pc, #8]	; (8081dcc <network_disconnect+0xc>)
 8081dc4:	681b      	ldr	r3, [r3, #0]
 8081dc6:	68db      	ldr	r3, [r3, #12]
 8081dc8:	9301      	str	r3, [sp, #4]
 8081dca:	bd08      	pop	{r3, pc}
 8081dcc:	080401c8 	.word	0x080401c8

08081dd0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081dd0:	b508      	push	{r3, lr}
 8081dd2:	4b02      	ldr	r3, [pc, #8]	; (8081ddc <network_ready+0xc>)
 8081dd4:	681b      	ldr	r3, [r3, #0]
 8081dd6:	691b      	ldr	r3, [r3, #16]
 8081dd8:	9301      	str	r3, [sp, #4]
 8081dda:	bd08      	pop	{r3, pc}
 8081ddc:	080401c8 	.word	0x080401c8

08081de0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081de0:	b508      	push	{r3, lr}
 8081de2:	4b02      	ldr	r3, [pc, #8]	; (8081dec <network_on+0xc>)
 8081de4:	681b      	ldr	r3, [r3, #0]
 8081de6:	695b      	ldr	r3, [r3, #20]
 8081de8:	9301      	str	r3, [sp, #4]
 8081dea:	bd08      	pop	{r3, pc}
 8081dec:	080401c8 	.word	0x080401c8

08081df0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081df0:	b508      	push	{r3, lr}
 8081df2:	4b02      	ldr	r3, [pc, #8]	; (8081dfc <network_off+0xc>)
 8081df4:	681b      	ldr	r3, [r3, #0]
 8081df6:	699b      	ldr	r3, [r3, #24]
 8081df8:	9301      	str	r3, [sp, #4]
 8081dfa:	bd08      	pop	{r3, pc}
 8081dfc:	080401c8 	.word	0x080401c8

08081e00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081e00:	b508      	push	{r3, lr}
 8081e02:	4b02      	ldr	r3, [pc, #8]	; (8081e0c <network_listen+0xc>)
 8081e04:	681b      	ldr	r3, [r3, #0]
 8081e06:	69db      	ldr	r3, [r3, #28]
 8081e08:	9301      	str	r3, [sp, #4]
 8081e0a:	bd08      	pop	{r3, pc}
 8081e0c:	080401c8 	.word	0x080401c8

08081e10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081e10:	b508      	push	{r3, lr}
 8081e12:	4b02      	ldr	r3, [pc, #8]	; (8081e1c <network_listening+0xc>)
 8081e14:	681b      	ldr	r3, [r3, #0]
 8081e16:	6a1b      	ldr	r3, [r3, #32]
 8081e18:	9301      	str	r3, [sp, #4]
 8081e1a:	bd08      	pop	{r3, pc}
 8081e1c:	080401c8 	.word	0x080401c8

08081e20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081e20:	b508      	push	{r3, lr}
 8081e22:	4b02      	ldr	r3, [pc, #8]	; (8081e2c <network_set_listen_timeout+0xc>)
 8081e24:	681b      	ldr	r3, [r3, #0]
 8081e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081e28:	9301      	str	r3, [sp, #4]
 8081e2a:	bd08      	pop	{r3, pc}
 8081e2c:	080401c8 	.word	0x080401c8

08081e30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081e30:	b508      	push	{r3, lr}
 8081e32:	4b02      	ldr	r3, [pc, #8]	; (8081e3c <network_get_listen_timeout+0xc>)
 8081e34:	681b      	ldr	r3, [r3, #0]
 8081e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081e38:	9301      	str	r3, [sp, #4]
 8081e3a:	bd08      	pop	{r3, pc}
 8081e3c:	080401c8 	.word	0x080401c8

08081e40 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081e40:	b508      	push	{r3, lr}
 8081e42:	4b02      	ldr	r3, [pc, #8]	; (8081e4c <spark_function+0xc>)
 8081e44:	681b      	ldr	r3, [r3, #0]
 8081e46:	685b      	ldr	r3, [r3, #4]
 8081e48:	9301      	str	r3, [sp, #4]
 8081e4a:	bd08      	pop	{r3, pc}
 8081e4c:	080401cc 	.word	0x080401cc

08081e50 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081e50:	b508      	push	{r3, lr}
 8081e52:	4b02      	ldr	r3, [pc, #8]	; (8081e5c <spark_process+0xc>)
 8081e54:	681b      	ldr	r3, [r3, #0]
 8081e56:	689b      	ldr	r3, [r3, #8]
 8081e58:	9301      	str	r3, [sp, #4]
 8081e5a:	bd08      	pop	{r3, pc}
 8081e5c:	080401cc 	.word	0x080401cc

08081e60 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081e60:	b508      	push	{r3, lr}
 8081e62:	4b02      	ldr	r3, [pc, #8]	; (8081e6c <spark_cloud_flag_connect+0xc>)
 8081e64:	681b      	ldr	r3, [r3, #0]
 8081e66:	68db      	ldr	r3, [r3, #12]
 8081e68:	9301      	str	r3, [sp, #4]
 8081e6a:	bd08      	pop	{r3, pc}
 8081e6c:	080401cc 	.word	0x080401cc

08081e70 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081e70:	b508      	push	{r3, lr}
 8081e72:	4b02      	ldr	r3, [pc, #8]	; (8081e7c <spark_cloud_flag_connected+0xc>)
 8081e74:	681b      	ldr	r3, [r3, #0]
 8081e76:	695b      	ldr	r3, [r3, #20]
 8081e78:	9301      	str	r3, [sp, #4]
 8081e7a:	bd08      	pop	{r3, pc}
 8081e7c:	080401cc 	.word	0x080401cc

08081e80 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081e80:	b508      	push	{r3, lr}
 8081e82:	4b02      	ldr	r3, [pc, #8]	; (8081e8c <spark_send_event+0xc>)
 8081e84:	681b      	ldr	r3, [r3, #0]
 8081e86:	6a1b      	ldr	r3, [r3, #32]
 8081e88:	9301      	str	r3, [sp, #4]
 8081e8a:	bd08      	pop	{r3, pc}
 8081e8c:	080401cc 	.word	0x080401cc

08081e90 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081e90:	b508      	push	{r3, lr}
 8081e92:	4b02      	ldr	r3, [pc, #8]	; (8081e9c <spark_subscribe+0xc>)
 8081e94:	681b      	ldr	r3, [r3, #0]
 8081e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081e98:	9301      	str	r3, [sp, #4]
 8081e9a:	bd08      	pop	{r3, pc}
 8081e9c:	080401cc 	.word	0x080401cc

08081ea0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081ea0:	b508      	push	{r3, lr}
 8081ea2:	4b02      	ldr	r3, [pc, #8]	; (8081eac <spark_sync_time_pending+0xc>)
 8081ea4:	681b      	ldr	r3, [r3, #0]
 8081ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ea8:	9301      	str	r3, [sp, #4]
 8081eaa:	bd08      	pop	{r3, pc}
 8081eac:	080401cc 	.word	0x080401cc

08081eb0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081eb0:	b508      	push	{r3, lr}
 8081eb2:	4b02      	ldr	r3, [pc, #8]	; (8081ebc <spark_set_random_seed_from_cloud_handler+0xc>)
 8081eb4:	681b      	ldr	r3, [r3, #0]
 8081eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081eb8:	9301      	str	r3, [sp, #4]
 8081eba:	bd08      	pop	{r3, pc}
 8081ebc:	080401cc 	.word	0x080401cc

08081ec0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081ec0:	b508      	push	{r3, lr}
 8081ec2:	4b02      	ldr	r3, [pc, #8]	; (8081ecc <malloc+0xc>)
 8081ec4:	681b      	ldr	r3, [r3, #0]
 8081ec6:	681b      	ldr	r3, [r3, #0]
 8081ec8:	9301      	str	r3, [sp, #4]
 8081eca:	bd08      	pop	{r3, pc}
 8081ecc:	080401a0 	.word	0x080401a0

08081ed0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081ed0:	b508      	push	{r3, lr}
 8081ed2:	4b02      	ldr	r3, [pc, #8]	; (8081edc <free+0xc>)
 8081ed4:	681b      	ldr	r3, [r3, #0]
 8081ed6:	685b      	ldr	r3, [r3, #4]
 8081ed8:	9301      	str	r3, [sp, #4]
 8081eda:	bd08      	pop	{r3, pc}
 8081edc:	080401a0 	.word	0x080401a0

08081ee0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081ee0:	b508      	push	{r3, lr}
 8081ee2:	4b02      	ldr	r3, [pc, #8]	; (8081eec <realloc+0xc>)
 8081ee4:	681b      	ldr	r3, [r3, #0]
 8081ee6:	689b      	ldr	r3, [r3, #8]
 8081ee8:	9301      	str	r3, [sp, #4]
 8081eea:	bd08      	pop	{r3, pc}
 8081eec:	080401a0 	.word	0x080401a0

08081ef0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081ef0:	b508      	push	{r3, lr}
 8081ef2:	4b02      	ldr	r3, [pc, #8]	; (8081efc <siprintf+0xc>)
 8081ef4:	681b      	ldr	r3, [r3, #0]
 8081ef6:	691b      	ldr	r3, [r3, #16]
 8081ef8:	9301      	str	r3, [sp, #4]
 8081efa:	bd08      	pop	{r3, pc}
 8081efc:	080401a0 	.word	0x080401a0

08081f00 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 8081f00:	b508      	push	{r3, lr}
 8081f02:	4b02      	ldr	r3, [pc, #8]	; (8081f0c <sscanf+0xc>)
 8081f04:	681b      	ldr	r3, [r3, #0]
 8081f06:	695b      	ldr	r3, [r3, #20]
 8081f08:	9301      	str	r3, [sp, #4]
 8081f0a:	bd08      	pop	{r3, pc}
 8081f0c:	080401a0 	.word	0x080401a0

08081f10 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081f10:	b508      	push	{r3, lr}
 8081f12:	4b02      	ldr	r3, [pc, #8]	; (8081f1c <siscanf+0xc>)
 8081f14:	681b      	ldr	r3, [r3, #0]
 8081f16:	699b      	ldr	r3, [r3, #24]
 8081f18:	9301      	str	r3, [sp, #4]
 8081f1a:	bd08      	pop	{r3, pc}
 8081f1c:	080401a0 	.word	0x080401a0

08081f20 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081f20:	b508      	push	{r3, lr}
 8081f22:	4b02      	ldr	r3, [pc, #8]	; (8081f2c <snprintf+0xc>)
 8081f24:	681b      	ldr	r3, [r3, #0]
 8081f26:	69db      	ldr	r3, [r3, #28]
 8081f28:	9301      	str	r3, [sp, #4]
 8081f2a:	bd08      	pop	{r3, pc}
 8081f2c:	080401a0 	.word	0x080401a0

08081f30 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8081f30:	b508      	push	{r3, lr}
 8081f32:	4b02      	ldr	r3, [pc, #8]	; (8081f3c <sniprintf+0xc>)
 8081f34:	681b      	ldr	r3, [r3, #0]
 8081f36:	6a1b      	ldr	r3, [r3, #32]
 8081f38:	9301      	str	r3, [sp, #4]
 8081f3a:	bd08      	pop	{r3, pc}
 8081f3c:	080401a0 	.word	0x080401a0

08081f40 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8081f40:	b508      	push	{r3, lr}
 8081f42:	4b02      	ldr	r3, [pc, #8]	; (8081f4c <vsnprintf+0xc>)
 8081f44:	681b      	ldr	r3, [r3, #0]
 8081f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081f48:	9301      	str	r3, [sp, #4]
 8081f4a:	bd08      	pop	{r3, pc}
 8081f4c:	080401a0 	.word	0x080401a0

08081f50 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081f50:	b508      	push	{r3, lr}
 8081f52:	4b02      	ldr	r3, [pc, #8]	; (8081f5c <abort+0xc>)
 8081f54:	681b      	ldr	r3, [r3, #0]
 8081f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081f58:	9301      	str	r3, [sp, #4]
 8081f5a:	bd08      	pop	{r3, pc}
 8081f5c:	080401a0 	.word	0x080401a0

08081f60 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081f60:	b508      	push	{r3, lr}
 8081f62:	4b02      	ldr	r3, [pc, #8]	; (8081f6c <_malloc_r+0xc>)
 8081f64:	681b      	ldr	r3, [r3, #0]
 8081f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081f68:	9301      	str	r3, [sp, #4]
 8081f6a:	bd08      	pop	{r3, pc}
 8081f6c:	080401a0 	.word	0x080401a0

08081f70 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081f70:	4770      	bx	lr

08081f72 <_ZN8SPIClassD0Ev>:
 8081f72:	b510      	push	{r4, lr}
 8081f74:	4604      	mov	r4, r0
 8081f76:	2110      	movs	r1, #16
 8081f78:	f001 fac7 	bl	808350a <_ZdlPvj>
 8081f7c:	4620      	mov	r0, r4
 8081f7e:	bd10      	pop	{r4, pc}

08081f80 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8081f80:	b570      	push	{r4, r5, r6, lr}
 8081f82:	4604      	mov	r4, r0
 8081f84:	460e      	mov	r6, r1
 8081f86:	4b07      	ldr	r3, [pc, #28]	; (8081fa4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8081f88:	2500      	movs	r5, #0
 8081f8a:	6003      	str	r3, [r0, #0]
 8081f8c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081f90:	f7ff fdda 	bl	8081b48 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8081f94:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8081f96:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8081f98:	f7ff fd9e 	bl	8081ad8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081f9c:	60a5      	str	r5, [r4, #8]
}
 8081f9e:	4620      	mov	r0, r4
 8081fa0:	bd70      	pop	{r4, r5, r6, pc}
 8081fa2:	bf00      	nop
 8081fa4:	0808797c 	.word	0x0808797c

08081fa8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8081fa8:	7900      	ldrb	r0, [r0, #4]
 8081faa:	f7ff bd9d 	b.w	8081ae8 <HAL_SPI_Is_Enabled>

08081fae <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8081fae:	4601      	mov	r1, r0
 8081fb0:	2200      	movs	r2, #0
 8081fb2:	208c      	movs	r0, #140	; 0x8c
 8081fb4:	f7ff bdc0 	b.w	8081b38 <HAL_Core_System_Reset_Ex>

08081fb8 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8081fb8:	2000      	movs	r0, #0
 8081fba:	f7ff bff8 	b.w	8081fae <_ZN11SystemClass5resetEm>
	...

08081fc0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081fc4:	4b03      	ldr	r3, [pc, #12]	; (8081fd4 <_GLOBAL__sub_I_System+0x14>)
 8081fc6:	2000      	movs	r0, #0
 8081fc8:	7018      	strb	r0, [r3, #0]
 8081fca:	8058      	strh	r0, [r3, #2]
 8081fcc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081fce:	f7ff beab 	b.w	8081d28 <set_system_mode>
 8081fd2:	bf00      	nop
 8081fd4:	2000040a 	.word	0x2000040a

08081fd8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8081fd8:	b510      	push	{r4, lr}
 8081fda:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8081fdc:	f002 ffb8 	bl	8084f50 <strlen>
 8081fe0:	3801      	subs	r0, #1
 8081fe2:	1823      	adds	r3, r4, r0
 8081fe4:	4620      	mov	r0, r4
	while(i<j){
 8081fe6:	4298      	cmp	r0, r3
 8081fe8:	d206      	bcs.n	8081ff8 <_Z11str_reversePc+0x20>
		c = *i;
 8081fea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8081fec:	7819      	ldrb	r1, [r3, #0]
 8081fee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8081ff2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8081ff6:	e7f6      	b.n	8081fe6 <_Z11str_reversePc+0xe>
 8081ff8:	bd10      	pop	{r4, pc}

08081ffa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8081ffa:	b570      	push	{r4, r5, r6, lr}
 8081ffc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8081ffe:	1e91      	subs	r1, r2, #2
 8082000:	2922      	cmp	r1, #34	; 0x22
 8082002:	d820      	bhi.n	8082046 <ultoa+0x4c>
 8082004:	4625      	mov	r5, r4
 8082006:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8082008:	b910      	cbnz	r0, 8082010 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808200a:	4423      	add	r3, r4
            *ptr++ = '0';
 808200c:	2230      	movs	r2, #48	; 0x30
 808200e:	e00e      	b.n	808202e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8082010:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8082014:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8082018:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808201a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 808201c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8082020:	bf94      	ite	ls
 8082022:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8082024:	3157      	addhi	r1, #87	; 0x57
 8082026:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 808202a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808202c:	e7eb      	b.n	8082006 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808202e:	4299      	cmp	r1, r3
 8082030:	d202      	bcs.n	8082038 <ultoa+0x3e>
            *ptr++ = '0';
 8082032:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8082036:	e7fa      	b.n	808202e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8082038:	2300      	movs	r3, #0
	str_reverse(buffer);
 808203a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 808203c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 808203e:	f7ff ffcb 	bl	8081fd8 <_Z11str_reversePc>
	return buffer;
 8082042:	4620      	mov	r0, r4
 8082044:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8082046:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8082048:	bd70      	pop	{r4, r5, r6, pc}

0808204a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808204a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808204c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808204e:	460c      	mov	r4, r1
 8082050:	4615      	mov	r5, r2
	if(a<0){
 8082052:	da0b      	bge.n	808206c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082058:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808205c:	bf14      	ite	ne
 808205e:	4258      	negne	r0, r3
 8082060:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8082062:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8082064:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8082066:	462a      	mov	r2, r5
 8082068:	4419      	add	r1, r3
 808206a:	e000      	b.n	808206e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 808206c:	2301      	movs	r3, #1
 808206e:	f7ff ffc4 	bl	8081ffa <ultoa>
	}
	return buffer;
}
 8082072:	4620      	mov	r0, r4
 8082074:	bd38      	pop	{r3, r4, r5, pc}

08082076 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082076:	b510      	push	{r4, lr}
 8082078:	4604      	mov	r4, r0
{
	free(buffer);
 808207a:	6800      	ldr	r0, [r0, #0]
 808207c:	f7ff ff28 	bl	8081ed0 <free>
}
 8082080:	4620      	mov	r0, r4
 8082082:	bd10      	pop	{r4, pc}

08082084 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082084:	b510      	push	{r4, lr}
 8082086:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082088:	6800      	ldr	r0, [r0, #0]
 808208a:	b108      	cbz	r0, 8082090 <_ZN6String10invalidateEv+0xc>
 808208c:	f7ff ff20 	bl	8081ed0 <free>
	buffer = NULL;
 8082090:	2300      	movs	r3, #0
 8082092:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082094:	60a3      	str	r3, [r4, #8]
 8082096:	6063      	str	r3, [r4, #4]
 8082098:	bd10      	pop	{r4, pc}

0808209a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808209a:	b538      	push	{r3, r4, r5, lr}
 808209c:	4604      	mov	r4, r0
 808209e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80820a0:	6800      	ldr	r0, [r0, #0]
 80820a2:	3101      	adds	r1, #1
 80820a4:	f7ff ff1c 	bl	8081ee0 <realloc>
	if (newbuffer) {
 80820a8:	b110      	cbz	r0, 80820b0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80820aa:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80820ae:	2001      	movs	r0, #1
	}
	return 0;
}
 80820b0:	bd38      	pop	{r3, r4, r5, pc}

080820b2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80820b2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80820b4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80820b6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80820b8:	b113      	cbz	r3, 80820c0 <_ZN6String7reserveEj+0xe>
 80820ba:	6843      	ldr	r3, [r0, #4]
 80820bc:	428b      	cmp	r3, r1
 80820be:	d207      	bcs.n	80820d0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80820c0:	4620      	mov	r0, r4
 80820c2:	f7ff ffea 	bl	808209a <_ZN6String12changeBufferEj>
 80820c6:	b120      	cbz	r0, 80820d2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80820c8:	68a3      	ldr	r3, [r4, #8]
 80820ca:	b90b      	cbnz	r3, 80820d0 <_ZN6String7reserveEj+0x1e>
 80820cc:	6822      	ldr	r2, [r4, #0]
 80820ce:	7013      	strb	r3, [r2, #0]
 80820d0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80820d2:	bd10      	pop	{r4, pc}

080820d4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80820d4:	b570      	push	{r4, r5, r6, lr}
 80820d6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80820d8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80820da:	4604      	mov	r4, r0
 80820dc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80820de:	f7ff ffe8 	bl	80820b2 <_ZN6String7reserveEj>
 80820e2:	b918      	cbnz	r0, 80820ec <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80820e4:	4620      	mov	r0, r4
 80820e6:	f7ff ffcd 	bl	8082084 <_ZN6String10invalidateEv>
		return *this;
 80820ea:	e009      	b.n	8082100 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80820ec:	462a      	mov	r2, r5
 80820ee:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80820f0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80820f2:	6820      	ldr	r0, [r4, #0]
 80820f4:	f002 f9a0 	bl	8084438 <memcpy>
	buffer[len] = 0;
 80820f8:	6822      	ldr	r2, [r4, #0]
 80820fa:	68a3      	ldr	r3, [r4, #8]
 80820fc:	2100      	movs	r1, #0
 80820fe:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8082100:	4620      	mov	r0, r4
 8082102:	bd70      	pop	{r4, r5, r6, pc}

08082104 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082104:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082106:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082108:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808210a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808210c:	6043      	str	r3, [r0, #4]
	len = 0;
 808210e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082110:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8082112:	460d      	mov	r5, r1
 8082114:	b139      	cbz	r1, 8082126 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082116:	4608      	mov	r0, r1
 8082118:	f002 ff1a 	bl	8084f50 <strlen>
 808211c:	4629      	mov	r1, r5
 808211e:	4602      	mov	r2, r0
 8082120:	4620      	mov	r0, r4
 8082122:	f7ff ffd7 	bl	80820d4 <_ZN6String4copyEPKcj>
}
 8082126:	4620      	mov	r0, r4
 8082128:	bd38      	pop	{r3, r4, r5, pc}

0808212a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808212a:	b538      	push	{r3, r4, r5, lr}
 808212c:	4605      	mov	r5, r0
	if (buffer) {
 808212e:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8082130:	460c      	mov	r4, r1
	if (buffer) {
 8082132:	b160      	cbz	r0, 808214e <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8082134:	686a      	ldr	r2, [r5, #4]
 8082136:	688b      	ldr	r3, [r1, #8]
 8082138:	429a      	cmp	r2, r3
 808213a:	d306      	bcc.n	808214a <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808213c:	6809      	ldr	r1, [r1, #0]
 808213e:	f002 f9cf 	bl	80844e0 <strcpy>
			len = rhs.len;
 8082142:	68a3      	ldr	r3, [r4, #8]
 8082144:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8082146:	2300      	movs	r3, #0
 8082148:	e00a      	b.n	8082160 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 808214a:	f7ff fec1 	bl	8081ed0 <free>
		}
	}
	buffer = rhs.buffer;
 808214e:	6823      	ldr	r3, [r4, #0]
 8082150:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8082152:	6863      	ldr	r3, [r4, #4]
 8082154:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8082156:	68a3      	ldr	r3, [r4, #8]
 8082158:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808215a:	2300      	movs	r3, #0
 808215c:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 808215e:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8082160:	60a3      	str	r3, [r4, #8]
 8082162:	bd38      	pop	{r3, r4, r5, pc}

08082164 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082164:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8082166:	b510      	push	{r4, lr}
 8082168:	460b      	mov	r3, r1
 808216a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808216c:	d007      	beq.n	808217e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808216e:	6809      	ldr	r1, [r1, #0]
 8082170:	b119      	cbz	r1, 808217a <_ZN6StringaSERKS_+0x16>
 8082172:	689a      	ldr	r2, [r3, #8]
 8082174:	f7ff ffae 	bl	80820d4 <_ZN6String4copyEPKcj>
 8082178:	e001      	b.n	808217e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808217a:	f7ff ff83 	bl	8082084 <_ZN6String10invalidateEv>

	return *this;
}
 808217e:	4620      	mov	r0, r4
 8082180:	bd10      	pop	{r4, pc}

08082182 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8082182:	b510      	push	{r4, lr}
 8082184:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082186:	2300      	movs	r3, #0
 8082188:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808218a:	6043      	str	r3, [r0, #4]
	len = 0;
 808218c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808218e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082190:	f7ff ffe8 	bl	8082164 <_ZN6StringaSERKS_>
}
 8082194:	4620      	mov	r0, r4
 8082196:	bd10      	pop	{r4, pc}

08082198 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8082198:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 808219a:	b510      	push	{r4, lr}
 808219c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808219e:	d001      	beq.n	80821a4 <_ZN6StringaSEOS_+0xc>
 80821a0:	f7ff ffc3 	bl	808212a <_ZN6String4moveERS_>
	return *this;
}
 80821a4:	4620      	mov	r0, r4
 80821a6:	bd10      	pop	{r4, pc}

080821a8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80821a8:	b538      	push	{r3, r4, r5, lr}
 80821aa:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80821ac:	460c      	mov	r4, r1
 80821ae:	b141      	cbz	r1, 80821c2 <_ZN6StringaSEPKc+0x1a>
 80821b0:	4608      	mov	r0, r1
 80821b2:	f002 fecd 	bl	8084f50 <strlen>
 80821b6:	4621      	mov	r1, r4
 80821b8:	4602      	mov	r2, r0
 80821ba:	4628      	mov	r0, r5
 80821bc:	f7ff ff8a 	bl	80820d4 <_ZN6String4copyEPKcj>
 80821c0:	e001      	b.n	80821c6 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80821c2:	f7ff ff5f 	bl	8082084 <_ZN6String10invalidateEv>

	return *this;
}
 80821c6:	4628      	mov	r0, r5
 80821c8:	bd38      	pop	{r3, r4, r5, pc}

080821ca <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80821ca:	b510      	push	{r4, lr}
 80821cc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80821ce:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80821d0:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80821d2:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80821d4:	6063      	str	r3, [r4, #4]
	len = 0;
 80821d6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80821d8:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80821da:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80821dc:	a901      	add	r1, sp, #4
 80821de:	f7ff ff34 	bl	808204a <itoa>
	*this = buf;
 80821e2:	a901      	add	r1, sp, #4
 80821e4:	4620      	mov	r0, r4
 80821e6:	f7ff ffdf 	bl	80821a8 <_ZN6StringaSEPKc>
}
 80821ea:	4620      	mov	r0, r4
 80821ec:	b00a      	add	sp, #40	; 0x28
 80821ee:	bd10      	pop	{r4, pc}

080821f0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80821f0:	b570      	push	{r4, r5, r6, lr}
 80821f2:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80821f4:	460e      	mov	r6, r1
 80821f6:	b909      	cbnz	r1, 80821fc <_ZN6String6concatEPKcj+0xc>
 80821f8:	2000      	movs	r0, #0
 80821fa:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80821fc:	b16a      	cbz	r2, 808221a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80821fe:	6883      	ldr	r3, [r0, #8]
 8082200:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8082202:	4629      	mov	r1, r5
 8082204:	f7ff ff55 	bl	80820b2 <_ZN6String7reserveEj>
 8082208:	2800      	cmp	r0, #0
 808220a:	d0f5      	beq.n	80821f8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808220c:	6820      	ldr	r0, [r4, #0]
 808220e:	68a3      	ldr	r3, [r4, #8]
 8082210:	4631      	mov	r1, r6
 8082212:	4418      	add	r0, r3
 8082214:	f002 f964 	bl	80844e0 <strcpy>
	len = newlen;
 8082218:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 808221a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808221c:	bd70      	pop	{r4, r5, r6, pc}

0808221e <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 808221e:	b538      	push	{r3, r4, r5, lr}
 8082220:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8082222:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8082224:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 8082226:	b141      	cbz	r1, 808223a <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8082228:	f002 fe92 	bl	8084f50 <strlen>
 808222c:	4621      	mov	r1, r4
 808222e:	4602      	mov	r2, r0
 8082230:	4628      	mov	r0, r5
}
 8082232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 8082236:	f7ff bfdb 	b.w	80821f0 <_ZN6String6concatEPKcj>
}
 808223a:	bd38      	pop	{r3, r4, r5, pc}

0808223c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 808223c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808223e:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 8082240:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 8082244:	2201      	movs	r2, #1
 8082246:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8082248:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808224c:	f7ff ffd0 	bl	80821f0 <_ZN6String6concatEPKcj>
}
 8082250:	b003      	add	sp, #12
 8082252:	f85d fb04 	ldr.w	pc, [sp], #4

08082256 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8082256:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8082258:	688a      	ldr	r2, [r1, #8]
 808225a:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808225c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808225e:	f7ff ffc7 	bl	80821f0 <_ZN6String6concatEPKcj>
 8082262:	b910      	cbnz	r0, 808226a <_ZplRK15StringSumHelperRK6String+0x14>
 8082264:	4620      	mov	r0, r4
 8082266:	f7ff ff0d 	bl	8082084 <_ZN6String10invalidateEv>
	return a;
}
 808226a:	4620      	mov	r0, r4
 808226c:	bd10      	pop	{r4, pc}

0808226e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808226e:	b538      	push	{r3, r4, r5, lr}
 8082270:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8082272:	460d      	mov	r5, r1
 8082274:	b141      	cbz	r1, 8082288 <_ZplRK15StringSumHelperPKc+0x1a>
 8082276:	4608      	mov	r0, r1
 8082278:	f002 fe6a 	bl	8084f50 <strlen>
 808227c:	4629      	mov	r1, r5
 808227e:	4602      	mov	r2, r0
 8082280:	4620      	mov	r0, r4
 8082282:	f7ff ffb5 	bl	80821f0 <_ZN6String6concatEPKcj>
 8082286:	b910      	cbnz	r0, 808228e <_ZplRK15StringSumHelperPKc+0x20>
 8082288:	4620      	mov	r0, r4
 808228a:	f7ff fefb 	bl	8082084 <_ZN6String10invalidateEv>
	return a;
}
 808228e:	4620      	mov	r0, r4
 8082290:	bd38      	pop	{r3, r4, r5, pc}

08082292 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082292:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082294:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082296:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082298:	b912      	cbnz	r2, 80822a0 <_ZNK6String6equalsEPKc+0xe>
 808229a:	b919      	cbnz	r1, 80822a4 <_ZNK6String6equalsEPKc+0x12>
 808229c:	2001      	movs	r0, #1
 808229e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80822a0:	b911      	cbnz	r1, 80822a8 <_ZNK6String6equalsEPKc+0x16>
 80822a2:	6803      	ldr	r3, [r0, #0]
 80822a4:	7818      	ldrb	r0, [r3, #0]
 80822a6:	e002      	b.n	80822ae <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80822a8:	6800      	ldr	r0, [r0, #0]
 80822aa:	f002 f90f 	bl	80844cc <strcmp>
 80822ae:	fab0 f080 	clz	r0, r0
 80822b2:	0940      	lsrs	r0, r0, #5
}
 80822b4:	bd08      	pop	{r3, pc}
	...

080822b8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80822b8:	b40e      	push	{r1, r2, r3}
 80822ba:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80822bc:	ac09      	add	r4, sp, #36	; 0x24
 80822be:	f854 7b04 	ldr.w	r7, [r4], #4
 80822c2:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80822c4:	4623      	mov	r3, r4
 80822c6:	463a      	mov	r2, r7
 80822c8:	2105      	movs	r1, #5
 80822ca:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80822cc:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80822ce:	f7ff fe37 	bl	8081f40 <vsnprintf>
 80822d2:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80822d4:	490b      	ldr	r1, [pc, #44]	; (8082304 <_ZN6String6formatEPKcz+0x4c>)
 80822d6:	4628      	mov	r0, r5
 80822d8:	f7ff ff14 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80822dc:	4631      	mov	r1, r6
 80822de:	4628      	mov	r0, r5
 80822e0:	f7ff fee7 	bl	80820b2 <_ZN6String7reserveEj>
    if (result.buffer) {
 80822e4:	6828      	ldr	r0, [r5, #0]
 80822e6:	b130      	cbz	r0, 80822f6 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80822e8:	4623      	mov	r3, r4
 80822ea:	463a      	mov	r2, r7
 80822ec:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80822ee:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80822f0:	f7ff fe26 	bl	8081f40 <vsnprintf>
        va_end(marker);
        result.len = n;
 80822f4:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80822f6:	4628      	mov	r0, r5
 80822f8:	b004      	add	sp, #16
 80822fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80822fe:	b003      	add	sp, #12
 8082300:	4770      	bx	lr
 8082302:	bf00      	nop
 8082304:	08087954 	.word	0x08087954

08082308 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808230a:	4606      	mov	r6, r0
 808230c:	460d      	mov	r5, r1
 808230e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082310:	2400      	movs	r4, #0
  while (size--) {
 8082312:	42bd      	cmp	r5, r7
 8082314:	d00c      	beq.n	8082330 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082316:	6833      	ldr	r3, [r6, #0]
 8082318:	f815 1b01 	ldrb.w	r1, [r5], #1
 808231c:	689b      	ldr	r3, [r3, #8]
 808231e:	4630      	mov	r0, r6
 8082320:	4798      	blx	r3
     if (chunk>=0)
 8082322:	2800      	cmp	r0, #0
 8082324:	db01      	blt.n	808232a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082326:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082328:	e7f3      	b.n	8082312 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808232a:	2c00      	cmp	r4, #0
 808232c:	bf08      	it	eq
 808232e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082330:	4620      	mov	r0, r4
 8082332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082334 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082334:	b570      	push	{r4, r5, r6, lr}
 8082336:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082338:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808233a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 808233c:	b149      	cbz	r1, 8082352 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808233e:	f002 fe07 	bl	8084f50 <strlen>
 8082342:	682b      	ldr	r3, [r5, #0]
 8082344:	4602      	mov	r2, r0
 8082346:	4621      	mov	r1, r4
 8082348:	4628      	mov	r0, r5
    }
 808234a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808234e:	68db      	ldr	r3, [r3, #12]
 8082350:	4718      	bx	r3
    }
 8082352:	bd70      	pop	{r4, r5, r6, pc}

08082354 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082354:	6803      	ldr	r3, [r0, #0]
 8082356:	689b      	ldr	r3, [r3, #8]
 8082358:	4718      	bx	r3

0808235a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808235a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808235c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808235e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082360:	f7ff fff8 	bl	8082354 <_ZN5Print5printEc>
  n += print('\n');
 8082364:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8082366:	4604      	mov	r4, r0
  n += print('\n');
 8082368:	4628      	mov	r0, r5
 808236a:	f7ff fff3 	bl	8082354 <_ZN5Print5printEc>
  return n;
}
 808236e:	4420      	add	r0, r4
 8082370:	bd38      	pop	{r3, r4, r5, pc}

08082372 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082372:	2a01      	cmp	r2, #1
 8082374:	bf98      	it	ls
 8082376:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082378:	b530      	push	{r4, r5, lr}
 808237a:	460b      	mov	r3, r1
 808237c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808237e:	2100      	movs	r1, #0
 8082380:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082384:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082388:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808238c:	fb05 3312 	mls	r3, r5, r2, r3
 8082390:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082392:	2b09      	cmp	r3, #9
 8082394:	bf94      	ite	ls
 8082396:	3330      	addls	r3, #48	; 0x30
 8082398:	3337      	addhi	r3, #55	; 0x37
 808239a:	b2db      	uxtb	r3, r3
 808239c:	4621      	mov	r1, r4
 808239e:	f804 3901 	strb.w	r3, [r4], #-1
 80823a2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80823a4:	2d00      	cmp	r5, #0
 80823a6:	d1ef      	bne.n	8082388 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80823a8:	f7ff ffc4 	bl	8082334 <_ZN5Print5writeEPKc>
}
 80823ac:	b00b      	add	sp, #44	; 0x2c
 80823ae:	bd30      	pop	{r4, r5, pc}

080823b0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80823b0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80823b2:	b922      	cbnz	r2, 80823be <_ZN5Print5printEmi+0xe>
 80823b4:	6803      	ldr	r3, [r0, #0]
 80823b6:	b2c9      	uxtb	r1, r1
 80823b8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80823ba:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80823bc:	4718      	bx	r3
  else return printNumber(n, base);
 80823be:	b2d2      	uxtb	r2, r2
}
 80823c0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80823c2:	f7ff bfd6 	b.w	8082372 <_ZN5Print11printNumberEmh>

080823c6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80823c6:	f7ff bff3 	b.w	80823b0 <_ZN5Print5printEmi>

080823ca <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80823ca:	b40c      	push	{r2, r3}
 80823cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80823d0:	b087      	sub	sp, #28
 80823d2:	af00      	add	r7, sp, #0
 80823d4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80823d8:	f854 9b04 	ldr.w	r9, [r4], #4
 80823dc:	4605      	mov	r5, r0
 80823de:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80823e0:	4623      	mov	r3, r4
 80823e2:	464a      	mov	r2, r9
 80823e4:	2114      	movs	r1, #20
 80823e6:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80823e8:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80823ea:	f7ff fda9 	bl	8081f40 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80823ee:	2813      	cmp	r0, #19
 80823f0:	d805      	bhi.n	80823fe <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80823f2:	1d39      	adds	r1, r7, #4
 80823f4:	4628      	mov	r0, r5
 80823f6:	f7ff ff9d 	bl	8082334 <_ZN5Print5writeEPKc>
 80823fa:	4604      	mov	r4, r0
 80823fc:	e013      	b.n	8082426 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80823fe:	f100 0308 	add.w	r3, r0, #8
 8082402:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8082406:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8082408:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808240c:	1c41      	adds	r1, r0, #1
 808240e:	4623      	mov	r3, r4
 8082410:	464a      	mov	r2, r9
 8082412:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8082414:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8082416:	f7ff fd93 	bl	8081f40 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808241a:	4669      	mov	r1, sp
 808241c:	4628      	mov	r0, r5
 808241e:	f7ff ff89 	bl	8082334 <_ZN5Print5writeEPKc>
 8082422:	4604      	mov	r4, r0
 8082424:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8082426:	b11e      	cbz	r6, 8082430 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8082428:	4628      	mov	r0, r5
 808242a:	f7ff ff96 	bl	808235a <_ZN5Print7printlnEv>
 808242e:	4404      	add	r4, r0
    return n;
}
 8082430:	4620      	mov	r0, r4
 8082432:	371c      	adds	r7, #28
 8082434:	46bd      	mov	sp, r7
 8082436:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808243a:	b002      	add	sp, #8
 808243c:	4770      	bx	lr

0808243e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 808243e:	680b      	ldr	r3, [r1, #0]
 8082440:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8082442:	b113      	cbz	r3, 808244a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8082444:	685a      	ldr	r2, [r3, #4]
 8082446:	3201      	adds	r2, #1
 8082448:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 808244a:	4770      	bx	lr

0808244c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808244c:	4a01      	ldr	r2, [pc, #4]	; (8082454 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808244e:	4b02      	ldr	r3, [pc, #8]	; (8082458 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082450:	601a      	str	r2, [r3, #0]
 8082452:	4770      	bx	lr
 8082454:	080879fa 	.word	0x080879fa
 8082458:	20000410 	.word	0x20000410

0808245c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 808245c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808245e:	2000      	movs	r0, #0
 8082460:	f7ff fd1e 	bl	8081ea0 <spark_sync_time_pending>
 8082464:	b128      	cbz	r0, 8082472 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082466:	f7ff fd03 	bl	8081e70 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808246a:	f080 0001 	eor.w	r0, r0, #1
 808246e:	b2c0      	uxtb	r0, r0
 8082470:	bd08      	pop	{r3, pc}
 8082472:	2001      	movs	r0, #1
    }
 8082474:	bd08      	pop	{r3, pc}
	...

08082478 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082478:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808247a:	4b0e      	ldr	r3, [pc, #56]	; (80824b4 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808247c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808247e:	681b      	ldr	r3, [r3, #0]
 8082480:	a802      	add	r0, sp, #8
 8082482:	4419      	add	r1, r3
 8082484:	4b0c      	ldr	r3, [pc, #48]	; (80824b8 <_ZN9TimeClass7timeStrEl+0x40>)
 8082486:	681b      	ldr	r3, [r3, #0]
 8082488:	4419      	add	r1, r3
 808248a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808248e:	f001 fed7 	bl	8084240 <localtime>
        char* ascstr = asctime(calendar_time);
 8082492:	f001 fe87 	bl	80841a4 <asctime>
 8082496:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8082498:	f002 fd5a 	bl	8084f50 <strlen>
        ascstr[len-1] = 0; // remove final newline
 808249c:	2300      	movs	r3, #0
 808249e:	4428      	add	r0, r5
 80824a0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80824a4:	4629      	mov	r1, r5
 80824a6:	4620      	mov	r0, r4
 80824a8:	f7ff fe2c 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80824ac:	4620      	mov	r0, r4
 80824ae:	b003      	add	sp, #12
 80824b0:	bd30      	pop	{r4, r5, pc}
 80824b2:	bf00      	nop
 80824b4:	20000420 	.word	0x20000420
 80824b8:	2000041c 	.word	0x2000041c

080824bc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80824bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80824c0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 80824c2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80824c4:	4607      	mov	r7, r0
 80824c6:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 80824c8:	4620      	mov	r0, r4
 80824ca:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80824cc:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 80824ce:	f002 f807 	bl	80844e0 <strcpy>
    size_t len = strlen(format_str);
 80824d2:	4620      	mov	r0, r4
 80824d4:	f002 fd3c 	bl	8084f50 <strlen>
 80824d8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80824da:	b925      	cbnz	r5, 80824e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 80824dc:	4924      	ldr	r1, [pc, #144]	; (8082570 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 80824de:	a803      	add	r0, sp, #12
 80824e0:	f001 fffe 	bl	80844e0 <strcpy>
 80824e4:	e013      	b.n	808250e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80824e6:	213c      	movs	r1, #60	; 0x3c
 80824e8:	fb95 f2f1 	sdiv	r2, r5, r1
 80824ec:	2a00      	cmp	r2, #0
 80824ee:	bfb8      	it	lt
 80824f0:	4252      	neglt	r2, r2
 80824f2:	fb92 f3f1 	sdiv	r3, r2, r1
 80824f6:	fb01 2213 	mls	r2, r1, r3, r2
 80824fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80824fe:	9200      	str	r2, [sp, #0]
 8082500:	fb95 f3f3 	sdiv	r3, r5, r3
 8082504:	4a1b      	ldr	r2, [pc, #108]	; (8082574 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 8082506:	2110      	movs	r1, #16
 8082508:	a803      	add	r0, sp, #12
 808250a:	f7ff fd09 	bl	8081f20 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808250e:	4625      	mov	r5, r4
 8082510:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8082512:	f108 3aff 	add.w	sl, r8, #4294967295
 8082516:	45b2      	cmp	sl, r6
 8082518:	d91b      	bls.n	8082552 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808251a:	782b      	ldrb	r3, [r5, #0]
 808251c:	2b25      	cmp	r3, #37	; 0x25
 808251e:	d116      	bne.n	808254e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 8082520:	786b      	ldrb	r3, [r5, #1]
 8082522:	2b7a      	cmp	r3, #122	; 0x7a
 8082524:	d113      	bne.n	808254e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 8082526:	a803      	add	r0, sp, #12
 8082528:	f002 fd12 	bl	8084f50 <strlen>
 808252c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808252e:	4430      	add	r0, r6
 8082530:	ebc6 020a 	rsb	r2, r6, sl
 8082534:	1ca9      	adds	r1, r5, #2
 8082536:	4420      	add	r0, r4
 8082538:	f001 ff7e 	bl	8084438 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808253c:	4642      	mov	r2, r8
 808253e:	a903      	add	r1, sp, #12
 8082540:	4628      	mov	r0, r5
 8082542:	f001 ff79 	bl	8084438 <memcpy>
            len = strlen(format_str);
 8082546:	4620      	mov	r0, r4
 8082548:	f002 fd02 	bl	8084f50 <strlen>
 808254c:	4680      	mov	r8, r0
 808254e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8082550:	e7de      	b.n	8082510 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 8082552:	464b      	mov	r3, r9
 8082554:	4622      	mov	r2, r4
 8082556:	2132      	movs	r1, #50	; 0x32
 8082558:	a807      	add	r0, sp, #28
 808255a:	f002 f845 	bl	80845e8 <strftime>
    return String(buf);
 808255e:	a907      	add	r1, sp, #28
 8082560:	4638      	mov	r0, r7
 8082562:	f7ff fdcf 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8082566:	4638      	mov	r0, r7
 8082568:	b024      	add	sp, #144	; 0x90
 808256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808256e:	bf00      	nop
 8082570:	080880a5 	.word	0x080880a5
 8082574:	08087a54 	.word	0x08087a54

08082578 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 8082578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808257a:	4605      	mov	r5, r0
 808257c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 808257e:	461c      	mov	r4, r3
 8082580:	b913      	cbnz	r3, 8082588 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 8082582:	4b12      	ldr	r3, [pc, #72]	; (80825cc <_ZN9TimeClass6formatElPKc+0x54>)
 8082584:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 8082586:	b12c      	cbz	r4, 8082594 <_ZN9TimeClass6formatElPKc+0x1c>
 8082588:	4b11      	ldr	r3, [pc, #68]	; (80825d0 <_ZN9TimeClass6formatElPKc+0x58>)
 808258a:	4620      	mov	r0, r4
 808258c:	6819      	ldr	r1, [r3, #0]
 808258e:	f001 ff9d 	bl	80844cc <strcmp>
 8082592:	b920      	cbnz	r0, 808259e <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 8082594:	9901      	ldr	r1, [sp, #4]
 8082596:	4628      	mov	r0, r5
 8082598:	f7ff ff6e 	bl	8082478 <_ZN9TimeClass7timeStrEl>
 808259c:	e013      	b.n	80825c6 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 808259e:	4f0d      	ldr	r7, [pc, #52]	; (80825d4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80825a0:	9a01      	ldr	r2, [sp, #4]
 80825a2:	683b      	ldr	r3, [r7, #0]
 80825a4:	4e0c      	ldr	r6, [pc, #48]	; (80825d8 <_ZN9TimeClass6formatElPKc+0x60>)
 80825a6:	441a      	add	r2, r3
 80825a8:	6833      	ldr	r3, [r6, #0]
 80825aa:	a802      	add	r0, sp, #8
 80825ac:	4413      	add	r3, r2
 80825ae:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80825b2:	f001 fe45 	bl	8084240 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80825b6:	683a      	ldr	r2, [r7, #0]
 80825b8:	6833      	ldr	r3, [r6, #0]
 80825ba:	4601      	mov	r1, r0
 80825bc:	4413      	add	r3, r2
 80825be:	4628      	mov	r0, r5
 80825c0:	4622      	mov	r2, r4
 80825c2:	f7ff ff7b 	bl	80824bc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80825c6:	4628      	mov	r0, r5
 80825c8:	b003      	add	sp, #12
 80825ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80825cc:	20000418 	.word	0x20000418
 80825d0:	20000010 	.word	0x20000010
 80825d4:	20000420 	.word	0x20000420
 80825d8:	2000041c 	.word	0x2000041c

080825dc <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80825dc:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80825de:	2000      	movs	r0, #0
 80825e0:	f7ff faa2 	bl	8081b28 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80825e4:	4604      	mov	r4, r0
 80825e6:	b968      	cbnz	r0, 8082604 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80825e8:	f7ff fb96 	bl	8081d18 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80825ec:	2801      	cmp	r0, #1
 80825ee:	d10b      	bne.n	8082608 <_ZN9TimeClass7isValidEv+0x2c>
 80825f0:	4620      	mov	r0, r4
 80825f2:	f7ff fbb9 	bl	8081d68 <system_thread_get_state>
 80825f6:	b938      	cbnz	r0, 8082608 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80825f8:	f7ff ff30 	bl	808245c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80825fc:	b930      	cbnz	r0, 808260c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80825fe:	f7ff fc27 	bl	8081e50 <spark_process>
 8082602:	e7f9      	b.n	80825f8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8082604:	2001      	movs	r0, #1
 8082606:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082608:	2000      	movs	r0, #0
 808260a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 808260c:	f7ff ff26 	bl	808245c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082610:	2000      	movs	r0, #0
 8082612:	f7ff fa89 	bl	8081b28 <HAL_RTC_Time_Is_Valid>
 8082616:	3000      	adds	r0, #0
 8082618:	bf18      	it	ne
 808261a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 808261c:	bd10      	pop	{r4, pc}

0808261e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808261e:	b508      	push	{r3, lr}
    (void)isValid();
 8082620:	f7ff ffdc 	bl	80825dc <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8082624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082628:	f7ff ba76 	b.w	8081b18 <HAL_RTC_Get_UnixTime>

0808262c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808262c:	4b02      	ldr	r3, [pc, #8]	; (8082638 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808262e:	681a      	ldr	r2, [r3, #0]
 8082630:	4b02      	ldr	r3, [pc, #8]	; (808263c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082632:	601a      	str	r2, [r3, #0]
 8082634:	4770      	bx	lr
 8082636:	bf00      	nop
 8082638:	20000010 	.word	0x20000010
 808263c:	20000418 	.word	0x20000418

08082640 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082640:	2100      	movs	r1, #0
 8082642:	f7ff bb79 	b.w	8081d38 <system_delay_ms>

08082646 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082646:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8082648:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808264a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808264c:	b113      	cbz	r3, 8082654 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808264e:	2203      	movs	r2, #3
 8082650:	4601      	mov	r1, r0
 8082652:	4798      	blx	r3
    }
 8082654:	4620      	mov	r0, r4
 8082656:	bd10      	pop	{r4, pc}

08082658 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082658:	b510      	push	{r4, lr}
 808265a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808265c:	f7ff fff3 	bl	8082646 <_ZNSt14_Function_baseD1Ev>
 8082660:	4620      	mov	r0, r4
 8082662:	bd10      	pop	{r4, pc}

08082664 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8082664:	b513      	push	{r0, r1, r4, lr}
 8082666:	460b      	mov	r3, r1
 8082668:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808266a:	c803      	ldmia	r0, {r0, r1}
 808266c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082670:	e893 0003 	ldmia.w	r3, {r0, r1}
 8082674:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8082678:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808267c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8082680:	b002      	add	sp, #8
 8082682:	bd10      	pop	{r4, pc}

08082684 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082684:	4803      	ldr	r0, [pc, #12]	; (8082694 <_GLOBAL__sub_I_RGB+0x10>)
 8082686:	2300      	movs	r3, #0
 8082688:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808268a:	4a03      	ldr	r2, [pc, #12]	; (8082698 <_GLOBAL__sub_I_RGB+0x14>)
 808268c:	4903      	ldr	r1, [pc, #12]	; (808269c <_GLOBAL__sub_I_RGB+0x18>)
 808268e:	f000 bf37 	b.w	8083500 <__aeabi_atexit>
 8082692:	bf00      	nop
 8082694:	20000424 	.word	0x20000424
 8082698:	20000100 	.word	0x20000100
 808269c:	08082659 	.word	0x08082659

080826a0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80826a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80826a2:	4b18      	ldr	r3, [pc, #96]	; (8082704 <serialEventRun+0x64>)
 80826a4:	b133      	cbz	r3, 80826b4 <serialEventRun+0x14>
 80826a6:	f000 fc41 	bl	8082f2c <_Z16_fetch_usbserialv>
 80826aa:	6803      	ldr	r3, [r0, #0]
 80826ac:	691b      	ldr	r3, [r3, #16]
 80826ae:	4798      	blx	r3
 80826b0:	2800      	cmp	r0, #0
 80826b2:	dc1e      	bgt.n	80826f2 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80826b4:	4b14      	ldr	r3, [pc, #80]	; (8082708 <serialEventRun+0x68>)
 80826b6:	b133      	cbz	r3, 80826c6 <serialEventRun+0x26>
 80826b8:	f000 fd56 	bl	8083168 <_Z22__fetch_global_Serial1v>
 80826bc:	6803      	ldr	r3, [r0, #0]
 80826be:	691b      	ldr	r3, [r3, #16]
 80826c0:	4798      	blx	r3
 80826c2:	2800      	cmp	r0, #0
 80826c4:	dc18      	bgt.n	80826f8 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80826c6:	4b11      	ldr	r3, [pc, #68]	; (808270c <serialEventRun+0x6c>)
 80826c8:	b10b      	cbz	r3, 80826ce <serialEventRun+0x2e>
 80826ca:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80826ce:	4b10      	ldr	r3, [pc, #64]	; (8082710 <serialEventRun+0x70>)
 80826d0:	b10b      	cbz	r3, 80826d6 <serialEventRun+0x36>
 80826d2:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80826d6:	4b0f      	ldr	r3, [pc, #60]	; (8082714 <serialEventRun+0x74>)
 80826d8:	b10b      	cbz	r3, 80826de <serialEventRun+0x3e>
 80826da:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80826de:	4b0e      	ldr	r3, [pc, #56]	; (8082718 <serialEventRun+0x78>)
 80826e0:	b17b      	cbz	r3, 8082702 <serialEventRun+0x62>
 80826e2:	f000 fc51 	bl	8082f88 <_Z17_fetch_usbserial1v>
 80826e6:	6803      	ldr	r3, [r0, #0]
 80826e8:	691b      	ldr	r3, [r3, #16]
 80826ea:	4798      	blx	r3
 80826ec:	2800      	cmp	r0, #0
 80826ee:	dc06      	bgt.n	80826fe <serialEventRun+0x5e>
 80826f0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80826f2:	f3af 8000 	nop.w
 80826f6:	e7dd      	b.n	80826b4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80826f8:	f3af 8000 	nop.w
 80826fc:	e7e3      	b.n	80826c6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80826fe:	f3af 8000 	nop.w
 8082702:	bd08      	pop	{r3, pc}
	...

0808271c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808271c:	b508      	push	{r3, lr}
	serialEventRun();
 808271e:	f7ff ffbf 	bl	80826a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082722:	f7ff f9f1 	bl	8081b08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082726:	4b01      	ldr	r3, [pc, #4]	; (808272c <_post_loop+0x10>)
 8082728:	6018      	str	r0, [r3, #0]
 808272a:	bd08      	pop	{r3, pc}
 808272c:	200004f4 	.word	0x200004f4

08082730 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082730:	4802      	ldr	r0, [pc, #8]	; (808273c <_Z33system_initialize_user_backup_ramv+0xc>)
 8082732:	4a03      	ldr	r2, [pc, #12]	; (8082740 <_Z33system_initialize_user_backup_ramv+0x10>)
 8082734:	4903      	ldr	r1, [pc, #12]	; (8082744 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082736:	1a12      	subs	r2, r2, r0
 8082738:	f001 be7e 	b.w	8084438 <memcpy>
 808273c:	40024000 	.word	0x40024000
 8082740:	40024004 	.word	0x40024004
 8082744:	08088220 	.word	0x08088220

08082748 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082748:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808274a:	2300      	movs	r3, #0
 808274c:	9300      	str	r3, [sp, #0]
 808274e:	461a      	mov	r2, r3
 8082750:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082754:	f7ff fb1a 	bl	8081d8c <system_ctrl_set_result>
}
 8082758:	b003      	add	sp, #12
 808275a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082760 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082760:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082762:	8843      	ldrh	r3, [r0, #2]
 8082764:	2b0a      	cmp	r3, #10
 8082766:	d008      	beq.n	808277a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082768:	2b50      	cmp	r3, #80	; 0x50
 808276a:	d109      	bne.n	8082780 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808276c:	4b09      	ldr	r3, [pc, #36]	; (8082794 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808276e:	681b      	ldr	r3, [r3, #0]
 8082770:	b13b      	cbz	r3, 8082782 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8082772:	b003      	add	sp, #12
 8082774:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082778:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808277a:	f7ff ffe5 	bl	8082748 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808277e:	e006      	b.n	808278e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082780:	2300      	movs	r3, #0
 8082782:	9300      	str	r3, [sp, #0]
 8082784:	461a      	mov	r2, r3
 8082786:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808278a:	f7ff faff 	bl	8081d8c <system_ctrl_set_result>
        break;
    }
}
 808278e:	b003      	add	sp, #12
 8082790:	f85d fb04 	ldr.w	pc, [sp], #4
 8082794:	20000434 	.word	0x20000434

08082798 <module_user_init_hook>:

void module_user_init_hook()
{
 8082798:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808279a:	4c10      	ldr	r4, [pc, #64]	; (80827dc <module_user_init_hook+0x44>)
 808279c:	4d10      	ldr	r5, [pc, #64]	; (80827e0 <module_user_init_hook+0x48>)
 808279e:	6823      	ldr	r3, [r4, #0]
 80827a0:	42ab      	cmp	r3, r5
 80827a2:	4b10      	ldr	r3, [pc, #64]	; (80827e4 <module_user_init_hook+0x4c>)
 80827a4:	bf0c      	ite	eq
 80827a6:	2201      	moveq	r2, #1
 80827a8:	2200      	movne	r2, #0
 80827aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80827ac:	d002      	beq.n	80827b4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80827ae:	f7ff ffbf 	bl	8082730 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80827b2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80827b4:	f7ff f9a0 	bl	8081af8 <HAL_RNG_GetRandomNumber>
 80827b8:	4604      	mov	r4, r0
    srand(seed);
 80827ba:	f001 fe51 	bl	8084460 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80827be:	4b0a      	ldr	r3, [pc, #40]	; (80827e8 <module_user_init_hook+0x50>)
 80827c0:	b113      	cbz	r3, 80827c8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80827c2:	4620      	mov	r0, r4
 80827c4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80827c8:	2100      	movs	r1, #0
 80827ca:	4807      	ldr	r0, [pc, #28]	; (80827e8 <module_user_init_hook+0x50>)
 80827cc:	f7ff fb70 	bl	8081eb0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80827d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80827d4:	2100      	movs	r1, #0
 80827d6:	4805      	ldr	r0, [pc, #20]	; (80827ec <module_user_init_hook+0x54>)
 80827d8:	f7ff bace 	b.w	8081d78 <system_ctrl_set_app_request_handler>
 80827dc:	40024000 	.word	0x40024000
 80827e0:	9a271c1e 	.word	0x9a271c1e
 80827e4:	20000438 	.word	0x20000438
 80827e8:	00000000 	.word	0x00000000
 80827ec:	08082761 	.word	0x08082761

080827f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80827f0:	4770      	bx	lr

080827f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80827f2:	2000      	movs	r0, #0
 80827f4:	4770      	bx	lr

080827f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80827f6:	b510      	push	{r4, lr}
 80827f8:	4604      	mov	r4, r0
 80827fa:	2110      	movs	r1, #16
 80827fc:	f000 fe85 	bl	808350a <_ZdlPvj>
 8082800:	4620      	mov	r0, r4
 8082802:	bd10      	pop	{r4, pc}

08082804 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8082804:	b508      	push	{r3, lr}
      { delete this; }
 8082806:	b108      	cbz	r0, 808280c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8082808:	f7ff fff5 	bl	80827f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808280c:	bd08      	pop	{r3, pc}

0808280e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808280e:	2200      	movs	r2, #0
 8082810:	6002      	str	r2, [r0, #0]
 8082812:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8082816:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8082818:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808281a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 808281e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082820:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082822:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8082824:	680c      	ldr	r4, [r1, #0]
 8082826:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8082828:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808282a:	bd10      	pop	{r4, pc}

0808282c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808282c:	b510      	push	{r4, lr}
 808282e:	4604      	mov	r4, r0
    free((void*)msg_);
 8082830:	6800      	ldr	r0, [r0, #0]
 8082832:	f7ff fb4d 	bl	8081ed0 <free>
}
 8082836:	4620      	mov	r0, r4
 8082838:	bd10      	pop	{r4, pc}

0808283a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808283a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808283c:	68c4      	ldr	r4, [r0, #12]
 808283e:	b1f4      	cbz	r4, 808287e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8082840:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082842:	2b02      	cmp	r3, #2
 8082844:	d103      	bne.n	808284e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8082846:	f104 000c 	add.w	r0, r4, #12
 808284a:	f7ff ffef 	bl	808282c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808284e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8082850:	b135      	cbz	r5, 8082860 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082852:	4628      	mov	r0, r5
 8082854:	f7ff fef7 	bl	8082646 <_ZNSt14_Function_baseD1Ev>
 8082858:	2110      	movs	r1, #16
 808285a:	4628      	mov	r0, r5
 808285c:	f000 fe55 	bl	808350a <_ZdlPvj>
 8082860:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8082862:	b135      	cbz	r5, 8082872 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8082864:	4628      	mov	r0, r5
 8082866:	f7ff feee 	bl	8082646 <_ZNSt14_Function_baseD1Ev>
 808286a:	2110      	movs	r1, #16
 808286c:	4628      	mov	r0, r5
 808286e:	f000 fe4c 	bl	808350a <_ZdlPvj>
 8082872:	4620      	mov	r0, r4
 8082874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082878:	2114      	movs	r1, #20
 808287a:	f000 be46 	b.w	808350a <_ZdlPvj>
 808287e:	bd38      	pop	{r3, r4, r5, pc}

08082880 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8082880:	b510      	push	{r4, lr}
 8082882:	b088      	sub	sp, #32
 8082884:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082886:	4668      	mov	r0, sp
 8082888:	f7ff fc3c 	bl	8082104 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808288c:	4669      	mov	r1, sp
 808288e:	a804      	add	r0, sp, #16
 8082890:	f7ff fc77 	bl	8082182 <_ZN6StringC1ERKS_>
 8082894:	a804      	add	r0, sp, #16
 8082896:	47a0      	blx	r4
 8082898:	4604      	mov	r4, r0
 808289a:	a804      	add	r0, sp, #16
 808289c:	f7ff fbeb 	bl	8082076 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80828a0:	4668      	mov	r0, sp
 80828a2:	f7ff fbe8 	bl	8082076 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80828a6:	4620      	mov	r0, r4
 80828a8:	b008      	add	sp, #32
 80828aa:	bd10      	pop	{r4, pc}

080828ac <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80828ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80828ae:	4607      	mov	r7, r0
 80828b0:	460e      	mov	r6, r1
 80828b2:	4615      	mov	r5, r2
 80828b4:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80828b6:	2410      	movs	r4, #16
 80828b8:	4622      	mov	r2, r4
 80828ba:	2100      	movs	r1, #0
 80828bc:	4668      	mov	r0, sp
 80828be:	f001 fdc6 	bl	808444e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80828c2:	2200      	movs	r2, #0
 80828c4:	4669      	mov	r1, sp
 80828c6:	4610      	mov	r0, r2
         size = sizeof(*this);
 80828c8:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80828cc:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80828ce:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80828d0:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80828d2:	f7ff fab5 	bl	8081e40 <spark_function>
}
 80828d6:	b005      	add	sp, #20
 80828d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080828da <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80828da:	b513      	push	{r0, r1, r4, lr}
 80828dc:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80828de:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80828e2:	2300      	movs	r3, #0
 80828e4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80828e6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80828e8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80828ea:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80828ec:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80828ee:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80828f0:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80828f2:	f7fd fc30 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80828f6:	4620      	mov	r0, r4
 80828f8:	b002      	add	sp, #8
 80828fa:	bd10      	pop	{r4, pc}

080828fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80828fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80828fe:	460c      	mov	r4, r1
 8082900:	4606      	mov	r6, r0
 8082902:	460f      	mov	r7, r1
 8082904:	f854 3b04 	ldr.w	r3, [r4], #4
 8082908:	ad02      	add	r5, sp, #8
 808290a:	f845 3d08 	str.w	r3, [r5, #-8]!
 808290e:	4621      	mov	r1, r4
 8082910:	a801      	add	r0, sp, #4
 8082912:	f7ff fd94 	bl	808243e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8082916:	4629      	mov	r1, r5
 8082918:	4630      	mov	r0, r6
 808291a:	f7ff ffde 	bl	80828da <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808291e:	a801      	add	r0, sp, #4
 8082920:	f7fd fc19 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082924:	4620      	mov	r0, r4
 8082926:	f7fd fc16 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808292a:	4638      	mov	r0, r7
 808292c:	2108      	movs	r1, #8
 808292e:	f000 fdec 	bl	808350a <_ZdlPvj>
        return p;
    }
 8082932:	4630      	mov	r0, r6
 8082934:	b003      	add	sp, #12
 8082936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082938:	b538      	push	{r3, r4, r5, lr}
 808293a:	2300      	movs	r3, #0
 808293c:	4604      	mov	r4, r0
 808293e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082940:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082942:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082944:	f7fd fbab 	bl	808009e <_Znwj>
 8082948:	b128      	cbz	r0, 8082956 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808294a:	2301      	movs	r3, #1
 808294c:	6043      	str	r3, [r0, #4]
 808294e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8082950:	4b02      	ldr	r3, [pc, #8]	; (808295c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082952:	60c5      	str	r5, [r0, #12]
 8082954:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082956:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8082958:	4620      	mov	r0, r4
 808295a:	bd38      	pop	{r3, r4, r5, pc}
 808295c:	08087a84 	.word	0x08087a84

08082960 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082960:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082962:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082964:	b90a      	cbnz	r2, 808296a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082966:	f000 fdd2 	bl	808350e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808296a:	68c3      	ldr	r3, [r0, #12]
    }
 808296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082970:	4718      	bx	r3

08082972 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082972:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082974:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082976:	f100 0110 	add.w	r1, r0, #16
 808297a:	f7ff fff1 	bl	8082960 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808297e:	bd08      	pop	{r3, pc}

08082980 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082980:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082982:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082984:	b90a      	cbnz	r2, 808298a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082986:	f000 fdc2 	bl	808350e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808298a:	68c3      	ldr	r3, [r0, #12]
    }
 808298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082990:	4718      	bx	r3

08082992 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082992:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082994:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082996:	f100 0110 	add.w	r1, r0, #16
 808299a:	f7ff fff1 	bl	8082980 <_ZNKSt8functionIFvRKbEEclES1_>
 808299e:	bd08      	pop	{r3, pc}

080829a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80829a0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80829a2:	2300      	movs	r3, #0
 80829a4:	6083      	str	r3, [r0, #8]
 80829a6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80829a8:	4604      	mov	r4, r0
 80829aa:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80829ac:	b12b      	cbz	r3, 80829ba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80829ae:	2202      	movs	r2, #2
 80829b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80829b2:	68eb      	ldr	r3, [r5, #12]
 80829b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80829b6:	68ab      	ldr	r3, [r5, #8]
 80829b8:	60a3      	str	r3, [r4, #8]
	}
    }
 80829ba:	4620      	mov	r0, r4
 80829bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080829c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80829c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80829c2:	b089      	sub	sp, #36	; 0x24
 80829c4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80829c6:	4668      	mov	r0, sp
 80829c8:	f7ff ff21 	bl	808280e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80829cc:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80829d0:	2300      	movs	r3, #0
 80829d2:	f88d 3008 	strb.w	r3, [sp, #8]
 80829d6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80829da:	2b00      	cmp	r3, #0
 80829dc:	d103      	bne.n	80829e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80829de:	e8c4 2f41 	strexb	r1, r2, [r4]
 80829e2:	2900      	cmp	r1, #0
 80829e4:	d1f7      	bne.n	80829d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80829e6:	d002      	beq.n	80829ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80829e8:	f88d 3008 	strb.w	r3, [sp, #8]
 80829ec:	e063      	b.n	8082ab6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80829ee:	f114 050c 	adds.w	r5, r4, #12
 80829f2:	d003      	beq.n	80829fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80829f4:	4669      	mov	r1, sp
 80829f6:	4628      	mov	r0, r5
 80829f8:	f7ff ff09 	bl	808280e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80829fc:	f3bf 8f5f 	dmb	sy
 8082a00:	2301      	movs	r3, #1
 8082a02:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082a04:	f3bf 8f5f 	dmb	sy
 8082a08:	f104 0308 	add.w	r3, r4, #8
 8082a0c:	2000      	movs	r0, #0
 8082a0e:	e853 6f00 	ldrex	r6, [r3]
 8082a12:	e843 0200 	strex	r2, r0, [r3]
 8082a16:	2a00      	cmp	r2, #0
 8082a18:	d1f9      	bne.n	8082a0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8082a1a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082a1e:	2e00      	cmp	r6, #0
 8082a20:	d049      	beq.n	8082ab6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082a22:	f7ff f991 	bl	8081d48 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082a26:	b120      	cbz	r0, 8082a32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082a28:	4629      	mov	r1, r5
 8082a2a:	4630      	mov	r0, r6
 8082a2c:	f7ff ff98 	bl	8082960 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082a30:	e03a      	b.n	8082aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082a32:	4631      	mov	r1, r6
 8082a34:	a802      	add	r0, sp, #8
 8082a36:	f7ff ffb3 	bl	80829a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082a3a:	68e0      	ldr	r0, [r4, #12]
 8082a3c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082a40:	b108      	cbz	r0, 8082a46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8082a42:	f001 fd55 	bl	80844f0 <strdup>
 8082a46:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082a48:	2010      	movs	r0, #16
 8082a4a:	f8ad 501c 	strh.w	r5, [sp, #28]
 8082a4e:	f7fd fb26 	bl	808009e <_Znwj>
 8082a52:	4605      	mov	r5, r0
 8082a54:	b1e8      	cbz	r0, 8082a92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082a56:	2700      	movs	r7, #0
 8082a58:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082a5a:	2018      	movs	r0, #24
 8082a5c:	f7fd fb1f 	bl	808009e <_Znwj>
 8082a60:	4604      	mov	r4, r0
 8082a62:	b188      	cbz	r0, 8082a88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082a64:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082a66:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082a68:	a802      	add	r0, sp, #8
 8082a6a:	f7ff fdfb 	bl	8082664 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082a6e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082a70:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082a72:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082a74:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082a76:	9204      	str	r2, [sp, #16]
 8082a78:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082a7a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8082a7c:	60e3      	str	r3, [r4, #12]
 8082a7e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082a82:	9205      	str	r2, [sp, #20]
 8082a84:	f7ff fec3 	bl	808280e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082a88:	4b0d      	ldr	r3, [pc, #52]	; (8082ac0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082a8a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082a8c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082a8e:	4b0d      	ldr	r3, [pc, #52]	; (8082ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8082a90:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8082a92:	a806      	add	r0, sp, #24
 8082a94:	f7ff feca 	bl	808282c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082a98:	a802      	add	r0, sp, #8
 8082a9a:	f7ff fdd4 	bl	8082646 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082a9e:	2200      	movs	r2, #0
 8082aa0:	4629      	mov	r1, r5
 8082aa2:	4809      	ldr	r0, [pc, #36]	; (8082ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8082aa4:	f7ff f958 	bl	8081d58 <application_thread_invoke>
 8082aa8:	4630      	mov	r0, r6
 8082aaa:	f7ff fdcc 	bl	8082646 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082aae:	2110      	movs	r1, #16
 8082ab0:	4630      	mov	r0, r6
 8082ab2:	f000 fd2a 	bl	808350a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8082ab6:	4668      	mov	r0, sp
 8082ab8:	f7ff feb8 	bl	808282c <_ZN8particle5ErrorD1Ev>
    }
 8082abc:	b009      	add	sp, #36	; 0x24
 8082abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082ac0:	08082973 	.word	0x08082973
 8082ac4:	08082be9 	.word	0x08082be9
 8082ac8:	080831e9 	.word	0x080831e9

08082acc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082ad0:	b08b      	sub	sp, #44	; 0x2c
 8082ad2:	4606      	mov	r6, r0
 8082ad4:	460f      	mov	r7, r1
 8082ad6:	4690      	mov	r8, r2
 8082ad8:	4699      	mov	r9, r3
 8082ada:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082ade:	f7ff f9c7 	bl	8081e70 <spark_cloud_flag_connected>
 8082ae2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8082ae4:	4683      	mov	fp, r0
 8082ae6:	bb30      	cbnz	r0, 8082b36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082ae8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8082aec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082aee:	a905      	add	r1, sp, #20
 8082af0:	4628      	mov	r0, r5
 8082af2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082af6:	f7ff fe8a 	bl	808280e <_ZN8particle5ErrorC1EOS0_>
 8082afa:	2014      	movs	r0, #20
 8082afc:	f7fd facf 	bl	808009e <_Znwj>
 8082b00:	4604      	mov	r4, r0
 8082b02:	b158      	cbz	r0, 8082b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082b04:	2302      	movs	r3, #2
 8082b06:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082b08:	2301      	movs	r3, #1
 8082b0a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082b0c:	f8c0 b004 	str.w	fp, [r0, #4]
 8082b10:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8082b14:	4629      	mov	r1, r5
 8082b16:	300c      	adds	r0, #12
 8082b18:	f7ff fe79 	bl	808280e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8082b1c:	4630      	mov	r0, r6
 8082b1e:	4621      	mov	r1, r4
 8082b20:	f840 4b04 	str.w	r4, [r0], #4
 8082b24:	f7ff ff08 	bl	8082938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082b28:	4628      	mov	r0, r5
 8082b2a:	f7ff fe7f 	bl	808282c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8082b2e:	a805      	add	r0, sp, #20
 8082b30:	f7ff fe7c 	bl	808282c <_ZN8particle5ErrorD1Ev>
 8082b34:	e052      	b.n	8082bdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082b36:	2400      	movs	r4, #0
 8082b38:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082b3a:	2014      	movs	r0, #20
 8082b3c:	606c      	str	r4, [r5, #4]
 8082b3e:	60ac      	str	r4, [r5, #8]
 8082b40:	9307      	str	r3, [sp, #28]
 8082b42:	f7fd faac 	bl	808009e <_Znwj>
 8082b46:	4601      	mov	r1, r0
 8082b48:	b118      	cbz	r0, 8082b52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8082b4a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082b4c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082b4e:	6044      	str	r4, [r0, #4]
 8082b50:	6084      	str	r4, [r0, #8]
 8082b52:	a804      	add	r0, sp, #16
 8082b54:	9103      	str	r1, [sp, #12]
 8082b56:	f7ff feef 	bl	8082938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8082b5a:	4b22      	ldr	r3, [pc, #136]	; (8082be4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082b5c:	2008      	movs	r0, #8
 8082b5e:	9308      	str	r3, [sp, #32]
 8082b60:	f7fd fa9d 	bl	808009e <_Znwj>
 8082b64:	4604      	mov	r4, r0
 8082b66:	b128      	cbz	r0, 8082b74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082b68:	9b03      	ldr	r3, [sp, #12]
 8082b6a:	a904      	add	r1, sp, #16
 8082b6c:	f840 3b04 	str.w	r3, [r0], #4
 8082b70:	f7ff fc65 	bl	808243e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082b74:	9500      	str	r5, [sp, #0]
 8082b76:	fa5f f38a 	uxtb.w	r3, sl
 8082b7a:	464a      	mov	r2, r9
 8082b7c:	4641      	mov	r1, r8
 8082b7e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8082b80:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082b82:	f7ff f97d 	bl	8081e80 <spark_send_event>
 8082b86:	b920      	cbnz	r0, 8082b92 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082b88:	9b03      	ldr	r3, [sp, #12]
 8082b8a:	785b      	ldrb	r3, [r3, #1]
 8082b8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082b90:	b183      	cbz	r3, 8082bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8082b92:	9b03      	ldr	r3, [sp, #12]
 8082b94:	a904      	add	r1, sp, #16
 8082b96:	a806      	add	r0, sp, #24
 8082b98:	9305      	str	r3, [sp, #20]
 8082b9a:	f7ff fc50 	bl	808243e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8082b9e:	a905      	add	r1, sp, #20
 8082ba0:	4630      	mov	r0, r6
 8082ba2:	f7ff fe9a 	bl	80828da <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082ba6:	a806      	add	r0, sp, #24
 8082ba8:	f7fd fad5 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082bac:	a804      	add	r0, sp, #16
 8082bae:	f7fd fad2 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082bb2:	e013      	b.n	8082bdc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8082bb4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8082bb8:	a905      	add	r1, sp, #20
 8082bba:	a803      	add	r0, sp, #12
 8082bbc:	9205      	str	r2, [sp, #20]
 8082bbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082bc2:	f7ff fefd 	bl	80829c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082bc6:	a805      	add	r0, sp, #20
 8082bc8:	f7ff fe30 	bl	808282c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082bcc:	a805      	add	r0, sp, #20
 8082bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082bd0:	f7ff fe94 	bl	80828fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8082bd4:	a806      	add	r0, sp, #24
 8082bd6:	f7fd fabe 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082bda:	e7da      	b.n	8082b92 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8082bdc:	4630      	mov	r0, r6
 8082bde:	b00b      	add	sp, #44	; 0x2c
 8082be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082be4:	08082d59 	.word	0x08082d59

08082be8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082be8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082bec:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082bee:	d006      	beq.n	8082bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8082bf0:	2a03      	cmp	r2, #3
 8082bf2:	d017      	beq.n	8082c24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8082bf4:	2a01      	cmp	r2, #1
 8082bf6:	d122      	bne.n	8082c3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082bf8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082bfa:	6003      	str	r3, [r0, #0]
	      break;
 8082bfc:	e01f      	b.n	8082c3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082bfe:	2018      	movs	r0, #24
 8082c00:	680e      	ldr	r6, [r1, #0]
 8082c02:	f7fd fa4c 	bl	808009e <_Znwj>
 8082c06:	4605      	mov	r5, r0
 8082c08:	b150      	cbz	r0, 8082c20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082c0a:	4631      	mov	r1, r6
 8082c0c:	f7ff fec8 	bl	80829a0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082c10:	6930      	ldr	r0, [r6, #16]
 8082c12:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082c16:	b108      	cbz	r0, 8082c1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8082c18:	f001 fc6a 	bl	80844f0 <strdup>
 8082c1c:	6128      	str	r0, [r5, #16]
 8082c1e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082c20:	6025      	str	r5, [r4, #0]
 8082c22:	e00c      	b.n	8082c3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082c24:	6804      	ldr	r4, [r0, #0]
 8082c26:	b154      	cbz	r4, 8082c3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8082c28:	f104 0010 	add.w	r0, r4, #16
 8082c2c:	f7ff fdfe 	bl	808282c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082c30:	4620      	mov	r0, r4
 8082c32:	f7ff fd08 	bl	8082646 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082c36:	2118      	movs	r1, #24
 8082c38:	4620      	mov	r0, r4
 8082c3a:	f000 fc66 	bl	808350a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082c3e:	2000      	movs	r0, #0
 8082c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082c42 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082c42:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082c44:	2300      	movs	r3, #0
 8082c46:	6083      	str	r3, [r0, #8]
 8082c48:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082c4a:	4604      	mov	r4, r0
 8082c4c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082c4e:	b12b      	cbz	r3, 8082c5c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082c50:	2202      	movs	r2, #2
 8082c52:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082c54:	68eb      	ldr	r3, [r5, #12]
 8082c56:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082c58:	68ab      	ldr	r3, [r5, #8]
 8082c5a:	60a3      	str	r3, [r4, #8]
	}
    }
 8082c5c:	4620      	mov	r0, r4
 8082c5e:	bd38      	pop	{r3, r4, r5, pc}

08082c60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082c60:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082c62:	b570      	push	{r4, r5, r6, lr}
 8082c64:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082c66:	d006      	beq.n	8082c76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8082c68:	2a03      	cmp	r2, #3
 8082c6a:	d011      	beq.n	8082c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8082c6c:	2a01      	cmp	r2, #1
 8082c6e:	d118      	bne.n	8082ca2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082c70:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082c72:	6003      	str	r3, [r0, #0]
	      break;
 8082c74:	e015      	b.n	8082ca2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082c76:	2014      	movs	r0, #20
 8082c78:	680e      	ldr	r6, [r1, #0]
 8082c7a:	f7fd fa10 	bl	808009e <_Znwj>
 8082c7e:	4605      	mov	r5, r0
 8082c80:	b120      	cbz	r0, 8082c8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082c82:	4631      	mov	r1, r6
 8082c84:	f7ff ffdd 	bl	8082c42 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082c88:	7c33      	ldrb	r3, [r6, #16]
 8082c8a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082c8c:	6025      	str	r5, [r4, #0]
 8082c8e:	e008      	b.n	8082ca2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082c90:	6804      	ldr	r4, [r0, #0]
 8082c92:	b134      	cbz	r4, 8082ca2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082c94:	4620      	mov	r0, r4
 8082c96:	f7ff fcd6 	bl	8082646 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082c9a:	2114      	movs	r1, #20
 8082c9c:	4620      	mov	r0, r4
 8082c9e:	f000 fc34 	bl	808350a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082ca2:	2000      	movs	r0, #0
 8082ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08082ca8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082caa:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082cac:	f3bf 8f5f 	dmb	sy
 8082cb0:	b087      	sub	sp, #28
 8082cb2:	2300      	movs	r3, #0
 8082cb4:	e850 6f00 	ldrex	r6, [r0]
 8082cb8:	e840 3200 	strex	r2, r3, [r0]
 8082cbc:	2a00      	cmp	r2, #0
 8082cbe:	d1f9      	bne.n	8082cb4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8082cc0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082cc4:	2e00      	cmp	r6, #0
 8082cc6:	d03f      	beq.n	8082d48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082cc8:	4618      	mov	r0, r3
 8082cca:	f7ff f83d 	bl	8081d48 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082cce:	4607      	mov	r7, r0
 8082cd0:	b120      	cbz	r0, 8082cdc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082cd2:	4621      	mov	r1, r4
 8082cd4:	4630      	mov	r0, r6
 8082cd6:	f7ff fe53 	bl	8082980 <_ZNKSt8functionIFvRKbEEclES1_>
 8082cda:	e02e      	b.n	8082d3a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082cdc:	4631      	mov	r1, r6
 8082cde:	a801      	add	r0, sp, #4
 8082ce0:	f7ff ffaf 	bl	8082c42 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082ce4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082ce6:	2010      	movs	r0, #16
 8082ce8:	f88d 3014 	strb.w	r3, [sp, #20]
 8082cec:	f7fd f9d7 	bl	808009e <_Znwj>
 8082cf0:	4605      	mov	r5, r0
 8082cf2:	b1d0      	cbz	r0, 8082d2a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082cf4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082cf6:	2014      	movs	r0, #20
 8082cf8:	f7fd f9d1 	bl	808009e <_Znwj>
 8082cfc:	4604      	mov	r4, r0
 8082cfe:	b178      	cbz	r0, 8082d20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082d00:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082d02:	4601      	mov	r1, r0
 8082d04:	a801      	add	r0, sp, #4
 8082d06:	f7ff fcad 	bl	8082664 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082d0a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082d0c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082d0e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082d10:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082d12:	9203      	str	r2, [sp, #12]
 8082d14:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082d16:	60e3      	str	r3, [r4, #12]
 8082d18:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082d1c:	9204      	str	r2, [sp, #16]
 8082d1e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082d20:	4b0a      	ldr	r3, [pc, #40]	; (8082d4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082d22:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082d24:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082d26:	4b0a      	ldr	r3, [pc, #40]	; (8082d50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082d28:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082d2a:	a801      	add	r0, sp, #4
 8082d2c:	f7ff fc8b 	bl	8082646 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082d30:	2200      	movs	r2, #0
 8082d32:	4629      	mov	r1, r5
 8082d34:	4807      	ldr	r0, [pc, #28]	; (8082d54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082d36:	f7ff f80f 	bl	8081d58 <application_thread_invoke>
 8082d3a:	4630      	mov	r0, r6
 8082d3c:	f7ff fc83 	bl	8082646 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082d40:	2110      	movs	r1, #16
 8082d42:	4630      	mov	r0, r6
 8082d44:	f000 fbe1 	bl	808350a <_ZdlPvj>
        }
    }
 8082d48:	b007      	add	sp, #28
 8082d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082d4c:	08082993 	.word	0x08082993
 8082d50:	08082c61 	.word	0x08082c61
 8082d54:	080831e9 	.word	0x080831e9

08082d58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082d58:	b530      	push	{r4, r5, lr}
 8082d5a:	4604      	mov	r4, r0
 8082d5c:	b085      	sub	sp, #20
 8082d5e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082d60:	4668      	mov	r0, sp
 8082d62:	4611      	mov	r1, r2
 8082d64:	f7ff fdca 	bl	80828fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082d68:	b17c      	cbz	r4, 8082d8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8082d6a:	b224      	sxth	r4, r4
 8082d6c:	4628      	mov	r0, r5
 8082d6e:	b10d      	cbz	r5, 8082d74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082d70:	f001 fbbe 	bl	80844f0 <strdup>
 8082d74:	9002      	str	r0, [sp, #8]
 8082d76:	a902      	add	r1, sp, #8
 8082d78:	4668      	mov	r0, sp
 8082d7a:	f8ad 400c 	strh.w	r4, [sp, #12]
 8082d7e:	f7ff fe1f 	bl	80829c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082d82:	a802      	add	r0, sp, #8
 8082d84:	f7ff fd52 	bl	808282c <_ZN8particle5ErrorD1Ev>
 8082d88:	e01d      	b.n	8082dc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082d8a:	f04f 0201 	mov.w	r2, #1
 8082d8e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082d90:	f88d 4008 	strb.w	r4, [sp, #8]
 8082d94:	e8d0 3f4f 	ldrexb	r3, [r0]
 8082d98:	42a3      	cmp	r3, r4
 8082d9a:	d103      	bne.n	8082da4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8082d9c:	e8c0 2f41 	strexb	r1, r2, [r0]
 8082da0:	2900      	cmp	r1, #0
 8082da2:	d1f7      	bne.n	8082d94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082da4:	d002      	beq.n	8082dac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082da6:	f88d 3008 	strb.w	r3, [sp, #8]
 8082daa:	e00c      	b.n	8082dc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8082dac:	f110 010c 	adds.w	r1, r0, #12
 8082db0:	f04f 0301 	mov.w	r3, #1
 8082db4:	bf18      	it	ne
 8082db6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082db8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8082dbc:	3004      	adds	r0, #4
 8082dbe:	f800 3c03 	strb.w	r3, [r0, #-3]
 8082dc2:	f7ff ff71 	bl	8082ca8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8082dc6:	a801      	add	r0, sp, #4
 8082dc8:	f7fd f9c5 	bl	8080156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082dcc:	b005      	add	sp, #20
 8082dce:	bd30      	pop	{r4, r5, pc}

08082dd0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082dd0:	4770      	bx	lr

08082dd2 <_ZN9IPAddressD0Ev>:
 8082dd2:	b510      	push	{r4, lr}
 8082dd4:	4604      	mov	r4, r0
 8082dd6:	2108      	movs	r1, #8
 8082dd8:	f000 fb97 	bl	808350a <_ZdlPvj>
 8082ddc:	4620      	mov	r0, r4
 8082dde:	bd10      	pop	{r4, pc}

08082de0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082de2:	460f      	mov	r7, r1
 8082de4:	f100 0608 	add.w	r6, r0, #8
 8082de8:	1d05      	adds	r5, r0, #4
 8082dea:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082dec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082df0:	220a      	movs	r2, #10
 8082df2:	4638      	mov	r0, r7
 8082df4:	f7ff fae7 	bl	80823c6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082df8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082dfa:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082dfc:	d007      	beq.n	8082e0e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082dfe:	2c00      	cmp	r4, #0
 8082e00:	d0f4      	beq.n	8082dec <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082e02:	212e      	movs	r1, #46	; 0x2e
 8082e04:	4638      	mov	r0, r7
 8082e06:	f7ff faa5 	bl	8082354 <_ZN5Print5printEc>
 8082e0a:	4404      	add	r4, r0
 8082e0c:	e7ee      	b.n	8082dec <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082e0e:	4620      	mov	r0, r4
 8082e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08082e14 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082e14:	4a02      	ldr	r2, [pc, #8]	; (8082e20 <_ZN9IPAddressC1Ev+0xc>)
 8082e16:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082e18:	2200      	movs	r2, #0
 8082e1a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082e1c:	4770      	bx	lr
 8082e1e:	bf00      	nop
 8082e20:	08087aa0 	.word	0x08087aa0

08082e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082e24:	4a02      	ldr	r2, [pc, #8]	; (8082e30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082e26:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082e28:	680a      	ldr	r2, [r1, #0]
 8082e2a:	6042      	str	r2, [r0, #4]
}
 8082e2c:	4770      	bx	lr
 8082e2e:	bf00      	nop
 8082e30:	08087aa0 	.word	0x08087aa0

08082e34 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082e34:	4a01      	ldr	r2, [pc, #4]	; (8082e3c <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8082e36:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082e38:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8082e3a:	4770      	bx	lr
 8082e3c:	08087aa0 	.word	0x08087aa0

08082e40 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082e40:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082e42:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082e46:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8082e4a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8082e4e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8082e52:	6041      	str	r1, [r0, #4]
 8082e54:	bd10      	pop	{r4, pc}
	...

08082e58 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082e5a:	4d04      	ldr	r5, [pc, #16]	; (8082e6c <_ZN9IPAddressC1Ehhhh+0x14>)
 8082e5c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082e5e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082e62:	9500      	str	r5, [sp, #0]
 8082e64:	f7ff ffec 	bl	8082e40 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082e68:	b003      	add	sp, #12
 8082e6a:	bd30      	pop	{r4, r5, pc}
 8082e6c:	08087aa0 	.word	0x08087aa0

08082e70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082e70:	7441      	strb	r1, [r0, #17]
 8082e72:	4770      	bx	lr

08082e74 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082e74:	4770      	bx	lr

08082e76 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8082e76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082e78:	2100      	movs	r1, #0
 8082e7a:	7c00      	ldrb	r0, [r0, #16]
 8082e7c:	f7fe ff2c 	bl	8081cd8 <HAL_USB_USART_Receive_Data>
}
 8082e80:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082e84:	bf28      	it	cs
 8082e86:	f04f 30ff 	movcs.w	r0, #4294967295
 8082e8a:	bd08      	pop	{r3, pc}

08082e8c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8082e8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082e8e:	2101      	movs	r1, #1
 8082e90:	7c00      	ldrb	r0, [r0, #16]
 8082e92:	f7fe ff21 	bl	8081cd8 <HAL_USB_USART_Receive_Data>
}
 8082e96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082e9a:	bf28      	it	cs
 8082e9c:	f04f 30ff 	movcs.w	r0, #4294967295
 8082ea0:	bd08      	pop	{r3, pc}

08082ea2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8082ea2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082ea4:	7c00      	ldrb	r0, [r0, #16]
 8082ea6:	f7fe ff0f 	bl	8081cc8 <HAL_USB_USART_Available_Data_For_Write>
}
 8082eaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082eae:	bd08      	pop	{r3, pc}

08082eb0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8082eb0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082eb2:	7c00      	ldrb	r0, [r0, #16]
 8082eb4:	f7fe ff00 	bl	8081cb8 <HAL_USB_USART_Available_Data>
}
 8082eb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082ebc:	bd08      	pop	{r3, pc}

08082ebe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082ebe:	7c00      	ldrb	r0, [r0, #16]
 8082ec0:	f7fe bf1a 	b.w	8081cf8 <HAL_USB_USART_Flush_Data>

08082ec4 <_ZN9USBSerialD0Ev>:
 8082ec4:	b510      	push	{r4, lr}
 8082ec6:	4604      	mov	r4, r0
 8082ec8:	2114      	movs	r1, #20
 8082eca:	f000 fb1e 	bl	808350a <_ZdlPvj>
 8082ece:	4620      	mov	r0, r4
 8082ed0:	bd10      	pop	{r4, pc}

08082ed2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082ed2:	b538      	push	{r3, r4, r5, lr}
 8082ed4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082ed6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8082ed8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082eda:	f7fe fef5 	bl	8081cc8 <HAL_USB_USART_Available_Data_For_Write>
 8082ede:	2800      	cmp	r0, #0
 8082ee0:	dc01      	bgt.n	8082ee6 <_ZN9USBSerial5writeEh+0x14>
 8082ee2:	7c60      	ldrb	r0, [r4, #17]
 8082ee4:	b128      	cbz	r0, 8082ef2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082ee6:	4629      	mov	r1, r5
 8082ee8:	7c20      	ldrb	r0, [r4, #16]
 8082eea:	f7fe fefd 	bl	8081ce8 <HAL_USB_USART_Send_Data>
 8082eee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8082ef2:	bd38      	pop	{r3, r4, r5, pc}

08082ef4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082ef4:	b510      	push	{r4, lr}
 8082ef6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082ef8:	2300      	movs	r3, #0
 8082efa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082f00:	60a3      	str	r3, [r4, #8]
 8082f02:	4b05      	ldr	r3, [pc, #20]	; (8082f18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8082f04:	4608      	mov	r0, r1
 8082f06:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8082f08:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8082f0a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8082f0c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8082f0e:	4611      	mov	r1, r2
 8082f10:	f7fe feca 	bl	8081ca8 <HAL_USB_USART_Init>
}
 8082f14:	4620      	mov	r0, r4
 8082f16:	bd10      	pop	{r4, pc}
 8082f18:	08087ab4 	.word	0x08087ab4

08082f1c <_Z19acquireSerialBufferv>:
 8082f1c:	b510      	push	{r4, lr}
 8082f1e:	4604      	mov	r4, r0
 8082f20:	2214      	movs	r2, #20
 8082f22:	2100      	movs	r1, #0
 8082f24:	f001 fa93 	bl	808444e <memset>
 8082f28:	4620      	mov	r0, r4
 8082f2a:	bd10      	pop	{r4, pc}

08082f2c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082f2c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082f2e:	4d0e      	ldr	r5, [pc, #56]	; (8082f68 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8082f30:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8082f32:	a801      	add	r0, sp, #4
 8082f34:	f7ff fff2 	bl	8082f1c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8082f38:	6829      	ldr	r1, [r5, #0]
 8082f3a:	f011 0401 	ands.w	r4, r1, #1
 8082f3e:	d110      	bne.n	8082f62 <_Z16_fetch_usbserialv+0x36>
 8082f40:	4628      	mov	r0, r5
 8082f42:	f7fd f8b0 	bl	80800a6 <__cxa_guard_acquire>
 8082f46:	b160      	cbz	r0, 8082f62 <_Z16_fetch_usbserialv+0x36>
 8082f48:	aa01      	add	r2, sp, #4
 8082f4a:	4621      	mov	r1, r4
 8082f4c:	4807      	ldr	r0, [pc, #28]	; (8082f6c <_Z16_fetch_usbserialv+0x40>)
 8082f4e:	f7ff ffd1 	bl	8082ef4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082f52:	4628      	mov	r0, r5
 8082f54:	f7fd f8ac 	bl	80800b0 <__cxa_guard_release>
 8082f58:	4a05      	ldr	r2, [pc, #20]	; (8082f70 <_Z16_fetch_usbserialv+0x44>)
 8082f5a:	4906      	ldr	r1, [pc, #24]	; (8082f74 <_Z16_fetch_usbserialv+0x48>)
 8082f5c:	4803      	ldr	r0, [pc, #12]	; (8082f6c <_Z16_fetch_usbserialv+0x40>)
 8082f5e:	f000 facf 	bl	8083500 <__aeabi_atexit>
	return _usbserial;
}
 8082f62:	4802      	ldr	r0, [pc, #8]	; (8082f6c <_Z16_fetch_usbserialv+0x40>)
 8082f64:	b007      	add	sp, #28
 8082f66:	bd30      	pop	{r4, r5, pc}
 8082f68:	2000043c 	.word	0x2000043c
 8082f6c:	20000444 	.word	0x20000444
 8082f70:	20000100 	.word	0x20000100
 8082f74:	08082e75 	.word	0x08082e75

08082f78 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082f78:	b510      	push	{r4, lr}
 8082f7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8082f7c:	2214      	movs	r2, #20
 8082f7e:	2100      	movs	r1, #0
 8082f80:	f001 fa65 	bl	808444e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082f84:	4620      	mov	r0, r4
 8082f86:	bd10      	pop	{r4, pc}

08082f88 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082f88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082f8a:	4c0e      	ldr	r4, [pc, #56]	; (8082fc4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082f8c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8082f8e:	a801      	add	r0, sp, #4
 8082f90:	f7ff fff2 	bl	8082f78 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082f94:	6823      	ldr	r3, [r4, #0]
 8082f96:	07db      	lsls	r3, r3, #31
 8082f98:	d410      	bmi.n	8082fbc <_Z17_fetch_usbserial1v+0x34>
 8082f9a:	4620      	mov	r0, r4
 8082f9c:	f7fd f883 	bl	80800a6 <__cxa_guard_acquire>
 8082fa0:	b160      	cbz	r0, 8082fbc <_Z17_fetch_usbserial1v+0x34>
 8082fa2:	aa01      	add	r2, sp, #4
 8082fa4:	2101      	movs	r1, #1
 8082fa6:	4808      	ldr	r0, [pc, #32]	; (8082fc8 <_Z17_fetch_usbserial1v+0x40>)
 8082fa8:	f7ff ffa4 	bl	8082ef4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082fac:	4620      	mov	r0, r4
 8082fae:	f7fd f87f 	bl	80800b0 <__cxa_guard_release>
 8082fb2:	4a06      	ldr	r2, [pc, #24]	; (8082fcc <_Z17_fetch_usbserial1v+0x44>)
 8082fb4:	4906      	ldr	r1, [pc, #24]	; (8082fd0 <_Z17_fetch_usbserial1v+0x48>)
 8082fb6:	4804      	ldr	r0, [pc, #16]	; (8082fc8 <_Z17_fetch_usbserial1v+0x40>)
 8082fb8:	f000 faa2 	bl	8083500 <__aeabi_atexit>
  return _usbserial1;
}
 8082fbc:	4802      	ldr	r0, [pc, #8]	; (8082fc8 <_Z17_fetch_usbserial1v+0x40>)
 8082fbe:	b006      	add	sp, #24
 8082fc0:	bd10      	pop	{r4, pc}
 8082fc2:	bf00      	nop
 8082fc4:	20000440 	.word	0x20000440
 8082fc8:	20000458 	.word	0x20000458
 8082fcc:	20000100 	.word	0x20000100
 8082fd0:	08082e75 	.word	0x08082e75

08082fd4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8082fd4:	2200      	movs	r2, #0
 8082fd6:	4611      	mov	r1, r2
 8082fd8:	6840      	ldr	r0, [r0, #4]
 8082fda:	f7fe bef9 	b.w	8081dd0 <network_ready>

08082fde <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082fde:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8082fe2:	2600      	movs	r6, #0
 8082fe4:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082fe6:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082fe8:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082fea:	4688      	mov	r8, r1
 8082fec:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8082fee:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082ff2:	f001 ffad 	bl	8084f50 <strlen>
 8082ff6:	9600      	str	r6, [sp, #0]
 8082ff8:	b281      	uxth	r1, r0
 8082ffa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8082ffe:	4622      	mov	r2, r4
 8083000:	4638      	mov	r0, r7
 8083002:	f7fe fe41 	bl	8081c88 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8083006:	b120      	cbz	r0, 8083012 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8083008:	4631      	mov	r1, r6
 808300a:	4628      	mov	r0, r5
 808300c:	f7ff ff12 	bl	8082e34 <_ZN9IPAddressC1Em>
 8083010:	e003      	b.n	808301a <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8083012:	4621      	mov	r1, r4
 8083014:	4628      	mov	r0, r5
 8083016:	f7ff ff05 	bl	8082e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808301a:	4628      	mov	r0, r5
 808301c:	b004      	add	sp, #16
 808301e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083022 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8083022:	2200      	movs	r2, #0
 8083024:	4611      	mov	r1, r2
 8083026:	6840      	ldr	r0, [r0, #4]
 8083028:	f7fe bef2 	b.w	8081e10 <network_listening>

0808302c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808302c:	2200      	movs	r2, #0
 808302e:	4611      	mov	r1, r2
 8083030:	6840      	ldr	r0, [r0, #4]
 8083032:	f7fe befd 	b.w	8081e30 <network_get_listen_timeout>

08083036 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8083036:	2200      	movs	r2, #0
 8083038:	6840      	ldr	r0, [r0, #4]
 808303a:	f7fe bef1 	b.w	8081e20 <network_set_listen_timeout>

0808303e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808303e:	2200      	movs	r2, #0
 8083040:	f081 0101 	eor.w	r1, r1, #1
 8083044:	6840      	ldr	r0, [r0, #4]
 8083046:	f7fe bedb 	b.w	8081e00 <network_listen>

0808304a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808304a:	2300      	movs	r3, #0
 808304c:	461a      	mov	r2, r3
 808304e:	4619      	mov	r1, r3
 8083050:	6840      	ldr	r0, [r0, #4]
 8083052:	f7fe becd 	b.w	8081df0 <network_off>

08083056 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8083056:	2300      	movs	r3, #0
 8083058:	461a      	mov	r2, r3
 808305a:	4619      	mov	r1, r3
 808305c:	6840      	ldr	r0, [r0, #4]
 808305e:	f7fe bebf 	b.w	8081de0 <network_on>

08083062 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8083062:	2200      	movs	r2, #0
 8083064:	4611      	mov	r1, r2
 8083066:	6840      	ldr	r0, [r0, #4]
 8083068:	f7fe bea2 	b.w	8081db0 <network_connecting>

0808306c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808306c:	2200      	movs	r2, #0
 808306e:	2102      	movs	r1, #2
 8083070:	6840      	ldr	r0, [r0, #4]
 8083072:	f7fe bea5 	b.w	8081dc0 <network_disconnect>

08083076 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8083076:	2300      	movs	r3, #0
 8083078:	461a      	mov	r2, r3
 808307a:	6840      	ldr	r0, [r0, #4]
 808307c:	f7fe be90 	b.w	8081da0 <network_connect>

08083080 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8083080:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8083082:	4c08      	ldr	r4, [pc, #32]	; (80830a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8083084:	2528      	movs	r5, #40	; 0x28
 8083086:	462a      	mov	r2, r5
 8083088:	2100      	movs	r1, #0
 808308a:	4620      	mov	r0, r4
 808308c:	f001 f9df 	bl	808444e <memset>
        cid = -1;
 8083090:	f04f 33ff 	mov.w	r3, #4294967295
 8083094:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8083096:	4b04      	ldr	r3, [pc, #16]	; (80830a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8083098:	2204      	movs	r2, #4
 808309a:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808309c:	4a03      	ldr	r2, [pc, #12]	; (80830ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808309e:	8025      	strh	r5, [r4, #0]
 80830a0:	601a      	str	r2, [r3, #0]
 80830a2:	bd38      	pop	{r3, r4, r5, pc}
 80830a4:	20000474 	.word	0x20000474
 80830a8:	2000046c 	.word	0x2000046c
 80830ac:	08087ae4 	.word	0x08087ae4

080830b0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80830b0:	4770      	bx	lr

080830b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80830b2:	7441      	strb	r1, [r0, #17]
 80830b4:	4770      	bx	lr

080830b6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80830b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80830b8:	7c00      	ldrb	r0, [r0, #16]
 80830ba:	f7fe fd85 	bl	8081bc8 <HAL_USART_Available_Data_For_Write>
}
 80830be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80830c2:	bd08      	pop	{r3, pc}

080830c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80830c4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80830c6:	7c00      	ldrb	r0, [r0, #16]
 80830c8:	f7fe fd56 	bl	8081b78 <HAL_USART_Available_Data>
}
 80830cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80830d0:	bd08      	pop	{r3, pc}

080830d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80830d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80830d4:	7c00      	ldrb	r0, [r0, #16]
 80830d6:	f7fe fd5f 	bl	8081b98 <HAL_USART_Peek_Data>
}
 80830da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80830de:	bf28      	it	cs
 80830e0:	f04f 30ff 	movcs.w	r0, #4294967295
 80830e4:	bd08      	pop	{r3, pc}

080830e6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80830e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80830e8:	7c00      	ldrb	r0, [r0, #16]
 80830ea:	f7fe fd4d 	bl	8081b88 <HAL_USART_Read_Data>
}
 80830ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80830f2:	bf28      	it	cs
 80830f4:	f04f 30ff 	movcs.w	r0, #4294967295
 80830f8:	bd08      	pop	{r3, pc}

080830fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80830fa:	7c00      	ldrb	r0, [r0, #16]
 80830fc:	f7fe bd54 	b.w	8081ba8 <HAL_USART_Flush_Data>

08083100 <_ZN11USARTSerialD0Ev>:
 8083100:	b510      	push	{r4, lr}
 8083102:	4604      	mov	r4, r0
 8083104:	2114      	movs	r1, #20
 8083106:	f000 fa00 	bl	808350a <_ZdlPvj>
 808310a:	4620      	mov	r0, r4
 808310c:	bd10      	pop	{r4, pc}

0808310e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808310e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083110:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8083112:	4604      	mov	r4, r0
 8083114:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083116:	b925      	cbnz	r5, 8083122 <_ZN11USARTSerial5writeEh+0x14>
 8083118:	7c00      	ldrb	r0, [r0, #16]
 808311a:	f7fe fd55 	bl	8081bc8 <HAL_USART_Available_Data_For_Write>
 808311e:	2800      	cmp	r0, #0
 8083120:	dd05      	ble.n	808312e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083122:	4631      	mov	r1, r6
 8083124:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8083126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808312a:	f7fe bd1d 	b.w	8081b68 <HAL_USART_Write_Data>
  }
  return 0;
}
 808312e:	4628      	mov	r0, r5
 8083130:	bd70      	pop	{r4, r5, r6, pc}
	...

08083134 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083134:	b510      	push	{r4, lr}
 8083136:	4604      	mov	r4, r0
 8083138:	4608      	mov	r0, r1
 808313a:	4611      	mov	r1, r2
 808313c:	2200      	movs	r2, #0
 808313e:	6062      	str	r2, [r4, #4]
 8083140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083144:	60a2      	str	r2, [r4, #8]
 8083146:	4a05      	ldr	r2, [pc, #20]	; (808315c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8083148:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808314a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808314c:	2201      	movs	r2, #1
 808314e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8083150:	461a      	mov	r2, r3
 8083152:	f7fe fd01 	bl	8081b58 <HAL_USART_Init>
}
 8083156:	4620      	mov	r0, r4
 8083158:	bd10      	pop	{r4, pc}
 808315a:	bf00      	nop
 808315c:	08087b18 	.word	0x08087b18

08083160 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8083160:	7c00      	ldrb	r0, [r0, #16]
 8083162:	f7fe bd29 	b.w	8081bb8 <HAL_USART_Is_Enabled>
	...

08083168 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 808316a:	4c19      	ldr	r4, [pc, #100]	; (80831d0 <_Z22__fetch_global_Serial1v+0x68>)
 808316c:	6825      	ldr	r5, [r4, #0]
 808316e:	b94d      	cbnz	r5, 8083184 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 8083170:	2084      	movs	r0, #132	; 0x84
 8083172:	f7fc ff94 	bl	808009e <_Znwj>
 8083176:	4606      	mov	r6, r0
 8083178:	b118      	cbz	r0, 8083182 <_Z22__fetch_global_Serial1v+0x1a>
 808317a:	2284      	movs	r2, #132	; 0x84
 808317c:	4629      	mov	r1, r5
 808317e:	f001 f966 	bl	808444e <memset>
 8083182:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 8083184:	4d13      	ldr	r5, [pc, #76]	; (80831d4 <_Z22__fetch_global_Serial1v+0x6c>)
 8083186:	682e      	ldr	r6, [r5, #0]
 8083188:	b94e      	cbnz	r6, 808319e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 808318a:	2084      	movs	r0, #132	; 0x84
 808318c:	f7fc ff87 	bl	808009e <_Znwj>
 8083190:	4607      	mov	r7, r0
 8083192:	b118      	cbz	r0, 808319c <_Z22__fetch_global_Serial1v+0x34>
 8083194:	2284      	movs	r2, #132	; 0x84
 8083196:	4631      	mov	r1, r6
 8083198:	f001 f959 	bl	808444e <memset>
 808319c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 808319e:	4f0e      	ldr	r7, [pc, #56]	; (80831d8 <_Z22__fetch_global_Serial1v+0x70>)
 80831a0:	6839      	ldr	r1, [r7, #0]
 80831a2:	f011 0601 	ands.w	r6, r1, #1
 80831a6:	d111      	bne.n	80831cc <_Z22__fetch_global_Serial1v+0x64>
 80831a8:	4638      	mov	r0, r7
 80831aa:	f7fc ff7c 	bl	80800a6 <__cxa_guard_acquire>
 80831ae:	b168      	cbz	r0, 80831cc <_Z22__fetch_global_Serial1v+0x64>
 80831b0:	6822      	ldr	r2, [r4, #0]
 80831b2:	4631      	mov	r1, r6
 80831b4:	682b      	ldr	r3, [r5, #0]
 80831b6:	4809      	ldr	r0, [pc, #36]	; (80831dc <_Z22__fetch_global_Serial1v+0x74>)
 80831b8:	f7ff ffbc 	bl	8083134 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80831bc:	4638      	mov	r0, r7
 80831be:	f7fc ff77 	bl	80800b0 <__cxa_guard_release>
 80831c2:	4a07      	ldr	r2, [pc, #28]	; (80831e0 <_Z22__fetch_global_Serial1v+0x78>)
 80831c4:	4907      	ldr	r1, [pc, #28]	; (80831e4 <_Z22__fetch_global_Serial1v+0x7c>)
 80831c6:	4805      	ldr	r0, [pc, #20]	; (80831dc <_Z22__fetch_global_Serial1v+0x74>)
 80831c8:	f000 f99a 	bl	8083500 <__aeabi_atexit>
#endif
	return serial1;
}
 80831cc:	4803      	ldr	r0, [pc, #12]	; (80831dc <_Z22__fetch_global_Serial1v+0x74>)
 80831ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80831d0:	200004b8 	.word	0x200004b8
 80831d4:	200004b0 	.word	0x200004b0
 80831d8:	200004b4 	.word	0x200004b4
 80831dc:	2000049c 	.word	0x2000049c
 80831e0:	20000100 	.word	0x20000100
 80831e4:	080830b1 	.word	0x080830b1

080831e8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80831e8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80831ea:	6883      	ldr	r3, [r0, #8]
 80831ec:	4604      	mov	r4, r0
 80831ee:	b90b      	cbnz	r3, 80831f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80831f0:	f000 f98d 	bl	808350e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80831f4:	68c3      	ldr	r3, [r0, #12]
 80831f6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80831f8:	68a3      	ldr	r3, [r4, #8]
 80831fa:	b11b      	cbz	r3, 8083204 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80831fc:	2203      	movs	r2, #3
 80831fe:	4621      	mov	r1, r4
 8083200:	4620      	mov	r0, r4
 8083202:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8083204:	4620      	mov	r0, r4
}
 8083206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808320a:	2110      	movs	r1, #16
 808320c:	f000 b97d 	b.w	808350a <_ZdlPvj>

08083210 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8083210:	4770      	bx	lr

08083212 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8083212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083214:	4606      	mov	r6, r0
 8083216:	4615      	mov	r5, r2
 8083218:	460c      	mov	r4, r1
 808321a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808321c:	42bc      	cmp	r4, r7
 808321e:	d006      	beq.n	808322e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8083220:	6833      	ldr	r3, [r6, #0]
 8083222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8083226:	689b      	ldr	r3, [r3, #8]
 8083228:	4630      	mov	r0, r6
 808322a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808322c:	e7f6      	b.n	808321c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808322e:	4628      	mov	r0, r5
 8083230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083232 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8083232:	2200      	movs	r2, #0
 8083234:	7c00      	ldrb	r0, [r0, #16]
 8083236:	f7fe bcef 	b.w	8081c18 <HAL_I2C_Write_Data>

0808323a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808323a:	2100      	movs	r1, #0
 808323c:	7c00      	ldrb	r0, [r0, #16]
 808323e:	f7fe bcf3 	b.w	8081c28 <HAL_I2C_Available_Data>

08083242 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8083242:	2100      	movs	r1, #0
 8083244:	7c00      	ldrb	r0, [r0, #16]
 8083246:	f7fe bcf7 	b.w	8081c38 <HAL_I2C_Read_Data>

0808324a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808324a:	2100      	movs	r1, #0
 808324c:	7c00      	ldrb	r0, [r0, #16]
 808324e:	f7fe bcfb 	b.w	8081c48 <HAL_I2C_Peek_Data>

08083252 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8083252:	2100      	movs	r1, #0
 8083254:	7c00      	ldrb	r0, [r0, #16]
 8083256:	f7fe bcff 	b.w	8081c58 <HAL_I2C_Flush_Data>

0808325a <_ZN7TwoWireD0Ev>:
 808325a:	b510      	push	{r4, lr}
 808325c:	4604      	mov	r4, r0
 808325e:	2114      	movs	r1, #20
 8083260:	f000 f953 	bl	808350a <_ZdlPvj>
 8083264:	4620      	mov	r0, r4
 8083266:	bd10      	pop	{r4, pc}

08083268 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8083268:	b510      	push	{r4, lr}
 808326a:	4604      	mov	r4, r0
 808326c:	4608      	mov	r0, r1
 808326e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083272:	60a3      	str	r3, [r4, #8]
 8083274:	4b04      	ldr	r3, [pc, #16]	; (8083288 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8083276:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8083278:	7420      	strb	r0, [r4, #16]
 808327a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808327c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808327e:	f7fe fcfb 	bl	8081c78 <HAL_I2C_Init>

}
 8083282:	4620      	mov	r0, r4
 8083284:	bd10      	pop	{r4, pc}
 8083286:	bf00      	nop
 8083288:	08087b48 	.word	0x08087b48

0808328c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808328c:	2300      	movs	r3, #0
 808328e:	461a      	mov	r2, r3
 8083290:	4619      	mov	r1, r3
 8083292:	7c00      	ldrb	r0, [r0, #16]
 8083294:	f7fe bca0 	b.w	8081bd8 <HAL_I2C_Begin>

08083298 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8083298:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808329a:	2400      	movs	r4, #0
 808329c:	7c00      	ldrb	r0, [r0, #16]
 808329e:	9400      	str	r4, [sp, #0]
 80832a0:	f7fe fca2 	bl	8081be8 <HAL_I2C_Request_Data>
  return result;
}
 80832a4:	b2c0      	uxtb	r0, r0
 80832a6:	b002      	add	sp, #8
 80832a8:	bd10      	pop	{r4, pc}

080832aa <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80832aa:	2301      	movs	r3, #1
 80832ac:	f7ff bff4 	b.w	8083298 <_ZN7TwoWire11requestFromEhhh>

080832b0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80832b0:	2200      	movs	r2, #0
 80832b2:	7c00      	ldrb	r0, [r0, #16]
 80832b4:	f7fe bca0 	b.w	8081bf8 <HAL_I2C_Begin_Transmission>

080832b8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80832b8:	2200      	movs	r2, #0
 80832ba:	7c00      	ldrb	r0, [r0, #16]
 80832bc:	f7fe bca4 	b.w	8081c08 <HAL_I2C_End_Transmission>

080832c0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80832c0:	2101      	movs	r1, #1
 80832c2:	f7ff bff9 	b.w	80832b8 <_ZN7TwoWire15endTransmissionEh>

080832c6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80832c6:	2100      	movs	r1, #0
 80832c8:	7c00      	ldrb	r0, [r0, #16]
 80832ca:	f7fe bccd 	b.w	8081c68 <HAL_I2C_Is_Enabled>

080832ce <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80832ce:	2300      	movs	r3, #0
 80832d0:	461a      	mov	r2, r3
 80832d2:	6840      	ldr	r0, [r0, #4]
 80832d4:	f7fe bd64 	b.w	8081da0 <network_connect>

080832d8 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80832d8:	2200      	movs	r2, #0
 80832da:	2102      	movs	r1, #2
 80832dc:	6840      	ldr	r0, [r0, #4]
 80832de:	f7fe bd6f 	b.w	8081dc0 <network_disconnect>

080832e2 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80832e2:	2200      	movs	r2, #0
 80832e4:	4611      	mov	r1, r2
 80832e6:	6840      	ldr	r0, [r0, #4]
 80832e8:	f7fe bd62 	b.w	8081db0 <network_connecting>

080832ec <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80832ec:	2200      	movs	r2, #0
 80832ee:	4611      	mov	r1, r2
 80832f0:	6840      	ldr	r0, [r0, #4]
 80832f2:	f7fe bd6d 	b.w	8081dd0 <network_ready>

080832f6 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80832f6:	2300      	movs	r3, #0
 80832f8:	461a      	mov	r2, r3
 80832fa:	4619      	mov	r1, r3
 80832fc:	6840      	ldr	r0, [r0, #4]
 80832fe:	f7fe bd6f 	b.w	8081de0 <network_on>

08083302 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8083302:	2300      	movs	r3, #0
 8083304:	461a      	mov	r2, r3
 8083306:	4619      	mov	r1, r3
 8083308:	6840      	ldr	r0, [r0, #4]
 808330a:	f7fe bd71 	b.w	8081df0 <network_off>

0808330e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808330e:	2200      	movs	r2, #0
 8083310:	f081 0101 	eor.w	r1, r1, #1
 8083314:	6840      	ldr	r0, [r0, #4]
 8083316:	f7fe bd73 	b.w	8081e00 <network_listen>

0808331a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808331a:	2200      	movs	r2, #0
 808331c:	6840      	ldr	r0, [r0, #4]
 808331e:	f7fe bd7f 	b.w	8081e20 <network_set_listen_timeout>

08083322 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8083322:	2200      	movs	r2, #0
 8083324:	4611      	mov	r1, r2
 8083326:	6840      	ldr	r0, [r0, #4]
 8083328:	f7fe bd82 	b.w	8081e30 <network_get_listen_timeout>

0808332c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808332c:	2200      	movs	r2, #0
 808332e:	4611      	mov	r1, r2
 8083330:	6840      	ldr	r0, [r0, #4]
 8083332:	f7fe bd6d 	b.w	8081e10 <network_listening>
	...

08083338 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8083338:	b5f0      	push	{r4, r5, r6, r7, lr}
 808333a:	4617      	mov	r7, r2
 808333c:	b087      	sub	sp, #28
 808333e:	4605      	mov	r5, r0
    IPAddress addr;
 8083340:	a804      	add	r0, sp, #16
 8083342:	f7ff fd67 	bl	8082e14 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8083346:	2600      	movs	r6, #0
 8083348:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808334a:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808334c:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083350:	f001 fdfe 	bl	8084f50 <strlen>
 8083354:	4b0a      	ldr	r3, [pc, #40]	; (8083380 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8083356:	9600      	str	r6, [sp, #0]
 8083358:	b281      	uxth	r1, r0
 808335a:	685b      	ldr	r3, [r3, #4]
 808335c:	4622      	mov	r2, r4
 808335e:	4638      	mov	r0, r7
 8083360:	f7fe fc92 	bl	8081c88 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8083364:	b120      	cbz	r0, 8083370 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8083366:	4631      	mov	r1, r6
 8083368:	4628      	mov	r0, r5
 808336a:	f7ff fd63 	bl	8082e34 <_ZN9IPAddressC1Em>
 808336e:	e003      	b.n	8083378 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8083370:	4621      	mov	r1, r4
 8083372:	4628      	mov	r0, r5
 8083374:	f7ff fd56 	bl	8082e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8083378:	4628      	mov	r0, r5
 808337a:	b007      	add	sp, #28
 808337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808337e:	bf00      	nop
 8083380:	2000046c 	.word	0x2000046c

08083384 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8083384:	4b02      	ldr	r3, [pc, #8]	; (8083390 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8083386:	4a03      	ldr	r2, [pc, #12]	; (8083394 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8083388:	601a      	str	r2, [r3, #0]
 808338a:	2200      	movs	r2, #0
 808338c:	605a      	str	r2, [r3, #4]
 808338e:	4770      	bx	lr
 8083390:	200004bc 	.word	0x200004bc
 8083394:	08087b70 	.word	0x08087b70

08083398 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083398:	b510      	push	{r4, lr}
 808339a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808339c:	480f      	ldr	r0, [pc, #60]	; (80833dc <pinAvailable+0x44>)
 808339e:	f7fe fe03 	bl	8081fa8 <_ZN8SPIClass9isEnabledEv>
 80833a2:	b128      	cbz	r0, 80833b0 <pinAvailable+0x18>
 80833a4:	f1a4 030d 	sub.w	r3, r4, #13
 80833a8:	2b02      	cmp	r3, #2
 80833aa:	d801      	bhi.n	80833b0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80833ac:	2000      	movs	r0, #0
 80833ae:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80833b0:	f000 f886 	bl	80834c0 <_Z19__fetch_global_Wirev>
 80833b4:	f7ff ff87 	bl	80832c6 <_ZN7TwoWire9isEnabledEv>
 80833b8:	b108      	cbz	r0, 80833be <pinAvailable+0x26>
 80833ba:	2c01      	cmp	r4, #1
 80833bc:	d9f6      	bls.n	80833ac <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80833be:	f7ff fed3 	bl	8083168 <_Z22__fetch_global_Serial1v>
 80833c2:	f7ff fecd 	bl	8083160 <_ZN11USARTSerial9isEnabledEv>
 80833c6:	b118      	cbz	r0, 80833d0 <pinAvailable+0x38>
 80833c8:	f1a4 0312 	sub.w	r3, r4, #18
 80833cc:	2b01      	cmp	r3, #1
 80833ce:	d9ed      	bls.n	80833ac <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80833d0:	2c2e      	cmp	r4, #46	; 0x2e
 80833d2:	bf8c      	ite	hi
 80833d4:	2000      	movhi	r0, #0
 80833d6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80833d8:	bd10      	pop	{r4, pc}
 80833da:	bf00      	nop
 80833dc:	200004c4 	.word	0x200004c4

080833e0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80833e0:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80833e2:	b538      	push	{r3, r4, r5, lr}
 80833e4:	4604      	mov	r4, r0
 80833e6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80833e8:	d80a      	bhi.n	8083400 <pinMode+0x20>
 80833ea:	29ff      	cmp	r1, #255	; 0xff
 80833ec:	d008      	beq.n	8083400 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80833ee:	f7ff ffd3 	bl	8083398 <pinAvailable>
 80833f2:	b128      	cbz	r0, 8083400 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80833f4:	4629      	mov	r1, r5
 80833f6:	4620      	mov	r0, r4
}
 80833f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80833fc:	f7fe bb54 	b.w	8081aa8 <HAL_Pin_Mode>
 8083400:	bd38      	pop	{r3, r4, r5, pc}

08083402 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083402:	b538      	push	{r3, r4, r5, lr}
 8083404:	4604      	mov	r4, r0
 8083406:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083408:	f7fe fb56 	bl	8081ab8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808340c:	28ff      	cmp	r0, #255	; 0xff
 808340e:	d010      	beq.n	8083432 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083410:	2806      	cmp	r0, #6
 8083412:	d804      	bhi.n	808341e <digitalWrite+0x1c>
 8083414:	234d      	movs	r3, #77	; 0x4d
 8083416:	fa23 f000 	lsr.w	r0, r3, r0
 808341a:	07c3      	lsls	r3, r0, #31
 808341c:	d409      	bmi.n	8083432 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808341e:	4620      	mov	r0, r4
 8083420:	f7ff ffba 	bl	8083398 <pinAvailable>
 8083424:	b128      	cbz	r0, 8083432 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083426:	4629      	mov	r1, r5
 8083428:	4620      	mov	r0, r4
}
 808342a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808342e:	f7fe bb4b 	b.w	8081ac8 <HAL_GPIO_Write>
 8083432:	bd38      	pop	{r3, r4, r5, pc}

08083434 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083434:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8083436:	4e11      	ldr	r6, [pc, #68]	; (808347c <_GLOBAL__sub_I_SPI+0x48>)
 8083438:	4d11      	ldr	r5, [pc, #68]	; (8083480 <_GLOBAL__sub_I_SPI+0x4c>)
 808343a:	4c12      	ldr	r4, [pc, #72]	; (8083484 <_GLOBAL__sub_I_SPI+0x50>)
 808343c:	2100      	movs	r1, #0
 808343e:	4630      	mov	r0, r6
 8083440:	f7fe fd9e 	bl	8081f80 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083444:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083446:	4e10      	ldr	r6, [pc, #64]	; (8083488 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8083448:	462a      	mov	r2, r5
 808344a:	4621      	mov	r1, r4
 808344c:	f000 f858 	bl	8083500 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083450:	2101      	movs	r1, #1
 8083452:	4630      	mov	r0, r6
 8083454:	f7fe fd94 	bl	8081f80 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083458:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808345a:	4e0c      	ldr	r6, [pc, #48]	; (808348c <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808345c:	462a      	mov	r2, r5
 808345e:	4621      	mov	r1, r4
 8083460:	f000 f84e 	bl	8083500 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083464:	2102      	movs	r1, #2
 8083466:	4630      	mov	r0, r6
 8083468:	f7fe fd8a 	bl	8081f80 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808346c:	462a      	mov	r2, r5
 808346e:	4621      	mov	r1, r4
 8083470:	4630      	mov	r0, r6
 8083472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083476:	f000 b843 	b.w	8083500 <__aeabi_atexit>
 808347a:	bf00      	nop
 808347c:	200004c4 	.word	0x200004c4
 8083480:	20000100 	.word	0x20000100
 8083484:	08081f71 	.word	0x08081f71
 8083488:	200004d4 	.word	0x200004d4
 808348c:	200004e4 	.word	0x200004e4

08083490 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083490:	b513      	push	{r0, r1, r4, lr}
 8083492:	4c08      	ldr	r4, [pc, #32]	; (80834b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083494:	2300      	movs	r3, #0
 8083496:	461a      	mov	r2, r3
 8083498:	4619      	mov	r1, r3
 808349a:	9300      	str	r3, [sp, #0]
 808349c:	4620      	mov	r0, r4
 808349e:	f7ff fcdb 	bl	8082e58 <_ZN9IPAddressC1Ehhhh>
 80834a2:	4620      	mov	r0, r4
 80834a4:	4a04      	ldr	r2, [pc, #16]	; (80834b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80834a6:	4905      	ldr	r1, [pc, #20]	; (80834bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80834a8:	b002      	add	sp, #8
 80834aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80834ae:	f000 b827 	b.w	8083500 <__aeabi_atexit>
 80834b2:	bf00      	nop
 80834b4:	200004f8 	.word	0x200004f8
 80834b8:	20000100 	.word	0x20000100
 80834bc:	08082dd1 	.word	0x08082dd1

080834c0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80834c0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80834c2:	4d0b      	ldr	r5, [pc, #44]	; (80834f0 <_Z19__fetch_global_Wirev+0x30>)
 80834c4:	6829      	ldr	r1, [r5, #0]
 80834c6:	f011 0401 	ands.w	r4, r1, #1
 80834ca:	d10f      	bne.n	80834ec <_Z19__fetch_global_Wirev+0x2c>
 80834cc:	4628      	mov	r0, r5
 80834ce:	f7fc fdea 	bl	80800a6 <__cxa_guard_acquire>
 80834d2:	b158      	cbz	r0, 80834ec <_Z19__fetch_global_Wirev+0x2c>
 80834d4:	4621      	mov	r1, r4
 80834d6:	4807      	ldr	r0, [pc, #28]	; (80834f4 <_Z19__fetch_global_Wirev+0x34>)
 80834d8:	f7ff fec6 	bl	8083268 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80834dc:	4628      	mov	r0, r5
 80834de:	f7fc fde7 	bl	80800b0 <__cxa_guard_release>
 80834e2:	4a05      	ldr	r2, [pc, #20]	; (80834f8 <_Z19__fetch_global_Wirev+0x38>)
 80834e4:	4905      	ldr	r1, [pc, #20]	; (80834fc <_Z19__fetch_global_Wirev+0x3c>)
 80834e6:	4803      	ldr	r0, [pc, #12]	; (80834f4 <_Z19__fetch_global_Wirev+0x34>)
 80834e8:	f000 f80a 	bl	8083500 <__aeabi_atexit>
	return wire;
}
 80834ec:	4801      	ldr	r0, [pc, #4]	; (80834f4 <_Z19__fetch_global_Wirev+0x34>)
 80834ee:	bd38      	pop	{r3, r4, r5, pc}
 80834f0:	20000500 	.word	0x20000500
 80834f4:	20000504 	.word	0x20000504
 80834f8:	20000100 	.word	0x20000100
 80834fc:	08083211 	.word	0x08083211

08083500 <__aeabi_atexit>:
 8083500:	460b      	mov	r3, r1
 8083502:	4601      	mov	r1, r0
 8083504:	4618      	mov	r0, r3
 8083506:	f000 be8d 	b.w	8084224 <__cxa_atexit>

0808350a <_ZdlPvj>:
 808350a:	f7fc bdca 	b.w	80800a2 <_ZdlPv>

0808350e <_ZSt25__throw_bad_function_callv>:
 808350e:	b508      	push	{r3, lr}
 8083510:	f7fe fd1e 	bl	8081f50 <abort>

08083514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083514:	4b18      	ldr	r3, [pc, #96]	; (8083578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083516:	681a      	ldr	r2, [r3, #0]
 8083518:	07d1      	lsls	r1, r2, #31
 808351a:	bf5c      	itt	pl
 808351c:	2201      	movpl	r2, #1
 808351e:	601a      	strpl	r2, [r3, #0]
 8083520:	4b16      	ldr	r3, [pc, #88]	; (808357c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083522:	681a      	ldr	r2, [r3, #0]
 8083524:	07d2      	lsls	r2, r2, #31
 8083526:	bf5c      	itt	pl
 8083528:	2201      	movpl	r2, #1
 808352a:	601a      	strpl	r2, [r3, #0]
 808352c:	4b14      	ldr	r3, [pc, #80]	; (8083580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808352e:	681a      	ldr	r2, [r3, #0]
 8083530:	07d0      	lsls	r0, r2, #31
 8083532:	bf5c      	itt	pl
 8083534:	2201      	movpl	r2, #1
 8083536:	601a      	strpl	r2, [r3, #0]
 8083538:	4b12      	ldr	r3, [pc, #72]	; (8083584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808353a:	681a      	ldr	r2, [r3, #0]
 808353c:	07d1      	lsls	r1, r2, #31
 808353e:	bf5c      	itt	pl
 8083540:	2201      	movpl	r2, #1
 8083542:	601a      	strpl	r2, [r3, #0]
 8083544:	4b10      	ldr	r3, [pc, #64]	; (8083588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083546:	681a      	ldr	r2, [r3, #0]
 8083548:	07d2      	lsls	r2, r2, #31
 808354a:	bf5c      	itt	pl
 808354c:	2201      	movpl	r2, #1
 808354e:	601a      	strpl	r2, [r3, #0]
 8083550:	4b0e      	ldr	r3, [pc, #56]	; (808358c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083552:	681a      	ldr	r2, [r3, #0]
 8083554:	07d0      	lsls	r0, r2, #31
 8083556:	bf5c      	itt	pl
 8083558:	2201      	movpl	r2, #1
 808355a:	601a      	strpl	r2, [r3, #0]
 808355c:	4b0c      	ldr	r3, [pc, #48]	; (8083590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808355e:	681a      	ldr	r2, [r3, #0]
 8083560:	07d1      	lsls	r1, r2, #31
 8083562:	bf5c      	itt	pl
 8083564:	2201      	movpl	r2, #1
 8083566:	601a      	strpl	r2, [r3, #0]
 8083568:	4b0a      	ldr	r3, [pc, #40]	; (8083594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808356a:	681a      	ldr	r2, [r3, #0]
 808356c:	07d2      	lsls	r2, r2, #31
 808356e:	bf5c      	itt	pl
 8083570:	2201      	movpl	r2, #1
 8083572:	601a      	strpl	r2, [r3, #0]
 8083574:	4770      	bx	lr
 8083576:	bf00      	nop
 8083578:	20000534 	.word	0x20000534
 808357c:	20000530 	.word	0x20000530
 8083580:	2000052c 	.word	0x2000052c
 8083584:	20000528 	.word	0x20000528
 8083588:	20000524 	.word	0x20000524
 808358c:	20000520 	.word	0x20000520
 8083590:	2000051c 	.word	0x2000051c
 8083594:	20000518 	.word	0x20000518

08083598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8083598:	4b24      	ldr	r3, [pc, #144]	; (808362c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808359a:	681a      	ldr	r2, [r3, #0]
 808359c:	07d0      	lsls	r0, r2, #31
 808359e:	bf5c      	itt	pl
 80835a0:	2201      	movpl	r2, #1
 80835a2:	601a      	strpl	r2, [r3, #0]
 80835a4:	4b22      	ldr	r3, [pc, #136]	; (8083630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80835a6:	681a      	ldr	r2, [r3, #0]
 80835a8:	07d1      	lsls	r1, r2, #31
 80835aa:	bf5c      	itt	pl
 80835ac:	2201      	movpl	r2, #1
 80835ae:	601a      	strpl	r2, [r3, #0]
 80835b0:	4b20      	ldr	r3, [pc, #128]	; (8083634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80835b2:	681a      	ldr	r2, [r3, #0]
 80835b4:	07d2      	lsls	r2, r2, #31
 80835b6:	bf5c      	itt	pl
 80835b8:	2201      	movpl	r2, #1
 80835ba:	601a      	strpl	r2, [r3, #0]
 80835bc:	4b1e      	ldr	r3, [pc, #120]	; (8083638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80835be:	681a      	ldr	r2, [r3, #0]
 80835c0:	07d0      	lsls	r0, r2, #31
 80835c2:	bf5c      	itt	pl
 80835c4:	2201      	movpl	r2, #1
 80835c6:	601a      	strpl	r2, [r3, #0]
 80835c8:	4b1c      	ldr	r3, [pc, #112]	; (808363c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80835ca:	681a      	ldr	r2, [r3, #0]
 80835cc:	07d1      	lsls	r1, r2, #31
 80835ce:	bf5c      	itt	pl
 80835d0:	2201      	movpl	r2, #1
 80835d2:	601a      	strpl	r2, [r3, #0]
 80835d4:	4b1a      	ldr	r3, [pc, #104]	; (8083640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80835d6:	681a      	ldr	r2, [r3, #0]
 80835d8:	07d2      	lsls	r2, r2, #31
 80835da:	bf5c      	itt	pl
 80835dc:	2201      	movpl	r2, #1
 80835de:	601a      	strpl	r2, [r3, #0]
 80835e0:	4b18      	ldr	r3, [pc, #96]	; (8083644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80835e2:	681a      	ldr	r2, [r3, #0]
 80835e4:	07d0      	lsls	r0, r2, #31
 80835e6:	bf5c      	itt	pl
 80835e8:	2201      	movpl	r2, #1
 80835ea:	601a      	strpl	r2, [r3, #0]
 80835ec:	4b16      	ldr	r3, [pc, #88]	; (8083648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80835ee:	681a      	ldr	r2, [r3, #0]
 80835f0:	07d1      	lsls	r1, r2, #31
 80835f2:	bf5c      	itt	pl
 80835f4:	2201      	movpl	r2, #1
 80835f6:	601a      	strpl	r2, [r3, #0]
 80835f8:	4b14      	ldr	r3, [pc, #80]	; (808364c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80835fa:	681a      	ldr	r2, [r3, #0]
 80835fc:	07d2      	lsls	r2, r2, #31
 80835fe:	bf5c      	itt	pl
 8083600:	2201      	movpl	r2, #1
 8083602:	601a      	strpl	r2, [r3, #0]
 8083604:	4b12      	ldr	r3, [pc, #72]	; (8083650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8083606:	681a      	ldr	r2, [r3, #0]
 8083608:	07d0      	lsls	r0, r2, #31
 808360a:	bf5c      	itt	pl
 808360c:	2201      	movpl	r2, #1
 808360e:	601a      	strpl	r2, [r3, #0]
 8083610:	4b10      	ldr	r3, [pc, #64]	; (8083654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083612:	681a      	ldr	r2, [r3, #0]
 8083614:	07d1      	lsls	r1, r2, #31
 8083616:	bf5c      	itt	pl
 8083618:	2201      	movpl	r2, #1
 808361a:	601a      	strpl	r2, [r3, #0]
 808361c:	4b0e      	ldr	r3, [pc, #56]	; (8083658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808361e:	681a      	ldr	r2, [r3, #0]
 8083620:	07d2      	lsls	r2, r2, #31
 8083622:	bf5c      	itt	pl
 8083624:	2201      	movpl	r2, #1
 8083626:	601a      	strpl	r2, [r3, #0]
 8083628:	4770      	bx	lr
 808362a:	bf00      	nop
 808362c:	20000564 	.word	0x20000564
 8083630:	20000560 	.word	0x20000560
 8083634:	2000055c 	.word	0x2000055c
 8083638:	20000558 	.word	0x20000558
 808363c:	20000554 	.word	0x20000554
 8083640:	20000550 	.word	0x20000550
 8083644:	2000054c 	.word	0x2000054c
 8083648:	20000548 	.word	0x20000548
 808364c:	20000544 	.word	0x20000544
 8083650:	20000540 	.word	0x20000540
 8083654:	2000053c 	.word	0x2000053c
 8083658:	20000538 	.word	0x20000538

0808365c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808365c:	4b24      	ldr	r3, [pc, #144]	; (80836f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808365e:	681a      	ldr	r2, [r3, #0]
 8083660:	07d0      	lsls	r0, r2, #31
 8083662:	bf5c      	itt	pl
 8083664:	2201      	movpl	r2, #1
 8083666:	601a      	strpl	r2, [r3, #0]
 8083668:	4b22      	ldr	r3, [pc, #136]	; (80836f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808366a:	681a      	ldr	r2, [r3, #0]
 808366c:	07d1      	lsls	r1, r2, #31
 808366e:	bf5c      	itt	pl
 8083670:	2201      	movpl	r2, #1
 8083672:	601a      	strpl	r2, [r3, #0]
 8083674:	4b20      	ldr	r3, [pc, #128]	; (80836f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8083676:	681a      	ldr	r2, [r3, #0]
 8083678:	07d2      	lsls	r2, r2, #31
 808367a:	bf5c      	itt	pl
 808367c:	2201      	movpl	r2, #1
 808367e:	601a      	strpl	r2, [r3, #0]
 8083680:	4b1e      	ldr	r3, [pc, #120]	; (80836fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8083682:	681a      	ldr	r2, [r3, #0]
 8083684:	07d0      	lsls	r0, r2, #31
 8083686:	bf5c      	itt	pl
 8083688:	2201      	movpl	r2, #1
 808368a:	601a      	strpl	r2, [r3, #0]
 808368c:	4b1c      	ldr	r3, [pc, #112]	; (8083700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808368e:	681a      	ldr	r2, [r3, #0]
 8083690:	07d1      	lsls	r1, r2, #31
 8083692:	bf5c      	itt	pl
 8083694:	2201      	movpl	r2, #1
 8083696:	601a      	strpl	r2, [r3, #0]
 8083698:	4b1a      	ldr	r3, [pc, #104]	; (8083704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808369a:	681a      	ldr	r2, [r3, #0]
 808369c:	07d2      	lsls	r2, r2, #31
 808369e:	bf5c      	itt	pl
 80836a0:	2201      	movpl	r2, #1
 80836a2:	601a      	strpl	r2, [r3, #0]
 80836a4:	4b18      	ldr	r3, [pc, #96]	; (8083708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80836a6:	681a      	ldr	r2, [r3, #0]
 80836a8:	07d0      	lsls	r0, r2, #31
 80836aa:	bf5c      	itt	pl
 80836ac:	2201      	movpl	r2, #1
 80836ae:	601a      	strpl	r2, [r3, #0]
 80836b0:	4b16      	ldr	r3, [pc, #88]	; (808370c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80836b2:	681a      	ldr	r2, [r3, #0]
 80836b4:	07d1      	lsls	r1, r2, #31
 80836b6:	bf5c      	itt	pl
 80836b8:	2201      	movpl	r2, #1
 80836ba:	601a      	strpl	r2, [r3, #0]
 80836bc:	4b14      	ldr	r3, [pc, #80]	; (8083710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80836be:	681a      	ldr	r2, [r3, #0]
 80836c0:	07d2      	lsls	r2, r2, #31
 80836c2:	bf5c      	itt	pl
 80836c4:	2201      	movpl	r2, #1
 80836c6:	601a      	strpl	r2, [r3, #0]
 80836c8:	4b12      	ldr	r3, [pc, #72]	; (8083714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80836ca:	681a      	ldr	r2, [r3, #0]
 80836cc:	07d0      	lsls	r0, r2, #31
 80836ce:	bf5c      	itt	pl
 80836d0:	2201      	movpl	r2, #1
 80836d2:	601a      	strpl	r2, [r3, #0]
 80836d4:	4b10      	ldr	r3, [pc, #64]	; (8083718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80836d6:	681a      	ldr	r2, [r3, #0]
 80836d8:	07d1      	lsls	r1, r2, #31
 80836da:	bf5c      	itt	pl
 80836dc:	2201      	movpl	r2, #1
 80836de:	601a      	strpl	r2, [r3, #0]
 80836e0:	4b0e      	ldr	r3, [pc, #56]	; (808371c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80836e2:	681a      	ldr	r2, [r3, #0]
 80836e4:	07d2      	lsls	r2, r2, #31
 80836e6:	bf5c      	itt	pl
 80836e8:	2201      	movpl	r2, #1
 80836ea:	601a      	strpl	r2, [r3, #0]
 80836ec:	4770      	bx	lr
 80836ee:	bf00      	nop
 80836f0:	20000594 	.word	0x20000594
 80836f4:	20000590 	.word	0x20000590
 80836f8:	2000058c 	.word	0x2000058c
 80836fc:	20000588 	.word	0x20000588
 8083700:	20000584 	.word	0x20000584
 8083704:	20000580 	.word	0x20000580
 8083708:	2000057c 	.word	0x2000057c
 808370c:	20000578 	.word	0x20000578
 8083710:	20000574 	.word	0x20000574
 8083714:	20000570 	.word	0x20000570
 8083718:	2000056c 	.word	0x2000056c
 808371c:	20000568 	.word	0x20000568

08083720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083720:	4b18      	ldr	r3, [pc, #96]	; (8083784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083722:	681a      	ldr	r2, [r3, #0]
 8083724:	07d1      	lsls	r1, r2, #31
 8083726:	bf5c      	itt	pl
 8083728:	2201      	movpl	r2, #1
 808372a:	601a      	strpl	r2, [r3, #0]
 808372c:	4b16      	ldr	r3, [pc, #88]	; (8083788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808372e:	681a      	ldr	r2, [r3, #0]
 8083730:	07d2      	lsls	r2, r2, #31
 8083732:	bf5c      	itt	pl
 8083734:	2201      	movpl	r2, #1
 8083736:	601a      	strpl	r2, [r3, #0]
 8083738:	4b14      	ldr	r3, [pc, #80]	; (808378c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808373a:	681a      	ldr	r2, [r3, #0]
 808373c:	07d0      	lsls	r0, r2, #31
 808373e:	bf5c      	itt	pl
 8083740:	2201      	movpl	r2, #1
 8083742:	601a      	strpl	r2, [r3, #0]
 8083744:	4b12      	ldr	r3, [pc, #72]	; (8083790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083746:	681a      	ldr	r2, [r3, #0]
 8083748:	07d1      	lsls	r1, r2, #31
 808374a:	bf5c      	itt	pl
 808374c:	2201      	movpl	r2, #1
 808374e:	601a      	strpl	r2, [r3, #0]
 8083750:	4b10      	ldr	r3, [pc, #64]	; (8083794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083752:	681a      	ldr	r2, [r3, #0]
 8083754:	07d2      	lsls	r2, r2, #31
 8083756:	bf5c      	itt	pl
 8083758:	2201      	movpl	r2, #1
 808375a:	601a      	strpl	r2, [r3, #0]
 808375c:	4b0e      	ldr	r3, [pc, #56]	; (8083798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808375e:	681a      	ldr	r2, [r3, #0]
 8083760:	07d0      	lsls	r0, r2, #31
 8083762:	bf5c      	itt	pl
 8083764:	2201      	movpl	r2, #1
 8083766:	601a      	strpl	r2, [r3, #0]
 8083768:	4b0c      	ldr	r3, [pc, #48]	; (808379c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808376a:	681a      	ldr	r2, [r3, #0]
 808376c:	07d1      	lsls	r1, r2, #31
 808376e:	bf5c      	itt	pl
 8083770:	2201      	movpl	r2, #1
 8083772:	601a      	strpl	r2, [r3, #0]
 8083774:	4b0a      	ldr	r3, [pc, #40]	; (80837a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083776:	681a      	ldr	r2, [r3, #0]
 8083778:	07d2      	lsls	r2, r2, #31
 808377a:	bf5c      	itt	pl
 808377c:	2201      	movpl	r2, #1
 808377e:	601a      	strpl	r2, [r3, #0]
 8083780:	4770      	bx	lr
 8083782:	bf00      	nop
 8083784:	200005b4 	.word	0x200005b4
 8083788:	200005b0 	.word	0x200005b0
 808378c:	200005ac 	.word	0x200005ac
 8083790:	200005a8 	.word	0x200005a8
 8083794:	200005a4 	.word	0x200005a4
 8083798:	200005a0 	.word	0x200005a0
 808379c:	2000059c 	.word	0x2000059c
 80837a0:	20000598 	.word	0x20000598

080837a4 <__aeabi_drsub>:
 80837a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80837a8:	e002      	b.n	80837b0 <__adddf3>
 80837aa:	bf00      	nop

080837ac <__aeabi_dsub>:
 80837ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080837b0 <__adddf3>:
 80837b0:	b530      	push	{r4, r5, lr}
 80837b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80837b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80837ba:	ea94 0f05 	teq	r4, r5
 80837be:	bf08      	it	eq
 80837c0:	ea90 0f02 	teqeq	r0, r2
 80837c4:	bf1f      	itttt	ne
 80837c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80837ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80837ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80837d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80837d6:	f000 80e2 	beq.w	808399e <__adddf3+0x1ee>
 80837da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80837de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80837e2:	bfb8      	it	lt
 80837e4:	426d      	neglt	r5, r5
 80837e6:	dd0c      	ble.n	8083802 <__adddf3+0x52>
 80837e8:	442c      	add	r4, r5
 80837ea:	ea80 0202 	eor.w	r2, r0, r2
 80837ee:	ea81 0303 	eor.w	r3, r1, r3
 80837f2:	ea82 0000 	eor.w	r0, r2, r0
 80837f6:	ea83 0101 	eor.w	r1, r3, r1
 80837fa:	ea80 0202 	eor.w	r2, r0, r2
 80837fe:	ea81 0303 	eor.w	r3, r1, r3
 8083802:	2d36      	cmp	r5, #54	; 0x36
 8083804:	bf88      	it	hi
 8083806:	bd30      	pophi	{r4, r5, pc}
 8083808:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808380c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083810:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083814:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083818:	d002      	beq.n	8083820 <__adddf3+0x70>
 808381a:	4240      	negs	r0, r0
 808381c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083820:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083828:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808382c:	d002      	beq.n	8083834 <__adddf3+0x84>
 808382e:	4252      	negs	r2, r2
 8083830:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083834:	ea94 0f05 	teq	r4, r5
 8083838:	f000 80a7 	beq.w	808398a <__adddf3+0x1da>
 808383c:	f1a4 0401 	sub.w	r4, r4, #1
 8083840:	f1d5 0e20 	rsbs	lr, r5, #32
 8083844:	db0d      	blt.n	8083862 <__adddf3+0xb2>
 8083846:	fa02 fc0e 	lsl.w	ip, r2, lr
 808384a:	fa22 f205 	lsr.w	r2, r2, r5
 808384e:	1880      	adds	r0, r0, r2
 8083850:	f141 0100 	adc.w	r1, r1, #0
 8083854:	fa03 f20e 	lsl.w	r2, r3, lr
 8083858:	1880      	adds	r0, r0, r2
 808385a:	fa43 f305 	asr.w	r3, r3, r5
 808385e:	4159      	adcs	r1, r3
 8083860:	e00e      	b.n	8083880 <__adddf3+0xd0>
 8083862:	f1a5 0520 	sub.w	r5, r5, #32
 8083866:	f10e 0e20 	add.w	lr, lr, #32
 808386a:	2a01      	cmp	r2, #1
 808386c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083870:	bf28      	it	cs
 8083872:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083876:	fa43 f305 	asr.w	r3, r3, r5
 808387a:	18c0      	adds	r0, r0, r3
 808387c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083880:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083884:	d507      	bpl.n	8083896 <__adddf3+0xe6>
 8083886:	f04f 0e00 	mov.w	lr, #0
 808388a:	f1dc 0c00 	rsbs	ip, ip, #0
 808388e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8083892:	eb6e 0101 	sbc.w	r1, lr, r1
 8083896:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808389a:	d31b      	bcc.n	80838d4 <__adddf3+0x124>
 808389c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80838a0:	d30c      	bcc.n	80838bc <__adddf3+0x10c>
 80838a2:	0849      	lsrs	r1, r1, #1
 80838a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80838a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80838ac:	f104 0401 	add.w	r4, r4, #1
 80838b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80838b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80838b8:	f080 809a 	bcs.w	80839f0 <__adddf3+0x240>
 80838bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80838c0:	bf08      	it	eq
 80838c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80838c6:	f150 0000 	adcs.w	r0, r0, #0
 80838ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80838ce:	ea41 0105 	orr.w	r1, r1, r5
 80838d2:	bd30      	pop	{r4, r5, pc}
 80838d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80838d8:	4140      	adcs	r0, r0
 80838da:	eb41 0101 	adc.w	r1, r1, r1
 80838de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80838e2:	f1a4 0401 	sub.w	r4, r4, #1
 80838e6:	d1e9      	bne.n	80838bc <__adddf3+0x10c>
 80838e8:	f091 0f00 	teq	r1, #0
 80838ec:	bf04      	itt	eq
 80838ee:	4601      	moveq	r1, r0
 80838f0:	2000      	moveq	r0, #0
 80838f2:	fab1 f381 	clz	r3, r1
 80838f6:	bf08      	it	eq
 80838f8:	3320      	addeq	r3, #32
 80838fa:	f1a3 030b 	sub.w	r3, r3, #11
 80838fe:	f1b3 0220 	subs.w	r2, r3, #32
 8083902:	da0c      	bge.n	808391e <__adddf3+0x16e>
 8083904:	320c      	adds	r2, #12
 8083906:	dd08      	ble.n	808391a <__adddf3+0x16a>
 8083908:	f102 0c14 	add.w	ip, r2, #20
 808390c:	f1c2 020c 	rsb	r2, r2, #12
 8083910:	fa01 f00c 	lsl.w	r0, r1, ip
 8083914:	fa21 f102 	lsr.w	r1, r1, r2
 8083918:	e00c      	b.n	8083934 <__adddf3+0x184>
 808391a:	f102 0214 	add.w	r2, r2, #20
 808391e:	bfd8      	it	le
 8083920:	f1c2 0c20 	rsble	ip, r2, #32
 8083924:	fa01 f102 	lsl.w	r1, r1, r2
 8083928:	fa20 fc0c 	lsr.w	ip, r0, ip
 808392c:	bfdc      	itt	le
 808392e:	ea41 010c 	orrle.w	r1, r1, ip
 8083932:	4090      	lslle	r0, r2
 8083934:	1ae4      	subs	r4, r4, r3
 8083936:	bfa2      	ittt	ge
 8083938:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808393c:	4329      	orrge	r1, r5
 808393e:	bd30      	popge	{r4, r5, pc}
 8083940:	ea6f 0404 	mvn.w	r4, r4
 8083944:	3c1f      	subs	r4, #31
 8083946:	da1c      	bge.n	8083982 <__adddf3+0x1d2>
 8083948:	340c      	adds	r4, #12
 808394a:	dc0e      	bgt.n	808396a <__adddf3+0x1ba>
 808394c:	f104 0414 	add.w	r4, r4, #20
 8083950:	f1c4 0220 	rsb	r2, r4, #32
 8083954:	fa20 f004 	lsr.w	r0, r0, r4
 8083958:	fa01 f302 	lsl.w	r3, r1, r2
 808395c:	ea40 0003 	orr.w	r0, r0, r3
 8083960:	fa21 f304 	lsr.w	r3, r1, r4
 8083964:	ea45 0103 	orr.w	r1, r5, r3
 8083968:	bd30      	pop	{r4, r5, pc}
 808396a:	f1c4 040c 	rsb	r4, r4, #12
 808396e:	f1c4 0220 	rsb	r2, r4, #32
 8083972:	fa20 f002 	lsr.w	r0, r0, r2
 8083976:	fa01 f304 	lsl.w	r3, r1, r4
 808397a:	ea40 0003 	orr.w	r0, r0, r3
 808397e:	4629      	mov	r1, r5
 8083980:	bd30      	pop	{r4, r5, pc}
 8083982:	fa21 f004 	lsr.w	r0, r1, r4
 8083986:	4629      	mov	r1, r5
 8083988:	bd30      	pop	{r4, r5, pc}
 808398a:	f094 0f00 	teq	r4, #0
 808398e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083992:	bf06      	itte	eq
 8083994:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083998:	3401      	addeq	r4, #1
 808399a:	3d01      	subne	r5, #1
 808399c:	e74e      	b.n	808383c <__adddf3+0x8c>
 808399e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80839a2:	bf18      	it	ne
 80839a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80839a8:	d029      	beq.n	80839fe <__adddf3+0x24e>
 80839aa:	ea94 0f05 	teq	r4, r5
 80839ae:	bf08      	it	eq
 80839b0:	ea90 0f02 	teqeq	r0, r2
 80839b4:	d005      	beq.n	80839c2 <__adddf3+0x212>
 80839b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80839ba:	bf04      	itt	eq
 80839bc:	4619      	moveq	r1, r3
 80839be:	4610      	moveq	r0, r2
 80839c0:	bd30      	pop	{r4, r5, pc}
 80839c2:	ea91 0f03 	teq	r1, r3
 80839c6:	bf1e      	ittt	ne
 80839c8:	2100      	movne	r1, #0
 80839ca:	2000      	movne	r0, #0
 80839cc:	bd30      	popne	{r4, r5, pc}
 80839ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80839d2:	d105      	bne.n	80839e0 <__adddf3+0x230>
 80839d4:	0040      	lsls	r0, r0, #1
 80839d6:	4149      	adcs	r1, r1
 80839d8:	bf28      	it	cs
 80839da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80839de:	bd30      	pop	{r4, r5, pc}
 80839e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80839e4:	bf3c      	itt	cc
 80839e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80839ea:	bd30      	popcc	{r4, r5, pc}
 80839ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80839f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80839f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80839f8:	f04f 0000 	mov.w	r0, #0
 80839fc:	bd30      	pop	{r4, r5, pc}
 80839fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083a02:	bf1a      	itte	ne
 8083a04:	4619      	movne	r1, r3
 8083a06:	4610      	movne	r0, r2
 8083a08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083a0c:	bf1c      	itt	ne
 8083a0e:	460b      	movne	r3, r1
 8083a10:	4602      	movne	r2, r0
 8083a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083a16:	bf06      	itte	eq
 8083a18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083a1c:	ea91 0f03 	teqeq	r1, r3
 8083a20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083a24:	bd30      	pop	{r4, r5, pc}
 8083a26:	bf00      	nop

08083a28 <__aeabi_ui2d>:
 8083a28:	f090 0f00 	teq	r0, #0
 8083a2c:	bf04      	itt	eq
 8083a2e:	2100      	moveq	r1, #0
 8083a30:	4770      	bxeq	lr
 8083a32:	b530      	push	{r4, r5, lr}
 8083a34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083a38:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083a3c:	f04f 0500 	mov.w	r5, #0
 8083a40:	f04f 0100 	mov.w	r1, #0
 8083a44:	e750      	b.n	80838e8 <__adddf3+0x138>
 8083a46:	bf00      	nop

08083a48 <__aeabi_i2d>:
 8083a48:	f090 0f00 	teq	r0, #0
 8083a4c:	bf04      	itt	eq
 8083a4e:	2100      	moveq	r1, #0
 8083a50:	4770      	bxeq	lr
 8083a52:	b530      	push	{r4, r5, lr}
 8083a54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083a58:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083a5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083a60:	bf48      	it	mi
 8083a62:	4240      	negmi	r0, r0
 8083a64:	f04f 0100 	mov.w	r1, #0
 8083a68:	e73e      	b.n	80838e8 <__adddf3+0x138>
 8083a6a:	bf00      	nop

08083a6c <__aeabi_f2d>:
 8083a6c:	0042      	lsls	r2, r0, #1
 8083a6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083a72:	ea4f 0131 	mov.w	r1, r1, rrx
 8083a76:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083a7a:	bf1f      	itttt	ne
 8083a7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083a80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083a84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083a88:	4770      	bxne	lr
 8083a8a:	f092 0f00 	teq	r2, #0
 8083a8e:	bf14      	ite	ne
 8083a90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083a94:	4770      	bxeq	lr
 8083a96:	b530      	push	{r4, r5, lr}
 8083a98:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083a9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083aa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083aa4:	e720      	b.n	80838e8 <__adddf3+0x138>
 8083aa6:	bf00      	nop

08083aa8 <__aeabi_ul2d>:
 8083aa8:	ea50 0201 	orrs.w	r2, r0, r1
 8083aac:	bf08      	it	eq
 8083aae:	4770      	bxeq	lr
 8083ab0:	b530      	push	{r4, r5, lr}
 8083ab2:	f04f 0500 	mov.w	r5, #0
 8083ab6:	e00a      	b.n	8083ace <__aeabi_l2d+0x16>

08083ab8 <__aeabi_l2d>:
 8083ab8:	ea50 0201 	orrs.w	r2, r0, r1
 8083abc:	bf08      	it	eq
 8083abe:	4770      	bxeq	lr
 8083ac0:	b530      	push	{r4, r5, lr}
 8083ac2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083ac6:	d502      	bpl.n	8083ace <__aeabi_l2d+0x16>
 8083ac8:	4240      	negs	r0, r0
 8083aca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083ace:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083ad2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083ad6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083ada:	f43f aedc 	beq.w	8083896 <__adddf3+0xe6>
 8083ade:	f04f 0203 	mov.w	r2, #3
 8083ae2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083ae6:	bf18      	it	ne
 8083ae8:	3203      	addne	r2, #3
 8083aea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083aee:	bf18      	it	ne
 8083af0:	3203      	addne	r2, #3
 8083af2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083af6:	f1c2 0320 	rsb	r3, r2, #32
 8083afa:	fa00 fc03 	lsl.w	ip, r0, r3
 8083afe:	fa20 f002 	lsr.w	r0, r0, r2
 8083b02:	fa01 fe03 	lsl.w	lr, r1, r3
 8083b06:	ea40 000e 	orr.w	r0, r0, lr
 8083b0a:	fa21 f102 	lsr.w	r1, r1, r2
 8083b0e:	4414      	add	r4, r2
 8083b10:	e6c1      	b.n	8083896 <__adddf3+0xe6>
 8083b12:	bf00      	nop

08083b14 <__aeabi_dmul>:
 8083b14:	b570      	push	{r4, r5, r6, lr}
 8083b16:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083b1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083b1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083b22:	bf1d      	ittte	ne
 8083b24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083b28:	ea94 0f0c 	teqne	r4, ip
 8083b2c:	ea95 0f0c 	teqne	r5, ip
 8083b30:	f000 f8de 	bleq	8083cf0 <__aeabi_dmul+0x1dc>
 8083b34:	442c      	add	r4, r5
 8083b36:	ea81 0603 	eor.w	r6, r1, r3
 8083b3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083b3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083b42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083b46:	bf18      	it	ne
 8083b48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083b4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083b54:	d038      	beq.n	8083bc8 <__aeabi_dmul+0xb4>
 8083b56:	fba0 ce02 	umull	ip, lr, r0, r2
 8083b5a:	f04f 0500 	mov.w	r5, #0
 8083b5e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083b62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083b66:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083b6a:	f04f 0600 	mov.w	r6, #0
 8083b6e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083b72:	f09c 0f00 	teq	ip, #0
 8083b76:	bf18      	it	ne
 8083b78:	f04e 0e01 	orrne.w	lr, lr, #1
 8083b7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083b80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083b84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083b88:	d204      	bcs.n	8083b94 <__aeabi_dmul+0x80>
 8083b8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083b8e:	416d      	adcs	r5, r5
 8083b90:	eb46 0606 	adc.w	r6, r6, r6
 8083b94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083b98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083b9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083ba0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083ba4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083ba8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083bac:	bf88      	it	hi
 8083bae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083bb2:	d81e      	bhi.n	8083bf2 <__aeabi_dmul+0xde>
 8083bb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083bb8:	bf08      	it	eq
 8083bba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083bbe:	f150 0000 	adcs.w	r0, r0, #0
 8083bc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083bc6:	bd70      	pop	{r4, r5, r6, pc}
 8083bc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083bcc:	ea46 0101 	orr.w	r1, r6, r1
 8083bd0:	ea40 0002 	orr.w	r0, r0, r2
 8083bd4:	ea81 0103 	eor.w	r1, r1, r3
 8083bd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083bdc:	bfc2      	ittt	gt
 8083bde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083be2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083be6:	bd70      	popgt	{r4, r5, r6, pc}
 8083be8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083bec:	f04f 0e00 	mov.w	lr, #0
 8083bf0:	3c01      	subs	r4, #1
 8083bf2:	f300 80ab 	bgt.w	8083d4c <__aeabi_dmul+0x238>
 8083bf6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083bfa:	bfde      	ittt	le
 8083bfc:	2000      	movle	r0, #0
 8083bfe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083c02:	bd70      	pople	{r4, r5, r6, pc}
 8083c04:	f1c4 0400 	rsb	r4, r4, #0
 8083c08:	3c20      	subs	r4, #32
 8083c0a:	da35      	bge.n	8083c78 <__aeabi_dmul+0x164>
 8083c0c:	340c      	adds	r4, #12
 8083c0e:	dc1b      	bgt.n	8083c48 <__aeabi_dmul+0x134>
 8083c10:	f104 0414 	add.w	r4, r4, #20
 8083c14:	f1c4 0520 	rsb	r5, r4, #32
 8083c18:	fa00 f305 	lsl.w	r3, r0, r5
 8083c1c:	fa20 f004 	lsr.w	r0, r0, r4
 8083c20:	fa01 f205 	lsl.w	r2, r1, r5
 8083c24:	ea40 0002 	orr.w	r0, r0, r2
 8083c28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083c2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083c30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083c34:	fa21 f604 	lsr.w	r6, r1, r4
 8083c38:	eb42 0106 	adc.w	r1, r2, r6
 8083c3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083c40:	bf08      	it	eq
 8083c42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083c46:	bd70      	pop	{r4, r5, r6, pc}
 8083c48:	f1c4 040c 	rsb	r4, r4, #12
 8083c4c:	f1c4 0520 	rsb	r5, r4, #32
 8083c50:	fa00 f304 	lsl.w	r3, r0, r4
 8083c54:	fa20 f005 	lsr.w	r0, r0, r5
 8083c58:	fa01 f204 	lsl.w	r2, r1, r4
 8083c5c:	ea40 0002 	orr.w	r0, r0, r2
 8083c60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083c68:	f141 0100 	adc.w	r1, r1, #0
 8083c6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083c70:	bf08      	it	eq
 8083c72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083c76:	bd70      	pop	{r4, r5, r6, pc}
 8083c78:	f1c4 0520 	rsb	r5, r4, #32
 8083c7c:	fa00 f205 	lsl.w	r2, r0, r5
 8083c80:	ea4e 0e02 	orr.w	lr, lr, r2
 8083c84:	fa20 f304 	lsr.w	r3, r0, r4
 8083c88:	fa01 f205 	lsl.w	r2, r1, r5
 8083c8c:	ea43 0302 	orr.w	r3, r3, r2
 8083c90:	fa21 f004 	lsr.w	r0, r1, r4
 8083c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c98:	fa21 f204 	lsr.w	r2, r1, r4
 8083c9c:	ea20 0002 	bic.w	r0, r0, r2
 8083ca0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083ca8:	bf08      	it	eq
 8083caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083cae:	bd70      	pop	{r4, r5, r6, pc}
 8083cb0:	f094 0f00 	teq	r4, #0
 8083cb4:	d10f      	bne.n	8083cd6 <__aeabi_dmul+0x1c2>
 8083cb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083cba:	0040      	lsls	r0, r0, #1
 8083cbc:	eb41 0101 	adc.w	r1, r1, r1
 8083cc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083cc4:	bf08      	it	eq
 8083cc6:	3c01      	subeq	r4, #1
 8083cc8:	d0f7      	beq.n	8083cba <__aeabi_dmul+0x1a6>
 8083cca:	ea41 0106 	orr.w	r1, r1, r6
 8083cce:	f095 0f00 	teq	r5, #0
 8083cd2:	bf18      	it	ne
 8083cd4:	4770      	bxne	lr
 8083cd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083cda:	0052      	lsls	r2, r2, #1
 8083cdc:	eb43 0303 	adc.w	r3, r3, r3
 8083ce0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083ce4:	bf08      	it	eq
 8083ce6:	3d01      	subeq	r5, #1
 8083ce8:	d0f7      	beq.n	8083cda <__aeabi_dmul+0x1c6>
 8083cea:	ea43 0306 	orr.w	r3, r3, r6
 8083cee:	4770      	bx	lr
 8083cf0:	ea94 0f0c 	teq	r4, ip
 8083cf4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083cf8:	bf18      	it	ne
 8083cfa:	ea95 0f0c 	teqne	r5, ip
 8083cfe:	d00c      	beq.n	8083d1a <__aeabi_dmul+0x206>
 8083d00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083d04:	bf18      	it	ne
 8083d06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083d0a:	d1d1      	bne.n	8083cb0 <__aeabi_dmul+0x19c>
 8083d0c:	ea81 0103 	eor.w	r1, r1, r3
 8083d10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083d14:	f04f 0000 	mov.w	r0, #0
 8083d18:	bd70      	pop	{r4, r5, r6, pc}
 8083d1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083d1e:	bf06      	itte	eq
 8083d20:	4610      	moveq	r0, r2
 8083d22:	4619      	moveq	r1, r3
 8083d24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083d28:	d019      	beq.n	8083d5e <__aeabi_dmul+0x24a>
 8083d2a:	ea94 0f0c 	teq	r4, ip
 8083d2e:	d102      	bne.n	8083d36 <__aeabi_dmul+0x222>
 8083d30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083d34:	d113      	bne.n	8083d5e <__aeabi_dmul+0x24a>
 8083d36:	ea95 0f0c 	teq	r5, ip
 8083d3a:	d105      	bne.n	8083d48 <__aeabi_dmul+0x234>
 8083d3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083d40:	bf1c      	itt	ne
 8083d42:	4610      	movne	r0, r2
 8083d44:	4619      	movne	r1, r3
 8083d46:	d10a      	bne.n	8083d5e <__aeabi_dmul+0x24a>
 8083d48:	ea81 0103 	eor.w	r1, r1, r3
 8083d4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083d50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083d54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083d58:	f04f 0000 	mov.w	r0, #0
 8083d5c:	bd70      	pop	{r4, r5, r6, pc}
 8083d5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083d62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083d66:	bd70      	pop	{r4, r5, r6, pc}

08083d68 <__aeabi_ddiv>:
 8083d68:	b570      	push	{r4, r5, r6, lr}
 8083d6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083d6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083d72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083d76:	bf1d      	ittte	ne
 8083d78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083d7c:	ea94 0f0c 	teqne	r4, ip
 8083d80:	ea95 0f0c 	teqne	r5, ip
 8083d84:	f000 f8a7 	bleq	8083ed6 <__aeabi_ddiv+0x16e>
 8083d88:	eba4 0405 	sub.w	r4, r4, r5
 8083d8c:	ea81 0e03 	eor.w	lr, r1, r3
 8083d90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083d94:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083d98:	f000 8088 	beq.w	8083eac <__aeabi_ddiv+0x144>
 8083d9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083da0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083da4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083da8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083dac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083db0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083db4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083db8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083dbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083dc0:	429d      	cmp	r5, r3
 8083dc2:	bf08      	it	eq
 8083dc4:	4296      	cmpeq	r6, r2
 8083dc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083dca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083dce:	d202      	bcs.n	8083dd6 <__aeabi_ddiv+0x6e>
 8083dd0:	085b      	lsrs	r3, r3, #1
 8083dd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8083dd6:	1ab6      	subs	r6, r6, r2
 8083dd8:	eb65 0503 	sbc.w	r5, r5, r3
 8083ddc:	085b      	lsrs	r3, r3, #1
 8083dde:	ea4f 0232 	mov.w	r2, r2, rrx
 8083de2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083de6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083dea:	ebb6 0e02 	subs.w	lr, r6, r2
 8083dee:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083df2:	bf22      	ittt	cs
 8083df4:	1ab6      	subcs	r6, r6, r2
 8083df6:	4675      	movcs	r5, lr
 8083df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8083dfc:	085b      	lsrs	r3, r3, #1
 8083dfe:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e02:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e0a:	bf22      	ittt	cs
 8083e0c:	1ab6      	subcs	r6, r6, r2
 8083e0e:	4675      	movcs	r5, lr
 8083e10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083e14:	085b      	lsrs	r3, r3, #1
 8083e16:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e22:	bf22      	ittt	cs
 8083e24:	1ab6      	subcs	r6, r6, r2
 8083e26:	4675      	movcs	r5, lr
 8083e28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083e2c:	085b      	lsrs	r3, r3, #1
 8083e2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e32:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e3a:	bf22      	ittt	cs
 8083e3c:	1ab6      	subcs	r6, r6, r2
 8083e3e:	4675      	movcs	r5, lr
 8083e40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083e44:	ea55 0e06 	orrs.w	lr, r5, r6
 8083e48:	d018      	beq.n	8083e7c <__aeabi_ddiv+0x114>
 8083e4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083e4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083e52:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083e56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083e5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083e5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083e62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083e66:	d1c0      	bne.n	8083dea <__aeabi_ddiv+0x82>
 8083e68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083e6c:	d10b      	bne.n	8083e86 <__aeabi_ddiv+0x11e>
 8083e6e:	ea41 0100 	orr.w	r1, r1, r0
 8083e72:	f04f 0000 	mov.w	r0, #0
 8083e76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083e7a:	e7b6      	b.n	8083dea <__aeabi_ddiv+0x82>
 8083e7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083e80:	bf04      	itt	eq
 8083e82:	4301      	orreq	r1, r0
 8083e84:	2000      	moveq	r0, #0
 8083e86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083e8a:	bf88      	it	hi
 8083e8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083e90:	f63f aeaf 	bhi.w	8083bf2 <__aeabi_dmul+0xde>
 8083e94:	ebb5 0c03 	subs.w	ip, r5, r3
 8083e98:	bf04      	itt	eq
 8083e9a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083e9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083ea2:	f150 0000 	adcs.w	r0, r0, #0
 8083ea6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083eaa:	bd70      	pop	{r4, r5, r6, pc}
 8083eac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083eb0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083eb4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083eb8:	bfc2      	ittt	gt
 8083eba:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083ebe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083ec2:	bd70      	popgt	{r4, r5, r6, pc}
 8083ec4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083ec8:	f04f 0e00 	mov.w	lr, #0
 8083ecc:	3c01      	subs	r4, #1
 8083ece:	e690      	b.n	8083bf2 <__aeabi_dmul+0xde>
 8083ed0:	ea45 0e06 	orr.w	lr, r5, r6
 8083ed4:	e68d      	b.n	8083bf2 <__aeabi_dmul+0xde>
 8083ed6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083eda:	ea94 0f0c 	teq	r4, ip
 8083ede:	bf08      	it	eq
 8083ee0:	ea95 0f0c 	teqeq	r5, ip
 8083ee4:	f43f af3b 	beq.w	8083d5e <__aeabi_dmul+0x24a>
 8083ee8:	ea94 0f0c 	teq	r4, ip
 8083eec:	d10a      	bne.n	8083f04 <__aeabi_ddiv+0x19c>
 8083eee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083ef2:	f47f af34 	bne.w	8083d5e <__aeabi_dmul+0x24a>
 8083ef6:	ea95 0f0c 	teq	r5, ip
 8083efa:	f47f af25 	bne.w	8083d48 <__aeabi_dmul+0x234>
 8083efe:	4610      	mov	r0, r2
 8083f00:	4619      	mov	r1, r3
 8083f02:	e72c      	b.n	8083d5e <__aeabi_dmul+0x24a>
 8083f04:	ea95 0f0c 	teq	r5, ip
 8083f08:	d106      	bne.n	8083f18 <__aeabi_ddiv+0x1b0>
 8083f0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083f0e:	f43f aefd 	beq.w	8083d0c <__aeabi_dmul+0x1f8>
 8083f12:	4610      	mov	r0, r2
 8083f14:	4619      	mov	r1, r3
 8083f16:	e722      	b.n	8083d5e <__aeabi_dmul+0x24a>
 8083f18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083f1c:	bf18      	it	ne
 8083f1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083f22:	f47f aec5 	bne.w	8083cb0 <__aeabi_dmul+0x19c>
 8083f26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083f2a:	f47f af0d 	bne.w	8083d48 <__aeabi_dmul+0x234>
 8083f2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083f32:	f47f aeeb 	bne.w	8083d0c <__aeabi_dmul+0x1f8>
 8083f36:	e712      	b.n	8083d5e <__aeabi_dmul+0x24a>

08083f38 <__gedf2>:
 8083f38:	f04f 3cff 	mov.w	ip, #4294967295
 8083f3c:	e006      	b.n	8083f4c <__cmpdf2+0x4>
 8083f3e:	bf00      	nop

08083f40 <__ledf2>:
 8083f40:	f04f 0c01 	mov.w	ip, #1
 8083f44:	e002      	b.n	8083f4c <__cmpdf2+0x4>
 8083f46:	bf00      	nop

08083f48 <__cmpdf2>:
 8083f48:	f04f 0c01 	mov.w	ip, #1
 8083f4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083f50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083f54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083f5c:	bf18      	it	ne
 8083f5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8083f62:	d01b      	beq.n	8083f9c <__cmpdf2+0x54>
 8083f64:	b001      	add	sp, #4
 8083f66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8083f6a:	bf0c      	ite	eq
 8083f6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8083f70:	ea91 0f03 	teqne	r1, r3
 8083f74:	bf02      	ittt	eq
 8083f76:	ea90 0f02 	teqeq	r0, r2
 8083f7a:	2000      	moveq	r0, #0
 8083f7c:	4770      	bxeq	lr
 8083f7e:	f110 0f00 	cmn.w	r0, #0
 8083f82:	ea91 0f03 	teq	r1, r3
 8083f86:	bf58      	it	pl
 8083f88:	4299      	cmppl	r1, r3
 8083f8a:	bf08      	it	eq
 8083f8c:	4290      	cmpeq	r0, r2
 8083f8e:	bf2c      	ite	cs
 8083f90:	17d8      	asrcs	r0, r3, #31
 8083f92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8083f96:	f040 0001 	orr.w	r0, r0, #1
 8083f9a:	4770      	bx	lr
 8083f9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083fa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083fa4:	d102      	bne.n	8083fac <__cmpdf2+0x64>
 8083fa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083faa:	d107      	bne.n	8083fbc <__cmpdf2+0x74>
 8083fac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083fb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083fb4:	d1d6      	bne.n	8083f64 <__cmpdf2+0x1c>
 8083fb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083fba:	d0d3      	beq.n	8083f64 <__cmpdf2+0x1c>
 8083fbc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083fc0:	4770      	bx	lr
 8083fc2:	bf00      	nop

08083fc4 <__aeabi_cdrcmple>:
 8083fc4:	4684      	mov	ip, r0
 8083fc6:	4610      	mov	r0, r2
 8083fc8:	4662      	mov	r2, ip
 8083fca:	468c      	mov	ip, r1
 8083fcc:	4619      	mov	r1, r3
 8083fce:	4663      	mov	r3, ip
 8083fd0:	e000      	b.n	8083fd4 <__aeabi_cdcmpeq>
 8083fd2:	bf00      	nop

08083fd4 <__aeabi_cdcmpeq>:
 8083fd4:	b501      	push	{r0, lr}
 8083fd6:	f7ff ffb7 	bl	8083f48 <__cmpdf2>
 8083fda:	2800      	cmp	r0, #0
 8083fdc:	bf48      	it	mi
 8083fde:	f110 0f00 	cmnmi.w	r0, #0
 8083fe2:	bd01      	pop	{r0, pc}

08083fe4 <__aeabi_dcmpeq>:
 8083fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083fe8:	f7ff fff4 	bl	8083fd4 <__aeabi_cdcmpeq>
 8083fec:	bf0c      	ite	eq
 8083fee:	2001      	moveq	r0, #1
 8083ff0:	2000      	movne	r0, #0
 8083ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8083ff6:	bf00      	nop

08083ff8 <__aeabi_dcmplt>:
 8083ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083ffc:	f7ff ffea 	bl	8083fd4 <__aeabi_cdcmpeq>
 8084000:	bf34      	ite	cc
 8084002:	2001      	movcc	r0, #1
 8084004:	2000      	movcs	r0, #0
 8084006:	f85d fb08 	ldr.w	pc, [sp], #8
 808400a:	bf00      	nop

0808400c <__aeabi_dcmple>:
 808400c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084010:	f7ff ffe0 	bl	8083fd4 <__aeabi_cdcmpeq>
 8084014:	bf94      	ite	ls
 8084016:	2001      	movls	r0, #1
 8084018:	2000      	movhi	r0, #0
 808401a:	f85d fb08 	ldr.w	pc, [sp], #8
 808401e:	bf00      	nop

08084020 <__aeabi_dcmpge>:
 8084020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084024:	f7ff ffce 	bl	8083fc4 <__aeabi_cdrcmple>
 8084028:	bf94      	ite	ls
 808402a:	2001      	movls	r0, #1
 808402c:	2000      	movhi	r0, #0
 808402e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084032:	bf00      	nop

08084034 <__aeabi_dcmpgt>:
 8084034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084038:	f7ff ffc4 	bl	8083fc4 <__aeabi_cdrcmple>
 808403c:	bf34      	ite	cc
 808403e:	2001      	movcc	r0, #1
 8084040:	2000      	movcs	r0, #0
 8084042:	f85d fb08 	ldr.w	pc, [sp], #8
 8084046:	bf00      	nop

08084048 <__aeabi_dcmpun>:
 8084048:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808404c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8084050:	d102      	bne.n	8084058 <__aeabi_dcmpun+0x10>
 8084052:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8084056:	d10a      	bne.n	808406e <__aeabi_dcmpun+0x26>
 8084058:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808405c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8084060:	d102      	bne.n	8084068 <__aeabi_dcmpun+0x20>
 8084062:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8084066:	d102      	bne.n	808406e <__aeabi_dcmpun+0x26>
 8084068:	f04f 0000 	mov.w	r0, #0
 808406c:	4770      	bx	lr
 808406e:	f04f 0001 	mov.w	r0, #1
 8084072:	4770      	bx	lr

08084074 <__aeabi_d2iz>:
 8084074:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084078:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808407c:	d215      	bcs.n	80840aa <__aeabi_d2iz+0x36>
 808407e:	d511      	bpl.n	80840a4 <__aeabi_d2iz+0x30>
 8084080:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084084:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084088:	d912      	bls.n	80840b0 <__aeabi_d2iz+0x3c>
 808408a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808408e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084092:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084096:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808409a:	fa23 f002 	lsr.w	r0, r3, r2
 808409e:	bf18      	it	ne
 80840a0:	4240      	negne	r0, r0
 80840a2:	4770      	bx	lr
 80840a4:	f04f 0000 	mov.w	r0, #0
 80840a8:	4770      	bx	lr
 80840aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80840ae:	d105      	bne.n	80840bc <__aeabi_d2iz+0x48>
 80840b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80840b4:	bf08      	it	eq
 80840b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80840ba:	4770      	bx	lr
 80840bc:	f04f 0000 	mov.w	r0, #0
 80840c0:	4770      	bx	lr
 80840c2:	bf00      	nop

080840c4 <__aeabi_d2uiz>:
 80840c4:	004a      	lsls	r2, r1, #1
 80840c6:	d211      	bcs.n	80840ec <__aeabi_d2uiz+0x28>
 80840c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80840cc:	d211      	bcs.n	80840f2 <__aeabi_d2uiz+0x2e>
 80840ce:	d50d      	bpl.n	80840ec <__aeabi_d2uiz+0x28>
 80840d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80840d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80840d8:	d40e      	bmi.n	80840f8 <__aeabi_d2uiz+0x34>
 80840da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80840de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80840e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80840e6:	fa23 f002 	lsr.w	r0, r3, r2
 80840ea:	4770      	bx	lr
 80840ec:	f04f 0000 	mov.w	r0, #0
 80840f0:	4770      	bx	lr
 80840f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80840f6:	d102      	bne.n	80840fe <__aeabi_d2uiz+0x3a>
 80840f8:	f04f 30ff 	mov.w	r0, #4294967295
 80840fc:	4770      	bx	lr
 80840fe:	f04f 0000 	mov.w	r0, #0
 8084102:	4770      	bx	lr

08084104 <__aeabi_d2f>:
 8084104:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084108:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808410c:	bf24      	itt	cs
 808410e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8084112:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8084116:	d90d      	bls.n	8084134 <__aeabi_d2f+0x30>
 8084118:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808411c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8084120:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8084124:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8084128:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808412c:	bf08      	it	eq
 808412e:	f020 0001 	biceq.w	r0, r0, #1
 8084132:	4770      	bx	lr
 8084134:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8084138:	d121      	bne.n	808417e <__aeabi_d2f+0x7a>
 808413a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808413e:	bfbc      	itt	lt
 8084140:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8084144:	4770      	bxlt	lr
 8084146:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808414a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808414e:	f1c2 0218 	rsb	r2, r2, #24
 8084152:	f1c2 0c20 	rsb	ip, r2, #32
 8084156:	fa10 f30c 	lsls.w	r3, r0, ip
 808415a:	fa20 f002 	lsr.w	r0, r0, r2
 808415e:	bf18      	it	ne
 8084160:	f040 0001 	orrne.w	r0, r0, #1
 8084164:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084168:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808416c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8084170:	ea40 000c 	orr.w	r0, r0, ip
 8084174:	fa23 f302 	lsr.w	r3, r3, r2
 8084178:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808417c:	e7cc      	b.n	8084118 <__aeabi_d2f+0x14>
 808417e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8084182:	d107      	bne.n	8084194 <__aeabi_d2f+0x90>
 8084184:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084188:	bf1e      	ittt	ne
 808418a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808418e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8084192:	4770      	bxne	lr
 8084194:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084198:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808419c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80841a0:	4770      	bx	lr
 80841a2:	bf00      	nop

080841a4 <asctime>:
 80841a4:	4b09      	ldr	r3, [pc, #36]	; (80841cc <asctime+0x28>)
 80841a6:	b570      	push	{r4, r5, r6, lr}
 80841a8:	681c      	ldr	r4, [r3, #0]
 80841aa:	4606      	mov	r6, r0
 80841ac:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80841ae:	b93d      	cbnz	r5, 80841c0 <asctime+0x1c>
 80841b0:	201a      	movs	r0, #26
 80841b2:	f7fd fe85 	bl	8081ec0 <malloc>
 80841b6:	221a      	movs	r2, #26
 80841b8:	6420      	str	r0, [r4, #64]	; 0x40
 80841ba:	4629      	mov	r1, r5
 80841bc:	f000 f947 	bl	808444e <memset>
 80841c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80841c2:	4630      	mov	r0, r6
 80841c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80841c8:	f000 b802 	b.w	80841d0 <asctime_r>
 80841cc:	20000078 	.word	0x20000078

080841d0 <asctime_r>:
 80841d0:	b510      	push	{r4, lr}
 80841d2:	460c      	mov	r4, r1
 80841d4:	6941      	ldr	r1, [r0, #20]
 80841d6:	b086      	sub	sp, #24
 80841d8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80841dc:	6903      	ldr	r3, [r0, #16]
 80841de:	6982      	ldr	r2, [r0, #24]
 80841e0:	9104      	str	r1, [sp, #16]
 80841e2:	6801      	ldr	r1, [r0, #0]
 80841e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80841e8:	9103      	str	r1, [sp, #12]
 80841ea:	6841      	ldr	r1, [r0, #4]
 80841ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80841f0:	9102      	str	r1, [sp, #8]
 80841f2:	6881      	ldr	r1, [r0, #8]
 80841f4:	9101      	str	r1, [sp, #4]
 80841f6:	68c1      	ldr	r1, [r0, #12]
 80841f8:	4620      	mov	r0, r4
 80841fa:	9100      	str	r1, [sp, #0]
 80841fc:	4904      	ldr	r1, [pc, #16]	; (8084210 <asctime_r+0x40>)
 80841fe:	440b      	add	r3, r1
 8084200:	4904      	ldr	r1, [pc, #16]	; (8084214 <asctime_r+0x44>)
 8084202:	440a      	add	r2, r1
 8084204:	4904      	ldr	r1, [pc, #16]	; (8084218 <asctime_r+0x48>)
 8084206:	f7fd fe73 	bl	8081ef0 <siprintf>
 808420a:	4620      	mov	r0, r4
 808420c:	b006      	add	sp, #24
 808420e:	bd10      	pop	{r4, pc}
 8084210:	08087bb1 	.word	0x08087bb1
 8084214:	08087b9c 	.word	0x08087b9c
 8084218:	08087bd5 	.word	0x08087bd5

0808421c <atol>:
 808421c:	220a      	movs	r2, #10
 808421e:	2100      	movs	r1, #0
 8084220:	f001 bda2 	b.w	8085d68 <strtol>

08084224 <__cxa_atexit>:
 8084224:	b510      	push	{r4, lr}
 8084226:	4c05      	ldr	r4, [pc, #20]	; (808423c <__cxa_atexit+0x18>)
 8084228:	4613      	mov	r3, r2
 808422a:	b12c      	cbz	r4, 8084238 <__cxa_atexit+0x14>
 808422c:	460a      	mov	r2, r1
 808422e:	4601      	mov	r1, r0
 8084230:	2002      	movs	r0, #2
 8084232:	f3af 8000 	nop.w
 8084236:	bd10      	pop	{r4, pc}
 8084238:	4620      	mov	r0, r4
 808423a:	bd10      	pop	{r4, pc}
 808423c:	00000000 	.word	0x00000000

08084240 <localtime>:
 8084240:	b538      	push	{r3, r4, r5, lr}
 8084242:	4b07      	ldr	r3, [pc, #28]	; (8084260 <localtime+0x20>)
 8084244:	4605      	mov	r5, r0
 8084246:	681c      	ldr	r4, [r3, #0]
 8084248:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808424a:	b91b      	cbnz	r3, 8084254 <localtime+0x14>
 808424c:	2024      	movs	r0, #36	; 0x24
 808424e:	f7fd fe37 	bl	8081ec0 <malloc>
 8084252:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084254:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8084256:	4628      	mov	r0, r5
 8084258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808425c:	f000 b802 	b.w	8084264 <localtime_r>
 8084260:	20000078 	.word	0x20000078

08084264 <localtime_r>:
 8084264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084268:	460c      	mov	r4, r1
 808426a:	4680      	mov	r8, r0
 808426c:	f002 fbb4 	bl	80869d8 <__gettzinfo>
 8084270:	4621      	mov	r1, r4
 8084272:	4607      	mov	r7, r0
 8084274:	4640      	mov	r0, r8
 8084276:	f002 fbb3 	bl	80869e0 <gmtime_r>
 808427a:	6946      	ldr	r6, [r0, #20]
 808427c:	4604      	mov	r4, r0
 808427e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8084282:	07b3      	lsls	r3, r6, #30
 8084284:	d105      	bne.n	8084292 <localtime_r+0x2e>
 8084286:	2264      	movs	r2, #100	; 0x64
 8084288:	fb96 f3f2 	sdiv	r3, r6, r2
 808428c:	fb02 6313 	mls	r3, r2, r3, r6
 8084290:	b94b      	cbnz	r3, 80842a6 <localtime_r+0x42>
 8084292:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8084296:	fb96 f3f5 	sdiv	r3, r6, r5
 808429a:	fb05 6513 	mls	r5, r5, r3, r6
 808429e:	fab5 f385 	clz	r3, r5
 80842a2:	095b      	lsrs	r3, r3, #5
 80842a4:	e000      	b.n	80842a8 <localtime_r+0x44>
 80842a6:	2301      	movs	r3, #1
 80842a8:	4a5f      	ldr	r2, [pc, #380]	; (8084428 <localtime_r+0x1c4>)
 80842aa:	2530      	movs	r5, #48	; 0x30
 80842ac:	fb05 2503 	mla	r5, r5, r3, r2
 80842b0:	f001 fea4 	bl	8085ffc <__tz_lock>
 80842b4:	f001 fea4 	bl	8086000 <_tzset_unlocked>
 80842b8:	4b5c      	ldr	r3, [pc, #368]	; (808442c <localtime_r+0x1c8>)
 80842ba:	681b      	ldr	r3, [r3, #0]
 80842bc:	b1f3      	cbz	r3, 80842fc <localtime_r+0x98>
 80842be:	687b      	ldr	r3, [r7, #4]
 80842c0:	429e      	cmp	r6, r3
 80842c2:	d105      	bne.n	80842d0 <localtime_r+0x6c>
 80842c4:	6839      	ldr	r1, [r7, #0]
 80842c6:	f8d8 3000 	ldr.w	r3, [r8]
 80842ca:	69fa      	ldr	r2, [r7, #28]
 80842cc:	b941      	cbnz	r1, 80842e0 <localtime_r+0x7c>
 80842ce:	e00a      	b.n	80842e6 <localtime_r+0x82>
 80842d0:	4630      	mov	r0, r6
 80842d2:	f001 fdeb 	bl	8085eac <__tzcalc_limits>
 80842d6:	2800      	cmp	r0, #0
 80842d8:	d1f4      	bne.n	80842c4 <localtime_r+0x60>
 80842da:	f04f 33ff 	mov.w	r3, #4294967295
 80842de:	e00d      	b.n	80842fc <localtime_r+0x98>
 80842e0:	4293      	cmp	r3, r2
 80842e2:	db08      	blt.n	80842f6 <localtime_r+0x92>
 80842e4:	e001      	b.n	80842ea <localtime_r+0x86>
 80842e6:	4293      	cmp	r3, r2
 80842e8:	da07      	bge.n	80842fa <localtime_r+0x96>
 80842ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80842ec:	4293      	cmp	r3, r2
 80842ee:	bfac      	ite	ge
 80842f0:	2300      	movge	r3, #0
 80842f2:	2301      	movlt	r3, #1
 80842f4:	e002      	b.n	80842fc <localtime_r+0x98>
 80842f6:	2300      	movs	r3, #0
 80842f8:	e000      	b.n	80842fc <localtime_r+0x98>
 80842fa:	2301      	movs	r3, #1
 80842fc:	6223      	str	r3, [r4, #32]
 80842fe:	6a23      	ldr	r3, [r4, #32]
 8084300:	203c      	movs	r0, #60	; 0x3c
 8084302:	2b01      	cmp	r3, #1
 8084304:	bf0c      	ite	eq
 8084306:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8084308:	6a39      	ldrne	r1, [r7, #32]
 808430a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808430e:	fb91 f6f3 	sdiv	r6, r1, r3
 8084312:	fb03 1316 	mls	r3, r3, r6, r1
 8084316:	fb93 f2f0 	sdiv	r2, r3, r0
 808431a:	fb00 3012 	mls	r0, r0, r2, r3
 808431e:	6861      	ldr	r1, [r4, #4]
 8084320:	6823      	ldr	r3, [r4, #0]
 8084322:	1a89      	subs	r1, r1, r2
 8084324:	68a2      	ldr	r2, [r4, #8]
 8084326:	1a1b      	subs	r3, r3, r0
 8084328:	1b92      	subs	r2, r2, r6
 808432a:	2b3b      	cmp	r3, #59	; 0x3b
 808432c:	6023      	str	r3, [r4, #0]
 808432e:	6061      	str	r1, [r4, #4]
 8084330:	60a2      	str	r2, [r4, #8]
 8084332:	dd03      	ble.n	808433c <localtime_r+0xd8>
 8084334:	3101      	adds	r1, #1
 8084336:	6061      	str	r1, [r4, #4]
 8084338:	3b3c      	subs	r3, #60	; 0x3c
 808433a:	e004      	b.n	8084346 <localtime_r+0xe2>
 808433c:	2b00      	cmp	r3, #0
 808433e:	da03      	bge.n	8084348 <localtime_r+0xe4>
 8084340:	3901      	subs	r1, #1
 8084342:	6061      	str	r1, [r4, #4]
 8084344:	333c      	adds	r3, #60	; 0x3c
 8084346:	6023      	str	r3, [r4, #0]
 8084348:	6863      	ldr	r3, [r4, #4]
 808434a:	2b3b      	cmp	r3, #59	; 0x3b
 808434c:	dd03      	ble.n	8084356 <localtime_r+0xf2>
 808434e:	3201      	adds	r2, #1
 8084350:	60a2      	str	r2, [r4, #8]
 8084352:	3b3c      	subs	r3, #60	; 0x3c
 8084354:	e004      	b.n	8084360 <localtime_r+0xfc>
 8084356:	2b00      	cmp	r3, #0
 8084358:	da03      	bge.n	8084362 <localtime_r+0xfe>
 808435a:	3a01      	subs	r2, #1
 808435c:	60a2      	str	r2, [r4, #8]
 808435e:	333c      	adds	r3, #60	; 0x3c
 8084360:	6063      	str	r3, [r4, #4]
 8084362:	68a3      	ldr	r3, [r4, #8]
 8084364:	2b17      	cmp	r3, #23
 8084366:	dd22      	ble.n	80843ae <localtime_r+0x14a>
 8084368:	69e2      	ldr	r2, [r4, #28]
 808436a:	3b18      	subs	r3, #24
 808436c:	3201      	adds	r2, #1
 808436e:	61e2      	str	r2, [r4, #28]
 8084370:	69a2      	ldr	r2, [r4, #24]
 8084372:	60a3      	str	r3, [r4, #8]
 8084374:	3201      	adds	r2, #1
 8084376:	2a06      	cmp	r2, #6
 8084378:	bfc8      	it	gt
 808437a:	2200      	movgt	r2, #0
 808437c:	61a2      	str	r2, [r4, #24]
 808437e:	68e2      	ldr	r2, [r4, #12]
 8084380:	6923      	ldr	r3, [r4, #16]
 8084382:	3201      	adds	r2, #1
 8084384:	60e2      	str	r2, [r4, #12]
 8084386:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808438a:	428a      	cmp	r2, r1
 808438c:	dd46      	ble.n	808441c <localtime_r+0x1b8>
 808438e:	3301      	adds	r3, #1
 8084390:	2b0c      	cmp	r3, #12
 8084392:	bf08      	it	eq
 8084394:	6963      	ldreq	r3, [r4, #20]
 8084396:	eba2 0201 	sub.w	r2, r2, r1
 808439a:	60e2      	str	r2, [r4, #12]
 808439c:	bf05      	ittet	eq
 808439e:	3301      	addeq	r3, #1
 80843a0:	2200      	moveq	r2, #0
 80843a2:	6123      	strne	r3, [r4, #16]
 80843a4:	6122      	streq	r2, [r4, #16]
 80843a6:	bf04      	itt	eq
 80843a8:	6163      	streq	r3, [r4, #20]
 80843aa:	61e2      	streq	r2, [r4, #28]
 80843ac:	e036      	b.n	808441c <localtime_r+0x1b8>
 80843ae:	2b00      	cmp	r3, #0
 80843b0:	da34      	bge.n	808441c <localtime_r+0x1b8>
 80843b2:	69e2      	ldr	r2, [r4, #28]
 80843b4:	3318      	adds	r3, #24
 80843b6:	3a01      	subs	r2, #1
 80843b8:	61e2      	str	r2, [r4, #28]
 80843ba:	69a2      	ldr	r2, [r4, #24]
 80843bc:	60a3      	str	r3, [r4, #8]
 80843be:	3a01      	subs	r2, #1
 80843c0:	bf48      	it	mi
 80843c2:	2206      	movmi	r2, #6
 80843c4:	61a2      	str	r2, [r4, #24]
 80843c6:	68e2      	ldr	r2, [r4, #12]
 80843c8:	3a01      	subs	r2, #1
 80843ca:	60e2      	str	r2, [r4, #12]
 80843cc:	bb32      	cbnz	r2, 808441c <localtime_r+0x1b8>
 80843ce:	6923      	ldr	r3, [r4, #16]
 80843d0:	3b01      	subs	r3, #1
 80843d2:	d401      	bmi.n	80843d8 <localtime_r+0x174>
 80843d4:	6123      	str	r3, [r4, #16]
 80843d6:	e01d      	b.n	8084414 <localtime_r+0x1b0>
 80843d8:	230b      	movs	r3, #11
 80843da:	6123      	str	r3, [r4, #16]
 80843dc:	6963      	ldr	r3, [r4, #20]
 80843de:	1e5a      	subs	r2, r3, #1
 80843e0:	f012 0f03 	tst.w	r2, #3
 80843e4:	6162      	str	r2, [r4, #20]
 80843e6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80843ea:	d105      	bne.n	80843f8 <localtime_r+0x194>
 80843ec:	2164      	movs	r1, #100	; 0x64
 80843ee:	fb93 f2f1 	sdiv	r2, r3, r1
 80843f2:	fb01 3212 	mls	r2, r1, r2, r3
 80843f6:	b94a      	cbnz	r2, 808440c <localtime_r+0x1a8>
 80843f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80843fc:	fb93 f2f1 	sdiv	r2, r3, r1
 8084400:	fb01 3312 	mls	r3, r1, r2, r3
 8084404:	fab3 f383 	clz	r3, r3
 8084408:	095b      	lsrs	r3, r3, #5
 808440a:	e000      	b.n	808440e <localtime_r+0x1aa>
 808440c:	2301      	movs	r3, #1
 808440e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8084412:	61e3      	str	r3, [r4, #28]
 8084414:	6923      	ldr	r3, [r4, #16]
 8084416:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808441a:	60e3      	str	r3, [r4, #12]
 808441c:	f001 fdef 	bl	8085ffe <__tz_unlock>
 8084420:	4620      	mov	r0, r4
 8084422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084426:	bf00      	nop
 8084428:	08087d60 	.word	0x08087d60
 808442c:	200006d4 	.word	0x200006d4

08084430 <_localeconv_r>:
 8084430:	4800      	ldr	r0, [pc, #0]	; (8084434 <_localeconv_r+0x4>)
 8084432:	4770      	bx	lr
 8084434:	2000007c 	.word	0x2000007c

08084438 <memcpy>:
 8084438:	b510      	push	{r4, lr}
 808443a:	1e43      	subs	r3, r0, #1
 808443c:	440a      	add	r2, r1
 808443e:	4291      	cmp	r1, r2
 8084440:	d004      	beq.n	808444c <memcpy+0x14>
 8084442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084446:	f803 4f01 	strb.w	r4, [r3, #1]!
 808444a:	e7f8      	b.n	808443e <memcpy+0x6>
 808444c:	bd10      	pop	{r4, pc}

0808444e <memset>:
 808444e:	4603      	mov	r3, r0
 8084450:	4402      	add	r2, r0
 8084452:	4293      	cmp	r3, r2
 8084454:	d002      	beq.n	808445c <memset+0xe>
 8084456:	f803 1b01 	strb.w	r1, [r3], #1
 808445a:	e7fa      	b.n	8084452 <memset+0x4>
 808445c:	4770      	bx	lr
	...

08084460 <srand>:
 8084460:	b538      	push	{r3, r4, r5, lr}
 8084462:	4b12      	ldr	r3, [pc, #72]	; (80844ac <srand+0x4c>)
 8084464:	4605      	mov	r5, r0
 8084466:	681c      	ldr	r4, [r3, #0]
 8084468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808446a:	b9d3      	cbnz	r3, 80844a2 <srand+0x42>
 808446c:	2018      	movs	r0, #24
 808446e:	f7fd fd27 	bl	8081ec0 <malloc>
 8084472:	f243 330e 	movw	r3, #13070	; 0x330e
 8084476:	63a0      	str	r0, [r4, #56]	; 0x38
 8084478:	8003      	strh	r3, [r0, #0]
 808447a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808447e:	8043      	strh	r3, [r0, #2]
 8084480:	f241 2334 	movw	r3, #4660	; 0x1234
 8084484:	8083      	strh	r3, [r0, #4]
 8084486:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808448a:	80c3      	strh	r3, [r0, #6]
 808448c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8084490:	8103      	strh	r3, [r0, #8]
 8084492:	2305      	movs	r3, #5
 8084494:	8143      	strh	r3, [r0, #10]
 8084496:	230b      	movs	r3, #11
 8084498:	8183      	strh	r3, [r0, #12]
 808449a:	2201      	movs	r2, #1
 808449c:	2300      	movs	r3, #0
 808449e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80844a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80844a4:	2200      	movs	r2, #0
 80844a6:	611d      	str	r5, [r3, #16]
 80844a8:	615a      	str	r2, [r3, #20]
 80844aa:	bd38      	pop	{r3, r4, r5, pc}
 80844ac:	20000078 	.word	0x20000078

080844b0 <strchr>:
 80844b0:	b2c9      	uxtb	r1, r1
 80844b2:	4603      	mov	r3, r0
 80844b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80844b8:	b11a      	cbz	r2, 80844c2 <strchr+0x12>
 80844ba:	4291      	cmp	r1, r2
 80844bc:	d1f9      	bne.n	80844b2 <strchr+0x2>
 80844be:	4618      	mov	r0, r3
 80844c0:	4770      	bx	lr
 80844c2:	2900      	cmp	r1, #0
 80844c4:	bf0c      	ite	eq
 80844c6:	4618      	moveq	r0, r3
 80844c8:	2000      	movne	r0, #0
 80844ca:	4770      	bx	lr

080844cc <strcmp>:
 80844cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80844d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80844d4:	2a01      	cmp	r2, #1
 80844d6:	bf28      	it	cs
 80844d8:	429a      	cmpcs	r2, r3
 80844da:	d0f7      	beq.n	80844cc <strcmp>
 80844dc:	1ad0      	subs	r0, r2, r3
 80844de:	4770      	bx	lr

080844e0 <strcpy>:
 80844e0:	4603      	mov	r3, r0
 80844e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80844e6:	f803 2b01 	strb.w	r2, [r3], #1
 80844ea:	2a00      	cmp	r2, #0
 80844ec:	d1f9      	bne.n	80844e2 <strcpy+0x2>
 80844ee:	4770      	bx	lr

080844f0 <strdup>:
 80844f0:	4b02      	ldr	r3, [pc, #8]	; (80844fc <strdup+0xc>)
 80844f2:	4601      	mov	r1, r0
 80844f4:	6818      	ldr	r0, [r3, #0]
 80844f6:	f000 b803 	b.w	8084500 <_strdup_r>
 80844fa:	bf00      	nop
 80844fc:	20000078 	.word	0x20000078

08084500 <_strdup_r>:
 8084500:	b570      	push	{r4, r5, r6, lr}
 8084502:	4606      	mov	r6, r0
 8084504:	4608      	mov	r0, r1
 8084506:	460c      	mov	r4, r1
 8084508:	f000 fd22 	bl	8084f50 <strlen>
 808450c:	1c45      	adds	r5, r0, #1
 808450e:	4629      	mov	r1, r5
 8084510:	4630      	mov	r0, r6
 8084512:	f7fd fd25 	bl	8081f60 <_malloc_r>
 8084516:	4606      	mov	r6, r0
 8084518:	b118      	cbz	r0, 8084522 <_strdup_r+0x22>
 808451a:	462a      	mov	r2, r5
 808451c:	4621      	mov	r1, r4
 808451e:	f7ff ff8b 	bl	8084438 <memcpy>
 8084522:	4630      	mov	r0, r6
 8084524:	bd70      	pop	{r4, r5, r6, pc}

08084526 <iso_year_adjust>:
 8084526:	6941      	ldr	r1, [r0, #20]
 8084528:	b510      	push	{r4, lr}
 808452a:	078b      	lsls	r3, r1, #30
 808452c:	d10c      	bne.n	8084548 <iso_year_adjust+0x22>
 808452e:	f240 736c 	movw	r3, #1900	; 0x76c
 8084532:	2900      	cmp	r1, #0
 8084534:	bfa8      	it	ge
 8084536:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808453a:	440b      	add	r3, r1
 808453c:	2464      	movs	r4, #100	; 0x64
 808453e:	fb93 f2f4 	sdiv	r2, r3, r4
 8084542:	fb04 3312 	mls	r3, r4, r2, r3
 8084546:	b983      	cbnz	r3, 808456a <iso_year_adjust+0x44>
 8084548:	f240 736c 	movw	r3, #1900	; 0x76c
 808454c:	2900      	cmp	r1, #0
 808454e:	bfa8      	it	ge
 8084550:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8084554:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084558:	440b      	add	r3, r1
 808455a:	fb93 f1f2 	sdiv	r1, r3, r2
 808455e:	fb02 3311 	mls	r3, r2, r1, r3
 8084562:	fab3 f283 	clz	r2, r3
 8084566:	0952      	lsrs	r2, r2, #5
 8084568:	e000      	b.n	808456c <iso_year_adjust+0x46>
 808456a:	2201      	movs	r2, #1
 808456c:	6983      	ldr	r3, [r0, #24]
 808456e:	69c1      	ldr	r1, [r0, #28]
 8084570:	005b      	lsls	r3, r3, #1
 8084572:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8084576:	4413      	add	r3, r2
 8084578:	2b21      	cmp	r3, #33	; 0x21
 808457a:	dc0e      	bgt.n	808459a <iso_year_adjust+0x74>
 808457c:	2b20      	cmp	r3, #32
 808457e:	da2f      	bge.n	80845e0 <iso_year_adjust+0xba>
 8084580:	2b0d      	cmp	r3, #13
 8084582:	dc02      	bgt.n	808458a <iso_year_adjust+0x64>
 8084584:	2b0a      	cmp	r3, #10
 8084586:	db05      	blt.n	8084594 <iso_year_adjust+0x6e>
 8084588:	e02a      	b.n	80845e0 <iso_year_adjust+0xba>
 808458a:	2b10      	cmp	r3, #16
 808458c:	db26      	blt.n	80845dc <iso_year_adjust+0xb6>
 808458e:	2b11      	cmp	r3, #17
 8084590:	dd26      	ble.n	80845e0 <iso_year_adjust+0xba>
 8084592:	3b1c      	subs	r3, #28
 8084594:	2b01      	cmp	r3, #1
 8084596:	d923      	bls.n	80845e0 <iso_year_adjust+0xba>
 8084598:	e020      	b.n	80845dc <iso_year_adjust+0xb6>
 808459a:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808459e:	4293      	cmp	r3, r2
 80845a0:	dc0e      	bgt.n	80845c0 <iso_year_adjust+0x9a>
 80845a2:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80845a6:	4293      	cmp	r3, r2
 80845a8:	da16      	bge.n	80845d8 <iso_year_adjust+0xb2>
 80845aa:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80845ae:	4293      	cmp	r3, r2
 80845b0:	d012      	beq.n	80845d8 <iso_year_adjust+0xb2>
 80845b2:	db13      	blt.n	80845dc <iso_year_adjust+0xb6>
 80845b4:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80845b8:	3b12      	subs	r3, #18
 80845ba:	2b02      	cmp	r3, #2
 80845bc:	d90c      	bls.n	80845d8 <iso_year_adjust+0xb2>
 80845be:	e00d      	b.n	80845dc <iso_year_adjust+0xb6>
 80845c0:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80845c4:	4293      	cmp	r3, r2
 80845c6:	d007      	beq.n	80845d8 <iso_year_adjust+0xb2>
 80845c8:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80845cc:	4293      	cmp	r3, r2
 80845ce:	d003      	beq.n	80845d8 <iso_year_adjust+0xb2>
 80845d0:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80845d4:	4293      	cmp	r3, r2
 80845d6:	d101      	bne.n	80845dc <iso_year_adjust+0xb6>
 80845d8:	2001      	movs	r0, #1
 80845da:	bd10      	pop	{r4, pc}
 80845dc:	2000      	movs	r0, #0
 80845de:	bd10      	pop	{r4, pc}
 80845e0:	f04f 30ff 	mov.w	r0, #4294967295
 80845e4:	bd10      	pop	{r4, pc}
	...

080845e8 <strftime>:
 80845e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80845ec:	460e      	mov	r6, r1
 80845ee:	b093      	sub	sp, #76	; 0x4c
 80845f0:	461d      	mov	r5, r3
 80845f2:	4607      	mov	r7, r0
 80845f4:	4691      	mov	r9, r2
 80845f6:	f001 fc49 	bl	8085e8c <__get_current_time_locale>
 80845fa:	2300      	movs	r3, #0
 80845fc:	9306      	str	r3, [sp, #24]
 80845fe:	461c      	mov	r4, r3
 8084600:	1e73      	subs	r3, r6, #1
 8084602:	9003      	str	r0, [sp, #12]
 8084604:	9302      	str	r3, [sp, #8]
 8084606:	f899 3000 	ldrb.w	r3, [r9]
 808460a:	2b00      	cmp	r3, #0
 808460c:	f000 8492 	beq.w	8084f34 <strftime+0x94c>
 8084610:	2b25      	cmp	r3, #37	; 0x25
 8084612:	d008      	beq.n	8084626 <strftime+0x3e>
 8084614:	9a02      	ldr	r2, [sp, #8]
 8084616:	4294      	cmp	r4, r2
 8084618:	f080 8490 	bcs.w	8084f3c <strftime+0x954>
 808461c:	553b      	strb	r3, [r7, r4]
 808461e:	f109 0901 	add.w	r9, r9, #1
 8084622:	3401      	adds	r4, #1
 8084624:	e7ef      	b.n	8084606 <strftime+0x1e>
 8084626:	f899 a001 	ldrb.w	sl, [r9, #1]
 808462a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808462e:	d007      	beq.n	8084640 <strftime+0x58>
 8084630:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8084634:	d004      	beq.n	8084640 <strftime+0x58>
 8084636:	f109 0901 	add.w	r9, r9, #1
 808463a:	f04f 0a00 	mov.w	sl, #0
 808463e:	e001      	b.n	8084644 <strftime+0x5c>
 8084640:	f109 0902 	add.w	r9, r9, #2
 8084644:	f899 3000 	ldrb.w	r3, [r9]
 8084648:	3b31      	subs	r3, #49	; 0x31
 808464a:	2b08      	cmp	r3, #8
 808464c:	d808      	bhi.n	8084660 <strftime+0x78>
 808464e:	4648      	mov	r0, r9
 8084650:	220a      	movs	r2, #10
 8084652:	a90a      	add	r1, sp, #40	; 0x28
 8084654:	f001 fc10 	bl	8085e78 <strtoul>
 8084658:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808465c:	4680      	mov	r8, r0
 808465e:	e001      	b.n	8084664 <strftime+0x7c>
 8084660:	f04f 0800 	mov.w	r8, #0
 8084664:	f899 3000 	ldrb.w	r3, [r9]
 8084668:	2b45      	cmp	r3, #69	; 0x45
 808466a:	d001      	beq.n	8084670 <strftime+0x88>
 808466c:	2b4f      	cmp	r3, #79	; 0x4f
 808466e:	d101      	bne.n	8084674 <strftime+0x8c>
 8084670:	f109 0901 	add.w	r9, r9, #1
 8084674:	f899 0000 	ldrb.w	r0, [r9]
 8084678:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808467c:	2b55      	cmp	r3, #85	; 0x55
 808467e:	f200 845d 	bhi.w	8084f3c <strftime+0x954>
 8084682:	e8df f013 	tbh	[pc, r3, lsl #1]
 8084686:	044a      	.short	0x044a
 8084688:	045b045b 	.word	0x045b045b
 808468c:	045b045b 	.word	0x045b045b
 8084690:	045b045b 	.word	0x045b045b
 8084694:	045b045b 	.word	0x045b045b
 8084698:	045b045b 	.word	0x045b045b
 808469c:	045b045b 	.word	0x045b045b
 80846a0:	045b045b 	.word	0x045b045b
 80846a4:	045b045b 	.word	0x045b045b
 80846a8:	045b045b 	.word	0x045b045b
 80846ac:	045b045b 	.word	0x045b045b
 80846b0:	045b045b 	.word	0x045b045b
 80846b4:	045b045b 	.word	0x045b045b
 80846b8:	045b045b 	.word	0x045b045b
 80846bc:	006f045b 	.word	0x006f045b
 80846c0:	00d400a1 	.word	0x00d400a1
 80846c4:	045b011a 	.word	0x045b011a
 80846c8:	01a0013f 	.word	0x01a0013f
 80846cc:	022d0226 	.word	0x022d0226
 80846d0:	045b045b 	.word	0x045b045b
 80846d4:	0260045b 	.word	0x0260045b
 80846d8:	045b045b 	.word	0x045b045b
 80846dc:	045b0268 	.word	0x045b0268
 80846e0:	031c0296 	.word	0x031c0296
 80846e4:	033a0324 	.word	0x033a0324
 80846e8:	03850342 	.word	0x03850342
 80846ec:	039f00c6 	.word	0x039f00c6
 80846f0:	045b041f 	.word	0x045b041f
 80846f4:	045b045b 	.word	0x045b045b
 80846f8:	045b045b 	.word	0x045b045b
 80846fc:	0056045b 	.word	0x0056045b
 8084700:	00ba0089 	.word	0x00ba0089
 8084704:	010c010c 	.word	0x010c010c
 8084708:	0171045b 	.word	0x0171045b
 808470c:	045b0089 	.word	0x045b0089
 8084710:	0226023d 	.word	0x0226023d
 8084714:	025d022d 	.word	0x025d022d
 8084718:	045b0262 	.word	0x045b0262
 808471c:	045b0268 	.word	0x045b0268
 8084720:	029b00be 	.word	0x029b00be
 8084724:	032d031e 	.word	0x032d031e
 8084728:	037e045b 	.word	0x037e045b
 808472c:	039100c2 	.word	0x039100c2
 8084730:	03e7      	.short	0x03e7
 8084732:	69ab      	ldr	r3, [r5, #24]
 8084734:	9a03      	ldr	r2, [sp, #12]
 8084736:	3318      	adds	r3, #24
 8084738:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808473c:	4640      	mov	r0, r8
 808473e:	f000 fc07 	bl	8084f50 <strlen>
 8084742:	f108 38ff 	add.w	r8, r8, #4294967295
 8084746:	193b      	adds	r3, r7, r4
 8084748:	4420      	add	r0, r4
 808474a:	4284      	cmp	r4, r0
 808474c:	f000 83eb 	beq.w	8084f26 <strftime+0x93e>
 8084750:	9a02      	ldr	r2, [sp, #8]
 8084752:	4294      	cmp	r4, r2
 8084754:	f080 83f2 	bcs.w	8084f3c <strftime+0x954>
 8084758:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808475c:	3401      	adds	r4, #1
 808475e:	f803 2b01 	strb.w	r2, [r3], #1
 8084762:	e7f2      	b.n	808474a <strftime+0x162>
 8084764:	69ab      	ldr	r3, [r5, #24]
 8084766:	9a03      	ldr	r2, [sp, #12]
 8084768:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808476c:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 8084770:	4640      	mov	r0, r8
 8084772:	f000 fbed 	bl	8084f50 <strlen>
 8084776:	f108 38ff 	add.w	r8, r8, #4294967295
 808477a:	193b      	adds	r3, r7, r4
 808477c:	4420      	add	r0, r4
 808477e:	4284      	cmp	r4, r0
 8084780:	f000 83d1 	beq.w	8084f26 <strftime+0x93e>
 8084784:	9a02      	ldr	r2, [sp, #8]
 8084786:	4294      	cmp	r4, r2
 8084788:	f080 83d8 	bcs.w	8084f3c <strftime+0x954>
 808478c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8084790:	3401      	adds	r4, #1
 8084792:	f803 2b01 	strb.w	r2, [r3], #1
 8084796:	e7f2      	b.n	808477e <strftime+0x196>
 8084798:	692b      	ldr	r3, [r5, #16]
 808479a:	9a03      	ldr	r2, [sp, #12]
 808479c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80847a0:	4640      	mov	r0, r8
 80847a2:	f000 fbd5 	bl	8084f50 <strlen>
 80847a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80847aa:	193b      	adds	r3, r7, r4
 80847ac:	4420      	add	r0, r4
 80847ae:	4284      	cmp	r4, r0
 80847b0:	f000 83b9 	beq.w	8084f26 <strftime+0x93e>
 80847b4:	9a02      	ldr	r2, [sp, #8]
 80847b6:	4294      	cmp	r4, r2
 80847b8:	f080 83c0 	bcs.w	8084f3c <strftime+0x954>
 80847bc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80847c0:	3401      	adds	r4, #1
 80847c2:	f803 2b01 	strb.w	r2, [r3], #1
 80847c6:	e7f2      	b.n	80847ae <strftime+0x1c6>
 80847c8:	692b      	ldr	r3, [r5, #16]
 80847ca:	9a03      	ldr	r2, [sp, #12]
 80847cc:	330c      	adds	r3, #12
 80847ce:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80847d2:	4640      	mov	r0, r8
 80847d4:	f000 fbbc 	bl	8084f50 <strlen>
 80847d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80847dc:	193b      	adds	r3, r7, r4
 80847de:	4420      	add	r0, r4
 80847e0:	4284      	cmp	r4, r0
 80847e2:	f000 83a0 	beq.w	8084f26 <strftime+0x93e>
 80847e6:	9a02      	ldr	r2, [sp, #8]
 80847e8:	4294      	cmp	r4, r2
 80847ea:	f080 83a7 	bcs.w	8084f3c <strftime+0x954>
 80847ee:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80847f2:	3401      	adds	r4, #1
 80847f4:	f803 2b01 	strb.w	r2, [r3], #1
 80847f8:	e7f2      	b.n	80847e0 <strftime+0x1f8>
 80847fa:	9b03      	ldr	r3, [sp, #12]
 80847fc:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 8084800:	e00a      	b.n	8084818 <strftime+0x230>
 8084802:	9b03      	ldr	r3, [sp, #12]
 8084804:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 8084808:	e006      	b.n	8084818 <strftime+0x230>
 808480a:	9b03      	ldr	r3, [sp, #12]
 808480c:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 8084810:	e002      	b.n	8084818 <strftime+0x230>
 8084812:	9b03      	ldr	r3, [sp, #12]
 8084814:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 8084818:	4640      	mov	r0, r8
 808481a:	f000 fb99 	bl	8084f50 <strlen>
 808481e:	f898 3000 	ldrb.w	r3, [r8]
 8084822:	2b00      	cmp	r3, #0
 8084824:	f000 837f 	beq.w	8084f26 <strftime+0x93e>
 8084828:	462b      	mov	r3, r5
 808482a:	4642      	mov	r2, r8
 808482c:	e093      	b.n	8084956 <strftime+0x36e>
 808482e:	49b6      	ldr	r1, [pc, #728]	; (8084b08 <strftime+0x520>)
 8084830:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8084834:	458b      	cmp	fp, r1
 8084836:	bfac      	ite	ge
 8084838:	2100      	movge	r1, #0
 808483a:	2101      	movlt	r1, #1
 808483c:	f1bb 0f00 	cmp.w	fp, #0
 8084840:	db04      	blt.n	808484c <strftime+0x264>
 8084842:	2064      	movs	r0, #100	; 0x64
 8084844:	fb9b f0f0 	sdiv	r0, fp, r0
 8084848:	3013      	adds	r0, #19
 808484a:	e008      	b.n	808485e <strftime+0x276>
 808484c:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 8084850:	9107      	str	r1, [sp, #28]
 8084852:	f001 fd5b 	bl	808630c <abs>
 8084856:	2364      	movs	r3, #100	; 0x64
 8084858:	fb90 f0f3 	sdiv	r0, r0, r3
 808485c:	9907      	ldr	r1, [sp, #28]
 808485e:	f1ba 0f00 	cmp.w	sl, #0
 8084862:	d008      	beq.n	8084876 <strftime+0x28e>
 8084864:	2863      	cmp	r0, #99	; 0x63
 8084866:	dd09      	ble.n	808487c <strftime+0x294>
 8084868:	4ba8      	ldr	r3, [pc, #672]	; (8084b0c <strftime+0x524>)
 808486a:	4aa9      	ldr	r2, [pc, #676]	; (8084b10 <strftime+0x528>)
 808486c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8084870:	bf18      	it	ne
 8084872:	4613      	movne	r3, r2
 8084874:	e003      	b.n	808487e <strftime+0x296>
 8084876:	4ba6      	ldr	r3, [pc, #664]	; (8084b10 <strftime+0x528>)
 8084878:	4aa6      	ldr	r2, [pc, #664]	; (8084b14 <strftime+0x52c>)
 808487a:	e001      	b.n	8084880 <strftime+0x298>
 808487c:	4ba4      	ldr	r3, [pc, #656]	; (8084b10 <strftime+0x528>)
 808487e:	4aa6      	ldr	r2, [pc, #664]	; (8084b18 <strftime+0x530>)
 8084880:	f1b8 0f01 	cmp.w	r8, #1
 8084884:	bf98      	it	ls
 8084886:	f04f 0802 	movls.w	r8, #2
 808488a:	ebc1 0108 	rsb	r1, r1, r8
 808488e:	9001      	str	r0, [sp, #4]
 8084890:	9100      	str	r1, [sp, #0]
 8084892:	489d      	ldr	r0, [pc, #628]	; (8084b08 <strftime+0x520>)
 8084894:	49a1      	ldr	r1, [pc, #644]	; (8084b1c <strftime+0x534>)
 8084896:	4583      	cmp	fp, r0
 8084898:	bfb8      	it	lt
 808489a:	460b      	movlt	r3, r1
 808489c:	e21d      	b.n	8084cda <strftime+0x6f2>
 808489e:	4aa0      	ldr	r2, [pc, #640]	; (8084b20 <strftime+0x538>)
 80848a0:	49a0      	ldr	r1, [pc, #640]	; (8084b24 <strftime+0x53c>)
 80848a2:	68eb      	ldr	r3, [r5, #12]
 80848a4:	2864      	cmp	r0, #100	; 0x64
 80848a6:	bf08      	it	eq
 80848a8:	460a      	moveq	r2, r1
 80848aa:	1b31      	subs	r1, r6, r4
 80848ac:	1938      	adds	r0, r7, r4
 80848ae:	f7fd fb3f 	bl	8081f30 <sniprintf>
 80848b2:	2800      	cmp	r0, #0
 80848b4:	f280 8302 	bge.w	8084ebc <strftime+0x8d4>
 80848b8:	e340      	b.n	8084f3c <strftime+0x954>
 80848ba:	6968      	ldr	r0, [r5, #20]
 80848bc:	692b      	ldr	r3, [r5, #16]
 80848be:	2800      	cmp	r0, #0
 80848c0:	f103 0b01 	add.w	fp, r3, #1
 80848c4:	eb07 0804 	add.w	r8, r7, r4
 80848c8:	ebc4 0a06 	rsb	sl, r4, r6
 80848cc:	68eb      	ldr	r3, [r5, #12]
 80848ce:	db05      	blt.n	80848dc <strftime+0x2f4>
 80848d0:	2264      	movs	r2, #100	; 0x64
 80848d2:	fb90 f1f2 	sdiv	r1, r0, r2
 80848d6:	fb02 0011 	mls	r0, r2, r1, r0
 80848da:	e00a      	b.n	80848f2 <strftime+0x30a>
 80848dc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80848e0:	9307      	str	r3, [sp, #28]
 80848e2:	f001 fd13 	bl	808630c <abs>
 80848e6:	2264      	movs	r2, #100	; 0x64
 80848e8:	fb90 f1f2 	sdiv	r1, r0, r2
 80848ec:	fb01 0012 	mls	r0, r1, r2, r0
 80848f0:	9b07      	ldr	r3, [sp, #28]
 80848f2:	9001      	str	r0, [sp, #4]
 80848f4:	9300      	str	r3, [sp, #0]
 80848f6:	4651      	mov	r1, sl
 80848f8:	465b      	mov	r3, fp
 80848fa:	4640      	mov	r0, r8
 80848fc:	4a8a      	ldr	r2, [pc, #552]	; (8084b28 <strftime+0x540>)
 80848fe:	f7fd fb17 	bl	8081f30 <sniprintf>
 8084902:	e7d6      	b.n	80848b2 <strftime+0x2ca>
 8084904:	2325      	movs	r3, #37	; 0x25
 8084906:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808490a:	f1ba 0f00 	cmp.w	sl, #0
 808490e:	d007      	beq.n	8084920 <strftime+0x338>
 8084910:	f1b8 0f05 	cmp.w	r8, #5
 8084914:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 8084918:	bf98      	it	ls
 808491a:	f04f 0806 	movls.w	r8, #6
 808491e:	e004      	b.n	808492a <strftime+0x342>
 8084920:	232b      	movs	r3, #43	; 0x2b
 8084922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8084926:	f04f 080a 	mov.w	r8, #10
 808492a:	f1b8 0306 	subs.w	r3, r8, #6
 808492e:	d102      	bne.n	8084936 <strftime+0x34e>
 8084930:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8084934:	e00a      	b.n	808494c <strftime+0x364>
 8084936:	4a7d      	ldr	r2, [pc, #500]	; (8084b2c <strftime+0x544>)
 8084938:	211e      	movs	r1, #30
 808493a:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808493e:	f7fd faf7 	bl	8081f30 <sniprintf>
 8084942:	2800      	cmp	r0, #0
 8084944:	ddf4      	ble.n	8084930 <strftime+0x348>
 8084946:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808494a:	4418      	add	r0, r3
 808494c:	4978      	ldr	r1, [pc, #480]	; (8084b30 <strftime+0x548>)
 808494e:	f7ff fdc7 	bl	80844e0 <strcpy>
 8084952:	462b      	mov	r3, r5
 8084954:	aa0a      	add	r2, sp, #40	; 0x28
 8084956:	1b31      	subs	r1, r6, r4
 8084958:	1938      	adds	r0, r7, r4
 808495a:	f7ff fe45 	bl	80845e8 <strftime>
 808495e:	2800      	cmp	r0, #0
 8084960:	f340 82ec 	ble.w	8084f3c <strftime+0x954>
 8084964:	4404      	add	r4, r0
 8084966:	e2de      	b.n	8084f26 <strftime+0x93e>
 8084968:	4628      	mov	r0, r5
 808496a:	f7ff fddc 	bl	8084526 <iso_year_adjust>
 808496e:	4680      	mov	r8, r0
 8084970:	6968      	ldr	r0, [r5, #20]
 8084972:	2800      	cmp	r0, #0
 8084974:	db05      	blt.n	8084982 <strftime+0x39a>
 8084976:	2264      	movs	r2, #100	; 0x64
 8084978:	fb90 f1f2 	sdiv	r1, r0, r2
 808497c:	fb02 0011 	mls	r0, r2, r1, r0
 8084980:	e008      	b.n	8084994 <strftime+0x3ac>
 8084982:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8084986:	f001 fcc1 	bl	808630c <abs>
 808498a:	2264      	movs	r2, #100	; 0x64
 808498c:	fb90 f3f2 	sdiv	r3, r0, r2
 8084990:	fb03 0012 	mls	r0, r3, r2, r0
 8084994:	f1b8 0f00 	cmp.w	r8, #0
 8084998:	da06      	bge.n	80849a8 <strftime+0x3c0>
 808499a:	696a      	ldr	r2, [r5, #20]
 808499c:	4b65      	ldr	r3, [pc, #404]	; (8084b34 <strftime+0x54c>)
 808499e:	429a      	cmp	r2, r3
 80849a0:	bfb8      	it	lt
 80849a2:	f04f 0801 	movlt.w	r8, #1
 80849a6:	e006      	b.n	80849b6 <strftime+0x3ce>
 80849a8:	d005      	beq.n	80849b6 <strftime+0x3ce>
 80849aa:	696a      	ldr	r2, [r5, #20]
 80849ac:	4b56      	ldr	r3, [pc, #344]	; (8084b08 <strftime+0x520>)
 80849ae:	429a      	cmp	r2, r3
 80849b0:	bfb8      	it	lt
 80849b2:	f04f 38ff 	movlt.w	r8, #4294967295
 80849b6:	2364      	movs	r3, #100	; 0x64
 80849b8:	4440      	add	r0, r8
 80849ba:	fb90 f2f3 	sdiv	r2, r0, r3
 80849be:	fb03 0012 	mls	r0, r3, r2, r0
 80849c2:	4418      	add	r0, r3
 80849c4:	e1f8      	b.n	8084db8 <strftime+0x7d0>
 80849c6:	4b50      	ldr	r3, [pc, #320]	; (8084b08 <strftime+0x520>)
 80849c8:	6969      	ldr	r1, [r5, #20]
 80849ca:	4628      	mov	r0, r5
 80849cc:	4299      	cmp	r1, r3
 80849ce:	bfac      	ite	ge
 80849d0:	2300      	movge	r3, #0
 80849d2:	2301      	movlt	r3, #1
 80849d4:	9108      	str	r1, [sp, #32]
 80849d6:	9307      	str	r3, [sp, #28]
 80849d8:	f7ff fda5 	bl	8084526 <iso_year_adjust>
 80849dc:	9908      	ldr	r1, [sp, #32]
 80849de:	4683      	mov	fp, r0
 80849e0:	2900      	cmp	r1, #0
 80849e2:	db04      	blt.n	80849ee <strftime+0x406>
 80849e4:	2364      	movs	r3, #100	; 0x64
 80849e6:	fb91 f3f3 	sdiv	r3, r1, r3
 80849ea:	3313      	adds	r3, #19
 80849ec:	e008      	b.n	8084a00 <strftime+0x418>
 80849ee:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80849f2:	9108      	str	r1, [sp, #32]
 80849f4:	f001 fc8a 	bl	808630c <abs>
 80849f8:	2364      	movs	r3, #100	; 0x64
 80849fa:	fb90 f3f3 	sdiv	r3, r0, r3
 80849fe:	9908      	ldr	r1, [sp, #32]
 8084a00:	6968      	ldr	r0, [r5, #20]
 8084a02:	2800      	cmp	r0, #0
 8084a04:	db06      	blt.n	8084a14 <strftime+0x42c>
 8084a06:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8084a0a:	fb90 fcfe 	sdiv	ip, r0, lr
 8084a0e:	fb0e 001c 	mls	r0, lr, ip, r0
 8084a12:	e00d      	b.n	8084a30 <strftime+0x448>
 8084a14:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8084a18:	9109      	str	r1, [sp, #36]	; 0x24
 8084a1a:	9308      	str	r3, [sp, #32]
 8084a1c:	f001 fc76 	bl	808630c <abs>
 8084a20:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8084a24:	fb90 fcfe 	sdiv	ip, r0, lr
 8084a28:	fb0c 001e 	mls	r0, ip, lr, r0
 8084a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8084a2e:	9b08      	ldr	r3, [sp, #32]
 8084a30:	f1bb 0f00 	cmp.w	fp, #0
 8084a34:	da08      	bge.n	8084a48 <strftime+0x460>
 8084a36:	6969      	ldr	r1, [r5, #20]
 8084a38:	4a3e      	ldr	r2, [pc, #248]	; (8084b34 <strftime+0x54c>)
 8084a3a:	4291      	cmp	r1, r2
 8084a3c:	da0a      	bge.n	8084a54 <strftime+0x46c>
 8084a3e:	f04f 0b01 	mov.w	fp, #1
 8084a42:	f8cd b01c 	str.w	fp, [sp, #28]
 8084a46:	e005      	b.n	8084a54 <strftime+0x46c>
 8084a48:	d004      	beq.n	8084a54 <strftime+0x46c>
 8084a4a:	4a2f      	ldr	r2, [pc, #188]	; (8084b08 <strftime+0x520>)
 8084a4c:	4291      	cmp	r1, r2
 8084a4e:	bfb8      	it	lt
 8084a50:	f04f 3bff 	movlt.w	fp, #4294967295
 8084a54:	eb0b 0200 	add.w	r2, fp, r0
 8084a58:	1c50      	adds	r0, r2, #1
 8084a5a:	d102      	bne.n	8084a62 <strftime+0x47a>
 8084a5c:	3b01      	subs	r3, #1
 8084a5e:	2263      	movs	r2, #99	; 0x63
 8084a60:	e003      	b.n	8084a6a <strftime+0x482>
 8084a62:	2a64      	cmp	r2, #100	; 0x64
 8084a64:	bf04      	itt	eq
 8084a66:	3301      	addeq	r3, #1
 8084a68:	2200      	moveq	r2, #0
 8084a6a:	2064      	movs	r0, #100	; 0x64
 8084a6c:	fb00 2303 	mla	r3, r0, r3, r2
 8084a70:	9a07      	ldr	r2, [sp, #28]
 8084a72:	b142      	cbz	r2, 8084a86 <strftime+0x49e>
 8084a74:	222d      	movs	r2, #45	; 0x2d
 8084a76:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 8084a7a:	f1b8 0f00 	cmp.w	r8, #0
 8084a7e:	d013      	beq.n	8084aa8 <strftime+0x4c0>
 8084a80:	f108 38ff 	add.w	r8, r8, #4294967295
 8084a84:	e010      	b.n	8084aa8 <strftime+0x4c0>
 8084a86:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8084a8a:	d110      	bne.n	8084aae <strftime+0x4c6>
 8084a8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8084a90:	4293      	cmp	r3, r2
 8084a92:	d90c      	bls.n	8084aae <strftime+0x4c6>
 8084a94:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8084a98:	f1b8 0f00 	cmp.w	r8, #0
 8084a9c:	d1f0      	bne.n	8084a80 <strftime+0x498>
 8084a9e:	aa12      	add	r2, sp, #72	; 0x48
 8084aa0:	2125      	movs	r1, #37	; 0x25
 8084aa2:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 8084aa6:	e00a      	b.n	8084abe <strftime+0x4d6>
 8084aa8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8084aac:	e000      	b.n	8084ab0 <strftime+0x4c8>
 8084aae:	aa0a      	add	r2, sp, #40	; 0x28
 8084ab0:	2125      	movs	r1, #37	; 0x25
 8084ab2:	7011      	strb	r1, [r2, #0]
 8084ab4:	f1ba 0f00 	cmp.w	sl, #0
 8084ab8:	d101      	bne.n	8084abe <strftime+0x4d6>
 8084aba:	1c50      	adds	r0, r2, #1
 8084abc:	e002      	b.n	8084ac4 <strftime+0x4dc>
 8084abe:	2130      	movs	r1, #48	; 0x30
 8084ac0:	1c90      	adds	r0, r2, #2
 8084ac2:	7051      	strb	r1, [r2, #1]
 8084ac4:	491c      	ldr	r1, [pc, #112]	; (8084b38 <strftime+0x550>)
 8084ac6:	9307      	str	r3, [sp, #28]
 8084ac8:	f7ff fd0a 	bl	80844e0 <strcpy>
 8084acc:	9b07      	ldr	r3, [sp, #28]
 8084ace:	9300      	str	r3, [sp, #0]
 8084ad0:	e1ac      	b.n	8084e2c <strftime+0x844>
 8084ad2:	4a14      	ldr	r2, [pc, #80]	; (8084b24 <strftime+0x53c>)
 8084ad4:	4912      	ldr	r1, [pc, #72]	; (8084b20 <strftime+0x538>)
 8084ad6:	68ab      	ldr	r3, [r5, #8]
 8084ad8:	286b      	cmp	r0, #107	; 0x6b
 8084ada:	bf08      	it	eq
 8084adc:	460a      	moveq	r2, r1
 8084ade:	e6e4      	b.n	80848aa <strftime+0x2c2>
 8084ae0:	68a9      	ldr	r1, [r5, #8]
 8084ae2:	230c      	movs	r3, #12
 8084ae4:	b131      	cbz	r1, 8084af4 <strftime+0x50c>
 8084ae6:	4299      	cmp	r1, r3
 8084ae8:	bf16      	itet	ne
 8084aea:	fb91 f2f3 	sdivne	r2, r1, r3
 8084aee:	460b      	moveq	r3, r1
 8084af0:	fb03 1312 	mlsne	r3, r3, r2, r1
 8084af4:	4a0a      	ldr	r2, [pc, #40]	; (8084b20 <strftime+0x538>)
 8084af6:	490b      	ldr	r1, [pc, #44]	; (8084b24 <strftime+0x53c>)
 8084af8:	2849      	cmp	r0, #73	; 0x49
 8084afa:	bf08      	it	eq
 8084afc:	460a      	moveq	r2, r1
 8084afe:	e6d4      	b.n	80848aa <strftime+0x2c2>
 8084b00:	69eb      	ldr	r3, [r5, #28]
 8084b02:	4a0e      	ldr	r2, [pc, #56]	; (8084b3c <strftime+0x554>)
 8084b04:	3301      	adds	r3, #1
 8084b06:	e6d0      	b.n	80848aa <strftime+0x2c2>
 8084b08:	fffff894 	.word	0xfffff894
 8084b0c:	08087dcf 	.word	0x08087dcf
 8084b10:	08087954 	.word	0x08087954
 8084b14:	08087dc0 	.word	0x08087dc0
 8084b18:	08087dc7 	.word	0x08087dc7
 8084b1c:	08087dd1 	.word	0x08087dd1
 8084b20:	08087dd3 	.word	0x08087dd3
 8084b24:	08087de1 	.word	0x08087de1
 8084b28:	08087dd7 	.word	0x08087dd7
 8084b2c:	0808753c 	.word	0x0808753c
 8084b30:	08087de6 	.word	0x08087de6
 8084b34:	fffff895 	.word	0xfffff895
 8084b38:	08087dee 	.word	0x08087dee
 8084b3c:	08087df2 	.word	0x08087df2
 8084b40:	692b      	ldr	r3, [r5, #16]
 8084b42:	3301      	adds	r3, #1
 8084b44:	e13c      	b.n	8084dc0 <strftime+0x7d8>
 8084b46:	686b      	ldr	r3, [r5, #4]
 8084b48:	e13a      	b.n	8084dc0 <strftime+0x7d8>
 8084b4a:	9b02      	ldr	r3, [sp, #8]
 8084b4c:	429c      	cmp	r4, r3
 8084b4e:	f080 81f5 	bcs.w	8084f3c <strftime+0x954>
 8084b52:	230a      	movs	r3, #10
 8084b54:	e1e5      	b.n	8084f22 <strftime+0x93a>
 8084b56:	68ab      	ldr	r3, [r5, #8]
 8084b58:	9a03      	ldr	r2, [sp, #12]
 8084b5a:	2b0b      	cmp	r3, #11
 8084b5c:	bfcc      	ite	gt
 8084b5e:	23a4      	movgt	r3, #164	; 0xa4
 8084b60:	23a0      	movle	r3, #160	; 0xa0
 8084b62:	4413      	add	r3, r2
 8084b64:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8084b68:	4640      	mov	r0, r8
 8084b6a:	f000 f9f1 	bl	8084f50 <strlen>
 8084b6e:	4642      	mov	r2, r8
 8084b70:	4bb1      	ldr	r3, [pc, #708]	; (8084e38 <strftime+0x850>)
 8084b72:	1939      	adds	r1, r7, r4
 8084b74:	f8d3 e000 	ldr.w	lr, [r3]
 8084b78:	4420      	add	r0, r4
 8084b7a:	4284      	cmp	r4, r0
 8084b7c:	f000 81d3 	beq.w	8084f26 <strftime+0x93e>
 8084b80:	9b02      	ldr	r3, [sp, #8]
 8084b82:	429c      	cmp	r4, r3
 8084b84:	f080 81da 	bcs.w	8084f3c <strftime+0x954>
 8084b88:	f899 3000 	ldrb.w	r3, [r9]
 8084b8c:	3401      	adds	r4, #1
 8084b8e:	2b50      	cmp	r3, #80	; 0x50
 8084b90:	7813      	ldrb	r3, [r2, #0]
 8084b92:	d10a      	bne.n	8084baa <strftime+0x5c2>
 8084b94:	eb0e 0c03 	add.w	ip, lr, r3
 8084b98:	f89c c001 	ldrb.w	ip, [ip, #1]
 8084b9c:	f00c 0c03 	and.w	ip, ip, #3
 8084ba0:	f1bc 0f01 	cmp.w	ip, #1
 8084ba4:	bf08      	it	eq
 8084ba6:	3320      	addeq	r3, #32
 8084ba8:	b2db      	uxtb	r3, r3
 8084baa:	f801 3b01 	strb.w	r3, [r1], #1
 8084bae:	3201      	adds	r2, #1
 8084bb0:	e7e3      	b.n	8084b7a <strftime+0x592>
 8084bb2:	686b      	ldr	r3, [r5, #4]
 8084bb4:	4aa1      	ldr	r2, [pc, #644]	; (8084e3c <strftime+0x854>)
 8084bb6:	9300      	str	r3, [sp, #0]
 8084bb8:	68ab      	ldr	r3, [r5, #8]
 8084bba:	e139      	b.n	8084e30 <strftime+0x848>
 8084bbc:	6a2b      	ldr	r3, [r5, #32]
 8084bbe:	2b00      	cmp	r3, #0
 8084bc0:	db17      	blt.n	8084bf2 <strftime+0x60a>
 8084bc2:	f001 fa1b 	bl	8085ffc <__tz_lock>
 8084bc6:	9b06      	ldr	r3, [sp, #24]
 8084bc8:	b91b      	cbnz	r3, 8084bd2 <strftime+0x5ea>
 8084bca:	f001 fa19 	bl	8086000 <_tzset_unlocked>
 8084bce:	2301      	movs	r3, #1
 8084bd0:	9306      	str	r3, [sp, #24]
 8084bd2:	f001 ff01 	bl	80869d8 <__gettzinfo>
 8084bd6:	6a2b      	ldr	r3, [r5, #32]
 8084bd8:	221c      	movs	r2, #28
 8084bda:	2b00      	cmp	r3, #0
 8084bdc:	bfd4      	ite	le
 8084bde:	2300      	movle	r3, #0
 8084be0:	2301      	movgt	r3, #1
 8084be2:	fb02 0003 	mla	r0, r2, r3, r0
 8084be6:	6a03      	ldr	r3, [r0, #32]
 8084be8:	f1c3 0800 	rsb	r8, r3, #0
 8084bec:	f001 fa07 	bl	8085ffe <__tz_unlock>
 8084bf0:	e001      	b.n	8084bf6 <strftime+0x60e>
 8084bf2:	f04f 0800 	mov.w	r8, #0
 8084bf6:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8084bfa:	ebc4 0c06 	rsb	ip, r4, r6
 8084bfe:	4670      	mov	r0, lr
 8084c00:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 8084c04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8084c08:	f141 33ff 	adc.w	r3, r1, #4294967295
 8084c0c:	2a00      	cmp	r2, #0
 8084c0e:	f173 0b00 	sbcs.w	fp, r3, #0
 8084c12:	eb07 0a04 	add.w	sl, r7, r4
 8084c16:	da03      	bge.n	8084c20 <strftime+0x638>
 8084c18:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 8084c1c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8084c20:	0891      	lsrs	r1, r2, #2
 8084c22:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 8084c26:	109b      	asrs	r3, r3, #2
 8084c28:	9104      	str	r1, [sp, #16]
 8084c2a:	9305      	str	r3, [sp, #20]
 8084c2c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8084c30:	2364      	movs	r3, #100	; 0x64
 8084c32:	fb91 f1f3 	sdiv	r1, r1, r3
 8084c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8084c3a:	1a52      	subs	r2, r2, r1
 8084c3c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8084c40:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 8084c44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8084c48:	fb90 f1f1 	sdiv	r1, r0, r1
 8084c4c:	1852      	adds	r2, r2, r1
 8084c4e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8084c52:	f240 116d 	movw	r1, #365	; 0x16d
 8084c56:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 8084c5a:	fb01 fe0e 	mul.w	lr, r1, lr
 8084c5e:	69e9      	ldr	r1, [r5, #28]
 8084c60:	eb12 020e 	adds.w	r2, r2, lr
 8084c64:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 8084c68:	1852      	adds	r2, r2, r1
 8084c6a:	f04f 0e18 	mov.w	lr, #24
 8084c6e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8084c72:	fba2 010e 	umull	r0, r1, r2, lr
 8084c76:	fb0e 1103 	mla	r1, lr, r3, r1
 8084c7a:	68ab      	ldr	r3, [r5, #8]
 8084c7c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 8084c80:	18c0      	adds	r0, r0, r3
 8084c82:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8084c86:	fba0 230e 	umull	r2, r3, r0, lr
 8084c8a:	fb0e 3301 	mla	r3, lr, r1, r3
 8084c8e:	6869      	ldr	r1, [r5, #4]
 8084c90:	1852      	adds	r2, r2, r1
 8084c92:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8084c96:	fba2 010e 	umull	r0, r1, r2, lr
 8084c9a:	fb0e 1103 	mla	r1, lr, r3, r1
 8084c9e:	682b      	ldr	r3, [r5, #0]
 8084ca0:	4a67      	ldr	r2, [pc, #412]	; (8084e40 <strftime+0x858>)
 8084ca2:	18c0      	adds	r0, r0, r3
 8084ca4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8084ca8:	ebb0 0008 	subs.w	r0, r0, r8
 8084cac:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 8084cb0:	e9cd 0100 	strd	r0, r1, [sp]
 8084cb4:	4661      	mov	r1, ip
 8084cb6:	4650      	mov	r0, sl
 8084cb8:	f7fd f93a 	bl	8081f30 <sniprintf>
 8084cbc:	e5f9      	b.n	80848b2 <strftime+0x2ca>
 8084cbe:	682b      	ldr	r3, [r5, #0]
 8084cc0:	e07e      	b.n	8084dc0 <strftime+0x7d8>
 8084cc2:	9b02      	ldr	r3, [sp, #8]
 8084cc4:	429c      	cmp	r4, r3
 8084cc6:	f080 8139 	bcs.w	8084f3c <strftime+0x954>
 8084cca:	2309      	movs	r3, #9
 8084ccc:	e129      	b.n	8084f22 <strftime+0x93a>
 8084cce:	682b      	ldr	r3, [r5, #0]
 8084cd0:	4a5c      	ldr	r2, [pc, #368]	; (8084e44 <strftime+0x85c>)
 8084cd2:	9301      	str	r3, [sp, #4]
 8084cd4:	686b      	ldr	r3, [r5, #4]
 8084cd6:	9300      	str	r3, [sp, #0]
 8084cd8:	68ab      	ldr	r3, [r5, #8]
 8084cda:	1b31      	subs	r1, r6, r4
 8084cdc:	1938      	adds	r0, r7, r4
 8084cde:	e60e      	b.n	80848fe <strftime+0x316>
 8084ce0:	9b02      	ldr	r3, [sp, #8]
 8084ce2:	429c      	cmp	r4, r3
 8084ce4:	f080 812a 	bcs.w	8084f3c <strftime+0x954>
 8084ce8:	69ab      	ldr	r3, [r5, #24]
 8084cea:	1c62      	adds	r2, r4, #1
 8084cec:	b90b      	cbnz	r3, 8084cf2 <strftime+0x70a>
 8084cee:	2337      	movs	r3, #55	; 0x37
 8084cf0:	e000      	b.n	8084cf4 <strftime+0x70c>
 8084cf2:	3330      	adds	r3, #48	; 0x30
 8084cf4:	553b      	strb	r3, [r7, r4]
 8084cf6:	4614      	mov	r4, r2
 8084cf8:	e115      	b.n	8084f26 <strftime+0x93e>
 8084cfa:	69eb      	ldr	r3, [r5, #28]
 8084cfc:	69aa      	ldr	r2, [r5, #24]
 8084cfe:	3307      	adds	r3, #7
 8084d00:	1a9b      	subs	r3, r3, r2
 8084d02:	2207      	movs	r2, #7
 8084d04:	fb93 f3f2 	sdiv	r3, r3, r2
 8084d08:	e05a      	b.n	8084dc0 <strftime+0x7d8>
 8084d0a:	4628      	mov	r0, r5
 8084d0c:	f7ff fc0b 	bl	8084526 <iso_year_adjust>
 8084d10:	69aa      	ldr	r2, [r5, #24]
 8084d12:	b10a      	cbz	r2, 8084d18 <strftime+0x730>
 8084d14:	1e53      	subs	r3, r2, #1
 8084d16:	e000      	b.n	8084d1a <strftime+0x732>
 8084d18:	2306      	movs	r3, #6
 8084d1a:	2800      	cmp	r0, #0
 8084d1c:	dc2f      	bgt.n	8084d7e <strftime+0x796>
 8084d1e:	69ea      	ldr	r2, [r5, #28]
 8084d20:	d101      	bne.n	8084d26 <strftime+0x73e>
 8084d22:	320a      	adds	r2, #10
 8084d24:	e03b      	b.n	8084d9e <strftime+0x7b6>
 8084d26:	f240 716b 	movw	r1, #1899	; 0x76b
 8084d2a:	1a9a      	subs	r2, r3, r2
 8084d2c:	696b      	ldr	r3, [r5, #20]
 8084d2e:	2b00      	cmp	r3, #0
 8084d30:	bfb4      	ite	lt
 8084d32:	4608      	movlt	r0, r1
 8084d34:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 8084d38:	4418      	add	r0, r3
 8084d3a:	0781      	lsls	r1, r0, #30
 8084d3c:	d107      	bne.n	8084d4e <strftime+0x766>
 8084d3e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8084d42:	4601      	mov	r1, r0
 8084d44:	fb90 f0fe 	sdiv	r0, r0, lr
 8084d48:	fb0e 1110 	mls	r1, lr, r0, r1
 8084d4c:	b981      	cbnz	r1, 8084d70 <strftime+0x788>
 8084d4e:	f240 716b 	movw	r1, #1899	; 0x76b
 8084d52:	2b00      	cmp	r3, #0
 8084d54:	bfa8      	it	ge
 8084d56:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 8084d5a:	4419      	add	r1, r3
 8084d5c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8084d60:	fb91 f0f3 	sdiv	r0, r1, r3
 8084d64:	fb03 1110 	mls	r1, r3, r0, r1
 8084d68:	fab1 f181 	clz	r1, r1
 8084d6c:	0949      	lsrs	r1, r1, #5
 8084d6e:	e000      	b.n	8084d72 <strftime+0x78a>
 8084d70:	2101      	movs	r1, #1
 8084d72:	1a52      	subs	r2, r2, r1
 8084d74:	2a05      	cmp	r2, #5
 8084d76:	bfb4      	ite	lt
 8084d78:	2335      	movlt	r3, #53	; 0x35
 8084d7a:	2334      	movge	r3, #52	; 0x34
 8084d7c:	e020      	b.n	8084dc0 <strftime+0x7d8>
 8084d7e:	2301      	movs	r3, #1
 8084d80:	e01e      	b.n	8084dc0 <strftime+0x7d8>
 8084d82:	9b02      	ldr	r3, [sp, #8]
 8084d84:	429c      	cmp	r4, r3
 8084d86:	f080 80d9 	bcs.w	8084f3c <strftime+0x954>
 8084d8a:	69ab      	ldr	r3, [r5, #24]
 8084d8c:	3330      	adds	r3, #48	; 0x30
 8084d8e:	e0c8      	b.n	8084f22 <strftime+0x93a>
 8084d90:	69aa      	ldr	r2, [r5, #24]
 8084d92:	b10a      	cbz	r2, 8084d98 <strftime+0x7b0>
 8084d94:	1e53      	subs	r3, r2, #1
 8084d96:	e000      	b.n	8084d9a <strftime+0x7b2>
 8084d98:	2306      	movs	r3, #6
 8084d9a:	69ea      	ldr	r2, [r5, #28]
 8084d9c:	3207      	adds	r2, #7
 8084d9e:	1ad2      	subs	r2, r2, r3
 8084da0:	2307      	movs	r3, #7
 8084da2:	fb92 f3f3 	sdiv	r3, r2, r3
 8084da6:	e00b      	b.n	8084dc0 <strftime+0x7d8>
 8084da8:	6968      	ldr	r0, [r5, #20]
 8084daa:	2800      	cmp	r0, #0
 8084dac:	da03      	bge.n	8084db6 <strftime+0x7ce>
 8084dae:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8084db2:	f001 faab 	bl	808630c <abs>
 8084db6:	2364      	movs	r3, #100	; 0x64
 8084db8:	fb90 f2f3 	sdiv	r2, r0, r3
 8084dbc:	fb02 0313 	mls	r3, r2, r3, r0
 8084dc0:	4a21      	ldr	r2, [pc, #132]	; (8084e48 <strftime+0x860>)
 8084dc2:	e572      	b.n	80848aa <strftime+0x2c2>
 8084dc4:	696b      	ldr	r3, [r5, #20]
 8084dc6:	4a21      	ldr	r2, [pc, #132]	; (8084e4c <strftime+0x864>)
 8084dc8:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 8084dcc:	4293      	cmp	r3, r2
 8084dce:	da05      	bge.n	8084ddc <strftime+0x7f4>
 8084dd0:	232d      	movs	r3, #45	; 0x2d
 8084dd2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8084dd6:	f1cb 0b00 	rsb	fp, fp, #0
 8084dda:	e008      	b.n	8084dee <strftime+0x806>
 8084ddc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8084de0:	d10d      	bne.n	8084dfe <strftime+0x816>
 8084de2:	f242 730f 	movw	r3, #9999	; 0x270f
 8084de6:	459b      	cmp	fp, r3
 8084de8:	d911      	bls.n	8084e0e <strftime+0x826>
 8084dea:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8084dee:	f1b8 0f00 	cmp.w	r8, #0
 8084df2:	d001      	beq.n	8084df8 <strftime+0x810>
 8084df4:	f108 38ff 	add.w	r8, r8, #4294967295
 8084df8:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8084dfc:	e000      	b.n	8084e00 <strftime+0x818>
 8084dfe:	ab0a      	add	r3, sp, #40	; 0x28
 8084e00:	2225      	movs	r2, #37	; 0x25
 8084e02:	701a      	strb	r2, [r3, #0]
 8084e04:	f1ba 0f00 	cmp.w	sl, #0
 8084e08:	d108      	bne.n	8084e1c <strftime+0x834>
 8084e0a:	1c58      	adds	r0, r3, #1
 8084e0c:	e009      	b.n	8084e22 <strftime+0x83a>
 8084e0e:	f1b8 0f00 	cmp.w	r8, #0
 8084e12:	d1f4      	bne.n	8084dfe <strftime+0x816>
 8084e14:	2325      	movs	r3, #37	; 0x25
 8084e16:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8084e1a:	ab0a      	add	r3, sp, #40	; 0x28
 8084e1c:	2230      	movs	r2, #48	; 0x30
 8084e1e:	1c98      	adds	r0, r3, #2
 8084e20:	705a      	strb	r2, [r3, #1]
 8084e22:	490b      	ldr	r1, [pc, #44]	; (8084e50 <strftime+0x868>)
 8084e24:	f7ff fb5c 	bl	80844e0 <strcpy>
 8084e28:	f8cd b000 	str.w	fp, [sp]
 8084e2c:	4643      	mov	r3, r8
 8084e2e:	aa0a      	add	r2, sp, #40	; 0x28
 8084e30:	1b31      	subs	r1, r6, r4
 8084e32:	1938      	adds	r0, r7, r4
 8084e34:	e03f      	b.n	8084eb6 <strftime+0x8ce>
 8084e36:	bf00      	nop
 8084e38:	20000014 	.word	0x20000014
 8084e3c:	08087e01 	.word	0x08087e01
 8084e40:	08087df7 	.word	0x08087df7
 8084e44:	08087dfc 	.word	0x08087dfc
 8084e48:	08087de1 	.word	0x08087de1
 8084e4c:	fffff894 	.word	0xfffff894
 8084e50:	08087dee 	.word	0x08087dee
 8084e54:	6a2b      	ldr	r3, [r5, #32]
 8084e56:	2b00      	cmp	r3, #0
 8084e58:	db65      	blt.n	8084f26 <strftime+0x93e>
 8084e5a:	f001 f8cf 	bl	8085ffc <__tz_lock>
 8084e5e:	9b06      	ldr	r3, [sp, #24]
 8084e60:	b91b      	cbnz	r3, 8084e6a <strftime+0x882>
 8084e62:	f001 f8cd 	bl	8086000 <_tzset_unlocked>
 8084e66:	2301      	movs	r3, #1
 8084e68:	9306      	str	r3, [sp, #24]
 8084e6a:	f001 fdb5 	bl	80869d8 <__gettzinfo>
 8084e6e:	6a2b      	ldr	r3, [r5, #32]
 8084e70:	221c      	movs	r2, #28
 8084e72:	2b00      	cmp	r3, #0
 8084e74:	bfd4      	ite	le
 8084e76:	2300      	movle	r3, #0
 8084e78:	2301      	movgt	r3, #1
 8084e7a:	fb02 0003 	mla	r0, r2, r3, r0
 8084e7e:	6a03      	ldr	r3, [r0, #32]
 8084e80:	eb07 0a04 	add.w	sl, r7, r4
 8084e84:	f1c3 0800 	rsb	r8, r3, #0
 8084e88:	f001 f8b9 	bl	8085ffe <__tz_unlock>
 8084e8c:	233c      	movs	r3, #60	; 0x3c
 8084e8e:	fb98 f0f3 	sdiv	r0, r8, r3
 8084e92:	9307      	str	r3, [sp, #28]
 8084e94:	f001 fe3a 	bl	8086b0c <labs>
 8084e98:	9b07      	ldr	r3, [sp, #28]
 8084e9a:	ebc4 0b06 	rsb	fp, r4, r6
 8084e9e:	fb90 f2f3 	sdiv	r2, r0, r3
 8084ea2:	fb02 0013 	mls	r0, r2, r3, r0
 8084ea6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8084eaa:	9000      	str	r0, [sp, #0]
 8084eac:	fb98 f3f3 	sdiv	r3, r8, r3
 8084eb0:	4659      	mov	r1, fp
 8084eb2:	4650      	mov	r0, sl
 8084eb4:	4a24      	ldr	r2, [pc, #144]	; (8084f48 <strftime+0x960>)
 8084eb6:	f7fd f83b 	bl	8081f30 <sniprintf>
 8084eba:	e4fa      	b.n	80848b2 <strftime+0x2ca>
 8084ebc:	4404      	add	r4, r0
 8084ebe:	42a6      	cmp	r6, r4
 8084ec0:	d831      	bhi.n	8084f26 <strftime+0x93e>
 8084ec2:	e03b      	b.n	8084f3c <strftime+0x954>
 8084ec4:	6a2b      	ldr	r3, [r5, #32]
 8084ec6:	2b00      	cmp	r3, #0
 8084ec8:	db2d      	blt.n	8084f26 <strftime+0x93e>
 8084eca:	f001 f897 	bl	8085ffc <__tz_lock>
 8084ece:	9b06      	ldr	r3, [sp, #24]
 8084ed0:	b91b      	cbnz	r3, 8084eda <strftime+0x8f2>
 8084ed2:	f001 f895 	bl	8086000 <_tzset_unlocked>
 8084ed6:	2301      	movs	r3, #1
 8084ed8:	9306      	str	r3, [sp, #24]
 8084eda:	6a2b      	ldr	r3, [r5, #32]
 8084edc:	4a1b      	ldr	r2, [pc, #108]	; (8084f4c <strftime+0x964>)
 8084ede:	2b00      	cmp	r3, #0
 8084ee0:	bfd4      	ite	le
 8084ee2:	2300      	movle	r3, #0
 8084ee4:	2301      	movgt	r3, #1
 8084ee6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8084eea:	4640      	mov	r0, r8
 8084eec:	f000 f830 	bl	8084f50 <strlen>
 8084ef0:	f108 38ff 	add.w	r8, r8, #4294967295
 8084ef4:	193b      	adds	r3, r7, r4
 8084ef6:	4420      	add	r0, r4
 8084ef8:	4284      	cmp	r4, r0
 8084efa:	d00b      	beq.n	8084f14 <strftime+0x92c>
 8084efc:	9a02      	ldr	r2, [sp, #8]
 8084efe:	4294      	cmp	r4, r2
 8084f00:	d205      	bcs.n	8084f0e <strftime+0x926>
 8084f02:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8084f06:	3401      	adds	r4, #1
 8084f08:	f803 2b01 	strb.w	r2, [r3], #1
 8084f0c:	e7f4      	b.n	8084ef8 <strftime+0x910>
 8084f0e:	f001 f876 	bl	8085ffe <__tz_unlock>
 8084f12:	e013      	b.n	8084f3c <strftime+0x954>
 8084f14:	f001 f873 	bl	8085ffe <__tz_unlock>
 8084f18:	e005      	b.n	8084f26 <strftime+0x93e>
 8084f1a:	9b02      	ldr	r3, [sp, #8]
 8084f1c:	429c      	cmp	r4, r3
 8084f1e:	d20d      	bcs.n	8084f3c <strftime+0x954>
 8084f20:	2325      	movs	r3, #37	; 0x25
 8084f22:	553b      	strb	r3, [r7, r4]
 8084f24:	3401      	adds	r4, #1
 8084f26:	f899 3000 	ldrb.w	r3, [r9]
 8084f2a:	b11b      	cbz	r3, 8084f34 <strftime+0x94c>
 8084f2c:	f109 0901 	add.w	r9, r9, #1
 8084f30:	f7ff bb69 	b.w	8084606 <strftime+0x1e>
 8084f34:	b126      	cbz	r6, 8084f40 <strftime+0x958>
 8084f36:	2300      	movs	r3, #0
 8084f38:	553b      	strb	r3, [r7, r4]
 8084f3a:	e001      	b.n	8084f40 <strftime+0x958>
 8084f3c:	2000      	movs	r0, #0
 8084f3e:	e000      	b.n	8084f42 <strftime+0x95a>
 8084f40:	4620      	mov	r0, r4
 8084f42:	b013      	add	sp, #76	; 0x4c
 8084f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084f48:	08087e0b 	.word	0x08087e0b
 8084f4c:	200000b4 	.word	0x200000b4

08084f50 <strlen>:
 8084f50:	4603      	mov	r3, r0
 8084f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084f56:	2a00      	cmp	r2, #0
 8084f58:	d1fb      	bne.n	8084f52 <strlen+0x2>
 8084f5a:	1a18      	subs	r0, r3, r0
 8084f5c:	3801      	subs	r0, #1
 8084f5e:	4770      	bx	lr

08084f60 <strncmp>:
 8084f60:	b530      	push	{r4, r5, lr}
 8084f62:	b182      	cbz	r2, 8084f86 <strncmp+0x26>
 8084f64:	1e45      	subs	r5, r0, #1
 8084f66:	3901      	subs	r1, #1
 8084f68:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8084f6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084f70:	42a3      	cmp	r3, r4
 8084f72:	d106      	bne.n	8084f82 <strncmp+0x22>
 8084f74:	43ec      	mvns	r4, r5
 8084f76:	4414      	add	r4, r2
 8084f78:	42e0      	cmn	r0, r4
 8084f7a:	d001      	beq.n	8084f80 <strncmp+0x20>
 8084f7c:	2b00      	cmp	r3, #0
 8084f7e:	d1f3      	bne.n	8084f68 <strncmp+0x8>
 8084f80:	461c      	mov	r4, r3
 8084f82:	1b18      	subs	r0, r3, r4
 8084f84:	bd30      	pop	{r4, r5, pc}
 8084f86:	4610      	mov	r0, r2
 8084f88:	bd30      	pop	{r4, r5, pc}

08084f8a <strncpy>:
 8084f8a:	4603      	mov	r3, r0
 8084f8c:	b510      	push	{r4, lr}
 8084f8e:	b142      	cbz	r2, 8084fa2 <strncpy+0x18>
 8084f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084f94:	3a01      	subs	r2, #1
 8084f96:	f803 4b01 	strb.w	r4, [r3], #1
 8084f9a:	2c00      	cmp	r4, #0
 8084f9c:	d1f7      	bne.n	8084f8e <strncpy+0x4>
 8084f9e:	441a      	add	r2, r3
 8084fa0:	e000      	b.n	8084fa4 <strncpy+0x1a>
 8084fa2:	bd10      	pop	{r4, pc}
 8084fa4:	4293      	cmp	r3, r2
 8084fa6:	d002      	beq.n	8084fae <strncpy+0x24>
 8084fa8:	f803 4b01 	strb.w	r4, [r3], #1
 8084fac:	e7fa      	b.n	8084fa4 <strncpy+0x1a>
 8084fae:	bd10      	pop	{r4, pc}

08084fb0 <strstr>:
 8084fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084fb2:	7803      	ldrb	r3, [r0, #0]
 8084fb4:	b963      	cbnz	r3, 8084fd0 <strstr+0x20>
 8084fb6:	780b      	ldrb	r3, [r1, #0]
 8084fb8:	2b00      	cmp	r3, #0
 8084fba:	bf18      	it	ne
 8084fbc:	2000      	movne	r0, #0
 8084fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084fc0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8084fc4:	b162      	cbz	r2, 8084fe0 <strstr+0x30>
 8084fc6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8084fca:	4630      	mov	r0, r6
 8084fcc:	4297      	cmp	r7, r2
 8084fce:	d0f7      	beq.n	8084fc0 <strstr+0x10>
 8084fd0:	4603      	mov	r3, r0
 8084fd2:	1c46      	adds	r6, r0, #1
 8084fd4:	7800      	ldrb	r0, [r0, #0]
 8084fd6:	b110      	cbz	r0, 8084fde <strstr+0x2e>
 8084fd8:	1e4d      	subs	r5, r1, #1
 8084fda:	1e5c      	subs	r4, r3, #1
 8084fdc:	e7f0      	b.n	8084fc0 <strstr+0x10>
 8084fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084fe0:	4618      	mov	r0, r3
 8084fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08084fe4 <sulp>:
 8084fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084fe8:	460f      	mov	r7, r1
 8084fea:	4690      	mov	r8, r2
 8084fec:	f002 f858 	bl	80870a0 <__ulp>
 8084ff0:	4604      	mov	r4, r0
 8084ff2:	460d      	mov	r5, r1
 8084ff4:	f1b8 0f00 	cmp.w	r8, #0
 8084ff8:	d011      	beq.n	808501e <sulp+0x3a>
 8084ffa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8084ffe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8085002:	2b00      	cmp	r3, #0
 8085004:	dd0b      	ble.n	808501e <sulp+0x3a>
 8085006:	051b      	lsls	r3, r3, #20
 8085008:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808500c:	2400      	movs	r4, #0
 808500e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8085012:	4622      	mov	r2, r4
 8085014:	462b      	mov	r3, r5
 8085016:	f7fe fd7d 	bl	8083b14 <__aeabi_dmul>
 808501a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808501e:	4620      	mov	r0, r4
 8085020:	4629      	mov	r1, r5
 8085022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08085028 <_strtod_r>:
 8085028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808502c:	4682      	mov	sl, r0
 808502e:	460c      	mov	r4, r1
 8085030:	b09d      	sub	sp, #116	; 0x74
 8085032:	2300      	movs	r3, #0
 8085034:	9213      	str	r2, [sp, #76]	; 0x4c
 8085036:	9318      	str	r3, [sp, #96]	; 0x60
 8085038:	f04f 0800 	mov.w	r8, #0
 808503c:	f04f 0900 	mov.w	r9, #0
 8085040:	9117      	str	r1, [sp, #92]	; 0x5c
 8085042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8085044:	781a      	ldrb	r2, [r3, #0]
 8085046:	2a0d      	cmp	r2, #13
 8085048:	d805      	bhi.n	8085056 <_strtod_r+0x2e>
 808504a:	2a09      	cmp	r2, #9
 808504c:	d213      	bcs.n	8085076 <_strtod_r+0x4e>
 808504e:	2a00      	cmp	r2, #0
 8085050:	f000 81ad 	beq.w	80853ae <_strtod_r+0x386>
 8085054:	e012      	b.n	808507c <_strtod_r+0x54>
 8085056:	2a2b      	cmp	r2, #43	; 0x2b
 8085058:	d004      	beq.n	8085064 <_strtod_r+0x3c>
 808505a:	2a2d      	cmp	r2, #45	; 0x2d
 808505c:	d004      	beq.n	8085068 <_strtod_r+0x40>
 808505e:	2a20      	cmp	r2, #32
 8085060:	d10c      	bne.n	808507c <_strtod_r+0x54>
 8085062:	e008      	b.n	8085076 <_strtod_r+0x4e>
 8085064:	2200      	movs	r2, #0
 8085066:	e000      	b.n	808506a <_strtod_r+0x42>
 8085068:	2201      	movs	r2, #1
 808506a:	920c      	str	r2, [sp, #48]	; 0x30
 808506c:	1c5a      	adds	r2, r3, #1
 808506e:	9217      	str	r2, [sp, #92]	; 0x5c
 8085070:	785b      	ldrb	r3, [r3, #1]
 8085072:	b92b      	cbnz	r3, 8085080 <_strtod_r+0x58>
 8085074:	e19b      	b.n	80853ae <_strtod_r+0x386>
 8085076:	3301      	adds	r3, #1
 8085078:	9317      	str	r3, [sp, #92]	; 0x5c
 808507a:	e7e2      	b.n	8085042 <_strtod_r+0x1a>
 808507c:	2300      	movs	r3, #0
 808507e:	930c      	str	r3, [sp, #48]	; 0x30
 8085080:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8085082:	782b      	ldrb	r3, [r5, #0]
 8085084:	2b30      	cmp	r3, #48	; 0x30
 8085086:	d15c      	bne.n	8085142 <_strtod_r+0x11a>
 8085088:	786b      	ldrb	r3, [r5, #1]
 808508a:	2b58      	cmp	r3, #88	; 0x58
 808508c:	d001      	beq.n	8085092 <_strtod_r+0x6a>
 808508e:	2b78      	cmp	r3, #120	; 0x78
 8085090:	d14c      	bne.n	808512c <_strtod_r+0x104>
 8085092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8085094:	4aa8      	ldr	r2, [pc, #672]	; (8085338 <_strtod_r+0x310>)
 8085096:	9301      	str	r3, [sp, #4]
 8085098:	ab18      	add	r3, sp, #96	; 0x60
 808509a:	9300      	str	r3, [sp, #0]
 808509c:	a917      	add	r1, sp, #92	; 0x5c
 808509e:	ab19      	add	r3, sp, #100	; 0x64
 80850a0:	4650      	mov	r0, sl
 80850a2:	f001 f982 	bl	80863aa <__gethex>
 80850a6:	f010 0607 	ands.w	r6, r0, #7
 80850aa:	4604      	mov	r4, r0
 80850ac:	f000 8585 	beq.w	8085bba <_strtod_r+0xb92>
 80850b0:	2e06      	cmp	r6, #6
 80850b2:	d105      	bne.n	80850c0 <_strtod_r+0x98>
 80850b4:	3501      	adds	r5, #1
 80850b6:	2300      	movs	r3, #0
 80850b8:	9517      	str	r5, [sp, #92]	; 0x5c
 80850ba:	930c      	str	r3, [sp, #48]	; 0x30
 80850bc:	f000 bd7d 	b.w	8085bba <_strtod_r+0xb92>
 80850c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80850c2:	b13a      	cbz	r2, 80850d4 <_strtod_r+0xac>
 80850c4:	2135      	movs	r1, #53	; 0x35
 80850c6:	a81a      	add	r0, sp, #104	; 0x68
 80850c8:	f002 f8d1 	bl	808726e <__copybits>
 80850cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80850ce:	4650      	mov	r0, sl
 80850d0:	f001 fd55 	bl	8086b7e <_Bfree>
 80850d4:	2e06      	cmp	r6, #6
 80850d6:	d822      	bhi.n	808511e <_strtod_r+0xf6>
 80850d8:	e8df f006 	tbb	[pc, r6]
 80850dc:	18080d04 	.word	0x18080d04
 80850e0:	0d1d      	.short	0x0d1d
 80850e2:	04          	.byte	0x04
 80850e3:	00          	.byte	0x00
 80850e4:	f04f 0900 	mov.w	r9, #0
 80850e8:	46c8      	mov	r8, r9
 80850ea:	e018      	b.n	808511e <_strtod_r+0xf6>
 80850ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80850f0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80850f4:	e013      	b.n	808511e <_strtod_r+0xf6>
 80850f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80850f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80850fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80850fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8085102:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8085106:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808510a:	e008      	b.n	808511e <_strtod_r+0xf6>
 808510c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808533c <_strtod_r+0x314>
 8085110:	f04f 0800 	mov.w	r8, #0
 8085114:	e003      	b.n	808511e <_strtod_r+0xf6>
 8085116:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808511a:	f04f 38ff 	mov.w	r8, #4294967295
 808511e:	0721      	lsls	r1, r4, #28
 8085120:	f140 854b 	bpl.w	8085bba <_strtod_r+0xb92>
 8085124:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8085128:	f000 bd47 	b.w	8085bba <_strtod_r+0xb92>
 808512c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808512e:	1c5a      	adds	r2, r3, #1
 8085130:	9217      	str	r2, [sp, #92]	; 0x5c
 8085132:	785b      	ldrb	r3, [r3, #1]
 8085134:	2b30      	cmp	r3, #48	; 0x30
 8085136:	d0f9      	beq.n	808512c <_strtod_r+0x104>
 8085138:	2b00      	cmp	r3, #0
 808513a:	f000 853e 	beq.w	8085bba <_strtod_r+0xb92>
 808513e:	2301      	movs	r3, #1
 8085140:	e000      	b.n	8085144 <_strtod_r+0x11c>
 8085142:	2300      	movs	r3, #0
 8085144:	9305      	str	r3, [sp, #20]
 8085146:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8085148:	220a      	movs	r2, #10
 808514a:	9306      	str	r3, [sp, #24]
 808514c:	2300      	movs	r3, #0
 808514e:	469b      	mov	fp, r3
 8085150:	9302      	str	r3, [sp, #8]
 8085152:	9304      	str	r3, [sp, #16]
 8085154:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8085156:	782e      	ldrb	r6, [r5, #0]
 8085158:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808515c:	b2d9      	uxtb	r1, r3
 808515e:	2909      	cmp	r1, #9
 8085160:	d811      	bhi.n	8085186 <_strtod_r+0x15e>
 8085162:	f1bb 0f08 	cmp.w	fp, #8
 8085166:	bfd5      	itete	le
 8085168:	9904      	ldrle	r1, [sp, #16]
 808516a:	9902      	ldrgt	r1, [sp, #8]
 808516c:	fb02 3301 	mlale	r3, r2, r1, r3
 8085170:	fb02 3301 	mlagt	r3, r2, r1, r3
 8085174:	f105 0501 	add.w	r5, r5, #1
 8085178:	bfd4      	ite	le
 808517a:	9304      	strle	r3, [sp, #16]
 808517c:	9302      	strgt	r3, [sp, #8]
 808517e:	f10b 0b01 	add.w	fp, fp, #1
 8085182:	9517      	str	r5, [sp, #92]	; 0x5c
 8085184:	e7e6      	b.n	8085154 <_strtod_r+0x12c>
 8085186:	4650      	mov	r0, sl
 8085188:	f7ff f952 	bl	8084430 <_localeconv_r>
 808518c:	6807      	ldr	r7, [r0, #0]
 808518e:	4650      	mov	r0, sl
 8085190:	f7ff f94e 	bl	8084430 <_localeconv_r>
 8085194:	6800      	ldr	r0, [r0, #0]
 8085196:	f7ff fedb 	bl	8084f50 <strlen>
 808519a:	4639      	mov	r1, r7
 808519c:	4602      	mov	r2, r0
 808519e:	4628      	mov	r0, r5
 80851a0:	f7ff fede 	bl	8084f60 <strncmp>
 80851a4:	4607      	mov	r7, r0
 80851a6:	b128      	cbz	r0, 80851b4 <_strtod_r+0x18c>
 80851a8:	2000      	movs	r0, #0
 80851aa:	4633      	mov	r3, r6
 80851ac:	465d      	mov	r5, fp
 80851ae:	4602      	mov	r2, r0
 80851b0:	4601      	mov	r1, r0
 80851b2:	e05a      	b.n	808526a <_strtod_r+0x242>
 80851b4:	4650      	mov	r0, sl
 80851b6:	f7ff f93b 	bl	8084430 <_localeconv_r>
 80851ba:	6800      	ldr	r0, [r0, #0]
 80851bc:	f7ff fec8 	bl	8084f50 <strlen>
 80851c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80851c2:	181a      	adds	r2, r3, r0
 80851c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80851c6:	5c1b      	ldrb	r3, [r3, r0]
 80851c8:	f1bb 0f00 	cmp.w	fp, #0
 80851cc:	d145      	bne.n	808525a <_strtod_r+0x232>
 80851ce:	4658      	mov	r0, fp
 80851d0:	2b30      	cmp	r3, #48	; 0x30
 80851d2:	d105      	bne.n	80851e0 <_strtod_r+0x1b8>
 80851d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80851d6:	3001      	adds	r0, #1
 80851d8:	1c5a      	adds	r2, r3, #1
 80851da:	9217      	str	r2, [sp, #92]	; 0x5c
 80851dc:	785b      	ldrb	r3, [r3, #1]
 80851de:	e7f7      	b.n	80851d0 <_strtod_r+0x1a8>
 80851e0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80851e4:	2a08      	cmp	r2, #8
 80851e6:	d846      	bhi.n	8085276 <_strtod_r+0x24e>
 80851e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80851ea:	9206      	str	r2, [sp, #24]
 80851ec:	4602      	mov	r2, r0
 80851ee:	2000      	movs	r0, #0
 80851f0:	4605      	mov	r5, r0
 80851f2:	3b30      	subs	r3, #48	; 0x30
 80851f4:	f100 0101 	add.w	r1, r0, #1
 80851f8:	d029      	beq.n	808524e <_strtod_r+0x226>
 80851fa:	440a      	add	r2, r1
 80851fc:	4629      	mov	r1, r5
 80851fe:	eb05 0c00 	add.w	ip, r5, r0
 8085202:	260a      	movs	r6, #10
 8085204:	4561      	cmp	r1, ip
 8085206:	d00f      	beq.n	8085228 <_strtod_r+0x200>
 8085208:	3101      	adds	r1, #1
 808520a:	f101 3eff 	add.w	lr, r1, #4294967295
 808520e:	f1be 0f08 	cmp.w	lr, #8
 8085212:	dc03      	bgt.n	808521c <_strtod_r+0x1f4>
 8085214:	9f04      	ldr	r7, [sp, #16]
 8085216:	4377      	muls	r7, r6
 8085218:	9704      	str	r7, [sp, #16]
 808521a:	e7f3      	b.n	8085204 <_strtod_r+0x1dc>
 808521c:	2910      	cmp	r1, #16
 808521e:	bfde      	ittt	le
 8085220:	9f02      	ldrle	r7, [sp, #8]
 8085222:	4377      	mulle	r7, r6
 8085224:	9702      	strle	r7, [sp, #8]
 8085226:	e7ed      	b.n	8085204 <_strtod_r+0x1dc>
 8085228:	4428      	add	r0, r5
 808522a:	2808      	cmp	r0, #8
 808522c:	f100 0501 	add.w	r5, r0, #1
 8085230:	dc05      	bgt.n	808523e <_strtod_r+0x216>
 8085232:	9804      	ldr	r0, [sp, #16]
 8085234:	210a      	movs	r1, #10
 8085236:	fb01 3300 	mla	r3, r1, r0, r3
 808523a:	9304      	str	r3, [sp, #16]
 808523c:	e006      	b.n	808524c <_strtod_r+0x224>
 808523e:	2d10      	cmp	r5, #16
 8085240:	bfdf      	itttt	le
 8085242:	9802      	ldrle	r0, [sp, #8]
 8085244:	210a      	movle	r1, #10
 8085246:	fb01 3300 	mlale	r3, r1, r0, r3
 808524a:	9302      	strle	r3, [sp, #8]
 808524c:	2100      	movs	r1, #0
 808524e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8085250:	1c58      	adds	r0, r3, #1
 8085252:	9017      	str	r0, [sp, #92]	; 0x5c
 8085254:	785b      	ldrb	r3, [r3, #1]
 8085256:	4608      	mov	r0, r1
 8085258:	e002      	b.n	8085260 <_strtod_r+0x238>
 808525a:	465d      	mov	r5, fp
 808525c:	4638      	mov	r0, r7
 808525e:	463a      	mov	r2, r7
 8085260:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8085264:	2909      	cmp	r1, #9
 8085266:	d9c4      	bls.n	80851f2 <_strtod_r+0x1ca>
 8085268:	2101      	movs	r1, #1
 808526a:	2b65      	cmp	r3, #101	; 0x65
 808526c:	d001      	beq.n	8085272 <_strtod_r+0x24a>
 808526e:	2b45      	cmp	r3, #69	; 0x45
 8085270:	d14f      	bne.n	8085312 <_strtod_r+0x2ea>
 8085272:	b96d      	cbnz	r5, 8085290 <_strtod_r+0x268>
 8085274:	e004      	b.n	8085280 <_strtod_r+0x258>
 8085276:	2b65      	cmp	r3, #101	; 0x65
 8085278:	f040 84ad 	bne.w	8085bd6 <_strtod_r+0xbae>
 808527c:	2200      	movs	r2, #0
 808527e:	2101      	movs	r1, #1
 8085280:	b928      	cbnz	r0, 808528e <_strtod_r+0x266>
 8085282:	9b05      	ldr	r3, [sp, #20]
 8085284:	2b00      	cmp	r3, #0
 8085286:	f000 8092 	beq.w	80853ae <_strtod_r+0x386>
 808528a:	4605      	mov	r5, r0
 808528c:	e000      	b.n	8085290 <_strtod_r+0x268>
 808528e:	2500      	movs	r5, #0
 8085290:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8085292:	1c63      	adds	r3, r4, #1
 8085294:	9317      	str	r3, [sp, #92]	; 0x5c
 8085296:	7863      	ldrb	r3, [r4, #1]
 8085298:	2b2b      	cmp	r3, #43	; 0x2b
 808529a:	d006      	beq.n	80852aa <_strtod_r+0x282>
 808529c:	2b2d      	cmp	r3, #45	; 0x2d
 808529e:	d002      	beq.n	80852a6 <_strtod_r+0x27e>
 80852a0:	2600      	movs	r6, #0
 80852a2:	9603      	str	r6, [sp, #12]
 80852a4:	e006      	b.n	80852b4 <_strtod_r+0x28c>
 80852a6:	2301      	movs	r3, #1
 80852a8:	e000      	b.n	80852ac <_strtod_r+0x284>
 80852aa:	2300      	movs	r3, #0
 80852ac:	9303      	str	r3, [sp, #12]
 80852ae:	1ca3      	adds	r3, r4, #2
 80852b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80852b2:	78a3      	ldrb	r3, [r4, #2]
 80852b4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80852b8:	2e09      	cmp	r6, #9
 80852ba:	d829      	bhi.n	8085310 <_strtod_r+0x2e8>
 80852bc:	2b30      	cmp	r3, #48	; 0x30
 80852be:	d104      	bne.n	80852ca <_strtod_r+0x2a2>
 80852c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80852c2:	1c5e      	adds	r6, r3, #1
 80852c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80852c6:	785b      	ldrb	r3, [r3, #1]
 80852c8:	e7f8      	b.n	80852bc <_strtod_r+0x294>
 80852ca:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80852ce:	2e08      	cmp	r6, #8
 80852d0:	d81f      	bhi.n	8085312 <_strtod_r+0x2ea>
 80852d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80852d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80852d8:	461f      	mov	r7, r3
 80852da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80852dc:	1c5e      	adds	r6, r3, #1
 80852de:	9617      	str	r6, [sp, #92]	; 0x5c
 80852e0:	785b      	ldrb	r3, [r3, #1]
 80852e2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80852e6:	f1bc 0f09 	cmp.w	ip, #9
 80852ea:	d805      	bhi.n	80852f8 <_strtod_r+0x2d0>
 80852ec:	260a      	movs	r6, #10
 80852ee:	fb06 3e0e 	mla	lr, r6, lr, r3
 80852f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80852f6:	e7f0      	b.n	80852da <_strtod_r+0x2b2>
 80852f8:	1bf6      	subs	r6, r6, r7
 80852fa:	2e08      	cmp	r6, #8
 80852fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8085300:	dc02      	bgt.n	8085308 <_strtod_r+0x2e0>
 8085302:	4576      	cmp	r6, lr
 8085304:	bfa8      	it	ge
 8085306:	4676      	movge	r6, lr
 8085308:	9f03      	ldr	r7, [sp, #12]
 808530a:	b11f      	cbz	r7, 8085314 <_strtod_r+0x2ec>
 808530c:	4276      	negs	r6, r6
 808530e:	e001      	b.n	8085314 <_strtod_r+0x2ec>
 8085310:	9417      	str	r4, [sp, #92]	; 0x5c
 8085312:	2600      	movs	r6, #0
 8085314:	2d00      	cmp	r5, #0
 8085316:	d152      	bne.n	80853be <_strtod_r+0x396>
 8085318:	2800      	cmp	r0, #0
 808531a:	f040 844e 	bne.w	8085bba <_strtod_r+0xb92>
 808531e:	9a05      	ldr	r2, [sp, #20]
 8085320:	2a00      	cmp	r2, #0
 8085322:	f040 844a 	bne.w	8085bba <_strtod_r+0xb92>
 8085326:	2900      	cmp	r1, #0
 8085328:	d141      	bne.n	80853ae <_strtod_r+0x386>
 808532a:	2b4e      	cmp	r3, #78	; 0x4e
 808532c:	d020      	beq.n	8085370 <_strtod_r+0x348>
 808532e:	dc07      	bgt.n	8085340 <_strtod_r+0x318>
 8085330:	2b49      	cmp	r3, #73	; 0x49
 8085332:	d00a      	beq.n	808534a <_strtod_r+0x322>
 8085334:	e03b      	b.n	80853ae <_strtod_r+0x386>
 8085336:	bf00      	nop
 8085338:	08087e18 	.word	0x08087e18
 808533c:	7ff00000 	.word	0x7ff00000
 8085340:	2b69      	cmp	r3, #105	; 0x69
 8085342:	d002      	beq.n	808534a <_strtod_r+0x322>
 8085344:	2b6e      	cmp	r3, #110	; 0x6e
 8085346:	d013      	beq.n	8085370 <_strtod_r+0x348>
 8085348:	e031      	b.n	80853ae <_strtod_r+0x386>
 808534a:	49aa      	ldr	r1, [pc, #680]	; (80855f4 <_strtod_r+0x5cc>)
 808534c:	a817      	add	r0, sp, #92	; 0x5c
 808534e:	f001 fa5d 	bl	808680c <__match>
 8085352:	b360      	cbz	r0, 80853ae <_strtod_r+0x386>
 8085354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8085356:	49a8      	ldr	r1, [pc, #672]	; (80855f8 <_strtod_r+0x5d0>)
 8085358:	3b01      	subs	r3, #1
 808535a:	a817      	add	r0, sp, #92	; 0x5c
 808535c:	9317      	str	r3, [sp, #92]	; 0x5c
 808535e:	f001 fa55 	bl	808680c <__match>
 8085362:	b910      	cbnz	r0, 808536a <_strtod_r+0x342>
 8085364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8085366:	3301      	adds	r3, #1
 8085368:	9317      	str	r3, [sp, #92]	; 0x5c
 808536a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8085614 <_strtod_r+0x5ec>
 808536e:	e01a      	b.n	80853a6 <_strtod_r+0x37e>
 8085370:	49a2      	ldr	r1, [pc, #648]	; (80855fc <_strtod_r+0x5d4>)
 8085372:	a817      	add	r0, sp, #92	; 0x5c
 8085374:	f001 fa4a 	bl	808680c <__match>
 8085378:	b1c8      	cbz	r0, 80853ae <_strtod_r+0x386>
 808537a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808537c:	781b      	ldrb	r3, [r3, #0]
 808537e:	2b28      	cmp	r3, #40	; 0x28
 8085380:	d10f      	bne.n	80853a2 <_strtod_r+0x37a>
 8085382:	aa1a      	add	r2, sp, #104	; 0x68
 8085384:	499e      	ldr	r1, [pc, #632]	; (8085600 <_strtod_r+0x5d8>)
 8085386:	a817      	add	r0, sp, #92	; 0x5c
 8085388:	f001 fa53 	bl	8086832 <__hexnan>
 808538c:	2805      	cmp	r0, #5
 808538e:	d108      	bne.n	80853a2 <_strtod_r+0x37a>
 8085390:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8085392:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8085396:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808539a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808539e:	f000 bc0c 	b.w	8085bba <_strtod_r+0xb92>
 80853a2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8085618 <_strtod_r+0x5f0>
 80853a6:	f04f 0800 	mov.w	r8, #0
 80853aa:	f000 bc06 	b.w	8085bba <_strtod_r+0xb92>
 80853ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80853b0:	9417      	str	r4, [sp, #92]	; 0x5c
 80853b2:	2b00      	cmp	r3, #0
 80853b4:	f000 840c 	beq.w	8085bd0 <_strtod_r+0xba8>
 80853b8:	2300      	movs	r3, #0
 80853ba:	930c      	str	r3, [sp, #48]	; 0x30
 80853bc:	e3ff      	b.n	8085bbe <_strtod_r+0xb96>
 80853be:	462c      	mov	r4, r5
 80853c0:	f1bb 0f00 	cmp.w	fp, #0
 80853c4:	bf08      	it	eq
 80853c6:	46ab      	moveq	fp, r5
 80853c8:	9804      	ldr	r0, [sp, #16]
 80853ca:	2d10      	cmp	r5, #16
 80853cc:	bfa8      	it	ge
 80853ce:	2410      	movge	r4, #16
 80853d0:	1ab7      	subs	r7, r6, r2
 80853d2:	f7fe fb29 	bl	8083a28 <__aeabi_ui2d>
 80853d6:	2c09      	cmp	r4, #9
 80853d8:	4680      	mov	r8, r0
 80853da:	4689      	mov	r9, r1
 80853dc:	dd13      	ble.n	8085406 <_strtod_r+0x3de>
 80853de:	4b89      	ldr	r3, [pc, #548]	; (8085604 <_strtod_r+0x5dc>)
 80853e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80853e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80853e8:	f7fe fb94 	bl	8083b14 <__aeabi_dmul>
 80853ec:	4680      	mov	r8, r0
 80853ee:	9802      	ldr	r0, [sp, #8]
 80853f0:	4689      	mov	r9, r1
 80853f2:	f7fe fb19 	bl	8083a28 <__aeabi_ui2d>
 80853f6:	4602      	mov	r2, r0
 80853f8:	460b      	mov	r3, r1
 80853fa:	4640      	mov	r0, r8
 80853fc:	4649      	mov	r1, r9
 80853fe:	f7fe f9d7 	bl	80837b0 <__adddf3>
 8085402:	4680      	mov	r8, r0
 8085404:	4689      	mov	r9, r1
 8085406:	2d0f      	cmp	r5, #15
 8085408:	dc33      	bgt.n	8085472 <_strtod_r+0x44a>
 808540a:	2f00      	cmp	r7, #0
 808540c:	f000 83d5 	beq.w	8085bba <_strtod_r+0xb92>
 8085410:	dd22      	ble.n	8085458 <_strtod_r+0x430>
 8085412:	2f16      	cmp	r7, #22
 8085414:	dc07      	bgt.n	8085426 <_strtod_r+0x3fe>
 8085416:	4d7b      	ldr	r5, [pc, #492]	; (8085604 <_strtod_r+0x5dc>)
 8085418:	4642      	mov	r2, r8
 808541a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808541e:	464b      	mov	r3, r9
 8085420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085424:	e013      	b.n	808544e <_strtod_r+0x426>
 8085426:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808542a:	429f      	cmp	r7, r3
 808542c:	dc21      	bgt.n	8085472 <_strtod_r+0x44a>
 808542e:	4c75      	ldr	r4, [pc, #468]	; (8085604 <_strtod_r+0x5dc>)
 8085430:	f1c5 050f 	rsb	r5, r5, #15
 8085434:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8085438:	1b7d      	subs	r5, r7, r5
 808543a:	4642      	mov	r2, r8
 808543c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085440:	464b      	mov	r3, r9
 8085442:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8085446:	f7fe fb65 	bl	8083b14 <__aeabi_dmul>
 808544a:	e9d4 2300 	ldrd	r2, r3, [r4]
 808544e:	f7fe fb61 	bl	8083b14 <__aeabi_dmul>
 8085452:	4680      	mov	r8, r0
 8085454:	4689      	mov	r9, r1
 8085456:	e3b0      	b.n	8085bba <_strtod_r+0xb92>
 8085458:	f117 0f16 	cmn.w	r7, #22
 808545c:	db09      	blt.n	8085472 <_strtod_r+0x44a>
 808545e:	4d69      	ldr	r5, [pc, #420]	; (8085604 <_strtod_r+0x5dc>)
 8085460:	4640      	mov	r0, r8
 8085462:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 8085466:	e9d3 2300 	ldrd	r2, r3, [r3]
 808546a:	4649      	mov	r1, r9
 808546c:	f7fe fc7c 	bl	8083d68 <__aeabi_ddiv>
 8085470:	e7ef      	b.n	8085452 <_strtod_r+0x42a>
 8085472:	1b2c      	subs	r4, r5, r4
 8085474:	443c      	add	r4, r7
 8085476:	2c00      	cmp	r4, #0
 8085478:	dd5d      	ble.n	8085536 <_strtod_r+0x50e>
 808547a:	f014 010f 	ands.w	r1, r4, #15
 808547e:	d00a      	beq.n	8085496 <_strtod_r+0x46e>
 8085480:	4b60      	ldr	r3, [pc, #384]	; (8085604 <_strtod_r+0x5dc>)
 8085482:	4642      	mov	r2, r8
 8085484:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8085488:	e9d1 0100 	ldrd	r0, r1, [r1]
 808548c:	464b      	mov	r3, r9
 808548e:	f7fe fb41 	bl	8083b14 <__aeabi_dmul>
 8085492:	4680      	mov	r8, r0
 8085494:	4689      	mov	r9, r1
 8085496:	f034 040f 	bics.w	r4, r4, #15
 808549a:	f000 80c1 	beq.w	8085620 <_strtod_r+0x5f8>
 808549e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80854a2:	dd0f      	ble.n	80854c4 <_strtod_r+0x49c>
 80854a4:	f04f 0b00 	mov.w	fp, #0
 80854a8:	f8cd b008 	str.w	fp, [sp, #8]
 80854ac:	f8cd b014 	str.w	fp, [sp, #20]
 80854b0:	f8cd b010 	str.w	fp, [sp, #16]
 80854b4:	2322      	movs	r3, #34	; 0x22
 80854b6:	f8ca 3000 	str.w	r3, [sl]
 80854ba:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8085614 <_strtod_r+0x5ec>
 80854be:	f04f 0800 	mov.w	r8, #0
 80854c2:	e189      	b.n	80857d8 <_strtod_r+0x7b0>
 80854c4:	4640      	mov	r0, r8
 80854c6:	4649      	mov	r1, r9
 80854c8:	2300      	movs	r3, #0
 80854ca:	4e4f      	ldr	r6, [pc, #316]	; (8085608 <_strtod_r+0x5e0>)
 80854cc:	1124      	asrs	r4, r4, #4
 80854ce:	9302      	str	r3, [sp, #8]
 80854d0:	2c01      	cmp	r4, #1
 80854d2:	dd0c      	ble.n	80854ee <_strtod_r+0x4c6>
 80854d4:	07e2      	lsls	r2, r4, #31
 80854d6:	d504      	bpl.n	80854e2 <_strtod_r+0x4ba>
 80854d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80854dc:	f7fe fb1a 	bl	8083b14 <__aeabi_dmul>
 80854e0:	2301      	movs	r3, #1
 80854e2:	9a02      	ldr	r2, [sp, #8]
 80854e4:	1064      	asrs	r4, r4, #1
 80854e6:	3201      	adds	r2, #1
 80854e8:	9202      	str	r2, [sp, #8]
 80854ea:	3608      	adds	r6, #8
 80854ec:	e7f0      	b.n	80854d0 <_strtod_r+0x4a8>
 80854ee:	b10b      	cbz	r3, 80854f4 <_strtod_r+0x4cc>
 80854f0:	4680      	mov	r8, r0
 80854f2:	4689      	mov	r9, r1
 80854f4:	4b44      	ldr	r3, [pc, #272]	; (8085608 <_strtod_r+0x5e0>)
 80854f6:	9a02      	ldr	r2, [sp, #8]
 80854f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80854fc:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8085500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085504:	4642      	mov	r2, r8
 8085506:	464b      	mov	r3, r9
 8085508:	f7fe fb04 	bl	8083b14 <__aeabi_dmul>
 808550c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8085510:	4689      	mov	r9, r1
 8085512:	460a      	mov	r2, r1
 8085514:	0d1b      	lsrs	r3, r3, #20
 8085516:	493d      	ldr	r1, [pc, #244]	; (808560c <_strtod_r+0x5e4>)
 8085518:	051b      	lsls	r3, r3, #20
 808551a:	428b      	cmp	r3, r1
 808551c:	4680      	mov	r8, r0
 808551e:	d8c1      	bhi.n	80854a4 <_strtod_r+0x47c>
 8085520:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8085524:	428b      	cmp	r3, r1
 8085526:	bf86      	itte	hi
 8085528:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808561c <_strtod_r+0x5f4>
 808552c:	f04f 38ff 	movhi.w	r8, #4294967295
 8085530:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8085534:	e074      	b.n	8085620 <_strtod_r+0x5f8>
 8085536:	d073      	beq.n	8085620 <_strtod_r+0x5f8>
 8085538:	4264      	negs	r4, r4
 808553a:	f014 020f 	ands.w	r2, r4, #15
 808553e:	d00a      	beq.n	8085556 <_strtod_r+0x52e>
 8085540:	4b30      	ldr	r3, [pc, #192]	; (8085604 <_strtod_r+0x5dc>)
 8085542:	4640      	mov	r0, r8
 8085544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8085548:	4649      	mov	r1, r9
 808554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808554e:	f7fe fc0b 	bl	8083d68 <__aeabi_ddiv>
 8085552:	4680      	mov	r8, r0
 8085554:	4689      	mov	r9, r1
 8085556:	1124      	asrs	r4, r4, #4
 8085558:	d062      	beq.n	8085620 <_strtod_r+0x5f8>
 808555a:	2c1f      	cmp	r4, #31
 808555c:	dd08      	ble.n	8085570 <_strtod_r+0x548>
 808555e:	f04f 0b00 	mov.w	fp, #0
 8085562:	f8cd b008 	str.w	fp, [sp, #8]
 8085566:	f8cd b014 	str.w	fp, [sp, #20]
 808556a:	f8cd b010 	str.w	fp, [sp, #16]
 808556e:	e12c      	b.n	80857ca <_strtod_r+0x7a2>
 8085570:	4640      	mov	r0, r8
 8085572:	4649      	mov	r1, r9
 8085574:	f014 0f10 	tst.w	r4, #16
 8085578:	bf0c      	ite	eq
 808557a:	2300      	moveq	r3, #0
 808557c:	236a      	movne	r3, #106	; 0x6a
 808557e:	4e24      	ldr	r6, [pc, #144]	; (8085610 <_strtod_r+0x5e8>)
 8085580:	9303      	str	r3, [sp, #12]
 8085582:	2300      	movs	r3, #0
 8085584:	2c00      	cmp	r4, #0
 8085586:	dd09      	ble.n	808559c <_strtod_r+0x574>
 8085588:	07e2      	lsls	r2, r4, #31
 808558a:	d504      	bpl.n	8085596 <_strtod_r+0x56e>
 808558c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8085590:	f7fe fac0 	bl	8083b14 <__aeabi_dmul>
 8085594:	2301      	movs	r3, #1
 8085596:	1064      	asrs	r4, r4, #1
 8085598:	3608      	adds	r6, #8
 808559a:	e7f3      	b.n	8085584 <_strtod_r+0x55c>
 808559c:	b10b      	cbz	r3, 80855a2 <_strtod_r+0x57a>
 808559e:	4680      	mov	r8, r0
 80855a0:	4689      	mov	r9, r1
 80855a2:	9b03      	ldr	r3, [sp, #12]
 80855a4:	b1eb      	cbz	r3, 80855e2 <_strtod_r+0x5ba>
 80855a6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80855aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80855ae:	2b00      	cmp	r3, #0
 80855b0:	4649      	mov	r1, r9
 80855b2:	dd16      	ble.n	80855e2 <_strtod_r+0x5ba>
 80855b4:	2b1f      	cmp	r3, #31
 80855b6:	dd0e      	ble.n	80855d6 <_strtod_r+0x5ae>
 80855b8:	2b34      	cmp	r3, #52	; 0x34
 80855ba:	bfde      	ittt	le
 80855bc:	3b20      	suble	r3, #32
 80855be:	f04f 32ff 	movle.w	r2, #4294967295
 80855c2:	fa02 f303 	lslle.w	r3, r2, r3
 80855c6:	f04f 0800 	mov.w	r8, #0
 80855ca:	bfcc      	ite	gt
 80855cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80855d0:	ea03 0901 	andle.w	r9, r3, r1
 80855d4:	e005      	b.n	80855e2 <_strtod_r+0x5ba>
 80855d6:	f04f 32ff 	mov.w	r2, #4294967295
 80855da:	fa02 f303 	lsl.w	r3, r2, r3
 80855de:	ea03 0808 	and.w	r8, r3, r8
 80855e2:	2200      	movs	r2, #0
 80855e4:	2300      	movs	r3, #0
 80855e6:	4640      	mov	r0, r8
 80855e8:	4649      	mov	r1, r9
 80855ea:	f7fe fcfb 	bl	8083fe4 <__aeabi_dcmpeq>
 80855ee:	2800      	cmp	r0, #0
 80855f0:	d1b5      	bne.n	808555e <_strtod_r+0x536>
 80855f2:	e017      	b.n	8085624 <_strtod_r+0x5fc>
 80855f4:	08087e2c 	.word	0x08087e2c
 80855f8:	08087e2f 	.word	0x08087e2f
 80855fc:	08087e81 	.word	0x08087e81
 8085600:	08087e38 	.word	0x08087e38
 8085604:	080880e0 	.word	0x080880e0
 8085608:	080881a8 	.word	0x080881a8
 808560c:	7ca00000 	.word	0x7ca00000
 8085610:	08087e50 	.word	0x08087e50
 8085614:	7ff00000 	.word	0x7ff00000
 8085618:	fff80000 	.word	0xfff80000
 808561c:	7fefffff 	.word	0x7fefffff
 8085620:	2300      	movs	r3, #0
 8085622:	9303      	str	r3, [sp, #12]
 8085624:	9b04      	ldr	r3, [sp, #16]
 8085626:	465a      	mov	r2, fp
 8085628:	9300      	str	r3, [sp, #0]
 808562a:	9906      	ldr	r1, [sp, #24]
 808562c:	462b      	mov	r3, r5
 808562e:	4650      	mov	r0, sl
 8085630:	f001 faf7 	bl	8086c22 <__s2b>
 8085634:	9005      	str	r0, [sp, #20]
 8085636:	2800      	cmp	r0, #0
 8085638:	f43f af34 	beq.w	80854a4 <_strtod_r+0x47c>
 808563c:	2f00      	cmp	r7, #0
 808563e:	f1c7 0300 	rsb	r3, r7, #0
 8085642:	bfa8      	it	ge
 8085644:	2300      	movge	r3, #0
 8085646:	930d      	str	r3, [sp, #52]	; 0x34
 8085648:	f04f 0b00 	mov.w	fp, #0
 808564c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8085650:	9312      	str	r3, [sp, #72]	; 0x48
 8085652:	f8cd b008 	str.w	fp, [sp, #8]
 8085656:	9b05      	ldr	r3, [sp, #20]
 8085658:	4650      	mov	r0, sl
 808565a:	6859      	ldr	r1, [r3, #4]
 808565c:	f001 fa5a 	bl	8086b14 <_Balloc>
 8085660:	9004      	str	r0, [sp, #16]
 8085662:	2800      	cmp	r0, #0
 8085664:	f43f af26 	beq.w	80854b4 <_strtod_r+0x48c>
 8085668:	9b05      	ldr	r3, [sp, #20]
 808566a:	300c      	adds	r0, #12
 808566c:	691a      	ldr	r2, [r3, #16]
 808566e:	f103 010c 	add.w	r1, r3, #12
 8085672:	3202      	adds	r2, #2
 8085674:	0092      	lsls	r2, r2, #2
 8085676:	f7fe fedf 	bl	8084438 <memcpy>
 808567a:	ab1a      	add	r3, sp, #104	; 0x68
 808567c:	9301      	str	r3, [sp, #4]
 808567e:	ab19      	add	r3, sp, #100	; 0x64
 8085680:	9300      	str	r3, [sp, #0]
 8085682:	4642      	mov	r2, r8
 8085684:	464b      	mov	r3, r9
 8085686:	4650      	mov	r0, sl
 8085688:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808568c:	f001 fd79 	bl	8087182 <__d2b>
 8085690:	9018      	str	r0, [sp, #96]	; 0x60
 8085692:	2800      	cmp	r0, #0
 8085694:	f43f af0e 	beq.w	80854b4 <_strtod_r+0x48c>
 8085698:	2101      	movs	r1, #1
 808569a:	4650      	mov	r0, sl
 808569c:	f001 fb4c 	bl	8086d38 <__i2b>
 80856a0:	9002      	str	r0, [sp, #8]
 80856a2:	2800      	cmp	r0, #0
 80856a4:	f43f af06 	beq.w	80854b4 <_strtod_r+0x48c>
 80856a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80856aa:	9903      	ldr	r1, [sp, #12]
 80856ac:	2b00      	cmp	r3, #0
 80856ae:	bfac      	ite	ge
 80856b0:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80856b2:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80856b4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80856b6:	bfac      	ite	ge
 80856b8:	18d6      	addge	r6, r2, r3
 80856ba:	1ad2      	sublt	r2, r2, r3
 80856bc:	eba3 0301 	sub.w	r3, r3, r1
 80856c0:	4423      	add	r3, r4
 80856c2:	49b1      	ldr	r1, [pc, #708]	; (8085988 <_strtod_r+0x960>)
 80856c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80856c8:	bfac      	ite	ge
 80856ca:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80856cc:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80856ce:	428b      	cmp	r3, r1
 80856d0:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80856d4:	f280 8085 	bge.w	80857e2 <_strtod_r+0x7ba>
 80856d8:	1ac9      	subs	r1, r1, r3
 80856da:	291f      	cmp	r1, #31
 80856dc:	bfc8      	it	gt
 80856de:	4dab      	ldrgt	r5, [pc, #684]	; (808598c <_strtod_r+0x964>)
 80856e0:	f04f 0701 	mov.w	r7, #1
 80856e4:	bfd4      	ite	le
 80856e6:	fa07 f301 	lslle.w	r3, r7, r1
 80856ea:	1aed      	subgt	r5, r5, r3
 80856ec:	eba4 0401 	sub.w	r4, r4, r1
 80856f0:	bfd9      	ittee	le
 80856f2:	9307      	strle	r3, [sp, #28]
 80856f4:	2500      	movle	r5, #0
 80856f6:	fa07 f505 	lslgt.w	r5, r7, r5
 80856fa:	9707      	strgt	r7, [sp, #28]
 80856fc:	1937      	adds	r7, r6, r4
 80856fe:	9b03      	ldr	r3, [sp, #12]
 8085700:	42be      	cmp	r6, r7
 8085702:	4414      	add	r4, r2
 8085704:	441c      	add	r4, r3
 8085706:	4633      	mov	r3, r6
 8085708:	bfa8      	it	ge
 808570a:	463b      	movge	r3, r7
 808570c:	42a3      	cmp	r3, r4
 808570e:	bfa8      	it	ge
 8085710:	4623      	movge	r3, r4
 8085712:	2b00      	cmp	r3, #0
 8085714:	bfc2      	ittt	gt
 8085716:	1aff      	subgt	r7, r7, r3
 8085718:	1ae4      	subgt	r4, r4, r3
 808571a:	1af6      	subgt	r6, r6, r3
 808571c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808571e:	2b00      	cmp	r3, #0
 8085720:	d163      	bne.n	80857ea <_strtod_r+0x7c2>
 8085722:	2f00      	cmp	r7, #0
 8085724:	dc7a      	bgt.n	808581c <_strtod_r+0x7f4>
 8085726:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8085728:	2b00      	cmp	r3, #0
 808572a:	f040 8081 	bne.w	8085830 <_strtod_r+0x808>
 808572e:	2c00      	cmp	r4, #0
 8085730:	f300 8088 	bgt.w	8085844 <_strtod_r+0x81c>
 8085734:	2e00      	cmp	r6, #0
 8085736:	f300 808f 	bgt.w	8085858 <_strtod_r+0x830>
 808573a:	9a04      	ldr	r2, [sp, #16]
 808573c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808573e:	4650      	mov	r0, sl
 8085740:	f001 fc4f 	bl	8086fe2 <__mdiff>
 8085744:	4683      	mov	fp, r0
 8085746:	2800      	cmp	r0, #0
 8085748:	f43f aeb4 	beq.w	80854b4 <_strtod_r+0x48c>
 808574c:	68c3      	ldr	r3, [r0, #12]
 808574e:	2400      	movs	r4, #0
 8085750:	60c4      	str	r4, [r0, #12]
 8085752:	9902      	ldr	r1, [sp, #8]
 8085754:	9306      	str	r3, [sp, #24]
 8085756:	f001 fc28 	bl	8086faa <__mcmp>
 808575a:	42a0      	cmp	r0, r4
 808575c:	f280 808b 	bge.w	8085876 <_strtod_r+0x84e>
 8085760:	9b06      	ldr	r3, [sp, #24]
 8085762:	2b00      	cmp	r3, #0
 8085764:	f040 8202 	bne.w	8085b6c <_strtod_r+0xb44>
 8085768:	f1b8 0f00 	cmp.w	r8, #0
 808576c:	f040 81fe 	bne.w	8085b6c <_strtod_r+0xb44>
 8085770:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8085774:	2b00      	cmp	r3, #0
 8085776:	f040 81f9 	bne.w	8085b6c <_strtod_r+0xb44>
 808577a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808577e:	0d1b      	lsrs	r3, r3, #20
 8085780:	051b      	lsls	r3, r3, #20
 8085782:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8085786:	f240 81f1 	bls.w	8085b6c <_strtod_r+0xb44>
 808578a:	f8db 3014 	ldr.w	r3, [fp, #20]
 808578e:	2b00      	cmp	r3, #0
 8085790:	d06c      	beq.n	808586c <_strtod_r+0x844>
 8085792:	4659      	mov	r1, fp
 8085794:	2201      	movs	r2, #1
 8085796:	4650      	mov	r0, sl
 8085798:	f001 fbb6 	bl	8086f08 <__lshift>
 808579c:	9902      	ldr	r1, [sp, #8]
 808579e:	4683      	mov	fp, r0
 80857a0:	f001 fc03 	bl	8086faa <__mcmp>
 80857a4:	2800      	cmp	r0, #0
 80857a6:	f340 81e1 	ble.w	8085b6c <_strtod_r+0xb44>
 80857aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80857ae:	9a03      	ldr	r2, [sp, #12]
 80857b0:	0d1b      	lsrs	r3, r3, #20
 80857b2:	051b      	lsls	r3, r3, #20
 80857b4:	2a00      	cmp	r2, #0
 80857b6:	f000 808d 	beq.w	80858d4 <_strtod_r+0x8ac>
 80857ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80857be:	f300 8089 	bgt.w	80858d4 <_strtod_r+0x8ac>
 80857c2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80857c6:	f300 81d3 	bgt.w	8085b70 <_strtod_r+0xb48>
 80857ca:	2322      	movs	r3, #34	; 0x22
 80857cc:	f04f 0800 	mov.w	r8, #0
 80857d0:	f04f 0900 	mov.w	r9, #0
 80857d4:	f8ca 3000 	str.w	r3, [sl]
 80857d8:	9b05      	ldr	r3, [sp, #20]
 80857da:	2b00      	cmp	r3, #0
 80857dc:	f040 81d9 	bne.w	8085b92 <_strtod_r+0xb6a>
 80857e0:	e1eb      	b.n	8085bba <_strtod_r+0xb92>
 80857e2:	2301      	movs	r3, #1
 80857e4:	2500      	movs	r5, #0
 80857e6:	9307      	str	r3, [sp, #28]
 80857e8:	e788      	b.n	80856fc <_strtod_r+0x6d4>
 80857ea:	461a      	mov	r2, r3
 80857ec:	9902      	ldr	r1, [sp, #8]
 80857ee:	4650      	mov	r0, sl
 80857f0:	f001 fb3c 	bl	8086e6c <__pow5mult>
 80857f4:	9002      	str	r0, [sp, #8]
 80857f6:	2800      	cmp	r0, #0
 80857f8:	f43f ae5c 	beq.w	80854b4 <_strtod_r+0x48c>
 80857fc:	4601      	mov	r1, r0
 80857fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8085800:	4650      	mov	r0, sl
 8085802:	f001 faa2 	bl	8086d4a <__multiply>
 8085806:	9006      	str	r0, [sp, #24]
 8085808:	2800      	cmp	r0, #0
 808580a:	f43f ae53 	beq.w	80854b4 <_strtod_r+0x48c>
 808580e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085810:	4650      	mov	r0, sl
 8085812:	f001 f9b4 	bl	8086b7e <_Bfree>
 8085816:	9b06      	ldr	r3, [sp, #24]
 8085818:	9318      	str	r3, [sp, #96]	; 0x60
 808581a:	e782      	b.n	8085722 <_strtod_r+0x6fa>
 808581c:	463a      	mov	r2, r7
 808581e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085820:	4650      	mov	r0, sl
 8085822:	f001 fb71 	bl	8086f08 <__lshift>
 8085826:	9018      	str	r0, [sp, #96]	; 0x60
 8085828:	2800      	cmp	r0, #0
 808582a:	f47f af7c 	bne.w	8085726 <_strtod_r+0x6fe>
 808582e:	e641      	b.n	80854b4 <_strtod_r+0x48c>
 8085830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8085832:	9904      	ldr	r1, [sp, #16]
 8085834:	4650      	mov	r0, sl
 8085836:	f001 fb19 	bl	8086e6c <__pow5mult>
 808583a:	9004      	str	r0, [sp, #16]
 808583c:	2800      	cmp	r0, #0
 808583e:	f47f af76 	bne.w	808572e <_strtod_r+0x706>
 8085842:	e637      	b.n	80854b4 <_strtod_r+0x48c>
 8085844:	4622      	mov	r2, r4
 8085846:	9904      	ldr	r1, [sp, #16]
 8085848:	4650      	mov	r0, sl
 808584a:	f001 fb5d 	bl	8086f08 <__lshift>
 808584e:	9004      	str	r0, [sp, #16]
 8085850:	2800      	cmp	r0, #0
 8085852:	f47f af6f 	bne.w	8085734 <_strtod_r+0x70c>
 8085856:	e62d      	b.n	80854b4 <_strtod_r+0x48c>
 8085858:	4632      	mov	r2, r6
 808585a:	9902      	ldr	r1, [sp, #8]
 808585c:	4650      	mov	r0, sl
 808585e:	f001 fb53 	bl	8086f08 <__lshift>
 8085862:	9002      	str	r0, [sp, #8]
 8085864:	2800      	cmp	r0, #0
 8085866:	f47f af68 	bne.w	808573a <_strtod_r+0x712>
 808586a:	e623      	b.n	80854b4 <_strtod_r+0x48c>
 808586c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8085870:	2b01      	cmp	r3, #1
 8085872:	dc8e      	bgt.n	8085792 <_strtod_r+0x76a>
 8085874:	e17a      	b.n	8085b6c <_strtod_r+0xb44>
 8085876:	d161      	bne.n	808593c <_strtod_r+0x914>
 8085878:	9a06      	ldr	r2, [sp, #24]
 808587a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808587e:	b322      	cbz	r2, 80858ca <_strtod_r+0x8a2>
 8085880:	4943      	ldr	r1, [pc, #268]	; (8085990 <_strtod_r+0x968>)
 8085882:	464a      	mov	r2, r9
 8085884:	428b      	cmp	r3, r1
 8085886:	d12e      	bne.n	80858e6 <_strtod_r+0x8be>
 8085888:	9b03      	ldr	r3, [sp, #12]
 808588a:	4641      	mov	r1, r8
 808588c:	b163      	cbz	r3, 80858a8 <_strtod_r+0x880>
 808588e:	4b41      	ldr	r3, [pc, #260]	; (8085994 <_strtod_r+0x96c>)
 8085890:	4013      	ands	r3, r2
 8085892:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8085896:	d807      	bhi.n	80858a8 <_strtod_r+0x880>
 8085898:	0d1b      	lsrs	r3, r3, #20
 808589a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808589e:	f04f 30ff 	mov.w	r0, #4294967295
 80858a2:	fa00 f303 	lsl.w	r3, r0, r3
 80858a6:	e001      	b.n	80858ac <_strtod_r+0x884>
 80858a8:	f04f 33ff 	mov.w	r3, #4294967295
 80858ac:	428b      	cmp	r3, r1
 80858ae:	d11a      	bne.n	80858e6 <_strtod_r+0x8be>
 80858b0:	4939      	ldr	r1, [pc, #228]	; (8085998 <_strtod_r+0x970>)
 80858b2:	428a      	cmp	r2, r1
 80858b4:	d102      	bne.n	80858bc <_strtod_r+0x894>
 80858b6:	3301      	adds	r3, #1
 80858b8:	f43f adfc 	beq.w	80854b4 <_strtod_r+0x48c>
 80858bc:	4b35      	ldr	r3, [pc, #212]	; (8085994 <_strtod_r+0x96c>)
 80858be:	f04f 0800 	mov.w	r8, #0
 80858c2:	4013      	ands	r3, r2
 80858c4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80858c8:	e150      	b.n	8085b6c <_strtod_r+0xb44>
 80858ca:	b963      	cbnz	r3, 80858e6 <_strtod_r+0x8be>
 80858cc:	f1b8 0f00 	cmp.w	r8, #0
 80858d0:	d109      	bne.n	80858e6 <_strtod_r+0x8be>
 80858d2:	e76a      	b.n	80857aa <_strtod_r+0x782>
 80858d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80858d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80858dc:	f04f 38ff 	mov.w	r8, #4294967295
 80858e0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80858e4:	e142      	b.n	8085b6c <_strtod_r+0xb44>
 80858e6:	b115      	cbz	r5, 80858ee <_strtod_r+0x8c6>
 80858e8:	ea15 0f09 	tst.w	r5, r9
 80858ec:	e002      	b.n	80858f4 <_strtod_r+0x8cc>
 80858ee:	9b07      	ldr	r3, [sp, #28]
 80858f0:	ea13 0f08 	tst.w	r3, r8
 80858f4:	f000 813a 	beq.w	8085b6c <_strtod_r+0xb44>
 80858f8:	9b06      	ldr	r3, [sp, #24]
 80858fa:	9a03      	ldr	r2, [sp, #12]
 80858fc:	4640      	mov	r0, r8
 80858fe:	4649      	mov	r1, r9
 8085900:	b153      	cbz	r3, 8085918 <_strtod_r+0x8f0>
 8085902:	f7ff fb6f 	bl	8084fe4 <sulp>
 8085906:	4602      	mov	r2, r0
 8085908:	460b      	mov	r3, r1
 808590a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808590e:	f7fd ff4f 	bl	80837b0 <__adddf3>
 8085912:	4680      	mov	r8, r0
 8085914:	4689      	mov	r9, r1
 8085916:	e129      	b.n	8085b6c <_strtod_r+0xb44>
 8085918:	f7ff fb64 	bl	8084fe4 <sulp>
 808591c:	4602      	mov	r2, r0
 808591e:	460b      	mov	r3, r1
 8085920:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8085924:	f7fd ff42 	bl	80837ac <__aeabi_dsub>
 8085928:	2200      	movs	r2, #0
 808592a:	2300      	movs	r3, #0
 808592c:	4680      	mov	r8, r0
 808592e:	4689      	mov	r9, r1
 8085930:	f7fe fb58 	bl	8083fe4 <__aeabi_dcmpeq>
 8085934:	2800      	cmp	r0, #0
 8085936:	f47f af48 	bne.w	80857ca <_strtod_r+0x7a2>
 808593a:	e117      	b.n	8085b6c <_strtod_r+0xb44>
 808593c:	9902      	ldr	r1, [sp, #8]
 808593e:	4658      	mov	r0, fp
 8085940:	f001 fc6d 	bl	808721e <__ratio>
 8085944:	2200      	movs	r2, #0
 8085946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808594a:	4606      	mov	r6, r0
 808594c:	460f      	mov	r7, r1
 808594e:	f7fe fb5d 	bl	808400c <__aeabi_dcmple>
 8085952:	2800      	cmp	r0, #0
 8085954:	d03f      	beq.n	80859d6 <_strtod_r+0x9ae>
 8085956:	9b06      	ldr	r3, [sp, #24]
 8085958:	b113      	cbz	r3, 8085960 <_strtod_r+0x938>
 808595a:	2600      	movs	r6, #0
 808595c:	4f0f      	ldr	r7, [pc, #60]	; (808599c <_strtod_r+0x974>)
 808595e:	e010      	b.n	8085982 <_strtod_r+0x95a>
 8085960:	f1b8 0f00 	cmp.w	r8, #0
 8085964:	d103      	bne.n	808596e <_strtod_r+0x946>
 8085966:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808596a:	b93b      	cbnz	r3, 808597c <_strtod_r+0x954>
 808596c:	e01a      	b.n	80859a4 <_strtod_r+0x97c>
 808596e:	f1b8 0f01 	cmp.w	r8, #1
 8085972:	d103      	bne.n	808597c <_strtod_r+0x954>
 8085974:	f1b9 0f00 	cmp.w	r9, #0
 8085978:	f43f af27 	beq.w	80857ca <_strtod_r+0x7a2>
 808597c:	4f08      	ldr	r7, [pc, #32]	; (80859a0 <_strtod_r+0x978>)
 808597e:	2600      	movs	r6, #0
 8085980:	2400      	movs	r4, #0
 8085982:	4d06      	ldr	r5, [pc, #24]	; (808599c <_strtod_r+0x974>)
 8085984:	e03c      	b.n	8085a00 <_strtod_r+0x9d8>
 8085986:	bf00      	nop
 8085988:	fffffc02 	.word	0xfffffc02
 808598c:	fffffbe2 	.word	0xfffffbe2
 8085990:	000fffff 	.word	0x000fffff
 8085994:	7ff00000 	.word	0x7ff00000
 8085998:	7fefffff 	.word	0x7fefffff
 808599c:	3ff00000 	.word	0x3ff00000
 80859a0:	bff00000 	.word	0xbff00000
 80859a4:	2200      	movs	r2, #0
 80859a6:	4b9a      	ldr	r3, [pc, #616]	; (8085c10 <_strtod_r+0xbe8>)
 80859a8:	4630      	mov	r0, r6
 80859aa:	4639      	mov	r1, r7
 80859ac:	f7fe fb24 	bl	8083ff8 <__aeabi_dcmplt>
 80859b0:	b940      	cbnz	r0, 80859c4 <_strtod_r+0x99c>
 80859b2:	2200      	movs	r2, #0
 80859b4:	4b97      	ldr	r3, [pc, #604]	; (8085c14 <_strtod_r+0xbec>)
 80859b6:	4630      	mov	r0, r6
 80859b8:	4639      	mov	r1, r7
 80859ba:	f7fe f8ab 	bl	8083b14 <__aeabi_dmul>
 80859be:	4604      	mov	r4, r0
 80859c0:	460d      	mov	r5, r1
 80859c2:	e001      	b.n	80859c8 <_strtod_r+0x9a0>
 80859c4:	9c06      	ldr	r4, [sp, #24]
 80859c6:	4d93      	ldr	r5, [pc, #588]	; (8085c14 <_strtod_r+0xbec>)
 80859c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80859cc:	9414      	str	r4, [sp, #80]	; 0x50
 80859ce:	9315      	str	r3, [sp, #84]	; 0x54
 80859d0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80859d4:	e014      	b.n	8085a00 <_strtod_r+0x9d8>
 80859d6:	4b8f      	ldr	r3, [pc, #572]	; (8085c14 <_strtod_r+0xbec>)
 80859d8:	2200      	movs	r2, #0
 80859da:	4630      	mov	r0, r6
 80859dc:	4639      	mov	r1, r7
 80859de:	f7fe f899 	bl	8083b14 <__aeabi_dmul>
 80859e2:	9b06      	ldr	r3, [sp, #24]
 80859e4:	4604      	mov	r4, r0
 80859e6:	460d      	mov	r5, r1
 80859e8:	b923      	cbnz	r3, 80859f4 <_strtod_r+0x9cc>
 80859ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80859ee:	900e      	str	r0, [sp, #56]	; 0x38
 80859f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80859f2:	e003      	b.n	80859fc <_strtod_r+0x9d4>
 80859f4:	4602      	mov	r2, r0
 80859f6:	460b      	mov	r3, r1
 80859f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80859fc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8085a00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8085a04:	0d1b      	lsrs	r3, r3, #20
 8085a06:	051b      	lsls	r3, r3, #20
 8085a08:	9307      	str	r3, [sp, #28]
 8085a0a:	9a07      	ldr	r2, [sp, #28]
 8085a0c:	4b82      	ldr	r3, [pc, #520]	; (8085c18 <_strtod_r+0xbf0>)
 8085a0e:	429a      	cmp	r2, r3
 8085a10:	d12b      	bne.n	8085a6a <_strtod_r+0xa42>
 8085a12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8085a16:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8085a1a:	4640      	mov	r0, r8
 8085a1c:	4649      	mov	r1, r9
 8085a1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8085a22:	f001 fb3d 	bl	80870a0 <__ulp>
 8085a26:	4602      	mov	r2, r0
 8085a28:	460b      	mov	r3, r1
 8085a2a:	4630      	mov	r0, r6
 8085a2c:	4639      	mov	r1, r7
 8085a2e:	f7fe f871 	bl	8083b14 <__aeabi_dmul>
 8085a32:	4642      	mov	r2, r8
 8085a34:	464b      	mov	r3, r9
 8085a36:	f7fd febb 	bl	80837b0 <__adddf3>
 8085a3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8085a3e:	0d1b      	lsrs	r3, r3, #20
 8085a40:	4a76      	ldr	r2, [pc, #472]	; (8085c1c <_strtod_r+0xbf4>)
 8085a42:	051b      	lsls	r3, r3, #20
 8085a44:	4293      	cmp	r3, r2
 8085a46:	4680      	mov	r8, r0
 8085a48:	d90c      	bls.n	8085a64 <_strtod_r+0xa3c>
 8085a4a:	4b75      	ldr	r3, [pc, #468]	; (8085c20 <_strtod_r+0xbf8>)
 8085a4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8085a4e:	429a      	cmp	r2, r3
 8085a50:	d103      	bne.n	8085a5a <_strtod_r+0xa32>
 8085a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085a54:	3301      	adds	r3, #1
 8085a56:	f43f ad2d 	beq.w	80854b4 <_strtod_r+0x48c>
 8085a5a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8085c20 <_strtod_r+0xbf8>
 8085a5e:	f04f 38ff 	mov.w	r8, #4294967295
 8085a62:	e072      	b.n	8085b4a <_strtod_r+0xb22>
 8085a64:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8085a68:	e039      	b.n	8085ade <_strtod_r+0xab6>
 8085a6a:	9b03      	ldr	r3, [sp, #12]
 8085a6c:	b33b      	cbz	r3, 8085abe <_strtod_r+0xa96>
 8085a6e:	9b07      	ldr	r3, [sp, #28]
 8085a70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8085a74:	d823      	bhi.n	8085abe <_strtod_r+0xa96>
 8085a76:	a35e      	add	r3, pc, #376	; (adr r3, 8085bf0 <_strtod_r+0xbc8>)
 8085a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085a7c:	4620      	mov	r0, r4
 8085a7e:	4629      	mov	r1, r5
 8085a80:	f7fe fac4 	bl	808400c <__aeabi_dcmple>
 8085a84:	b1b8      	cbz	r0, 8085ab6 <_strtod_r+0xa8e>
 8085a86:	4629      	mov	r1, r5
 8085a88:	4620      	mov	r0, r4
 8085a8a:	f7fe fb1b 	bl	80840c4 <__aeabi_d2uiz>
 8085a8e:	2800      	cmp	r0, #0
 8085a90:	bf08      	it	eq
 8085a92:	2001      	moveq	r0, #1
 8085a94:	f7fd ffc8 	bl	8083a28 <__aeabi_ui2d>
 8085a98:	9b06      	ldr	r3, [sp, #24]
 8085a9a:	4604      	mov	r4, r0
 8085a9c:	460d      	mov	r5, r1
 8085a9e:	b923      	cbnz	r3, 8085aaa <_strtod_r+0xa82>
 8085aa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8085aa4:	9010      	str	r0, [sp, #64]	; 0x40
 8085aa6:	9311      	str	r3, [sp, #68]	; 0x44
 8085aa8:	e003      	b.n	8085ab2 <_strtod_r+0xa8a>
 8085aaa:	4602      	mov	r2, r0
 8085aac:	460b      	mov	r3, r1
 8085aae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8085ab2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8085ab6:	9a07      	ldr	r2, [sp, #28]
 8085ab8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8085abc:	1a9f      	subs	r7, r3, r2
 8085abe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8085ac2:	f001 faed 	bl	80870a0 <__ulp>
 8085ac6:	4602      	mov	r2, r0
 8085ac8:	460b      	mov	r3, r1
 8085aca:	4630      	mov	r0, r6
 8085acc:	4639      	mov	r1, r7
 8085ace:	f7fe f821 	bl	8083b14 <__aeabi_dmul>
 8085ad2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8085ad6:	f7fd fe6b 	bl	80837b0 <__adddf3>
 8085ada:	4680      	mov	r8, r0
 8085adc:	4689      	mov	r9, r1
 8085ade:	9b03      	ldr	r3, [sp, #12]
 8085ae0:	bb9b      	cbnz	r3, 8085b4a <_strtod_r+0xb22>
 8085ae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8085ae6:	0d1b      	lsrs	r3, r3, #20
 8085ae8:	9a07      	ldr	r2, [sp, #28]
 8085aea:	051b      	lsls	r3, r3, #20
 8085aec:	429a      	cmp	r2, r3
 8085aee:	464e      	mov	r6, r9
 8085af0:	d12b      	bne.n	8085b4a <_strtod_r+0xb22>
 8085af2:	4629      	mov	r1, r5
 8085af4:	4620      	mov	r0, r4
 8085af6:	f7fe fabd 	bl	8084074 <__aeabi_d2iz>
 8085afa:	f7fd ffa5 	bl	8083a48 <__aeabi_i2d>
 8085afe:	460b      	mov	r3, r1
 8085b00:	4602      	mov	r2, r0
 8085b02:	4629      	mov	r1, r5
 8085b04:	4620      	mov	r0, r4
 8085b06:	f7fd fe51 	bl	80837ac <__aeabi_dsub>
 8085b0a:	9b06      	ldr	r3, [sp, #24]
 8085b0c:	4604      	mov	r4, r0
 8085b0e:	460d      	mov	r5, r1
 8085b10:	b92b      	cbnz	r3, 8085b1e <_strtod_r+0xaf6>
 8085b12:	f1b8 0f00 	cmp.w	r8, #0
 8085b16:	d102      	bne.n	8085b1e <_strtod_r+0xaf6>
 8085b18:	f3c9 0613 	ubfx	r6, r9, #0, #20
 8085b1c:	b17e      	cbz	r6, 8085b3e <_strtod_r+0xb16>
 8085b1e:	a336      	add	r3, pc, #216	; (adr r3, 8085bf8 <_strtod_r+0xbd0>)
 8085b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085b24:	4620      	mov	r0, r4
 8085b26:	4629      	mov	r1, r5
 8085b28:	f7fe fa66 	bl	8083ff8 <__aeabi_dcmplt>
 8085b2c:	bb88      	cbnz	r0, 8085b92 <_strtod_r+0xb6a>
 8085b2e:	a334      	add	r3, pc, #208	; (adr r3, 8085c00 <_strtod_r+0xbd8>)
 8085b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085b34:	4620      	mov	r0, r4
 8085b36:	4629      	mov	r1, r5
 8085b38:	f7fe fa7c 	bl	8084034 <__aeabi_dcmpgt>
 8085b3c:	e004      	b.n	8085b48 <_strtod_r+0xb20>
 8085b3e:	a332      	add	r3, pc, #200	; (adr r3, 8085c08 <_strtod_r+0xbe0>)
 8085b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085b44:	f7fe fa58 	bl	8083ff8 <__aeabi_dcmplt>
 8085b48:	bb18      	cbnz	r0, 8085b92 <_strtod_r+0xb6a>
 8085b4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085b4c:	4650      	mov	r0, sl
 8085b4e:	f001 f816 	bl	8086b7e <_Bfree>
 8085b52:	9904      	ldr	r1, [sp, #16]
 8085b54:	4650      	mov	r0, sl
 8085b56:	f001 f812 	bl	8086b7e <_Bfree>
 8085b5a:	9902      	ldr	r1, [sp, #8]
 8085b5c:	4650      	mov	r0, sl
 8085b5e:	f001 f80e 	bl	8086b7e <_Bfree>
 8085b62:	4659      	mov	r1, fp
 8085b64:	4650      	mov	r0, sl
 8085b66:	f001 f80a 	bl	8086b7e <_Bfree>
 8085b6a:	e574      	b.n	8085656 <_strtod_r+0x62e>
 8085b6c:	9b03      	ldr	r3, [sp, #12]
 8085b6e:	b183      	cbz	r3, 8085b92 <_strtod_r+0xb6a>
 8085b70:	4b2c      	ldr	r3, [pc, #176]	; (8085c24 <_strtod_r+0xbfc>)
 8085b72:	4640      	mov	r0, r8
 8085b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8085b76:	2300      	movs	r3, #0
 8085b78:	930a      	str	r3, [sp, #40]	; 0x28
 8085b7a:	4649      	mov	r1, r9
 8085b7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8085b80:	f7fd ffc8 	bl	8083b14 <__aeabi_dmul>
 8085b84:	4680      	mov	r8, r0
 8085b86:	4689      	mov	r9, r1
 8085b88:	b919      	cbnz	r1, 8085b92 <_strtod_r+0xb6a>
 8085b8a:	b910      	cbnz	r0, 8085b92 <_strtod_r+0xb6a>
 8085b8c:	2322      	movs	r3, #34	; 0x22
 8085b8e:	f8ca 3000 	str.w	r3, [sl]
 8085b92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8085b94:	4650      	mov	r0, sl
 8085b96:	f000 fff2 	bl	8086b7e <_Bfree>
 8085b9a:	9904      	ldr	r1, [sp, #16]
 8085b9c:	4650      	mov	r0, sl
 8085b9e:	f000 ffee 	bl	8086b7e <_Bfree>
 8085ba2:	9902      	ldr	r1, [sp, #8]
 8085ba4:	4650      	mov	r0, sl
 8085ba6:	f000 ffea 	bl	8086b7e <_Bfree>
 8085baa:	9905      	ldr	r1, [sp, #20]
 8085bac:	4650      	mov	r0, sl
 8085bae:	f000 ffe6 	bl	8086b7e <_Bfree>
 8085bb2:	4659      	mov	r1, fp
 8085bb4:	4650      	mov	r0, sl
 8085bb6:	f000 ffe2 	bl	8086b7e <_Bfree>
 8085bba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8085bbc:	b113      	cbz	r3, 8085bc4 <_strtod_r+0xb9c>
 8085bbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8085bc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8085bc2:	6013      	str	r3, [r2, #0]
 8085bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8085bc6:	b11b      	cbz	r3, 8085bd0 <_strtod_r+0xba8>
 8085bc8:	4642      	mov	r2, r8
 8085bca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8085bce:	e007      	b.n	8085be0 <_strtod_r+0xbb8>
 8085bd0:	4642      	mov	r2, r8
 8085bd2:	464b      	mov	r3, r9
 8085bd4:	e004      	b.n	8085be0 <_strtod_r+0xbb8>
 8085bd6:	2500      	movs	r5, #0
 8085bd8:	462a      	mov	r2, r5
 8085bda:	2101      	movs	r1, #1
 8085bdc:	f7ff bb47 	b.w	808526e <_strtod_r+0x246>
 8085be0:	4610      	mov	r0, r2
 8085be2:	4619      	mov	r1, r3
 8085be4:	b01d      	add	sp, #116	; 0x74
 8085be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085bea:	bf00      	nop
 8085bec:	f3af 8000 	nop.w
 8085bf0:	ffc00000 	.word	0xffc00000
 8085bf4:	41dfffff 	.word	0x41dfffff
 8085bf8:	94a03595 	.word	0x94a03595
 8085bfc:	3fdfffff 	.word	0x3fdfffff
 8085c00:	35afe535 	.word	0x35afe535
 8085c04:	3fe00000 	.word	0x3fe00000
 8085c08:	94a03595 	.word	0x94a03595
 8085c0c:	3fcfffff 	.word	0x3fcfffff
 8085c10:	3ff00000 	.word	0x3ff00000
 8085c14:	3fe00000 	.word	0x3fe00000
 8085c18:	7fe00000 	.word	0x7fe00000
 8085c1c:	7c9fffff 	.word	0x7c9fffff
 8085c20:	7fefffff 	.word	0x7fefffff
 8085c24:	39500000 	.word	0x39500000

08085c28 <strtof>:
 8085c28:	b538      	push	{r3, r4, r5, lr}
 8085c2a:	4b0b      	ldr	r3, [pc, #44]	; (8085c58 <strtof+0x30>)
 8085c2c:	460a      	mov	r2, r1
 8085c2e:	4601      	mov	r1, r0
 8085c30:	6818      	ldr	r0, [r3, #0]
 8085c32:	f7ff f9f9 	bl	8085028 <_strtod_r>
 8085c36:	4602      	mov	r2, r0
 8085c38:	460b      	mov	r3, r1
 8085c3a:	4604      	mov	r4, r0
 8085c3c:	460d      	mov	r5, r1
 8085c3e:	f7fe fa03 	bl	8084048 <__aeabi_dcmpun>
 8085c42:	b120      	cbz	r0, 8085c4e <strtof+0x26>
 8085c44:	2000      	movs	r0, #0
 8085c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8085c4a:	f001 bb5b 	b.w	8087304 <nanf>
 8085c4e:	4620      	mov	r0, r4
 8085c50:	4629      	mov	r1, r5
 8085c52:	f7fe fa57 	bl	8084104 <__aeabi_d2f>
 8085c56:	bd38      	pop	{r3, r4, r5, pc}
 8085c58:	20000078 	.word	0x20000078

08085c5c <_strtol_r>:
 8085c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085c60:	460f      	mov	r7, r1
 8085c62:	4680      	mov	r8, r0
 8085c64:	483f      	ldr	r0, [pc, #252]	; (8085d64 <_strtol_r+0x108>)
 8085c66:	f8d0 9000 	ldr.w	r9, [r0]
 8085c6a:	463d      	mov	r5, r7
 8085c6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085c70:	eb09 0004 	add.w	r0, r9, r4
 8085c74:	7840      	ldrb	r0, [r0, #1]
 8085c76:	f000 0008 	and.w	r0, r0, #8
 8085c7a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8085c7e:	b108      	cbz	r0, 8085c84 <_strtol_r+0x28>
 8085c80:	462f      	mov	r7, r5
 8085c82:	e7f2      	b.n	8085c6a <_strtol_r+0xe>
 8085c84:	2c2d      	cmp	r4, #45	; 0x2d
 8085c86:	d103      	bne.n	8085c90 <_strtol_r+0x34>
 8085c88:	1cbd      	adds	r5, r7, #2
 8085c8a:	787c      	ldrb	r4, [r7, #1]
 8085c8c:	2601      	movs	r6, #1
 8085c8e:	e003      	b.n	8085c98 <_strtol_r+0x3c>
 8085c90:	2c2b      	cmp	r4, #43	; 0x2b
 8085c92:	bf04      	itt	eq
 8085c94:	787c      	ldrbeq	r4, [r7, #1]
 8085c96:	1cbd      	addeq	r5, r7, #2
 8085c98:	b113      	cbz	r3, 8085ca0 <_strtol_r+0x44>
 8085c9a:	2b10      	cmp	r3, #16
 8085c9c:	d10a      	bne.n	8085cb4 <_strtol_r+0x58>
 8085c9e:	e05b      	b.n	8085d58 <_strtol_r+0xfc>
 8085ca0:	2c30      	cmp	r4, #48	; 0x30
 8085ca2:	d157      	bne.n	8085d54 <_strtol_r+0xf8>
 8085ca4:	7828      	ldrb	r0, [r5, #0]
 8085ca6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085caa:	2858      	cmp	r0, #88	; 0x58
 8085cac:	d14d      	bne.n	8085d4a <_strtol_r+0xee>
 8085cae:	786c      	ldrb	r4, [r5, #1]
 8085cb0:	2310      	movs	r3, #16
 8085cb2:	3502      	adds	r5, #2
 8085cb4:	2e00      	cmp	r6, #0
 8085cb6:	bf14      	ite	ne
 8085cb8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8085cbc:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8085cc0:	fbbc faf3 	udiv	sl, ip, r3
 8085cc4:	2700      	movs	r7, #0
 8085cc6:	4638      	mov	r0, r7
 8085cc8:	fb03 cc1a 	mls	ip, r3, sl, ip
 8085ccc:	eb09 0e04 	add.w	lr, r9, r4
 8085cd0:	f89e e001 	ldrb.w	lr, [lr, #1]
 8085cd4:	f01e 0f04 	tst.w	lr, #4
 8085cd8:	d001      	beq.n	8085cde <_strtol_r+0x82>
 8085cda:	3c30      	subs	r4, #48	; 0x30
 8085cdc:	e00b      	b.n	8085cf6 <_strtol_r+0x9a>
 8085cde:	f01e 0e03 	ands.w	lr, lr, #3
 8085ce2:	d01b      	beq.n	8085d1c <_strtol_r+0xc0>
 8085ce4:	f1be 0f01 	cmp.w	lr, #1
 8085ce8:	bf0c      	ite	eq
 8085cea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8085cee:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8085cf2:	ebce 0404 	rsb	r4, lr, r4
 8085cf6:	42a3      	cmp	r3, r4
 8085cf8:	dd10      	ble.n	8085d1c <_strtol_r+0xc0>
 8085cfa:	f1b7 3fff 	cmp.w	r7, #4294967295
 8085cfe:	d00a      	beq.n	8085d16 <_strtol_r+0xba>
 8085d00:	4550      	cmp	r0, sl
 8085d02:	d806      	bhi.n	8085d12 <_strtol_r+0xb6>
 8085d04:	d101      	bne.n	8085d0a <_strtol_r+0xae>
 8085d06:	4564      	cmp	r4, ip
 8085d08:	dc03      	bgt.n	8085d12 <_strtol_r+0xb6>
 8085d0a:	fb03 4000 	mla	r0, r3, r0, r4
 8085d0e:	2701      	movs	r7, #1
 8085d10:	e001      	b.n	8085d16 <_strtol_r+0xba>
 8085d12:	f04f 37ff 	mov.w	r7, #4294967295
 8085d16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085d1a:	e7d7      	b.n	8085ccc <_strtol_r+0x70>
 8085d1c:	1c7b      	adds	r3, r7, #1
 8085d1e:	d10c      	bne.n	8085d3a <_strtol_r+0xde>
 8085d20:	2e00      	cmp	r6, #0
 8085d22:	f04f 0322 	mov.w	r3, #34	; 0x22
 8085d26:	bf14      	ite	ne
 8085d28:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8085d2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085d30:	f8c8 3000 	str.w	r3, [r8]
 8085d34:	b92a      	cbnz	r2, 8085d42 <_strtol_r+0xe6>
 8085d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085d3a:	b106      	cbz	r6, 8085d3e <_strtol_r+0xe2>
 8085d3c:	4240      	negs	r0, r0
 8085d3e:	b172      	cbz	r2, 8085d5e <_strtol_r+0x102>
 8085d40:	b107      	cbz	r7, 8085d44 <_strtol_r+0xe8>
 8085d42:	1e69      	subs	r1, r5, #1
 8085d44:	6011      	str	r1, [r2, #0]
 8085d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085d4a:	2430      	movs	r4, #48	; 0x30
 8085d4c:	2b00      	cmp	r3, #0
 8085d4e:	d1b1      	bne.n	8085cb4 <_strtol_r+0x58>
 8085d50:	2308      	movs	r3, #8
 8085d52:	e7af      	b.n	8085cb4 <_strtol_r+0x58>
 8085d54:	230a      	movs	r3, #10
 8085d56:	e7ad      	b.n	8085cb4 <_strtol_r+0x58>
 8085d58:	2c30      	cmp	r4, #48	; 0x30
 8085d5a:	d0a3      	beq.n	8085ca4 <_strtol_r+0x48>
 8085d5c:	e7aa      	b.n	8085cb4 <_strtol_r+0x58>
 8085d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085d62:	bf00      	nop
 8085d64:	20000014 	.word	0x20000014

08085d68 <strtol>:
 8085d68:	4613      	mov	r3, r2
 8085d6a:	460a      	mov	r2, r1
 8085d6c:	4601      	mov	r1, r0
 8085d6e:	4802      	ldr	r0, [pc, #8]	; (8085d78 <strtol+0x10>)
 8085d70:	6800      	ldr	r0, [r0, #0]
 8085d72:	f7ff bf73 	b.w	8085c5c <_strtol_r>
 8085d76:	bf00      	nop
 8085d78:	20000078 	.word	0x20000078

08085d7c <_strtoul_r>:
 8085d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085d80:	460e      	mov	r6, r1
 8085d82:	4680      	mov	r8, r0
 8085d84:	483b      	ldr	r0, [pc, #236]	; (8085e74 <_strtoul_r+0xf8>)
 8085d86:	f8d0 9000 	ldr.w	r9, [r0]
 8085d8a:	4635      	mov	r5, r6
 8085d8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085d90:	eb09 0004 	add.w	r0, r9, r4
 8085d94:	7840      	ldrb	r0, [r0, #1]
 8085d96:	f000 0008 	and.w	r0, r0, #8
 8085d9a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085d9e:	b108      	cbz	r0, 8085da4 <_strtoul_r+0x28>
 8085da0:	462e      	mov	r6, r5
 8085da2:	e7f2      	b.n	8085d8a <_strtoul_r+0xe>
 8085da4:	2c2d      	cmp	r4, #45	; 0x2d
 8085da6:	d103      	bne.n	8085db0 <_strtoul_r+0x34>
 8085da8:	1cb5      	adds	r5, r6, #2
 8085daa:	7874      	ldrb	r4, [r6, #1]
 8085dac:	2701      	movs	r7, #1
 8085dae:	e003      	b.n	8085db8 <_strtoul_r+0x3c>
 8085db0:	2c2b      	cmp	r4, #43	; 0x2b
 8085db2:	bf04      	itt	eq
 8085db4:	7874      	ldrbeq	r4, [r6, #1]
 8085db6:	1cb5      	addeq	r5, r6, #2
 8085db8:	b113      	cbz	r3, 8085dc0 <_strtoul_r+0x44>
 8085dba:	2b10      	cmp	r3, #16
 8085dbc:	d10a      	bne.n	8085dd4 <_strtoul_r+0x58>
 8085dbe:	e053      	b.n	8085e68 <_strtoul_r+0xec>
 8085dc0:	2c30      	cmp	r4, #48	; 0x30
 8085dc2:	d14f      	bne.n	8085e64 <_strtoul_r+0xe8>
 8085dc4:	7828      	ldrb	r0, [r5, #0]
 8085dc6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085dca:	2858      	cmp	r0, #88	; 0x58
 8085dcc:	d145      	bne.n	8085e5a <_strtoul_r+0xde>
 8085dce:	786c      	ldrb	r4, [r5, #1]
 8085dd0:	2310      	movs	r3, #16
 8085dd2:	3502      	adds	r5, #2
 8085dd4:	f04f 3cff 	mov.w	ip, #4294967295
 8085dd8:	fbbc fcf3 	udiv	ip, ip, r3
 8085ddc:	fb03 fa0c 	mul.w	sl, r3, ip
 8085de0:	2600      	movs	r6, #0
 8085de2:	ea6f 0a0a 	mvn.w	sl, sl
 8085de6:	4630      	mov	r0, r6
 8085de8:	eb09 0e04 	add.w	lr, r9, r4
 8085dec:	f89e e001 	ldrb.w	lr, [lr, #1]
 8085df0:	f01e 0f04 	tst.w	lr, #4
 8085df4:	d001      	beq.n	8085dfa <_strtoul_r+0x7e>
 8085df6:	3c30      	subs	r4, #48	; 0x30
 8085df8:	e00b      	b.n	8085e12 <_strtoul_r+0x96>
 8085dfa:	f01e 0e03 	ands.w	lr, lr, #3
 8085dfe:	d01a      	beq.n	8085e36 <_strtoul_r+0xba>
 8085e00:	f1be 0f01 	cmp.w	lr, #1
 8085e04:	bf0c      	ite	eq
 8085e06:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8085e0a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8085e0e:	ebce 0404 	rsb	r4, lr, r4
 8085e12:	42a3      	cmp	r3, r4
 8085e14:	dd0f      	ble.n	8085e36 <_strtoul_r+0xba>
 8085e16:	2e00      	cmp	r6, #0
 8085e18:	db08      	blt.n	8085e2c <_strtoul_r+0xb0>
 8085e1a:	4560      	cmp	r0, ip
 8085e1c:	d806      	bhi.n	8085e2c <_strtoul_r+0xb0>
 8085e1e:	d101      	bne.n	8085e24 <_strtoul_r+0xa8>
 8085e20:	4554      	cmp	r4, sl
 8085e22:	dc03      	bgt.n	8085e2c <_strtoul_r+0xb0>
 8085e24:	fb03 4000 	mla	r0, r3, r0, r4
 8085e28:	2601      	movs	r6, #1
 8085e2a:	e001      	b.n	8085e30 <_strtoul_r+0xb4>
 8085e2c:	f04f 36ff 	mov.w	r6, #4294967295
 8085e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085e34:	e7d8      	b.n	8085de8 <_strtoul_r+0x6c>
 8085e36:	2e00      	cmp	r6, #0
 8085e38:	da07      	bge.n	8085e4a <_strtoul_r+0xce>
 8085e3a:	2322      	movs	r3, #34	; 0x22
 8085e3c:	f8c8 3000 	str.w	r3, [r8]
 8085e40:	f04f 30ff 	mov.w	r0, #4294967295
 8085e44:	b92a      	cbnz	r2, 8085e52 <_strtoul_r+0xd6>
 8085e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085e4a:	b107      	cbz	r7, 8085e4e <_strtoul_r+0xd2>
 8085e4c:	4240      	negs	r0, r0
 8085e4e:	b172      	cbz	r2, 8085e6e <_strtoul_r+0xf2>
 8085e50:	b106      	cbz	r6, 8085e54 <_strtoul_r+0xd8>
 8085e52:	1e69      	subs	r1, r5, #1
 8085e54:	6011      	str	r1, [r2, #0]
 8085e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085e5a:	2430      	movs	r4, #48	; 0x30
 8085e5c:	2b00      	cmp	r3, #0
 8085e5e:	d1b9      	bne.n	8085dd4 <_strtoul_r+0x58>
 8085e60:	2308      	movs	r3, #8
 8085e62:	e7b7      	b.n	8085dd4 <_strtoul_r+0x58>
 8085e64:	230a      	movs	r3, #10
 8085e66:	e7b5      	b.n	8085dd4 <_strtoul_r+0x58>
 8085e68:	2c30      	cmp	r4, #48	; 0x30
 8085e6a:	d0ab      	beq.n	8085dc4 <_strtoul_r+0x48>
 8085e6c:	e7b2      	b.n	8085dd4 <_strtoul_r+0x58>
 8085e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085e72:	bf00      	nop
 8085e74:	20000014 	.word	0x20000014

08085e78 <strtoul>:
 8085e78:	4613      	mov	r3, r2
 8085e7a:	460a      	mov	r2, r1
 8085e7c:	4601      	mov	r1, r0
 8085e7e:	4802      	ldr	r0, [pc, #8]	; (8085e88 <strtoul+0x10>)
 8085e80:	6800      	ldr	r0, [r0, #0]
 8085e82:	f7ff bf7b 	b.w	8085d7c <_strtoul_r>
 8085e86:	bf00      	nop
 8085e88:	20000078 	.word	0x20000078

08085e8c <__get_current_time_locale>:
 8085e8c:	4b04      	ldr	r3, [pc, #16]	; (8085ea0 <__get_current_time_locale+0x14>)
 8085e8e:	4a05      	ldr	r2, [pc, #20]	; (8085ea4 <__get_current_time_locale+0x18>)
 8085e90:	6818      	ldr	r0, [r3, #0]
 8085e92:	4b05      	ldr	r3, [pc, #20]	; (8085ea8 <__get_current_time_locale+0x1c>)
 8085e94:	2800      	cmp	r0, #0
 8085e96:	bf14      	ite	ne
 8085e98:	4610      	movne	r0, r2
 8085e9a:	4618      	moveq	r0, r3
 8085e9c:	4770      	bx	lr
 8085e9e:	bf00      	nop
 8085ea0:	200005b8 	.word	0x200005b8
 8085ea4:	200005bc 	.word	0x200005bc
 8085ea8:	08087fa8 	.word	0x08087fa8

08085eac <__tzcalc_limits>:
 8085eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085eb0:	4604      	mov	r4, r0
 8085eb2:	f000 fd91 	bl	80869d8 <__gettzinfo>
 8085eb6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8085eba:	429c      	cmp	r4, r3
 8085ebc:	f340 8096 	ble.w	8085fec <__tzcalc_limits+0x140>
 8085ec0:	f240 156d 	movw	r5, #365	; 0x16d
 8085ec4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8085ec8:	18e3      	adds	r3, r4, r3
 8085eca:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8085ece:	109b      	asrs	r3, r3, #2
 8085ed0:	fb05 3502 	mla	r5, r5, r2, r3
 8085ed4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8085ed8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8085edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8085ee0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8085ee4:	442b      	add	r3, r5
 8085ee6:	18a5      	adds	r5, r4, r2
 8085ee8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085eec:	fb94 f7f2 	sdiv	r7, r4, r2
 8085ef0:	fb95 f5f2 	sdiv	r5, r5, r2
 8085ef4:	fb02 4717 	mls	r7, r2, r7, r4
 8085ef8:	441d      	add	r5, r3
 8085efa:	2364      	movs	r3, #100	; 0x64
 8085efc:	fb94 f6f3 	sdiv	r6, r4, r3
 8085f00:	fab7 fe87 	clz	lr, r7
 8085f04:	4601      	mov	r1, r0
 8085f06:	fb03 4616 	mls	r6, r3, r6, r4
 8085f0a:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8085f0e:	9301      	str	r3, [sp, #4]
 8085f10:	f004 0303 	and.w	r3, r4, #3
 8085f14:	6044      	str	r4, [r0, #4]
 8085f16:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8085f1a:	9300      	str	r3, [sp, #0]
 8085f1c:	f04f 0c07 	mov.w	ip, #7
 8085f20:	7a0b      	ldrb	r3, [r1, #8]
 8085f22:	2b4a      	cmp	r3, #74	; 0x4a
 8085f24:	d10e      	bne.n	8085f44 <__tzcalc_limits+0x98>
 8085f26:	694b      	ldr	r3, [r1, #20]
 8085f28:	9a00      	ldr	r2, [sp, #0]
 8085f2a:	18ec      	adds	r4, r5, r3
 8085f2c:	b902      	cbnz	r2, 8085f30 <__tzcalc_limits+0x84>
 8085f2e:	b906      	cbnz	r6, 8085f32 <__tzcalc_limits+0x86>
 8085f30:	b927      	cbnz	r7, 8085f3c <__tzcalc_limits+0x90>
 8085f32:	2b3b      	cmp	r3, #59	; 0x3b
 8085f34:	bfd4      	ite	le
 8085f36:	2300      	movle	r3, #0
 8085f38:	2301      	movgt	r3, #1
 8085f3a:	e000      	b.n	8085f3e <__tzcalc_limits+0x92>
 8085f3c:	2300      	movs	r3, #0
 8085f3e:	4423      	add	r3, r4
 8085f40:	3b01      	subs	r3, #1
 8085f42:	e03f      	b.n	8085fc4 <__tzcalc_limits+0x118>
 8085f44:	2b44      	cmp	r3, #68	; 0x44
 8085f46:	d102      	bne.n	8085f4e <__tzcalc_limits+0xa2>
 8085f48:	694b      	ldr	r3, [r1, #20]
 8085f4a:	442b      	add	r3, r5
 8085f4c:	e03a      	b.n	8085fc4 <__tzcalc_limits+0x118>
 8085f4e:	9b00      	ldr	r3, [sp, #0]
 8085f50:	b92b      	cbnz	r3, 8085f5e <__tzcalc_limits+0xb2>
 8085f52:	2e00      	cmp	r6, #0
 8085f54:	bf0c      	ite	eq
 8085f56:	46f0      	moveq	r8, lr
 8085f58:	f04f 0801 	movne.w	r8, #1
 8085f5c:	e000      	b.n	8085f60 <__tzcalc_limits+0xb4>
 8085f5e:	46f0      	mov	r8, lr
 8085f60:	46a9      	mov	r9, r5
 8085f62:	4b24      	ldr	r3, [pc, #144]	; (8085ff4 <__tzcalc_limits+0x148>)
 8085f64:	2230      	movs	r2, #48	; 0x30
 8085f66:	fb02 3808 	mla	r8, r2, r8, r3
 8085f6a:	68cc      	ldr	r4, [r1, #12]
 8085f6c:	f1a8 0a04 	sub.w	sl, r8, #4
 8085f70:	2301      	movs	r3, #1
 8085f72:	42a3      	cmp	r3, r4
 8085f74:	da04      	bge.n	8085f80 <__tzcalc_limits+0xd4>
 8085f76:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8085f7a:	3301      	adds	r3, #1
 8085f7c:	44d9      	add	r9, fp
 8085f7e:	e7f8      	b.n	8085f72 <__tzcalc_limits+0xc6>
 8085f80:	f109 0304 	add.w	r3, r9, #4
 8085f84:	fb93 fbfc 	sdiv	fp, r3, ip
 8085f88:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8085f8c:	ebca 0a03 	rsb	sl, sl, r3
 8085f90:	694b      	ldr	r3, [r1, #20]
 8085f92:	2c01      	cmp	r4, #1
 8085f94:	bfb8      	it	lt
 8085f96:	2401      	movlt	r4, #1
 8085f98:	ebb3 0a0a 	subs.w	sl, r3, sl
 8085f9c:	690b      	ldr	r3, [r1, #16]
 8085f9e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8085fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8085fa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8085faa:	bf48      	it	mi
 8085fac:	f10a 0a07 	addmi.w	sl, sl, #7
 8085fb0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085fb4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8085fb8:	4453      	add	r3, sl
 8085fba:	42a3      	cmp	r3, r4
 8085fbc:	db01      	blt.n	8085fc2 <__tzcalc_limits+0x116>
 8085fbe:	3b07      	subs	r3, #7
 8085fc0:	e7fb      	b.n	8085fba <__tzcalc_limits+0x10e>
 8085fc2:	444b      	add	r3, r9
 8085fc4:	698c      	ldr	r4, [r1, #24]
 8085fc6:	4a0c      	ldr	r2, [pc, #48]	; (8085ff8 <__tzcalc_limits+0x14c>)
 8085fc8:	fb02 4303 	mla	r3, r2, r3, r4
 8085fcc:	6a0c      	ldr	r4, [r1, #32]
 8085fce:	4423      	add	r3, r4
 8085fd0:	f841 3f1c 	str.w	r3, [r1, #28]!
 8085fd4:	9b01      	ldr	r3, [sp, #4]
 8085fd6:	4299      	cmp	r1, r3
 8085fd8:	d1a2      	bne.n	8085f20 <__tzcalc_limits+0x74>
 8085fda:	69c3      	ldr	r3, [r0, #28]
 8085fdc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8085fde:	4293      	cmp	r3, r2
 8085fe0:	bfac      	ite	ge
 8085fe2:	2300      	movge	r3, #0
 8085fe4:	2301      	movlt	r3, #1
 8085fe6:	6003      	str	r3, [r0, #0]
 8085fe8:	2001      	movs	r0, #1
 8085fea:	e000      	b.n	8085fee <__tzcalc_limits+0x142>
 8085fec:	2000      	movs	r0, #0
 8085fee:	b003      	add	sp, #12
 8085ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085ff4:	08087d60 	.word	0x08087d60
 8085ff8:	00015180 	.word	0x00015180

08085ffc <__tz_lock>:
 8085ffc:	4770      	bx	lr

08085ffe <__tz_unlock>:
 8085ffe:	4770      	bx	lr

08086000 <_tzset_unlocked>:
 8086000:	4b01      	ldr	r3, [pc, #4]	; (8086008 <_tzset_unlocked+0x8>)
 8086002:	6818      	ldr	r0, [r3, #0]
 8086004:	f000 b802 	b.w	808600c <_tzset_unlocked_r>
 8086008:	20000078 	.word	0x20000078

0808600c <_tzset_unlocked_r>:
 808600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086010:	b08d      	sub	sp, #52	; 0x34
 8086012:	4607      	mov	r7, r0
 8086014:	f000 fce0 	bl	80869d8 <__gettzinfo>
 8086018:	49b0      	ldr	r1, [pc, #704]	; (80862dc <_tzset_unlocked_r+0x2d0>)
 808601a:	4604      	mov	r4, r0
 808601c:	4638      	mov	r0, r7
 808601e:	f000 fcd3 	bl	80869c8 <_getenv_r>
 8086022:	4eaf      	ldr	r6, [pc, #700]	; (80862e0 <_tzset_unlocked_r+0x2d4>)
 8086024:	4605      	mov	r5, r0
 8086026:	b960      	cbnz	r0, 8086042 <_tzset_unlocked_r+0x36>
 8086028:	4bae      	ldr	r3, [pc, #696]	; (80862e4 <_tzset_unlocked_r+0x2d8>)
 808602a:	4aaf      	ldr	r2, [pc, #700]	; (80862e8 <_tzset_unlocked_r+0x2dc>)
 808602c:	6018      	str	r0, [r3, #0]
 808602e:	4baf      	ldr	r3, [pc, #700]	; (80862ec <_tzset_unlocked_r+0x2e0>)
 8086030:	6018      	str	r0, [r3, #0]
 8086032:	4baf      	ldr	r3, [pc, #700]	; (80862f0 <_tzset_unlocked_r+0x2e4>)
 8086034:	6830      	ldr	r0, [r6, #0]
 8086036:	601a      	str	r2, [r3, #0]
 8086038:	605a      	str	r2, [r3, #4]
 808603a:	f7fb ff49 	bl	8081ed0 <free>
 808603e:	6035      	str	r5, [r6, #0]
 8086040:	e148      	b.n	80862d4 <_tzset_unlocked_r+0x2c8>
 8086042:	6831      	ldr	r1, [r6, #0]
 8086044:	b979      	cbnz	r1, 8086066 <_tzset_unlocked_r+0x5a>
 8086046:	6830      	ldr	r0, [r6, #0]
 8086048:	f7fb ff42 	bl	8081ed0 <free>
 808604c:	4628      	mov	r0, r5
 808604e:	f7fe ff7f 	bl	8084f50 <strlen>
 8086052:	1c41      	adds	r1, r0, #1
 8086054:	4638      	mov	r0, r7
 8086056:	f7fb ff83 	bl	8081f60 <_malloc_r>
 808605a:	6030      	str	r0, [r6, #0]
 808605c:	b148      	cbz	r0, 8086072 <_tzset_unlocked_r+0x66>
 808605e:	4629      	mov	r1, r5
 8086060:	f7fe fa3e 	bl	80844e0 <strcpy>
 8086064:	e005      	b.n	8086072 <_tzset_unlocked_r+0x66>
 8086066:	f7fe fa31 	bl	80844cc <strcmp>
 808606a:	2800      	cmp	r0, #0
 808606c:	f000 8132 	beq.w	80862d4 <_tzset_unlocked_r+0x2c8>
 8086070:	e7e9      	b.n	8086046 <_tzset_unlocked_r+0x3a>
 8086072:	782b      	ldrb	r3, [r5, #0]
 8086074:	ae0a      	add	r6, sp, #40	; 0x28
 8086076:	2b3a      	cmp	r3, #58	; 0x3a
 8086078:	bf08      	it	eq
 808607a:	3501      	addeq	r5, #1
 808607c:	4633      	mov	r3, r6
 808607e:	4a9d      	ldr	r2, [pc, #628]	; (80862f4 <_tzset_unlocked_r+0x2e8>)
 8086080:	499d      	ldr	r1, [pc, #628]	; (80862f8 <_tzset_unlocked_r+0x2ec>)
 8086082:	4628      	mov	r0, r5
 8086084:	f7fb ff44 	bl	8081f10 <siscanf>
 8086088:	2800      	cmp	r0, #0
 808608a:	f340 8123 	ble.w	80862d4 <_tzset_unlocked_r+0x2c8>
 808608e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086090:	18ef      	adds	r7, r5, r3
 8086092:	5ceb      	ldrb	r3, [r5, r3]
 8086094:	2b2d      	cmp	r3, #45	; 0x2d
 8086096:	d103      	bne.n	80860a0 <_tzset_unlocked_r+0x94>
 8086098:	3701      	adds	r7, #1
 808609a:	f04f 35ff 	mov.w	r5, #4294967295
 808609e:	e003      	b.n	80860a8 <_tzset_unlocked_r+0x9c>
 80860a0:	2b2b      	cmp	r3, #43	; 0x2b
 80860a2:	bf08      	it	eq
 80860a4:	3701      	addeq	r7, #1
 80860a6:	2501      	movs	r5, #1
 80860a8:	f10d 0a20 	add.w	sl, sp, #32
 80860ac:	f10d 0b1e 	add.w	fp, sp, #30
 80860b0:	f04f 0800 	mov.w	r8, #0
 80860b4:	9603      	str	r6, [sp, #12]
 80860b6:	f8cd a008 	str.w	sl, [sp, #8]
 80860ba:	9601      	str	r6, [sp, #4]
 80860bc:	f8cd b000 	str.w	fp, [sp]
 80860c0:	4633      	mov	r3, r6
 80860c2:	aa07      	add	r2, sp, #28
 80860c4:	498d      	ldr	r1, [pc, #564]	; (80862fc <_tzset_unlocked_r+0x2f0>)
 80860c6:	4638      	mov	r0, r7
 80860c8:	f8ad 801e 	strh.w	r8, [sp, #30]
 80860cc:	f8ad 8020 	strh.w	r8, [sp, #32]
 80860d0:	f7fb ff1e 	bl	8081f10 <siscanf>
 80860d4:	4540      	cmp	r0, r8
 80860d6:	f340 80fd 	ble.w	80862d4 <_tzset_unlocked_r+0x2c8>
 80860da:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80860de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80860e2:	213c      	movs	r1, #60	; 0x3c
 80860e4:	fb01 3302 	mla	r3, r1, r2, r3
 80860e8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80860ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80860f0:	fb01 3302 	mla	r3, r1, r2, r3
 80860f4:	435d      	muls	r5, r3
 80860f6:	4b7f      	ldr	r3, [pc, #508]	; (80862f4 <_tzset_unlocked_r+0x2e8>)
 80860f8:	6225      	str	r5, [r4, #32]
 80860fa:	4d7d      	ldr	r5, [pc, #500]	; (80862f0 <_tzset_unlocked_r+0x2e4>)
 80860fc:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8086308 <_tzset_unlocked_r+0x2fc>
 8086100:	602b      	str	r3, [r5, #0]
 8086102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086104:	464a      	mov	r2, r9
 8086106:	441f      	add	r7, r3
 8086108:	497b      	ldr	r1, [pc, #492]	; (80862f8 <_tzset_unlocked_r+0x2ec>)
 808610a:	4633      	mov	r3, r6
 808610c:	4638      	mov	r0, r7
 808610e:	f7fb feff 	bl	8081f10 <siscanf>
 8086112:	4540      	cmp	r0, r8
 8086114:	dc08      	bgt.n	8086128 <_tzset_unlocked_r+0x11c>
 8086116:	682b      	ldr	r3, [r5, #0]
 8086118:	6a22      	ldr	r2, [r4, #32]
 808611a:	606b      	str	r3, [r5, #4]
 808611c:	4b71      	ldr	r3, [pc, #452]	; (80862e4 <_tzset_unlocked_r+0x2d8>)
 808611e:	601a      	str	r2, [r3, #0]
 8086120:	4b72      	ldr	r3, [pc, #456]	; (80862ec <_tzset_unlocked_r+0x2e0>)
 8086122:	f8c3 8000 	str.w	r8, [r3]
 8086126:	e0d5      	b.n	80862d4 <_tzset_unlocked_r+0x2c8>
 8086128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808612a:	f8c5 9004 	str.w	r9, [r5, #4]
 808612e:	18fd      	adds	r5, r7, r3
 8086130:	5cfb      	ldrb	r3, [r7, r3]
 8086132:	2b2d      	cmp	r3, #45	; 0x2d
 8086134:	d103      	bne.n	808613e <_tzset_unlocked_r+0x132>
 8086136:	3501      	adds	r5, #1
 8086138:	f04f 37ff 	mov.w	r7, #4294967295
 808613c:	e003      	b.n	8086146 <_tzset_unlocked_r+0x13a>
 808613e:	2b2b      	cmp	r3, #43	; 0x2b
 8086140:	bf08      	it	eq
 8086142:	3501      	addeq	r5, #1
 8086144:	2701      	movs	r7, #1
 8086146:	2300      	movs	r3, #0
 8086148:	f8ad 301c 	strh.w	r3, [sp, #28]
 808614c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8086150:	f8ad 3020 	strh.w	r3, [sp, #32]
 8086154:	930a      	str	r3, [sp, #40]	; 0x28
 8086156:	9603      	str	r6, [sp, #12]
 8086158:	f8cd a008 	str.w	sl, [sp, #8]
 808615c:	9601      	str	r6, [sp, #4]
 808615e:	f8cd b000 	str.w	fp, [sp]
 8086162:	4633      	mov	r3, r6
 8086164:	aa07      	add	r2, sp, #28
 8086166:	4965      	ldr	r1, [pc, #404]	; (80862fc <_tzset_unlocked_r+0x2f0>)
 8086168:	4628      	mov	r0, r5
 808616a:	f7fb fed1 	bl	8081f10 <siscanf>
 808616e:	2800      	cmp	r0, #0
 8086170:	dc04      	bgt.n	808617c <_tzset_unlocked_r+0x170>
 8086172:	6a23      	ldr	r3, [r4, #32]
 8086174:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8086178:	63e3      	str	r3, [r4, #60]	; 0x3c
 808617a:	e00e      	b.n	808619a <_tzset_unlocked_r+0x18e>
 808617c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8086180:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8086184:	213c      	movs	r1, #60	; 0x3c
 8086186:	fb01 3302 	mla	r3, r1, r2, r3
 808618a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808618e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8086192:	fb01 3302 	mla	r3, r1, r2, r3
 8086196:	435f      	muls	r7, r3
 8086198:	63e7      	str	r7, [r4, #60]	; 0x3c
 808619a:	4627      	mov	r7, r4
 808619c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808619e:	f04f 0900 	mov.w	r9, #0
 80861a2:	441d      	add	r5, r3
 80861a4:	782b      	ldrb	r3, [r5, #0]
 80861a6:	2b2c      	cmp	r3, #44	; 0x2c
 80861a8:	bf08      	it	eq
 80861aa:	3501      	addeq	r5, #1
 80861ac:	f895 8000 	ldrb.w	r8, [r5]
 80861b0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80861b4:	d126      	bne.n	8086204 <_tzset_unlocked_r+0x1f8>
 80861b6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80861ba:	9302      	str	r3, [sp, #8]
 80861bc:	ab09      	add	r3, sp, #36	; 0x24
 80861be:	9300      	str	r3, [sp, #0]
 80861c0:	9603      	str	r6, [sp, #12]
 80861c2:	9601      	str	r6, [sp, #4]
 80861c4:	4633      	mov	r3, r6
 80861c6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80861ca:	494d      	ldr	r1, [pc, #308]	; (8086300 <_tzset_unlocked_r+0x2f4>)
 80861cc:	4628      	mov	r0, r5
 80861ce:	f7fb fe9f 	bl	8081f10 <siscanf>
 80861d2:	2803      	cmp	r0, #3
 80861d4:	d17e      	bne.n	80862d4 <_tzset_unlocked_r+0x2c8>
 80861d6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80861da:	1e4b      	subs	r3, r1, #1
 80861dc:	2b0b      	cmp	r3, #11
 80861de:	d879      	bhi.n	80862d4 <_tzset_unlocked_r+0x2c8>
 80861e0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80861e4:	1e53      	subs	r3, r2, #1
 80861e6:	2b04      	cmp	r3, #4
 80861e8:	d874      	bhi.n	80862d4 <_tzset_unlocked_r+0x2c8>
 80861ea:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80861ee:	2b06      	cmp	r3, #6
 80861f0:	d870      	bhi.n	80862d4 <_tzset_unlocked_r+0x2c8>
 80861f2:	f887 8008 	strb.w	r8, [r7, #8]
 80861f6:	60f9      	str	r1, [r7, #12]
 80861f8:	613a      	str	r2, [r7, #16]
 80861fa:	617b      	str	r3, [r7, #20]
 80861fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80861fe:	eb05 0803 	add.w	r8, r5, r3
 8086202:	e02a      	b.n	808625a <_tzset_unlocked_r+0x24e>
 8086204:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8086208:	bf06      	itte	eq
 808620a:	4643      	moveq	r3, r8
 808620c:	3501      	addeq	r5, #1
 808620e:	2344      	movne	r3, #68	; 0x44
 8086210:	220a      	movs	r2, #10
 8086212:	a90b      	add	r1, sp, #44	; 0x2c
 8086214:	4628      	mov	r0, r5
 8086216:	9305      	str	r3, [sp, #20]
 8086218:	f7ff fe2e 	bl	8085e78 <strtoul>
 808621c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8086220:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8086224:	4545      	cmp	r5, r8
 8086226:	9b05      	ldr	r3, [sp, #20]
 8086228:	d114      	bne.n	8086254 <_tzset_unlocked_r+0x248>
 808622a:	234d      	movs	r3, #77	; 0x4d
 808622c:	f1b9 0f00 	cmp.w	r9, #0
 8086230:	d107      	bne.n	8086242 <_tzset_unlocked_r+0x236>
 8086232:	7223      	strb	r3, [r4, #8]
 8086234:	2303      	movs	r3, #3
 8086236:	60e3      	str	r3, [r4, #12]
 8086238:	2302      	movs	r3, #2
 808623a:	6123      	str	r3, [r4, #16]
 808623c:	f8c4 9014 	str.w	r9, [r4, #20]
 8086240:	e00b      	b.n	808625a <_tzset_unlocked_r+0x24e>
 8086242:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8086246:	230b      	movs	r3, #11
 8086248:	62a3      	str	r3, [r4, #40]	; 0x28
 808624a:	2301      	movs	r3, #1
 808624c:	62e3      	str	r3, [r4, #44]	; 0x2c
 808624e:	2300      	movs	r3, #0
 8086250:	6323      	str	r3, [r4, #48]	; 0x30
 8086252:	e002      	b.n	808625a <_tzset_unlocked_r+0x24e>
 8086254:	b280      	uxth	r0, r0
 8086256:	723b      	strb	r3, [r7, #8]
 8086258:	6178      	str	r0, [r7, #20]
 808625a:	2302      	movs	r3, #2
 808625c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8086260:	2300      	movs	r3, #0
 8086262:	f8ad 301e 	strh.w	r3, [sp, #30]
 8086266:	f8ad 3020 	strh.w	r3, [sp, #32]
 808626a:	930a      	str	r3, [sp, #40]	; 0x28
 808626c:	f898 3000 	ldrb.w	r3, [r8]
 8086270:	2b2f      	cmp	r3, #47	; 0x2f
 8086272:	d10b      	bne.n	808628c <_tzset_unlocked_r+0x280>
 8086274:	9603      	str	r6, [sp, #12]
 8086276:	f8cd a008 	str.w	sl, [sp, #8]
 808627a:	9601      	str	r6, [sp, #4]
 808627c:	f8cd b000 	str.w	fp, [sp]
 8086280:	4633      	mov	r3, r6
 8086282:	aa07      	add	r2, sp, #28
 8086284:	491f      	ldr	r1, [pc, #124]	; (8086304 <_tzset_unlocked_r+0x2f8>)
 8086286:	4640      	mov	r0, r8
 8086288:	f7fb fe42 	bl	8081f10 <siscanf>
 808628c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8086290:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8086294:	213c      	movs	r1, #60	; 0x3c
 8086296:	fb01 3302 	mla	r3, r1, r2, r3
 808629a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808629e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80862a2:	fb01 3302 	mla	r3, r1, r2, r3
 80862a6:	61bb      	str	r3, [r7, #24]
 80862a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80862aa:	f109 0901 	add.w	r9, r9, #1
 80862ae:	f1b9 0f02 	cmp.w	r9, #2
 80862b2:	4445      	add	r5, r8
 80862b4:	f107 071c 	add.w	r7, r7, #28
 80862b8:	f47f af74 	bne.w	80861a4 <_tzset_unlocked_r+0x198>
 80862bc:	6860      	ldr	r0, [r4, #4]
 80862be:	f7ff fdf5 	bl	8085eac <__tzcalc_limits>
 80862c2:	6a22      	ldr	r2, [r4, #32]
 80862c4:	4b07      	ldr	r3, [pc, #28]	; (80862e4 <_tzset_unlocked_r+0x2d8>)
 80862c6:	601a      	str	r2, [r3, #0]
 80862c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80862ca:	1a9b      	subs	r3, r3, r2
 80862cc:	4a07      	ldr	r2, [pc, #28]	; (80862ec <_tzset_unlocked_r+0x2e0>)
 80862ce:	bf18      	it	ne
 80862d0:	2301      	movne	r3, #1
 80862d2:	6013      	str	r3, [r2, #0]
 80862d4:	b00d      	add	sp, #52	; 0x34
 80862d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80862da:	bf00      	nop
 80862dc:	080880a4 	.word	0x080880a4
 80862e0:	200006d0 	.word	0x200006d0
 80862e4:	200006d8 	.word	0x200006d8
 80862e8:	080880a7 	.word	0x080880a7
 80862ec:	200006d4 	.word	0x200006d4
 80862f0:	200000b4 	.word	0x200000b4
 80862f4:	200006c3 	.word	0x200006c3
 80862f8:	080880ab 	.word	0x080880ab
 80862fc:	080880ce 	.word	0x080880ce
 8086300:	080880ba 	.word	0x080880ba
 8086304:	080880cd 	.word	0x080880cd
 8086308:	200006b8 	.word	0x200006b8

0808630c <abs>:
 808630c:	2800      	cmp	r0, #0
 808630e:	bfb8      	it	lt
 8086310:	4240      	neglt	r0, r0
 8086312:	4770      	bx	lr

08086314 <rshift>:
 8086314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086316:	6906      	ldr	r6, [r0, #16]
 8086318:	114b      	asrs	r3, r1, #5
 808631a:	42b3      	cmp	r3, r6
 808631c:	f100 0514 	add.w	r5, r0, #20
 8086320:	da27      	bge.n	8086372 <rshift+0x5e>
 8086322:	f011 011f 	ands.w	r1, r1, #31
 8086326:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808632a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808632e:	d101      	bne.n	8086334 <rshift+0x20>
 8086330:	4629      	mov	r1, r5
 8086332:	e016      	b.n	8086362 <rshift+0x4e>
 8086334:	1d14      	adds	r4, r2, #4
 8086336:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808633a:	462b      	mov	r3, r5
 808633c:	f1c1 0e20 	rsb	lr, r1, #32
 8086340:	40ca      	lsrs	r2, r1
 8086342:	42b4      	cmp	r4, r6
 8086344:	d209      	bcs.n	808635a <rshift+0x46>
 8086346:	6827      	ldr	r7, [r4, #0]
 8086348:	fa07 f70e 	lsl.w	r7, r7, lr
 808634c:	433a      	orrs	r2, r7
 808634e:	f843 2b04 	str.w	r2, [r3], #4
 8086352:	f854 2b04 	ldr.w	r2, [r4], #4
 8086356:	40ca      	lsrs	r2, r1
 8086358:	e7f3      	b.n	8086342 <rshift+0x2e>
 808635a:	601a      	str	r2, [r3, #0]
 808635c:	b152      	cbz	r2, 8086374 <rshift+0x60>
 808635e:	3304      	adds	r3, #4
 8086360:	e008      	b.n	8086374 <rshift+0x60>
 8086362:	42b2      	cmp	r2, r6
 8086364:	460b      	mov	r3, r1
 8086366:	d205      	bcs.n	8086374 <rshift+0x60>
 8086368:	f852 3b04 	ldr.w	r3, [r2], #4
 808636c:	f841 3b04 	str.w	r3, [r1], #4
 8086370:	e7f7      	b.n	8086362 <rshift+0x4e>
 8086372:	462b      	mov	r3, r5
 8086374:	1b5b      	subs	r3, r3, r5
 8086376:	109b      	asrs	r3, r3, #2
 8086378:	6103      	str	r3, [r0, #16]
 808637a:	b903      	cbnz	r3, 808637e <rshift+0x6a>
 808637c:	6143      	str	r3, [r0, #20]
 808637e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086380 <__hexdig_fun>:
 8086380:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8086384:	2b09      	cmp	r3, #9
 8086386:	d801      	bhi.n	808638c <__hexdig_fun+0xc>
 8086388:	3820      	subs	r0, #32
 808638a:	e00a      	b.n	80863a2 <__hexdig_fun+0x22>
 808638c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8086390:	2b05      	cmp	r3, #5
 8086392:	d801      	bhi.n	8086398 <__hexdig_fun+0x18>
 8086394:	3847      	subs	r0, #71	; 0x47
 8086396:	e004      	b.n	80863a2 <__hexdig_fun+0x22>
 8086398:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808639c:	2b05      	cmp	r3, #5
 808639e:	d802      	bhi.n	80863a6 <__hexdig_fun+0x26>
 80863a0:	3827      	subs	r0, #39	; 0x27
 80863a2:	b2c0      	uxtb	r0, r0
 80863a4:	4770      	bx	lr
 80863a6:	2000      	movs	r0, #0
 80863a8:	4770      	bx	lr

080863aa <__gethex>:
 80863aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80863ae:	b08b      	sub	sp, #44	; 0x2c
 80863b0:	468a      	mov	sl, r1
 80863b2:	4690      	mov	r8, r2
 80863b4:	9306      	str	r3, [sp, #24]
 80863b6:	9002      	str	r0, [sp, #8]
 80863b8:	f7fe f83a 	bl	8084430 <_localeconv_r>
 80863bc:	6803      	ldr	r3, [r0, #0]
 80863be:	f04f 0b00 	mov.w	fp, #0
 80863c2:	4618      	mov	r0, r3
 80863c4:	9303      	str	r3, [sp, #12]
 80863c6:	f7fe fdc3 	bl	8084f50 <strlen>
 80863ca:	9b03      	ldr	r3, [sp, #12]
 80863cc:	9001      	str	r0, [sp, #4]
 80863ce:	4403      	add	r3, r0
 80863d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80863d4:	9307      	str	r3, [sp, #28]
 80863d6:	f8da 3000 	ldr.w	r3, [sl]
 80863da:	3302      	adds	r3, #2
 80863dc:	461f      	mov	r7, r3
 80863de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80863e2:	2830      	cmp	r0, #48	; 0x30
 80863e4:	d102      	bne.n	80863ec <__gethex+0x42>
 80863e6:	f10b 0b01 	add.w	fp, fp, #1
 80863ea:	e7f7      	b.n	80863dc <__gethex+0x32>
 80863ec:	f7ff ffc8 	bl	8086380 <__hexdig_fun>
 80863f0:	4604      	mov	r4, r0
 80863f2:	b9e0      	cbnz	r0, 808642e <__gethex+0x84>
 80863f4:	9a01      	ldr	r2, [sp, #4]
 80863f6:	9903      	ldr	r1, [sp, #12]
 80863f8:	4638      	mov	r0, r7
 80863fa:	f7fe fdb1 	bl	8084f60 <strncmp>
 80863fe:	2800      	cmp	r0, #0
 8086400:	d134      	bne.n	808646c <__gethex+0xc2>
 8086402:	9b01      	ldr	r3, [sp, #4]
 8086404:	5cf8      	ldrb	r0, [r7, r3]
 8086406:	18fe      	adds	r6, r7, r3
 8086408:	f7ff ffba 	bl	8086380 <__hexdig_fun>
 808640c:	b380      	cbz	r0, 8086470 <__gethex+0xc6>
 808640e:	4633      	mov	r3, r6
 8086410:	7818      	ldrb	r0, [r3, #0]
 8086412:	461f      	mov	r7, r3
 8086414:	2830      	cmp	r0, #48	; 0x30
 8086416:	f103 0301 	add.w	r3, r3, #1
 808641a:	d0f9      	beq.n	8086410 <__gethex+0x66>
 808641c:	f7ff ffb0 	bl	8086380 <__hexdig_fun>
 8086420:	fab0 f580 	clz	r5, r0
 8086424:	4634      	mov	r4, r6
 8086426:	096d      	lsrs	r5, r5, #5
 8086428:	f04f 0b01 	mov.w	fp, #1
 808642c:	e001      	b.n	8086432 <__gethex+0x88>
 808642e:	2500      	movs	r5, #0
 8086430:	462c      	mov	r4, r5
 8086432:	463a      	mov	r2, r7
 8086434:	4616      	mov	r6, r2
 8086436:	7830      	ldrb	r0, [r6, #0]
 8086438:	3201      	adds	r2, #1
 808643a:	f7ff ffa1 	bl	8086380 <__hexdig_fun>
 808643e:	2800      	cmp	r0, #0
 8086440:	d1f8      	bne.n	8086434 <__gethex+0x8a>
 8086442:	9a01      	ldr	r2, [sp, #4]
 8086444:	9903      	ldr	r1, [sp, #12]
 8086446:	4630      	mov	r0, r6
 8086448:	f7fe fd8a 	bl	8084f60 <strncmp>
 808644c:	b950      	cbnz	r0, 8086464 <__gethex+0xba>
 808644e:	b954      	cbnz	r4, 8086466 <__gethex+0xbc>
 8086450:	9b01      	ldr	r3, [sp, #4]
 8086452:	18f4      	adds	r4, r6, r3
 8086454:	4622      	mov	r2, r4
 8086456:	4616      	mov	r6, r2
 8086458:	7830      	ldrb	r0, [r6, #0]
 808645a:	3201      	adds	r2, #1
 808645c:	f7ff ff90 	bl	8086380 <__hexdig_fun>
 8086460:	2800      	cmp	r0, #0
 8086462:	d1f8      	bne.n	8086456 <__gethex+0xac>
 8086464:	b134      	cbz	r4, 8086474 <__gethex+0xca>
 8086466:	1ba4      	subs	r4, r4, r6
 8086468:	00a4      	lsls	r4, r4, #2
 808646a:	e003      	b.n	8086474 <__gethex+0xca>
 808646c:	463e      	mov	r6, r7
 808646e:	e000      	b.n	8086472 <__gethex+0xc8>
 8086470:	4604      	mov	r4, r0
 8086472:	2501      	movs	r5, #1
 8086474:	7833      	ldrb	r3, [r6, #0]
 8086476:	2b50      	cmp	r3, #80	; 0x50
 8086478:	d001      	beq.n	808647e <__gethex+0xd4>
 808647a:	2b70      	cmp	r3, #112	; 0x70
 808647c:	d12a      	bne.n	80864d4 <__gethex+0x12a>
 808647e:	7873      	ldrb	r3, [r6, #1]
 8086480:	2b2b      	cmp	r3, #43	; 0x2b
 8086482:	d008      	beq.n	8086496 <__gethex+0xec>
 8086484:	2b2d      	cmp	r3, #45	; 0x2d
 8086486:	d003      	beq.n	8086490 <__gethex+0xe6>
 8086488:	1c71      	adds	r1, r6, #1
 808648a:	f04f 0900 	mov.w	r9, #0
 808648e:	e005      	b.n	808649c <__gethex+0xf2>
 8086490:	f04f 0901 	mov.w	r9, #1
 8086494:	e001      	b.n	808649a <__gethex+0xf0>
 8086496:	f04f 0900 	mov.w	r9, #0
 808649a:	1cb1      	adds	r1, r6, #2
 808649c:	7808      	ldrb	r0, [r1, #0]
 808649e:	f7ff ff6f 	bl	8086380 <__hexdig_fun>
 80864a2:	1e43      	subs	r3, r0, #1
 80864a4:	b2db      	uxtb	r3, r3
 80864a6:	2b18      	cmp	r3, #24
 80864a8:	d814      	bhi.n	80864d4 <__gethex+0x12a>
 80864aa:	f1a0 0210 	sub.w	r2, r0, #16
 80864ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80864b2:	f7ff ff65 	bl	8086380 <__hexdig_fun>
 80864b6:	1e43      	subs	r3, r0, #1
 80864b8:	b2db      	uxtb	r3, r3
 80864ba:	2b18      	cmp	r3, #24
 80864bc:	d804      	bhi.n	80864c8 <__gethex+0x11e>
 80864be:	230a      	movs	r3, #10
 80864c0:	fb03 0202 	mla	r2, r3, r2, r0
 80864c4:	3a10      	subs	r2, #16
 80864c6:	e7f2      	b.n	80864ae <__gethex+0x104>
 80864c8:	f1b9 0f00 	cmp.w	r9, #0
 80864cc:	d000      	beq.n	80864d0 <__gethex+0x126>
 80864ce:	4252      	negs	r2, r2
 80864d0:	4414      	add	r4, r2
 80864d2:	e000      	b.n	80864d6 <__gethex+0x12c>
 80864d4:	4631      	mov	r1, r6
 80864d6:	f8ca 1000 	str.w	r1, [sl]
 80864da:	b12d      	cbz	r5, 80864e8 <__gethex+0x13e>
 80864dc:	f1bb 0f00 	cmp.w	fp, #0
 80864e0:	bf14      	ite	ne
 80864e2:	2000      	movne	r0, #0
 80864e4:	2006      	moveq	r0, #6
 80864e6:	e17c      	b.n	80867e2 <__gethex+0x438>
 80864e8:	4629      	mov	r1, r5
 80864ea:	1bf3      	subs	r3, r6, r7
 80864ec:	3b01      	subs	r3, #1
 80864ee:	2b07      	cmp	r3, #7
 80864f0:	dd02      	ble.n	80864f8 <__gethex+0x14e>
 80864f2:	3101      	adds	r1, #1
 80864f4:	105b      	asrs	r3, r3, #1
 80864f6:	e7fa      	b.n	80864ee <__gethex+0x144>
 80864f8:	9802      	ldr	r0, [sp, #8]
 80864fa:	f000 fb0b 	bl	8086b14 <_Balloc>
 80864fe:	f04f 0900 	mov.w	r9, #0
 8086502:	4605      	mov	r5, r0
 8086504:	46cb      	mov	fp, r9
 8086506:	9b01      	ldr	r3, [sp, #4]
 8086508:	f100 0a14 	add.w	sl, r0, #20
 808650c:	f1c3 0301 	rsb	r3, r3, #1
 8086510:	f8cd a010 	str.w	sl, [sp, #16]
 8086514:	9308      	str	r3, [sp, #32]
 8086516:	42b7      	cmp	r7, r6
 8086518:	d22f      	bcs.n	808657a <__gethex+0x1d0>
 808651a:	1e73      	subs	r3, r6, #1
 808651c:	9305      	str	r3, [sp, #20]
 808651e:	9a07      	ldr	r2, [sp, #28]
 8086520:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8086524:	4293      	cmp	r3, r2
 8086526:	d00b      	beq.n	8086540 <__gethex+0x196>
 8086528:	f1bb 0f20 	cmp.w	fp, #32
 808652c:	d116      	bne.n	808655c <__gethex+0x1b2>
 808652e:	9b04      	ldr	r3, [sp, #16]
 8086530:	f8c3 9000 	str.w	r9, [r3]
 8086534:	3304      	adds	r3, #4
 8086536:	f04f 0900 	mov.w	r9, #0
 808653a:	9304      	str	r3, [sp, #16]
 808653c:	46cb      	mov	fp, r9
 808653e:	e00d      	b.n	808655c <__gethex+0x1b2>
 8086540:	9b05      	ldr	r3, [sp, #20]
 8086542:	9a08      	ldr	r2, [sp, #32]
 8086544:	4413      	add	r3, r2
 8086546:	429f      	cmp	r7, r3
 8086548:	d8ee      	bhi.n	8086528 <__gethex+0x17e>
 808654a:	4618      	mov	r0, r3
 808654c:	9a01      	ldr	r2, [sp, #4]
 808654e:	9903      	ldr	r1, [sp, #12]
 8086550:	9309      	str	r3, [sp, #36]	; 0x24
 8086552:	f7fe fd05 	bl	8084f60 <strncmp>
 8086556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086558:	b168      	cbz	r0, 8086576 <__gethex+0x1cc>
 808655a:	e7e5      	b.n	8086528 <__gethex+0x17e>
 808655c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8086560:	f7ff ff0e 	bl	8086380 <__hexdig_fun>
 8086564:	f000 000f 	and.w	r0, r0, #15
 8086568:	fa00 f00b 	lsl.w	r0, r0, fp
 808656c:	9b05      	ldr	r3, [sp, #20]
 808656e:	ea49 0900 	orr.w	r9, r9, r0
 8086572:	f10b 0b04 	add.w	fp, fp, #4
 8086576:	461e      	mov	r6, r3
 8086578:	e7cd      	b.n	8086516 <__gethex+0x16c>
 808657a:	9804      	ldr	r0, [sp, #16]
 808657c:	f840 9b04 	str.w	r9, [r0], #4
 8086580:	ebca 0000 	rsb	r0, sl, r0
 8086584:	1080      	asrs	r0, r0, #2
 8086586:	6128      	str	r0, [r5, #16]
 8086588:	0147      	lsls	r7, r0, #5
 808658a:	4648      	mov	r0, r9
 808658c:	f000 fb87 	bl	8086c9e <__hi0bits>
 8086590:	f8d8 6000 	ldr.w	r6, [r8]
 8086594:	1a38      	subs	r0, r7, r0
 8086596:	42b0      	cmp	r0, r6
 8086598:	dd26      	ble.n	80865e8 <__gethex+0x23e>
 808659a:	1b87      	subs	r7, r0, r6
 808659c:	4639      	mov	r1, r7
 808659e:	4628      	mov	r0, r5
 80865a0:	f000 fe7f 	bl	80872a2 <__any_on>
 80865a4:	b1c8      	cbz	r0, 80865da <__gethex+0x230>
 80865a6:	1e7b      	subs	r3, r7, #1
 80865a8:	1159      	asrs	r1, r3, #5
 80865aa:	f003 021f 	and.w	r2, r3, #31
 80865ae:	f04f 0901 	mov.w	r9, #1
 80865b2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80865b6:	fa09 f202 	lsl.w	r2, r9, r2
 80865ba:	420a      	tst	r2, r1
 80865bc:	d00e      	beq.n	80865dc <__gethex+0x232>
 80865be:	454b      	cmp	r3, r9
 80865c0:	dc02      	bgt.n	80865c8 <__gethex+0x21e>
 80865c2:	f04f 0902 	mov.w	r9, #2
 80865c6:	e009      	b.n	80865dc <__gethex+0x232>
 80865c8:	1eb9      	subs	r1, r7, #2
 80865ca:	4628      	mov	r0, r5
 80865cc:	f000 fe69 	bl	80872a2 <__any_on>
 80865d0:	2800      	cmp	r0, #0
 80865d2:	d0f6      	beq.n	80865c2 <__gethex+0x218>
 80865d4:	f04f 0903 	mov.w	r9, #3
 80865d8:	e000      	b.n	80865dc <__gethex+0x232>
 80865da:	4681      	mov	r9, r0
 80865dc:	4639      	mov	r1, r7
 80865de:	4628      	mov	r0, r5
 80865e0:	f7ff fe98 	bl	8086314 <rshift>
 80865e4:	443c      	add	r4, r7
 80865e6:	e00c      	b.n	8086602 <__gethex+0x258>
 80865e8:	da09      	bge.n	80865fe <__gethex+0x254>
 80865ea:	1a37      	subs	r7, r6, r0
 80865ec:	4629      	mov	r1, r5
 80865ee:	463a      	mov	r2, r7
 80865f0:	9802      	ldr	r0, [sp, #8]
 80865f2:	f000 fc89 	bl	8086f08 <__lshift>
 80865f6:	4605      	mov	r5, r0
 80865f8:	1be4      	subs	r4, r4, r7
 80865fa:	f100 0a14 	add.w	sl, r0, #20
 80865fe:	f04f 0900 	mov.w	r9, #0
 8086602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8086606:	429c      	cmp	r4, r3
 8086608:	dd08      	ble.n	808661c <__gethex+0x272>
 808660a:	9802      	ldr	r0, [sp, #8]
 808660c:	4629      	mov	r1, r5
 808660e:	f000 fab6 	bl	8086b7e <_Bfree>
 8086612:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8086614:	2300      	movs	r3, #0
 8086616:	6013      	str	r3, [r2, #0]
 8086618:	20a3      	movs	r0, #163	; 0xa3
 808661a:	e0e2      	b.n	80867e2 <__gethex+0x438>
 808661c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8086620:	4284      	cmp	r4, r0
 8086622:	da53      	bge.n	80866cc <__gethex+0x322>
 8086624:	1b04      	subs	r4, r0, r4
 8086626:	42a6      	cmp	r6, r4
 8086628:	dc2e      	bgt.n	8086688 <__gethex+0x2de>
 808662a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808662e:	2b02      	cmp	r3, #2
 8086630:	d01a      	beq.n	8086668 <__gethex+0x2be>
 8086632:	2b03      	cmp	r3, #3
 8086634:	d01c      	beq.n	8086670 <__gethex+0x2c6>
 8086636:	2b01      	cmp	r3, #1
 8086638:	d11d      	bne.n	8086676 <__gethex+0x2cc>
 808663a:	42a6      	cmp	r6, r4
 808663c:	d11b      	bne.n	8086676 <__gethex+0x2cc>
 808663e:	2e01      	cmp	r6, #1
 8086640:	dc0b      	bgt.n	808665a <__gethex+0x2b0>
 8086642:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8086646:	9a06      	ldr	r2, [sp, #24]
 8086648:	2062      	movs	r0, #98	; 0x62
 808664a:	6013      	str	r3, [r2, #0]
 808664c:	2301      	movs	r3, #1
 808664e:	612b      	str	r3, [r5, #16]
 8086650:	f8ca 3000 	str.w	r3, [sl]
 8086654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8086656:	601d      	str	r5, [r3, #0]
 8086658:	e0c3      	b.n	80867e2 <__gethex+0x438>
 808665a:	1e71      	subs	r1, r6, #1
 808665c:	4628      	mov	r0, r5
 808665e:	f000 fe20 	bl	80872a2 <__any_on>
 8086662:	2800      	cmp	r0, #0
 8086664:	d1ed      	bne.n	8086642 <__gethex+0x298>
 8086666:	e006      	b.n	8086676 <__gethex+0x2cc>
 8086668:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808666a:	2b00      	cmp	r3, #0
 808666c:	d0e9      	beq.n	8086642 <__gethex+0x298>
 808666e:	e002      	b.n	8086676 <__gethex+0x2cc>
 8086670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8086672:	2b00      	cmp	r3, #0
 8086674:	d1e5      	bne.n	8086642 <__gethex+0x298>
 8086676:	9802      	ldr	r0, [sp, #8]
 8086678:	4629      	mov	r1, r5
 808667a:	f000 fa80 	bl	8086b7e <_Bfree>
 808667e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8086680:	2300      	movs	r3, #0
 8086682:	6013      	str	r3, [r2, #0]
 8086684:	2050      	movs	r0, #80	; 0x50
 8086686:	e0ac      	b.n	80867e2 <__gethex+0x438>
 8086688:	1e67      	subs	r7, r4, #1
 808668a:	f1b9 0f00 	cmp.w	r9, #0
 808668e:	d106      	bne.n	808669e <__gethex+0x2f4>
 8086690:	b13f      	cbz	r7, 80866a2 <__gethex+0x2f8>
 8086692:	4639      	mov	r1, r7
 8086694:	4628      	mov	r0, r5
 8086696:	f000 fe04 	bl	80872a2 <__any_on>
 808669a:	4681      	mov	r9, r0
 808669c:	e001      	b.n	80866a2 <__gethex+0x2f8>
 808669e:	f04f 0901 	mov.w	r9, #1
 80866a2:	117a      	asrs	r2, r7, #5
 80866a4:	2301      	movs	r3, #1
 80866a6:	f007 071f 	and.w	r7, r7, #31
 80866aa:	fa03 f707 	lsl.w	r7, r3, r7
 80866ae:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80866b2:	4621      	mov	r1, r4
 80866b4:	421f      	tst	r7, r3
 80866b6:	4628      	mov	r0, r5
 80866b8:	bf18      	it	ne
 80866ba:	f049 0902 	orrne.w	r9, r9, #2
 80866be:	1b36      	subs	r6, r6, r4
 80866c0:	f7ff fe28 	bl	8086314 <rshift>
 80866c4:	2702      	movs	r7, #2
 80866c6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80866ca:	e000      	b.n	80866ce <__gethex+0x324>
 80866cc:	2701      	movs	r7, #1
 80866ce:	f1b9 0f00 	cmp.w	r9, #0
 80866d2:	f000 8081 	beq.w	80867d8 <__gethex+0x42e>
 80866d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80866da:	2b02      	cmp	r3, #2
 80866dc:	d00e      	beq.n	80866fc <__gethex+0x352>
 80866de:	2b03      	cmp	r3, #3
 80866e0:	d010      	beq.n	8086704 <__gethex+0x35a>
 80866e2:	2b01      	cmp	r3, #1
 80866e4:	d176      	bne.n	80867d4 <__gethex+0x42a>
 80866e6:	f019 0f02 	tst.w	r9, #2
 80866ea:	d073      	beq.n	80867d4 <__gethex+0x42a>
 80866ec:	f8da 0000 	ldr.w	r0, [sl]
 80866f0:	ea49 0900 	orr.w	r9, r9, r0
 80866f4:	f019 0f01 	tst.w	r9, #1
 80866f8:	d107      	bne.n	808670a <__gethex+0x360>
 80866fa:	e06b      	b.n	80867d4 <__gethex+0x42a>
 80866fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80866fe:	f1c3 0301 	rsb	r3, r3, #1
 8086702:	9315      	str	r3, [sp, #84]	; 0x54
 8086704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8086706:	2b00      	cmp	r3, #0
 8086708:	d064      	beq.n	80867d4 <__gethex+0x42a>
 808670a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808670e:	f105 0314 	add.w	r3, r5, #20
 8086712:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8086716:	eb03 0109 	add.w	r1, r3, r9
 808671a:	2000      	movs	r0, #0
 808671c:	681a      	ldr	r2, [r3, #0]
 808671e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8086722:	d002      	beq.n	808672a <__gethex+0x380>
 8086724:	3201      	adds	r2, #1
 8086726:	601a      	str	r2, [r3, #0]
 8086728:	e020      	b.n	808676c <__gethex+0x3c2>
 808672a:	f843 0b04 	str.w	r0, [r3], #4
 808672e:	4299      	cmp	r1, r3
 8086730:	d8f4      	bhi.n	808671c <__gethex+0x372>
 8086732:	68ab      	ldr	r3, [r5, #8]
 8086734:	459a      	cmp	sl, r3
 8086736:	db12      	blt.n	808675e <__gethex+0x3b4>
 8086738:	6869      	ldr	r1, [r5, #4]
 808673a:	9802      	ldr	r0, [sp, #8]
 808673c:	3101      	adds	r1, #1
 808673e:	f000 f9e9 	bl	8086b14 <_Balloc>
 8086742:	4683      	mov	fp, r0
 8086744:	692a      	ldr	r2, [r5, #16]
 8086746:	f105 010c 	add.w	r1, r5, #12
 808674a:	3202      	adds	r2, #2
 808674c:	0092      	lsls	r2, r2, #2
 808674e:	300c      	adds	r0, #12
 8086750:	f7fd fe72 	bl	8084438 <memcpy>
 8086754:	4629      	mov	r1, r5
 8086756:	9802      	ldr	r0, [sp, #8]
 8086758:	f000 fa11 	bl	8086b7e <_Bfree>
 808675c:	465d      	mov	r5, fp
 808675e:	692b      	ldr	r3, [r5, #16]
 8086760:	1c5a      	adds	r2, r3, #1
 8086762:	612a      	str	r2, [r5, #16]
 8086764:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8086768:	2201      	movs	r2, #1
 808676a:	615a      	str	r2, [r3, #20]
 808676c:	2f02      	cmp	r7, #2
 808676e:	f105 0214 	add.w	r2, r5, #20
 8086772:	d111      	bne.n	8086798 <__gethex+0x3ee>
 8086774:	f8d8 3000 	ldr.w	r3, [r8]
 8086778:	3b01      	subs	r3, #1
 808677a:	429e      	cmp	r6, r3
 808677c:	d127      	bne.n	80867ce <__gethex+0x424>
 808677e:	1171      	asrs	r1, r6, #5
 8086780:	2301      	movs	r3, #1
 8086782:	f006 061f 	and.w	r6, r6, #31
 8086786:	fa03 f606 	lsl.w	r6, r3, r6
 808678a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808678e:	421e      	tst	r6, r3
 8086790:	bf0c      	ite	eq
 8086792:	2702      	moveq	r7, #2
 8086794:	2701      	movne	r7, #1
 8086796:	e01a      	b.n	80867ce <__gethex+0x424>
 8086798:	692b      	ldr	r3, [r5, #16]
 808679a:	459a      	cmp	sl, r3
 808679c:	da0a      	bge.n	80867b4 <__gethex+0x40a>
 808679e:	2101      	movs	r1, #1
 80867a0:	4628      	mov	r0, r5
 80867a2:	f7ff fdb7 	bl	8086314 <rshift>
 80867a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80867aa:	3401      	adds	r4, #1
 80867ac:	429c      	cmp	r4, r3
 80867ae:	f73f af2c 	bgt.w	808660a <__gethex+0x260>
 80867b2:	e00b      	b.n	80867cc <__gethex+0x422>
 80867b4:	f016 061f 	ands.w	r6, r6, #31
 80867b8:	d008      	beq.n	80867cc <__gethex+0x422>
 80867ba:	4491      	add	r9, r2
 80867bc:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80867c0:	f000 fa6d 	bl	8086c9e <__hi0bits>
 80867c4:	f1c6 0620 	rsb	r6, r6, #32
 80867c8:	42b0      	cmp	r0, r6
 80867ca:	dbe8      	blt.n	808679e <__gethex+0x3f4>
 80867cc:	2701      	movs	r7, #1
 80867ce:	f047 0720 	orr.w	r7, r7, #32
 80867d2:	e001      	b.n	80867d8 <__gethex+0x42e>
 80867d4:	f047 0710 	orr.w	r7, r7, #16
 80867d8:	4638      	mov	r0, r7
 80867da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80867dc:	601d      	str	r5, [r3, #0]
 80867de:	9b06      	ldr	r3, [sp, #24]
 80867e0:	601c      	str	r4, [r3, #0]
 80867e2:	b00b      	add	sp, #44	; 0x2c
 80867e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080867e8 <L_shift>:
 80867e8:	f1c2 0208 	rsb	r2, r2, #8
 80867ec:	0092      	lsls	r2, r2, #2
 80867ee:	b570      	push	{r4, r5, r6, lr}
 80867f0:	f1c2 0620 	rsb	r6, r2, #32
 80867f4:	6843      	ldr	r3, [r0, #4]
 80867f6:	6805      	ldr	r5, [r0, #0]
 80867f8:	fa03 f406 	lsl.w	r4, r3, r6
 80867fc:	432c      	orrs	r4, r5
 80867fe:	40d3      	lsrs	r3, r2
 8086800:	6004      	str	r4, [r0, #0]
 8086802:	f840 3f04 	str.w	r3, [r0, #4]!
 8086806:	4288      	cmp	r0, r1
 8086808:	d3f4      	bcc.n	80867f4 <L_shift+0xc>
 808680a:	bd70      	pop	{r4, r5, r6, pc}

0808680c <__match>:
 808680c:	b530      	push	{r4, r5, lr}
 808680e:	6803      	ldr	r3, [r0, #0]
 8086810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8086814:	3301      	adds	r3, #1
 8086816:	b14c      	cbz	r4, 808682c <__match+0x20>
 8086818:	781a      	ldrb	r2, [r3, #0]
 808681a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808681e:	2d19      	cmp	r5, #25
 8086820:	bf98      	it	ls
 8086822:	3220      	addls	r2, #32
 8086824:	42a2      	cmp	r2, r4
 8086826:	d0f3      	beq.n	8086810 <__match+0x4>
 8086828:	2000      	movs	r0, #0
 808682a:	bd30      	pop	{r4, r5, pc}
 808682c:	6003      	str	r3, [r0, #0]
 808682e:	2001      	movs	r0, #1
 8086830:	bd30      	pop	{r4, r5, pc}

08086832 <__hexnan>:
 8086832:	680b      	ldr	r3, [r1, #0]
 8086834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086838:	115e      	asrs	r6, r3, #5
 808683a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808683e:	f013 031f 	ands.w	r3, r3, #31
 8086842:	bf18      	it	ne
 8086844:	3604      	addne	r6, #4
 8086846:	1f35      	subs	r5, r6, #4
 8086848:	4617      	mov	r7, r2
 808684a:	2200      	movs	r2, #0
 808684c:	4682      	mov	sl, r0
 808684e:	46a8      	mov	r8, r5
 8086850:	462c      	mov	r4, r5
 8086852:	4691      	mov	r9, r2
 8086854:	b085      	sub	sp, #20
 8086856:	f8d0 b000 	ldr.w	fp, [r0]
 808685a:	9301      	str	r3, [sp, #4]
 808685c:	f846 2c04 	str.w	r2, [r6, #-4]
 8086860:	9200      	str	r2, [sp, #0]
 8086862:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8086866:	2900      	cmp	r1, #0
 8086868:	d03c      	beq.n	80868e4 <__hexnan+0xb2>
 808686a:	4608      	mov	r0, r1
 808686c:	9203      	str	r2, [sp, #12]
 808686e:	9102      	str	r1, [sp, #8]
 8086870:	f7ff fd86 	bl	8086380 <__hexdig_fun>
 8086874:	9a03      	ldr	r2, [sp, #12]
 8086876:	bb00      	cbnz	r0, 80868ba <__hexnan+0x88>
 8086878:	9902      	ldr	r1, [sp, #8]
 808687a:	2920      	cmp	r1, #32
 808687c:	d816      	bhi.n	80868ac <__hexnan+0x7a>
 808687e:	9b00      	ldr	r3, [sp, #0]
 8086880:	4599      	cmp	r9, r3
 8086882:	ddee      	ble.n	8086862 <__hexnan+0x30>
 8086884:	4544      	cmp	r4, r8
 8086886:	d205      	bcs.n	8086894 <__hexnan+0x62>
 8086888:	2a07      	cmp	r2, #7
 808688a:	dc03      	bgt.n	8086894 <__hexnan+0x62>
 808688c:	4641      	mov	r1, r8
 808688e:	4620      	mov	r0, r4
 8086890:	f7ff ffaa 	bl	80867e8 <L_shift>
 8086894:	42bc      	cmp	r4, r7
 8086896:	d923      	bls.n	80868e0 <__hexnan+0xae>
 8086898:	2300      	movs	r3, #0
 808689a:	f1a4 0804 	sub.w	r8, r4, #4
 808689e:	f844 3c04 	str.w	r3, [r4, #-4]
 80868a2:	f8cd 9000 	str.w	r9, [sp]
 80868a6:	4644      	mov	r4, r8
 80868a8:	461a      	mov	r2, r3
 80868aa:	e7da      	b.n	8086862 <__hexnan+0x30>
 80868ac:	2929      	cmp	r1, #41	; 0x29
 80868ae:	d148      	bne.n	8086942 <__hexnan+0x110>
 80868b0:	f10b 0301 	add.w	r3, fp, #1
 80868b4:	f8ca 3000 	str.w	r3, [sl]
 80868b8:	e014      	b.n	80868e4 <__hexnan+0xb2>
 80868ba:	3201      	adds	r2, #1
 80868bc:	2a08      	cmp	r2, #8
 80868be:	f109 0901 	add.w	r9, r9, #1
 80868c2:	dd06      	ble.n	80868d2 <__hexnan+0xa0>
 80868c4:	42bc      	cmp	r4, r7
 80868c6:	d9cc      	bls.n	8086862 <__hexnan+0x30>
 80868c8:	2300      	movs	r3, #0
 80868ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80868ce:	2201      	movs	r2, #1
 80868d0:	3c04      	subs	r4, #4
 80868d2:	6821      	ldr	r1, [r4, #0]
 80868d4:	f000 000f 	and.w	r0, r0, #15
 80868d8:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80868dc:	6020      	str	r0, [r4, #0]
 80868de:	e7c0      	b.n	8086862 <__hexnan+0x30>
 80868e0:	2208      	movs	r2, #8
 80868e2:	e7be      	b.n	8086862 <__hexnan+0x30>
 80868e4:	f1b9 0f00 	cmp.w	r9, #0
 80868e8:	d02b      	beq.n	8086942 <__hexnan+0x110>
 80868ea:	4544      	cmp	r4, r8
 80868ec:	d205      	bcs.n	80868fa <__hexnan+0xc8>
 80868ee:	2a07      	cmp	r2, #7
 80868f0:	dc03      	bgt.n	80868fa <__hexnan+0xc8>
 80868f2:	4641      	mov	r1, r8
 80868f4:	4620      	mov	r0, r4
 80868f6:	f7ff ff77 	bl	80867e8 <L_shift>
 80868fa:	42bc      	cmp	r4, r7
 80868fc:	d90c      	bls.n	8086918 <__hexnan+0xe6>
 80868fe:	463b      	mov	r3, r7
 8086900:	f854 2b04 	ldr.w	r2, [r4], #4
 8086904:	42a5      	cmp	r5, r4
 8086906:	f843 2b04 	str.w	r2, [r3], #4
 808690a:	d2f9      	bcs.n	8086900 <__hexnan+0xce>
 808690c:	2200      	movs	r2, #0
 808690e:	f843 2b04 	str.w	r2, [r3], #4
 8086912:	429d      	cmp	r5, r3
 8086914:	d2fb      	bcs.n	808690e <__hexnan+0xdc>
 8086916:	e00b      	b.n	8086930 <__hexnan+0xfe>
 8086918:	9b01      	ldr	r3, [sp, #4]
 808691a:	b14b      	cbz	r3, 8086930 <__hexnan+0xfe>
 808691c:	f1c3 0220 	rsb	r2, r3, #32
 8086920:	f04f 33ff 	mov.w	r3, #4294967295
 8086924:	40d3      	lsrs	r3, r2
 8086926:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808692a:	4013      	ands	r3, r2
 808692c:	f846 3c04 	str.w	r3, [r6, #-4]
 8086930:	682b      	ldr	r3, [r5, #0]
 8086932:	b943      	cbnz	r3, 8086946 <__hexnan+0x114>
 8086934:	42bd      	cmp	r5, r7
 8086936:	d102      	bne.n	808693e <__hexnan+0x10c>
 8086938:	2301      	movs	r3, #1
 808693a:	602b      	str	r3, [r5, #0]
 808693c:	e003      	b.n	8086946 <__hexnan+0x114>
 808693e:	3d04      	subs	r5, #4
 8086940:	e7f6      	b.n	8086930 <__hexnan+0xfe>
 8086942:	2004      	movs	r0, #4
 8086944:	e000      	b.n	8086948 <__hexnan+0x116>
 8086946:	2005      	movs	r0, #5
 8086948:	b005      	add	sp, #20
 808694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08086950 <_findenv_r>:
 8086950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086954:	4607      	mov	r7, r0
 8086956:	468b      	mov	fp, r1
 8086958:	4690      	mov	r8, r2
 808695a:	f000 fcd7 	bl	808730c <__env_lock>
 808695e:	4b19      	ldr	r3, [pc, #100]	; (80869c4 <_findenv_r+0x74>)
 8086960:	681d      	ldr	r5, [r3, #0]
 8086962:	469a      	mov	sl, r3
 8086964:	b13d      	cbz	r5, 8086976 <_findenv_r+0x26>
 8086966:	465c      	mov	r4, fp
 8086968:	4623      	mov	r3, r4
 808696a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808696e:	b142      	cbz	r2, 8086982 <_findenv_r+0x32>
 8086970:	2a3d      	cmp	r2, #61	; 0x3d
 8086972:	461c      	mov	r4, r3
 8086974:	d1f8      	bne.n	8086968 <_findenv_r+0x18>
 8086976:	4638      	mov	r0, r7
 8086978:	f000 fcc9 	bl	808730e <__env_unlock>
 808697c:	2000      	movs	r0, #0
 808697e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086982:	ebcb 0404 	rsb	r4, fp, r4
 8086986:	46a9      	mov	r9, r5
 8086988:	f859 0b04 	ldr.w	r0, [r9], #4
 808698c:	2800      	cmp	r0, #0
 808698e:	d0f2      	beq.n	8086976 <_findenv_r+0x26>
 8086990:	4622      	mov	r2, r4
 8086992:	4659      	mov	r1, fp
 8086994:	f7fe fae4 	bl	8084f60 <strncmp>
 8086998:	b988      	cbnz	r0, 80869be <_findenv_r+0x6e>
 808699a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808699e:	191e      	adds	r6, r3, r4
 80869a0:	5d1b      	ldrb	r3, [r3, r4]
 80869a2:	2b3d      	cmp	r3, #61	; 0x3d
 80869a4:	d10b      	bne.n	80869be <_findenv_r+0x6e>
 80869a6:	f8da 3000 	ldr.w	r3, [sl]
 80869aa:	4638      	mov	r0, r7
 80869ac:	1aed      	subs	r5, r5, r3
 80869ae:	10ad      	asrs	r5, r5, #2
 80869b0:	f8c8 5000 	str.w	r5, [r8]
 80869b4:	f000 fcab 	bl	808730e <__env_unlock>
 80869b8:	1c70      	adds	r0, r6, #1
 80869ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80869be:	464d      	mov	r5, r9
 80869c0:	e7e1      	b.n	8086986 <_findenv_r+0x36>
 80869c2:	bf00      	nop
 80869c4:	200000fc 	.word	0x200000fc

080869c8 <_getenv_r>:
 80869c8:	b507      	push	{r0, r1, r2, lr}
 80869ca:	aa01      	add	r2, sp, #4
 80869cc:	f7ff ffc0 	bl	8086950 <_findenv_r>
 80869d0:	b003      	add	sp, #12
 80869d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080869d8 <__gettzinfo>:
 80869d8:	4800      	ldr	r0, [pc, #0]	; (80869dc <__gettzinfo+0x4>)
 80869da:	4770      	bx	lr
 80869dc:	200000bc 	.word	0x200000bc

080869e0 <gmtime_r>:
 80869e0:	6802      	ldr	r2, [r0, #0]
 80869e2:	4b46      	ldr	r3, [pc, #280]	; (8086afc <gmtime_r+0x11c>)
 80869e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80869e6:	fb92 f4f3 	sdiv	r4, r2, r3
 80869ea:	fb03 2214 	mls	r2, r3, r4, r2
 80869ee:	2a00      	cmp	r2, #0
 80869f0:	bfbc      	itt	lt
 80869f2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80869f6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80869fa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80869fe:	fb92 f3f0 	sdiv	r3, r2, r0
 8086a02:	fb00 2213 	mls	r2, r0, r3, r2
 8086a06:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8086a0a:	608b      	str	r3, [r1, #8]
 8086a0c:	fb92 f3f0 	sdiv	r3, r2, r0
 8086a10:	fb00 2213 	mls	r2, r0, r3, r2
 8086a14:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8086a18:	bfac      	ite	ge
 8086a1a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8086a1e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8086a22:	604b      	str	r3, [r1, #4]
 8086a24:	600a      	str	r2, [r1, #0]
 8086a26:	2307      	movs	r3, #7
 8086a28:	1ce2      	adds	r2, r4, #3
 8086a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8086a2e:	4d34      	ldr	r5, [pc, #208]	; (8086b00 <gmtime_r+0x120>)
 8086a30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8086a34:	fb94 f5f5 	sdiv	r5, r4, r5
 8086a38:	1ad3      	subs	r3, r2, r3
 8086a3a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8086a3e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8086a42:	618b      	str	r3, [r1, #24]
 8086a44:	4b2f      	ldr	r3, [pc, #188]	; (8086b04 <gmtime_r+0x124>)
 8086a46:	4830      	ldr	r0, [pc, #192]	; (8086b08 <gmtime_r+0x128>)
 8086a48:	fb03 4405 	mla	r4, r3, r5, r4
 8086a4c:	fbb4 f2f2 	udiv	r2, r4, r2
 8086a50:	fbb4 f3f7 	udiv	r3, r4, r7
 8086a54:	fbb4 f0f0 	udiv	r0, r4, r0
 8086a58:	4422      	add	r2, r4
 8086a5a:	1ad2      	subs	r2, r2, r3
 8086a5c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8086a60:	1a13      	subs	r3, r2, r0
 8086a62:	f240 126d 	movw	r2, #365	; 0x16d
 8086a66:	fbb3 f6f6 	udiv	r6, r3, r6
 8086a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8086a6e:	fbb3 f3f7 	udiv	r3, r3, r7
 8086a72:	4434      	add	r4, r6
 8086a74:	1ae3      	subs	r3, r4, r3
 8086a76:	fb02 3310 	mls	r3, r2, r0, r3
 8086a7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8086a7e:	2499      	movs	r4, #153	; 0x99
 8086a80:	3202      	adds	r2, #2
 8086a82:	fbb2 f2f4 	udiv	r2, r2, r4
 8086a86:	4354      	muls	r4, r2
 8086a88:	1ca6      	adds	r6, r4, #2
 8086a8a:	2405      	movs	r4, #5
 8086a8c:	fbb6 f4f4 	udiv	r4, r6, r4
 8086a90:	2a0a      	cmp	r2, #10
 8086a92:	bf34      	ite	cc
 8086a94:	2602      	movcc	r6, #2
 8086a96:	f06f 0609 	mvncs.w	r6, #9
 8086a9a:	4416      	add	r6, r2
 8086a9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8086aa0:	fb02 0505 	mla	r5, r2, r5, r0
 8086aa4:	1c5f      	adds	r7, r3, #1
 8086aa6:	2e01      	cmp	r6, #1
 8086aa8:	bf98      	it	ls
 8086aaa:	3501      	addls	r5, #1
 8086aac:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8086ab0:	eba7 0704 	sub.w	r7, r7, r4
 8086ab4:	d302      	bcc.n	8086abc <gmtime_r+0xdc>
 8086ab6:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8086aba:	e014      	b.n	8086ae6 <gmtime_r+0x106>
 8086abc:	0782      	lsls	r2, r0, #30
 8086abe:	d105      	bne.n	8086acc <gmtime_r+0xec>
 8086ac0:	2464      	movs	r4, #100	; 0x64
 8086ac2:	fbb0 f2f4 	udiv	r2, r0, r4
 8086ac6:	fb04 0212 	mls	r2, r4, r2, r0
 8086aca:	b94a      	cbnz	r2, 8086ae0 <gmtime_r+0x100>
 8086acc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8086ad0:	fbb0 f4f2 	udiv	r4, r0, r2
 8086ad4:	fb02 0014 	mls	r0, r2, r4, r0
 8086ad8:	fab0 f280 	clz	r2, r0
 8086adc:	0952      	lsrs	r2, r2, #5
 8086ade:	e000      	b.n	8086ae2 <gmtime_r+0x102>
 8086ae0:	2201      	movs	r2, #1
 8086ae2:	333b      	adds	r3, #59	; 0x3b
 8086ae4:	441a      	add	r2, r3
 8086ae6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8086aea:	2300      	movs	r3, #0
 8086aec:	61ca      	str	r2, [r1, #28]
 8086aee:	614d      	str	r5, [r1, #20]
 8086af0:	610e      	str	r6, [r1, #16]
 8086af2:	60cf      	str	r7, [r1, #12]
 8086af4:	620b      	str	r3, [r1, #32]
 8086af6:	4608      	mov	r0, r1
 8086af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086afa:	bf00      	nop
 8086afc:	00015180 	.word	0x00015180
 8086b00:	00023ab1 	.word	0x00023ab1
 8086b04:	fffdc54f 	.word	0xfffdc54f
 8086b08:	00023ab0 	.word	0x00023ab0

08086b0c <labs>:
 8086b0c:	2800      	cmp	r0, #0
 8086b0e:	bfb8      	it	lt
 8086b10:	4240      	neglt	r0, r0
 8086b12:	4770      	bx	lr

08086b14 <_Balloc>:
 8086b14:	b570      	push	{r4, r5, r6, lr}
 8086b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8086b18:	4604      	mov	r4, r0
 8086b1a:	460e      	mov	r6, r1
 8086b1c:	b93d      	cbnz	r5, 8086b2e <_Balloc+0x1a>
 8086b1e:	2010      	movs	r0, #16
 8086b20:	f7fb f9ce 	bl	8081ec0 <malloc>
 8086b24:	6260      	str	r0, [r4, #36]	; 0x24
 8086b26:	6045      	str	r5, [r0, #4]
 8086b28:	6085      	str	r5, [r0, #8]
 8086b2a:	6005      	str	r5, [r0, #0]
 8086b2c:	60c5      	str	r5, [r0, #12]
 8086b2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8086b30:	68eb      	ldr	r3, [r5, #12]
 8086b32:	b143      	cbz	r3, 8086b46 <_Balloc+0x32>
 8086b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8086b36:	68db      	ldr	r3, [r3, #12]
 8086b38:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8086b3c:	b178      	cbz	r0, 8086b5e <_Balloc+0x4a>
 8086b3e:	6802      	ldr	r2, [r0, #0]
 8086b40:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8086b44:	e017      	b.n	8086b76 <_Balloc+0x62>
 8086b46:	2221      	movs	r2, #33	; 0x21
 8086b48:	2104      	movs	r1, #4
 8086b4a:	4620      	mov	r0, r4
 8086b4c:	f000 fbcb 	bl	80872e6 <_calloc_r>
 8086b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8086b52:	60e8      	str	r0, [r5, #12]
 8086b54:	68db      	ldr	r3, [r3, #12]
 8086b56:	2b00      	cmp	r3, #0
 8086b58:	d1ec      	bne.n	8086b34 <_Balloc+0x20>
 8086b5a:	2000      	movs	r0, #0
 8086b5c:	bd70      	pop	{r4, r5, r6, pc}
 8086b5e:	2101      	movs	r1, #1
 8086b60:	fa01 f506 	lsl.w	r5, r1, r6
 8086b64:	1d6a      	adds	r2, r5, #5
 8086b66:	0092      	lsls	r2, r2, #2
 8086b68:	4620      	mov	r0, r4
 8086b6a:	f000 fbbc 	bl	80872e6 <_calloc_r>
 8086b6e:	2800      	cmp	r0, #0
 8086b70:	d0f3      	beq.n	8086b5a <_Balloc+0x46>
 8086b72:	6046      	str	r6, [r0, #4]
 8086b74:	6085      	str	r5, [r0, #8]
 8086b76:	2300      	movs	r3, #0
 8086b78:	6103      	str	r3, [r0, #16]
 8086b7a:	60c3      	str	r3, [r0, #12]
 8086b7c:	bd70      	pop	{r4, r5, r6, pc}

08086b7e <_Bfree>:
 8086b7e:	b570      	push	{r4, r5, r6, lr}
 8086b80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8086b82:	4606      	mov	r6, r0
 8086b84:	460d      	mov	r5, r1
 8086b86:	b93c      	cbnz	r4, 8086b98 <_Bfree+0x1a>
 8086b88:	2010      	movs	r0, #16
 8086b8a:	f7fb f999 	bl	8081ec0 <malloc>
 8086b8e:	6270      	str	r0, [r6, #36]	; 0x24
 8086b90:	6044      	str	r4, [r0, #4]
 8086b92:	6084      	str	r4, [r0, #8]
 8086b94:	6004      	str	r4, [r0, #0]
 8086b96:	60c4      	str	r4, [r0, #12]
 8086b98:	b13d      	cbz	r5, 8086baa <_Bfree+0x2c>
 8086b9a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8086b9c:	686a      	ldr	r2, [r5, #4]
 8086b9e:	68db      	ldr	r3, [r3, #12]
 8086ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8086ba4:	6029      	str	r1, [r5, #0]
 8086ba6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8086baa:	bd70      	pop	{r4, r5, r6, pc}

08086bac <__multadd>:
 8086bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086bb0:	4606      	mov	r6, r0
 8086bb2:	460c      	mov	r4, r1
 8086bb4:	690d      	ldr	r5, [r1, #16]
 8086bb6:	461f      	mov	r7, r3
 8086bb8:	f101 0e14 	add.w	lr, r1, #20
 8086bbc:	2300      	movs	r3, #0
 8086bbe:	f8de 0000 	ldr.w	r0, [lr]
 8086bc2:	3301      	adds	r3, #1
 8086bc4:	b281      	uxth	r1, r0
 8086bc6:	fb02 7101 	mla	r1, r2, r1, r7
 8086bca:	0c00      	lsrs	r0, r0, #16
 8086bcc:	0c0f      	lsrs	r7, r1, #16
 8086bce:	fb02 7000 	mla	r0, r2, r0, r7
 8086bd2:	b289      	uxth	r1, r1
 8086bd4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8086bd8:	429d      	cmp	r5, r3
 8086bda:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8086bde:	f84e 1b04 	str.w	r1, [lr], #4
 8086be2:	dcec      	bgt.n	8086bbe <__multadd+0x12>
 8086be4:	b1d7      	cbz	r7, 8086c1c <__multadd+0x70>
 8086be6:	68a3      	ldr	r3, [r4, #8]
 8086be8:	429d      	cmp	r5, r3
 8086bea:	db12      	blt.n	8086c12 <__multadd+0x66>
 8086bec:	6861      	ldr	r1, [r4, #4]
 8086bee:	4630      	mov	r0, r6
 8086bf0:	3101      	adds	r1, #1
 8086bf2:	f7ff ff8f 	bl	8086b14 <_Balloc>
 8086bf6:	4680      	mov	r8, r0
 8086bf8:	6922      	ldr	r2, [r4, #16]
 8086bfa:	f104 010c 	add.w	r1, r4, #12
 8086bfe:	3202      	adds	r2, #2
 8086c00:	0092      	lsls	r2, r2, #2
 8086c02:	300c      	adds	r0, #12
 8086c04:	f7fd fc18 	bl	8084438 <memcpy>
 8086c08:	4621      	mov	r1, r4
 8086c0a:	4630      	mov	r0, r6
 8086c0c:	f7ff ffb7 	bl	8086b7e <_Bfree>
 8086c10:	4644      	mov	r4, r8
 8086c12:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8086c16:	3501      	adds	r5, #1
 8086c18:	615f      	str	r7, [r3, #20]
 8086c1a:	6125      	str	r5, [r4, #16]
 8086c1c:	4620      	mov	r0, r4
 8086c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086c22 <__s2b>:
 8086c22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086c26:	4606      	mov	r6, r0
 8086c28:	4615      	mov	r5, r2
 8086c2a:	461f      	mov	r7, r3
 8086c2c:	2209      	movs	r2, #9
 8086c2e:	3308      	adds	r3, #8
 8086c30:	460c      	mov	r4, r1
 8086c32:	fb93 f3f2 	sdiv	r3, r3, r2
 8086c36:	2100      	movs	r1, #0
 8086c38:	2201      	movs	r2, #1
 8086c3a:	429a      	cmp	r2, r3
 8086c3c:	da02      	bge.n	8086c44 <__s2b+0x22>
 8086c3e:	0052      	lsls	r2, r2, #1
 8086c40:	3101      	adds	r1, #1
 8086c42:	e7fa      	b.n	8086c3a <__s2b+0x18>
 8086c44:	4630      	mov	r0, r6
 8086c46:	f7ff ff65 	bl	8086b14 <_Balloc>
 8086c4a:	9b08      	ldr	r3, [sp, #32]
 8086c4c:	2d09      	cmp	r5, #9
 8086c4e:	6143      	str	r3, [r0, #20]
 8086c50:	f04f 0301 	mov.w	r3, #1
 8086c54:	6103      	str	r3, [r0, #16]
 8086c56:	dd11      	ble.n	8086c7c <__s2b+0x5a>
 8086c58:	f104 0809 	add.w	r8, r4, #9
 8086c5c:	46c1      	mov	r9, r8
 8086c5e:	442c      	add	r4, r5
 8086c60:	f819 3b01 	ldrb.w	r3, [r9], #1
 8086c64:	4601      	mov	r1, r0
 8086c66:	3b30      	subs	r3, #48	; 0x30
 8086c68:	220a      	movs	r2, #10
 8086c6a:	4630      	mov	r0, r6
 8086c6c:	f7ff ff9e 	bl	8086bac <__multadd>
 8086c70:	45a1      	cmp	r9, r4
 8086c72:	d1f5      	bne.n	8086c60 <__s2b+0x3e>
 8086c74:	eb08 0405 	add.w	r4, r8, r5
 8086c78:	3c08      	subs	r4, #8
 8086c7a:	e001      	b.n	8086c80 <__s2b+0x5e>
 8086c7c:	340a      	adds	r4, #10
 8086c7e:	2509      	movs	r5, #9
 8086c80:	1b2d      	subs	r5, r5, r4
 8086c82:	1963      	adds	r3, r4, r5
 8086c84:	429f      	cmp	r7, r3
 8086c86:	dd08      	ble.n	8086c9a <__s2b+0x78>
 8086c88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8086c8c:	4601      	mov	r1, r0
 8086c8e:	3b30      	subs	r3, #48	; 0x30
 8086c90:	220a      	movs	r2, #10
 8086c92:	4630      	mov	r0, r6
 8086c94:	f7ff ff8a 	bl	8086bac <__multadd>
 8086c98:	e7f3      	b.n	8086c82 <__s2b+0x60>
 8086c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08086c9e <__hi0bits>:
 8086c9e:	0c03      	lsrs	r3, r0, #16
 8086ca0:	041b      	lsls	r3, r3, #16
 8086ca2:	b913      	cbnz	r3, 8086caa <__hi0bits+0xc>
 8086ca4:	0400      	lsls	r0, r0, #16
 8086ca6:	2310      	movs	r3, #16
 8086ca8:	e000      	b.n	8086cac <__hi0bits+0xe>
 8086caa:	2300      	movs	r3, #0
 8086cac:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8086cb0:	bf04      	itt	eq
 8086cb2:	0200      	lsleq	r0, r0, #8
 8086cb4:	3308      	addeq	r3, #8
 8086cb6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8086cba:	bf04      	itt	eq
 8086cbc:	0100      	lsleq	r0, r0, #4
 8086cbe:	3304      	addeq	r3, #4
 8086cc0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8086cc4:	bf04      	itt	eq
 8086cc6:	0080      	lsleq	r0, r0, #2
 8086cc8:	3302      	addeq	r3, #2
 8086cca:	2800      	cmp	r0, #0
 8086ccc:	db03      	blt.n	8086cd6 <__hi0bits+0x38>
 8086cce:	0042      	lsls	r2, r0, #1
 8086cd0:	d503      	bpl.n	8086cda <__hi0bits+0x3c>
 8086cd2:	1c58      	adds	r0, r3, #1
 8086cd4:	4770      	bx	lr
 8086cd6:	4618      	mov	r0, r3
 8086cd8:	4770      	bx	lr
 8086cda:	2020      	movs	r0, #32
 8086cdc:	4770      	bx	lr

08086cde <__lo0bits>:
 8086cde:	6803      	ldr	r3, [r0, #0]
 8086ce0:	f013 0207 	ands.w	r2, r3, #7
 8086ce4:	d00b      	beq.n	8086cfe <__lo0bits+0x20>
 8086ce6:	07d9      	lsls	r1, r3, #31
 8086ce8:	d422      	bmi.n	8086d30 <__lo0bits+0x52>
 8086cea:	079a      	lsls	r2, r3, #30
 8086cec:	bf4b      	itete	mi
 8086cee:	085b      	lsrmi	r3, r3, #1
 8086cf0:	089b      	lsrpl	r3, r3, #2
 8086cf2:	6003      	strmi	r3, [r0, #0]
 8086cf4:	6003      	strpl	r3, [r0, #0]
 8086cf6:	bf4c      	ite	mi
 8086cf8:	2001      	movmi	r0, #1
 8086cfa:	2002      	movpl	r0, #2
 8086cfc:	4770      	bx	lr
 8086cfe:	b299      	uxth	r1, r3
 8086d00:	b909      	cbnz	r1, 8086d06 <__lo0bits+0x28>
 8086d02:	0c1b      	lsrs	r3, r3, #16
 8086d04:	2210      	movs	r2, #16
 8086d06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8086d0a:	bf04      	itt	eq
 8086d0c:	0a1b      	lsreq	r3, r3, #8
 8086d0e:	3208      	addeq	r2, #8
 8086d10:	0719      	lsls	r1, r3, #28
 8086d12:	bf04      	itt	eq
 8086d14:	091b      	lsreq	r3, r3, #4
 8086d16:	3204      	addeq	r2, #4
 8086d18:	0799      	lsls	r1, r3, #30
 8086d1a:	bf04      	itt	eq
 8086d1c:	089b      	lsreq	r3, r3, #2
 8086d1e:	3202      	addeq	r2, #2
 8086d20:	07d9      	lsls	r1, r3, #31
 8086d22:	d402      	bmi.n	8086d2a <__lo0bits+0x4c>
 8086d24:	085b      	lsrs	r3, r3, #1
 8086d26:	d005      	beq.n	8086d34 <__lo0bits+0x56>
 8086d28:	3201      	adds	r2, #1
 8086d2a:	6003      	str	r3, [r0, #0]
 8086d2c:	4610      	mov	r0, r2
 8086d2e:	4770      	bx	lr
 8086d30:	2000      	movs	r0, #0
 8086d32:	4770      	bx	lr
 8086d34:	2020      	movs	r0, #32
 8086d36:	4770      	bx	lr

08086d38 <__i2b>:
 8086d38:	b510      	push	{r4, lr}
 8086d3a:	460c      	mov	r4, r1
 8086d3c:	2101      	movs	r1, #1
 8086d3e:	f7ff fee9 	bl	8086b14 <_Balloc>
 8086d42:	2201      	movs	r2, #1
 8086d44:	6144      	str	r4, [r0, #20]
 8086d46:	6102      	str	r2, [r0, #16]
 8086d48:	bd10      	pop	{r4, pc}

08086d4a <__multiply>:
 8086d4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086d4e:	4614      	mov	r4, r2
 8086d50:	690a      	ldr	r2, [r1, #16]
 8086d52:	6923      	ldr	r3, [r4, #16]
 8086d54:	4688      	mov	r8, r1
 8086d56:	429a      	cmp	r2, r3
 8086d58:	bfbe      	ittt	lt
 8086d5a:	460b      	movlt	r3, r1
 8086d5c:	46a0      	movlt	r8, r4
 8086d5e:	461c      	movlt	r4, r3
 8086d60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8086d64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8086d68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8086d6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8086d70:	eb07 0609 	add.w	r6, r7, r9
 8086d74:	429e      	cmp	r6, r3
 8086d76:	bfc8      	it	gt
 8086d78:	3101      	addgt	r1, #1
 8086d7a:	f7ff fecb 	bl	8086b14 <_Balloc>
 8086d7e:	f100 0514 	add.w	r5, r0, #20
 8086d82:	462b      	mov	r3, r5
 8086d84:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8086d88:	2200      	movs	r2, #0
 8086d8a:	4563      	cmp	r3, ip
 8086d8c:	d202      	bcs.n	8086d94 <__multiply+0x4a>
 8086d8e:	f843 2b04 	str.w	r2, [r3], #4
 8086d92:	e7fa      	b.n	8086d8a <__multiply+0x40>
 8086d94:	f104 0214 	add.w	r2, r4, #20
 8086d98:	f108 0114 	add.w	r1, r8, #20
 8086d9c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8086da0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8086da4:	9300      	str	r3, [sp, #0]
 8086da6:	9b00      	ldr	r3, [sp, #0]
 8086da8:	9201      	str	r2, [sp, #4]
 8086daa:	4293      	cmp	r3, r2
 8086dac:	d957      	bls.n	8086e5e <__multiply+0x114>
 8086dae:	f8b2 b000 	ldrh.w	fp, [r2]
 8086db2:	f1bb 0f00 	cmp.w	fp, #0
 8086db6:	d023      	beq.n	8086e00 <__multiply+0xb6>
 8086db8:	4689      	mov	r9, r1
 8086dba:	46ae      	mov	lr, r5
 8086dbc:	f04f 0800 	mov.w	r8, #0
 8086dc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8086dc4:	f8be a000 	ldrh.w	sl, [lr]
 8086dc8:	b2a3      	uxth	r3, r4
 8086dca:	fb0b a303 	mla	r3, fp, r3, sl
 8086dce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8086dd2:	f8de 4000 	ldr.w	r4, [lr]
 8086dd6:	4443      	add	r3, r8
 8086dd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8086ddc:	fb0b 840a 	mla	r4, fp, sl, r8
 8086de0:	46f2      	mov	sl, lr
 8086de2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8086de6:	b29b      	uxth	r3, r3
 8086de8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8086dec:	454f      	cmp	r7, r9
 8086dee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8086df2:	f84a 3b04 	str.w	r3, [sl], #4
 8086df6:	d901      	bls.n	8086dfc <__multiply+0xb2>
 8086df8:	46d6      	mov	lr, sl
 8086dfa:	e7e1      	b.n	8086dc0 <__multiply+0x76>
 8086dfc:	f8ce 8004 	str.w	r8, [lr, #4]
 8086e00:	9b01      	ldr	r3, [sp, #4]
 8086e02:	3204      	adds	r2, #4
 8086e04:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8086e08:	f1ba 0f00 	cmp.w	sl, #0
 8086e0c:	d021      	beq.n	8086e52 <__multiply+0x108>
 8086e0e:	462c      	mov	r4, r5
 8086e10:	4689      	mov	r9, r1
 8086e12:	682b      	ldr	r3, [r5, #0]
 8086e14:	f04f 0800 	mov.w	r8, #0
 8086e18:	f8b9 e000 	ldrh.w	lr, [r9]
 8086e1c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8086e20:	b29b      	uxth	r3, r3
 8086e22:	fb0a be0e 	mla	lr, sl, lr, fp
 8086e26:	46a3      	mov	fp, r4
 8086e28:	44f0      	add	r8, lr
 8086e2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8086e2e:	f84b 3b04 	str.w	r3, [fp], #4
 8086e32:	f859 3b04 	ldr.w	r3, [r9], #4
 8086e36:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8086e3a:	0c1b      	lsrs	r3, r3, #16
 8086e3c:	fb0a e303 	mla	r3, sl, r3, lr
 8086e40:	454f      	cmp	r7, r9
 8086e42:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8086e46:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8086e4a:	d901      	bls.n	8086e50 <__multiply+0x106>
 8086e4c:	465c      	mov	r4, fp
 8086e4e:	e7e3      	b.n	8086e18 <__multiply+0xce>
 8086e50:	6063      	str	r3, [r4, #4]
 8086e52:	3504      	adds	r5, #4
 8086e54:	e7a7      	b.n	8086da6 <__multiply+0x5c>
 8086e56:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8086e5a:	b913      	cbnz	r3, 8086e62 <__multiply+0x118>
 8086e5c:	3e01      	subs	r6, #1
 8086e5e:	2e00      	cmp	r6, #0
 8086e60:	dcf9      	bgt.n	8086e56 <__multiply+0x10c>
 8086e62:	6106      	str	r6, [r0, #16]
 8086e64:	b003      	add	sp, #12
 8086e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08086e6c <__pow5mult>:
 8086e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086e70:	4615      	mov	r5, r2
 8086e72:	f012 0203 	ands.w	r2, r2, #3
 8086e76:	4606      	mov	r6, r0
 8086e78:	460f      	mov	r7, r1
 8086e7a:	d007      	beq.n	8086e8c <__pow5mult+0x20>
 8086e7c:	4c21      	ldr	r4, [pc, #132]	; (8086f04 <__pow5mult+0x98>)
 8086e7e:	3a01      	subs	r2, #1
 8086e80:	2300      	movs	r3, #0
 8086e82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8086e86:	f7ff fe91 	bl	8086bac <__multadd>
 8086e8a:	4607      	mov	r7, r0
 8086e8c:	10ad      	asrs	r5, r5, #2
 8086e8e:	d036      	beq.n	8086efe <__pow5mult+0x92>
 8086e90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8086e92:	b93c      	cbnz	r4, 8086ea4 <__pow5mult+0x38>
 8086e94:	2010      	movs	r0, #16
 8086e96:	f7fb f813 	bl	8081ec0 <malloc>
 8086e9a:	6270      	str	r0, [r6, #36]	; 0x24
 8086e9c:	6044      	str	r4, [r0, #4]
 8086e9e:	6084      	str	r4, [r0, #8]
 8086ea0:	6004      	str	r4, [r0, #0]
 8086ea2:	60c4      	str	r4, [r0, #12]
 8086ea4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8086ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8086eac:	b94c      	cbnz	r4, 8086ec2 <__pow5mult+0x56>
 8086eae:	f240 2171 	movw	r1, #625	; 0x271
 8086eb2:	4630      	mov	r0, r6
 8086eb4:	f7ff ff40 	bl	8086d38 <__i2b>
 8086eb8:	4604      	mov	r4, r0
 8086eba:	2300      	movs	r3, #0
 8086ebc:	f8c8 0008 	str.w	r0, [r8, #8]
 8086ec0:	6003      	str	r3, [r0, #0]
 8086ec2:	f04f 0800 	mov.w	r8, #0
 8086ec6:	07eb      	lsls	r3, r5, #31
 8086ec8:	d50a      	bpl.n	8086ee0 <__pow5mult+0x74>
 8086eca:	4639      	mov	r1, r7
 8086ecc:	4622      	mov	r2, r4
 8086ece:	4630      	mov	r0, r6
 8086ed0:	f7ff ff3b 	bl	8086d4a <__multiply>
 8086ed4:	4681      	mov	r9, r0
 8086ed6:	4639      	mov	r1, r7
 8086ed8:	4630      	mov	r0, r6
 8086eda:	f7ff fe50 	bl	8086b7e <_Bfree>
 8086ede:	464f      	mov	r7, r9
 8086ee0:	106d      	asrs	r5, r5, #1
 8086ee2:	d00c      	beq.n	8086efe <__pow5mult+0x92>
 8086ee4:	6820      	ldr	r0, [r4, #0]
 8086ee6:	b108      	cbz	r0, 8086eec <__pow5mult+0x80>
 8086ee8:	4604      	mov	r4, r0
 8086eea:	e7ec      	b.n	8086ec6 <__pow5mult+0x5a>
 8086eec:	4622      	mov	r2, r4
 8086eee:	4621      	mov	r1, r4
 8086ef0:	4630      	mov	r0, r6
 8086ef2:	f7ff ff2a 	bl	8086d4a <__multiply>
 8086ef6:	6020      	str	r0, [r4, #0]
 8086ef8:	f8c0 8000 	str.w	r8, [r0]
 8086efc:	e7f4      	b.n	8086ee8 <__pow5mult+0x7c>
 8086efe:	4638      	mov	r0, r7
 8086f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8086f04:	080881d0 	.word	0x080881d0

08086f08 <__lshift>:
 8086f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086f0c:	460c      	mov	r4, r1
 8086f0e:	4607      	mov	r7, r0
 8086f10:	4691      	mov	r9, r2
 8086f12:	6926      	ldr	r6, [r4, #16]
 8086f14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8086f18:	4456      	add	r6, sl
 8086f1a:	6849      	ldr	r1, [r1, #4]
 8086f1c:	68a3      	ldr	r3, [r4, #8]
 8086f1e:	1c75      	adds	r5, r6, #1
 8086f20:	42ab      	cmp	r3, r5
 8086f22:	da02      	bge.n	8086f2a <__lshift+0x22>
 8086f24:	3101      	adds	r1, #1
 8086f26:	005b      	lsls	r3, r3, #1
 8086f28:	e7fa      	b.n	8086f20 <__lshift+0x18>
 8086f2a:	4638      	mov	r0, r7
 8086f2c:	f7ff fdf2 	bl	8086b14 <_Balloc>
 8086f30:	2300      	movs	r3, #0
 8086f32:	4680      	mov	r8, r0
 8086f34:	461a      	mov	r2, r3
 8086f36:	f100 0114 	add.w	r1, r0, #20
 8086f3a:	4553      	cmp	r3, sl
 8086f3c:	da03      	bge.n	8086f46 <__lshift+0x3e>
 8086f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8086f42:	3301      	adds	r3, #1
 8086f44:	e7f9      	b.n	8086f3a <__lshift+0x32>
 8086f46:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8086f4a:	6920      	ldr	r0, [r4, #16]
 8086f4c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8086f50:	f019 091f 	ands.w	r9, r9, #31
 8086f54:	f104 0114 	add.w	r1, r4, #20
 8086f58:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8086f5c:	d014      	beq.n	8086f88 <__lshift+0x80>
 8086f5e:	f1c9 0c20 	rsb	ip, r9, #32
 8086f62:	2200      	movs	r2, #0
 8086f64:	6808      	ldr	r0, [r1, #0]
 8086f66:	469a      	mov	sl, r3
 8086f68:	fa00 f009 	lsl.w	r0, r0, r9
 8086f6c:	4302      	orrs	r2, r0
 8086f6e:	f843 2b04 	str.w	r2, [r3], #4
 8086f72:	f851 2b04 	ldr.w	r2, [r1], #4
 8086f76:	458e      	cmp	lr, r1
 8086f78:	fa22 f20c 	lsr.w	r2, r2, ip
 8086f7c:	d8f2      	bhi.n	8086f64 <__lshift+0x5c>
 8086f7e:	f8ca 2004 	str.w	r2, [sl, #4]
 8086f82:	b142      	cbz	r2, 8086f96 <__lshift+0x8e>
 8086f84:	1cb5      	adds	r5, r6, #2
 8086f86:	e006      	b.n	8086f96 <__lshift+0x8e>
 8086f88:	3b04      	subs	r3, #4
 8086f8a:	f851 2b04 	ldr.w	r2, [r1], #4
 8086f8e:	458e      	cmp	lr, r1
 8086f90:	f843 2f04 	str.w	r2, [r3, #4]!
 8086f94:	d8f9      	bhi.n	8086f8a <__lshift+0x82>
 8086f96:	3d01      	subs	r5, #1
 8086f98:	4638      	mov	r0, r7
 8086f9a:	f8c8 5010 	str.w	r5, [r8, #16]
 8086f9e:	4621      	mov	r1, r4
 8086fa0:	f7ff fded 	bl	8086b7e <_Bfree>
 8086fa4:	4640      	mov	r0, r8
 8086fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08086faa <__mcmp>:
 8086faa:	6903      	ldr	r3, [r0, #16]
 8086fac:	690a      	ldr	r2, [r1, #16]
 8086fae:	b510      	push	{r4, lr}
 8086fb0:	1a9b      	subs	r3, r3, r2
 8086fb2:	d111      	bne.n	8086fd8 <__mcmp+0x2e>
 8086fb4:	0092      	lsls	r2, r2, #2
 8086fb6:	3014      	adds	r0, #20
 8086fb8:	3114      	adds	r1, #20
 8086fba:	1883      	adds	r3, r0, r2
 8086fbc:	440a      	add	r2, r1
 8086fbe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8086fc2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8086fc6:	428c      	cmp	r4, r1
 8086fc8:	d002      	beq.n	8086fd0 <__mcmp+0x26>
 8086fca:	d307      	bcc.n	8086fdc <__mcmp+0x32>
 8086fcc:	2001      	movs	r0, #1
 8086fce:	bd10      	pop	{r4, pc}
 8086fd0:	4298      	cmp	r0, r3
 8086fd2:	d3f4      	bcc.n	8086fbe <__mcmp+0x14>
 8086fd4:	2000      	movs	r0, #0
 8086fd6:	bd10      	pop	{r4, pc}
 8086fd8:	4618      	mov	r0, r3
 8086fda:	bd10      	pop	{r4, pc}
 8086fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8086fe0:	bd10      	pop	{r4, pc}

08086fe2 <__mdiff>:
 8086fe2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086fe6:	460c      	mov	r4, r1
 8086fe8:	4607      	mov	r7, r0
 8086fea:	4611      	mov	r1, r2
 8086fec:	4620      	mov	r0, r4
 8086fee:	4615      	mov	r5, r2
 8086ff0:	f7ff ffdb 	bl	8086faa <__mcmp>
 8086ff4:	1e06      	subs	r6, r0, #0
 8086ff6:	d108      	bne.n	808700a <__mdiff+0x28>
 8086ff8:	4631      	mov	r1, r6
 8086ffa:	4638      	mov	r0, r7
 8086ffc:	f7ff fd8a 	bl	8086b14 <_Balloc>
 8087000:	2301      	movs	r3, #1
 8087002:	6103      	str	r3, [r0, #16]
 8087004:	6146      	str	r6, [r0, #20]
 8087006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808700a:	bfbc      	itt	lt
 808700c:	4623      	movlt	r3, r4
 808700e:	462c      	movlt	r4, r5
 8087010:	4638      	mov	r0, r7
 8087012:	6861      	ldr	r1, [r4, #4]
 8087014:	bfba      	itte	lt
 8087016:	461d      	movlt	r5, r3
 8087018:	2601      	movlt	r6, #1
 808701a:	2600      	movge	r6, #0
 808701c:	f7ff fd7a 	bl	8086b14 <_Balloc>
 8087020:	692b      	ldr	r3, [r5, #16]
 8087022:	60c6      	str	r6, [r0, #12]
 8087024:	6926      	ldr	r6, [r4, #16]
 8087026:	f105 0914 	add.w	r9, r5, #20
 808702a:	f104 0114 	add.w	r1, r4, #20
 808702e:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8087032:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8087036:	f100 0514 	add.w	r5, r0, #20
 808703a:	f04f 0c00 	mov.w	ip, #0
 808703e:	f851 2b04 	ldr.w	r2, [r1], #4
 8087042:	f859 4b04 	ldr.w	r4, [r9], #4
 8087046:	b293      	uxth	r3, r2
 8087048:	449c      	add	ip, r3
 808704a:	b2a3      	uxth	r3, r4
 808704c:	0c24      	lsrs	r4, r4, #16
 808704e:	ebc3 030c 	rsb	r3, r3, ip
 8087052:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8087056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808705a:	b29b      	uxth	r3, r3
 808705c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8087060:	45c8      	cmp	r8, r9
 8087062:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8087066:	468e      	mov	lr, r1
 8087068:	f845 2b04 	str.w	r2, [r5], #4
 808706c:	d8e7      	bhi.n	808703e <__mdiff+0x5c>
 808706e:	45be      	cmp	lr, r7
 8087070:	d20e      	bcs.n	8087090 <__mdiff+0xae>
 8087072:	f85e 1b04 	ldr.w	r1, [lr], #4
 8087076:	b28a      	uxth	r2, r1
 8087078:	4462      	add	r2, ip
 808707a:	1413      	asrs	r3, r2, #16
 808707c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8087080:	b292      	uxth	r2, r2
 8087082:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8087086:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808708a:	f845 2b04 	str.w	r2, [r5], #4
 808708e:	e7ee      	b.n	808706e <__mdiff+0x8c>
 8087090:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8087094:	b90b      	cbnz	r3, 808709a <__mdiff+0xb8>
 8087096:	3e01      	subs	r6, #1
 8087098:	e7fa      	b.n	8087090 <__mdiff+0xae>
 808709a:	6106      	str	r6, [r0, #16]
 808709c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080870a0 <__ulp>:
 80870a0:	4b10      	ldr	r3, [pc, #64]	; (80870e4 <__ulp+0x44>)
 80870a2:	400b      	ands	r3, r1
 80870a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80870a8:	2b00      	cmp	r3, #0
 80870aa:	dd02      	ble.n	80870b2 <__ulp+0x12>
 80870ac:	2000      	movs	r0, #0
 80870ae:	4619      	mov	r1, r3
 80870b0:	4770      	bx	lr
 80870b2:	425b      	negs	r3, r3
 80870b4:	151b      	asrs	r3, r3, #20
 80870b6:	2b13      	cmp	r3, #19
 80870b8:	f04f 0000 	mov.w	r0, #0
 80870bc:	f04f 0100 	mov.w	r1, #0
 80870c0:	dc04      	bgt.n	80870cc <__ulp+0x2c>
 80870c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80870c6:	fa42 f103 	asr.w	r1, r2, r3
 80870ca:	4770      	bx	lr
 80870cc:	3b14      	subs	r3, #20
 80870ce:	2b1e      	cmp	r3, #30
 80870d0:	f04f 0201 	mov.w	r2, #1
 80870d4:	bfce      	itee	gt
 80870d6:	4613      	movgt	r3, r2
 80870d8:	f1c3 031f 	rsble	r3, r3, #31
 80870dc:	fa02 f303 	lslle.w	r3, r2, r3
 80870e0:	4618      	mov	r0, r3
 80870e2:	4770      	bx	lr
 80870e4:	7ff00000 	.word	0x7ff00000

080870e8 <__b2d>:
 80870e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80870ea:	6905      	ldr	r5, [r0, #16]
 80870ec:	f100 0614 	add.w	r6, r0, #20
 80870f0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80870f4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80870f8:	1f2f      	subs	r7, r5, #4
 80870fa:	4620      	mov	r0, r4
 80870fc:	f7ff fdcf 	bl	8086c9e <__hi0bits>
 8087100:	f1c0 0320 	rsb	r3, r0, #32
 8087104:	280a      	cmp	r0, #10
 8087106:	600b      	str	r3, [r1, #0]
 8087108:	dc14      	bgt.n	8087134 <__b2d+0x4c>
 808710a:	f1c0 0e0b 	rsb	lr, r0, #11
 808710e:	fa24 f10e 	lsr.w	r1, r4, lr
 8087112:	42be      	cmp	r6, r7
 8087114:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8087118:	bf34      	ite	cc
 808711a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808711e:	2100      	movcs	r1, #0
 8087120:	3015      	adds	r0, #21
 8087122:	fa04 f000 	lsl.w	r0, r4, r0
 8087126:	fa21 f10e 	lsr.w	r1, r1, lr
 808712a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808712e:	ea40 0201 	orr.w	r2, r0, r1
 8087132:	e023      	b.n	808717c <__b2d+0x94>
 8087134:	42be      	cmp	r6, r7
 8087136:	bf3a      	itte	cc
 8087138:	f1a5 0708 	subcc.w	r7, r5, #8
 808713c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8087140:	2100      	movcs	r1, #0
 8087142:	380b      	subs	r0, #11
 8087144:	d015      	beq.n	8087172 <__b2d+0x8a>
 8087146:	4084      	lsls	r4, r0
 8087148:	f1c0 0520 	rsb	r5, r0, #32
 808714c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8087150:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8087154:	42b7      	cmp	r7, r6
 8087156:	fa21 fe05 	lsr.w	lr, r1, r5
 808715a:	ea44 030e 	orr.w	r3, r4, lr
 808715e:	bf8c      	ite	hi
 8087160:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8087164:	2400      	movls	r4, #0
 8087166:	fa01 f000 	lsl.w	r0, r1, r0
 808716a:	40ec      	lsrs	r4, r5
 808716c:	ea40 0204 	orr.w	r2, r0, r4
 8087170:	e004      	b.n	808717c <__b2d+0x94>
 8087172:	460a      	mov	r2, r1
 8087174:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8087178:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808717c:	4610      	mov	r0, r2
 808717e:	4619      	mov	r1, r3
 8087180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087182 <__d2b>:
 8087182:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8087186:	461c      	mov	r4, r3
 8087188:	2101      	movs	r1, #1
 808718a:	4690      	mov	r8, r2
 808718c:	9e08      	ldr	r6, [sp, #32]
 808718e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8087190:	f7ff fcc0 	bl	8086b14 <_Balloc>
 8087194:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8087198:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808719c:	4607      	mov	r7, r0
 808719e:	b10c      	cbz	r4, 80871a4 <__d2b+0x22>
 80871a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80871a4:	9201      	str	r2, [sp, #4]
 80871a6:	f1b8 0f00 	cmp.w	r8, #0
 80871aa:	d019      	beq.n	80871e0 <__d2b+0x5e>
 80871ac:	a802      	add	r0, sp, #8
 80871ae:	f840 8d08 	str.w	r8, [r0, #-8]!
 80871b2:	f7ff fd94 	bl	8086cde <__lo0bits>
 80871b6:	9b00      	ldr	r3, [sp, #0]
 80871b8:	b148      	cbz	r0, 80871ce <__d2b+0x4c>
 80871ba:	9a01      	ldr	r2, [sp, #4]
 80871bc:	f1c0 0120 	rsb	r1, r0, #32
 80871c0:	fa02 f101 	lsl.w	r1, r2, r1
 80871c4:	430b      	orrs	r3, r1
 80871c6:	40c2      	lsrs	r2, r0
 80871c8:	617b      	str	r3, [r7, #20]
 80871ca:	9201      	str	r2, [sp, #4]
 80871cc:	e000      	b.n	80871d0 <__d2b+0x4e>
 80871ce:	617b      	str	r3, [r7, #20]
 80871d0:	9b01      	ldr	r3, [sp, #4]
 80871d2:	2b00      	cmp	r3, #0
 80871d4:	bf14      	ite	ne
 80871d6:	2102      	movne	r1, #2
 80871d8:	2101      	moveq	r1, #1
 80871da:	61bb      	str	r3, [r7, #24]
 80871dc:	6139      	str	r1, [r7, #16]
 80871de:	e007      	b.n	80871f0 <__d2b+0x6e>
 80871e0:	a801      	add	r0, sp, #4
 80871e2:	f7ff fd7c 	bl	8086cde <__lo0bits>
 80871e6:	9b01      	ldr	r3, [sp, #4]
 80871e8:	2101      	movs	r1, #1
 80871ea:	617b      	str	r3, [r7, #20]
 80871ec:	6139      	str	r1, [r7, #16]
 80871ee:	3020      	adds	r0, #32
 80871f0:	b134      	cbz	r4, 8087200 <__d2b+0x7e>
 80871f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80871f6:	4404      	add	r4, r0
 80871f8:	6034      	str	r4, [r6, #0]
 80871fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80871fe:	e009      	b.n	8087214 <__d2b+0x92>
 8087200:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8087204:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8087208:	6030      	str	r0, [r6, #0]
 808720a:	6918      	ldr	r0, [r3, #16]
 808720c:	f7ff fd47 	bl	8086c9e <__hi0bits>
 8087210:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8087214:	6028      	str	r0, [r5, #0]
 8087216:	4638      	mov	r0, r7
 8087218:	b002      	add	sp, #8
 808721a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808721e <__ratio>:
 808721e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8087222:	4688      	mov	r8, r1
 8087224:	4669      	mov	r1, sp
 8087226:	4681      	mov	r9, r0
 8087228:	f7ff ff5e 	bl	80870e8 <__b2d>
 808722c:	460d      	mov	r5, r1
 808722e:	4604      	mov	r4, r0
 8087230:	a901      	add	r1, sp, #4
 8087232:	4640      	mov	r0, r8
 8087234:	f7ff ff58 	bl	80870e8 <__b2d>
 8087238:	460f      	mov	r7, r1
 808723a:	4606      	mov	r6, r0
 808723c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8087240:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8087244:	4620      	mov	r0, r4
 8087246:	1a9a      	subs	r2, r3, r2
 8087248:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808724c:	1ac9      	subs	r1, r1, r3
 808724e:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8087252:	2b00      	cmp	r3, #0
 8087254:	bfcc      	ite	gt
 8087256:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808725a:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808725e:	4632      	mov	r2, r6
 8087260:	463b      	mov	r3, r7
 8087262:	4629      	mov	r1, r5
 8087264:	f7fc fd80 	bl	8083d68 <__aeabi_ddiv>
 8087268:	b003      	add	sp, #12
 808726a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808726e <__copybits>:
 808726e:	3901      	subs	r1, #1
 8087270:	b510      	push	{r4, lr}
 8087272:	1149      	asrs	r1, r1, #5
 8087274:	6914      	ldr	r4, [r2, #16]
 8087276:	3101      	adds	r1, #1
 8087278:	f102 0314 	add.w	r3, r2, #20
 808727c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8087280:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8087284:	42a3      	cmp	r3, r4
 8087286:	4602      	mov	r2, r0
 8087288:	d204      	bcs.n	8087294 <__copybits+0x26>
 808728a:	f853 2b04 	ldr.w	r2, [r3], #4
 808728e:	f840 2b04 	str.w	r2, [r0], #4
 8087292:	e7f7      	b.n	8087284 <__copybits+0x16>
 8087294:	2300      	movs	r3, #0
 8087296:	428a      	cmp	r2, r1
 8087298:	d202      	bcs.n	80872a0 <__copybits+0x32>
 808729a:	f842 3b04 	str.w	r3, [r2], #4
 808729e:	e7fa      	b.n	8087296 <__copybits+0x28>
 80872a0:	bd10      	pop	{r4, pc}

080872a2 <__any_on>:
 80872a2:	f100 0214 	add.w	r2, r0, #20
 80872a6:	6900      	ldr	r0, [r0, #16]
 80872a8:	114b      	asrs	r3, r1, #5
 80872aa:	4298      	cmp	r0, r3
 80872ac:	b510      	push	{r4, lr}
 80872ae:	db0c      	blt.n	80872ca <__any_on+0x28>
 80872b0:	dd0c      	ble.n	80872cc <__any_on+0x2a>
 80872b2:	f011 011f 	ands.w	r1, r1, #31
 80872b6:	d009      	beq.n	80872cc <__any_on+0x2a>
 80872b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80872bc:	fa24 f001 	lsr.w	r0, r4, r1
 80872c0:	fa00 f101 	lsl.w	r1, r0, r1
 80872c4:	428c      	cmp	r4, r1
 80872c6:	d10c      	bne.n	80872e2 <__any_on+0x40>
 80872c8:	e000      	b.n	80872cc <__any_on+0x2a>
 80872ca:	4603      	mov	r3, r0
 80872cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80872d0:	4293      	cmp	r3, r2
 80872d2:	d904      	bls.n	80872de <__any_on+0x3c>
 80872d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80872d8:	2900      	cmp	r1, #0
 80872da:	d0f9      	beq.n	80872d0 <__any_on+0x2e>
 80872dc:	e001      	b.n	80872e2 <__any_on+0x40>
 80872de:	2000      	movs	r0, #0
 80872e0:	bd10      	pop	{r4, pc}
 80872e2:	2001      	movs	r0, #1
 80872e4:	bd10      	pop	{r4, pc}

080872e6 <_calloc_r>:
 80872e6:	b538      	push	{r3, r4, r5, lr}
 80872e8:	fb02 f401 	mul.w	r4, r2, r1
 80872ec:	4621      	mov	r1, r4
 80872ee:	f7fa fe37 	bl	8081f60 <_malloc_r>
 80872f2:	4605      	mov	r5, r0
 80872f4:	b118      	cbz	r0, 80872fe <_calloc_r+0x18>
 80872f6:	4622      	mov	r2, r4
 80872f8:	2100      	movs	r1, #0
 80872fa:	f7fd f8a8 	bl	808444e <memset>
 80872fe:	4628      	mov	r0, r5
 8087300:	bd38      	pop	{r3, r4, r5, pc}
	...

08087304 <nanf>:
 8087304:	4800      	ldr	r0, [pc, #0]	; (8087308 <nanf+0x4>)
 8087306:	4770      	bx	lr
 8087308:	7fc00000 	.word	0x7fc00000

0808730c <__env_lock>:
 808730c:	4770      	bx	lr

0808730e <__env_unlock>:
 808730e:	4770      	bx	lr

08087310 <dynalib_user>:
 8087310:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8087320:	0000 0000                                   ....

08087324 <_ZTV16JsonParserStaticILj256ELj20EE>:
	...
 808732c:	00b9 0808 00cd 0808 6553 2074 655a 6f72     ........Set Zero
 808733c:	4620 6e75 7463 6f69 206e 6163 6c6c 6465      Function called
 808734c:	6620 6f72 206d 6c63 756f 0064 6552 7473      from cloud.Rest
 808735c:	7261 2074 7274 6769 6567 6572 0064 6f4c     art triggered.Lo
 808736c:	706f 4420 6c65 7961 7520 6470 7461 6465     op Delay updated
 808737c:	7420 3a6f 0020 007b 4c22 6f6f 4470 6c65      to: .{."LoopDel
 808738c:	7961 3a22 2200 2200 007d 6f4c 706f 4420     ay":."."}.Loop D
 808739c:	6c65 7961 7520 6470 7461 6465 5300 6174     elay updated.Sta
 80873ac:	7472 7075 203a 7552 6e6e 6e69 2067 6553     rtup: Running Se
 80873bc:	7574 0070 6c43 756f 5264 7365 7465 7546     tup.CloudResetFu
 80873cc:	636e 6974 6e6f 5300 7465 6f4c 706f 6544     nction.SetLoopDe
 80873dc:	616c 0079 6553 5a74 7265 006f 6f68 6b6f     lay.SetZero.hook
 80873ec:	722d 7365 6f70 736e 2f65 7473 7261 7574     -response/startu
 80873fc:	0070 6552 6f62 746f 6920 746e 6169 6574     p.Reboot intiate
 808740c:	0064 6544 7562 0067 6925 2c00 0020 3425     d.Debug.%i., .%4
 808741c:	312e 0066 5a22 7265 4f6f 6666 6573 4974     .1f."ZeroOffsetI
 808742c:	4d6e 226d 003a 6173 6576 655a 6f72 4e00     nMm":.saveZero.N
 808743c:	7765 7a20 7265 4f6f 6666 6573 2074 7328     ew zeroOffset (s
 808744c:	7661 6465 7420 206f 6c63 756f 2964 203a     aved to cloud): 
 808745c:	2200 5444 3a22 2200 002c 5322 2253 003a     ."DT":.",."SS":.
 808746c:	7372 6973 253d 2c64 7120 6175 3d6c 6425     rssi=%d, qual=%d
 808747c:	2200 734c 6942 7374 3a22 2200 734c 6d4d     ."LsBits":."LsMm
 808748c:	3a22 2200 734c 7641 3a22 2200 734c 6853     ":."LsAv":."LsSh
 808749c:	7641 3a22 7400 6369 4c6b 7665 6c65 5200     Av":.tickLevel.R
 80874ac:	6d65 746f 2065 6552 6573 2074 6e49 7469     emote Reset Init
 80874bc:	6169 6574 0064 6f63 6c75 2064 6f6e 2074     iated.could not 
 80874cc:	6170 7372 2065 736a 6e6f 6500 7272 726f     parse json.error
 80874dc:	7a00 7265 4f6f 6666 6573 4974 4d6e 206d     .zeroOffsetInMm 
 80874ec:	6128 2073 7473 726f 6465 6f20 206e 7a41     (as stored on Az
 80874fc:	7275 2965 203a 5300 7465 6974 676e 7a20     ure): .Setting z
 808750c:	7265 4f6f 6666 6573 4974 4d6e 006d 0000     eroOffsetInMm...

0808751c <_ZTV13JsonReference>:
	...
 8087524:	0d11 0808 0d13 0808                         ........

0808752c <_ZTV10JsonBuffer>:
	...
 8087534:	0d21 0808 0d3d 0808 6c25 0075 3025 7834     !...=...%lu.%04x
 8087544:	5c00 2575 3430 0058 7274 6575 2500 2a2e     .\u%04X.true.%.*
 8087554:	0066 6625 2500 2a2e 666c 2500 666c 0000     f.%f.%.*lf.%lf..

08087564 <_ZTV10JsonParser>:
	...
 808756c:	0d51 0808 0d75 0808                         Q...u...

08087574 <_ZTV30CellularHelperRSSIQualResponse>:
	...
 808757c:	1a0d 0808 5954 4550 555f 4b4e 4f4e 4e57     ....TYPE_UNKNOWN
 808758c:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 808759c:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 80875ac:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 80875bc:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 80875cc:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 80875dc:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 80875ec:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 80875fc:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 808760c:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 808761c:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 808762c:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 808763c:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 808764c:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 808765c:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 808766c:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 808767c:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 808768c:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 808769c:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 80876ac:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 80876bc:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 80876cc:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 80876dc:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 80876ec:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 80876fc:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 808770c:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 808771c:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 808772c:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 808773c:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 808774c:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 808775c:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 808776c:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 808777c:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 808778c:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 808779c:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 80877ac:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 80877bc:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 80877cc:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 80877dc:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 80877ec:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 80877fc:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 808780c:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 808781c:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 808782c:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 808783c:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 808784c:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 808785c:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 808786c:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 808787c:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 808788c:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 808789c:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 80878ac:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 80878bc:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 80878cc:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 80878dc:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 80878ec:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 80878fc:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 808790c:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 808791c:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 808792c:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 808793c:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 808794c:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 808795c:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

08087968 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8087970:	1a0d 0808                                   ....

08087974 <_ZTV8SPIClass>:
	...
 808797c:	1f71 0808 1f73 0808 6162 6475 5300 7265     q...s...baud.Ser
 808798c:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 808799c:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80879ac:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80879bc:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80879cc:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80879dc:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80879ec:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80879fc:	0070 3025 3031 2075 5d00 0020 2928 203a     p.%010u .] .(): 
 8087a0c:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
 8087a1c:	6c69 2073 203d 6c00 006e 6e66 6300 646f     ils = .ln.fn.cod
 8087a2c:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 8087a3c:	6361 0065 6e69 6f66 7700 7261 006e 6170     ace.info.warn.pa
 8087a4c:	696e 0063 6c61 006c 2b25 3330 3a64 3025     nic.all.%+03d:%0
 8087a5c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8087a6c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08087a7c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8087a84:	27f1 0808 27f7 0808 283b 0808 2805 0808     .'...'..;(...(..
 8087a94:	27f3 0808                                   .'..

08087a98 <_ZTV9IPAddress>:
	...
 8087aa0:	2de1 0808 2dd1 0808 2dd3 0808               .-...-...-..

08087aac <_ZTV9USBSerial>:
	...
 8087ab4:	2e75 0808 2ec5 0808 2ed3 0808 2309 0808     u............#..
 8087ac4:	2eb1 0808 2e77 0808 2e8d 0808 2ebf 0808     ....w...........
 8087ad4:	2ea3 0808 2e71 0808                         ....q...

08087adc <_ZTVN5spark13CellularClassE>:
	...
 8087ae4:	3077 0808 306d 0808 3063 0808 2fd5 0808     w0..m0..c0.../..
 8087af4:	3057 0808 304b 0808 303f 0808 3037 0808     W0..K0..?0..70..
 8087b04:	302d 0808 3023 0808 2fdf 0808               -0..#0.../..

08087b10 <_ZTV11USARTSerial>:
	...
 8087b18:	30b1 0808 3101 0808 310f 0808 2309 0808     .0...1...1...#..
 8087b28:	30c5 0808 30e7 0808 30d3 0808 30fb 0808     .0...0...0...0..
 8087b38:	30b3 0808 30b7 0808                         .0...0..

08087b40 <_ZTV7TwoWire>:
	...
 8087b48:	3211 0808 325b 0808 3233 0808 3213 0808     .2..[2..32...2..
 8087b58:	323b 0808 3243 0808 324b 0808 3253 0808     ;2..C2..K2..S2..

08087b68 <_ZTVN5spark12NetworkClassE>:
	...
 8087b70:	32cf 0808 32d9 0808 32e3 0808 32ed 0808     .2...2...2...2..
 8087b80:	32f7 0808 3303 0808 330f 0808 331b 0808     .2...3...3...3..
 8087b90:	3323 0808 332d 0808 3339 0808               #3..-3..93..

08087b9c <day_name.4723>:
 8087b9c:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8087bac:	6972 6153 4a74                                   riSat

08087bb1 <mon_name.4724>:
 8087bb1:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8087bc1:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8087bd1:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8087be1:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8087bf1:	6425 000a                                   %d..

08087bf5 <_ctype_>:
 8087bf5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8087c05:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8087c15:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8087c25:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8087c35:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8087c45:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8087c55:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8087c65:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8087c75:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08087cf8 <__sf_fake_stdin>:
	...

08087d18 <__sf_fake_stdout>:
	...

08087d38 <__sf_fake_stderr>:
	...
 8087d58:	4f50 4953 0058 002e                         POSIX...

08087d60 <__month_lengths>:
 8087d60:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8087d70:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8087d80:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8087d90:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8087da0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8087db0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8087dc0:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 8087dd0:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 8087de0:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 8087df0:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 8087e00:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 8087e10:	2564 322e 646c 0000                         d%.2ld..

08087e18 <fpi.5342>:
 8087e18:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8087e28:	0000 0000 666e 6900 696e 7974 0000 0000     ....nf.inity....

08087e38 <fpinan.5378>:
 8087e38:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

08087e50 <tinytens>:
 8087e50:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8087e60:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8087e70:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8087e80:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 8087e90:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 8087ea0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 8087eb0:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 8087ec0:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 8087ed0:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 8087ee0:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8087ef0:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8087f00:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8087f10:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8087f20:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8087f30:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8087f40:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8087f50:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 8087f60:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 8087f70:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 8087f80:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 8087f90:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 8087fa0:	3a4d 5325 2520 0070                         M:%S %p.

08087fa8 <_C_time_locale>:
 8087fa8:	7e80 0808 7e84 0808 7e88 0808 7e8c 0808     .~...~...~...~..
 8087fb8:	7e90 0808 7e94 0808 7e98 0808 7e9c 0808     .~...~...~...~..
 8087fc8:	7ea0 0808 7ea4 0808 7ea8 0808 7eac 0808     .~...~...~...~..
 8087fd8:	7eb0 0808 7eb8 0808 7ec1 0808 7ec7 0808     .~...~...~...~..
 8087fe8:	7e90 0808 7ecd 0808 7ed2 0808 7ed7 0808     .~...~...~...~..
 8087ff8:	7ede 0808 7ee8 0808 7ef0 0808 7ef9 0808     .~...~...~...~..
 8088008:	7f02 0808 7f06 0808 7f0a 0808 7f0e 0808     ................
 8088018:	7f12 0808 7f16 0808 7f1a 0808 7f1e 0808     ................
 8088028:	7f25 0808 7f2c 0808 7f34 0808 7f3e 0808     %...,...4...>...
 8088038:	7f47 0808 7f4e 0808 7f57 0808 7f60 0808     G...N...W...`...
 8088048:	7f69 0808 7f7e 0808 7f81 0808 7f84 0808     i...~...........
 8088058:	7eb0 0808 7eb8 0808 7ec1 0808 7ec7 0808     .~...~...~...~..
 8088068:	7e90 0808 7ecd 0808 7ed2 0808 7ed7 0808     .~...~...~...~..
 8088078:	7ede 0808 7ee8 0808 7ef0 0808 7ef9 0808     .~...~...~...~..
 8088088:	79a7 0808 7f9c 0808 7954 0808 7954 0808     .y......Ty..Ty..
 8088098:	7954 0808 7954 0808 7954 0808 5a54 4700     Ty..Ty..Ty..TZ.G
 80880a8:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80880b8:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80880c8:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80880d8:	3a6e 6825 2575 006e                         n:%hu%n.

080880e0 <__mprec_tens>:
 80880e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80880f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8088100:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8088110:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8088120:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8088130:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8088140:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8088150:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8088160:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8088170:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8088180:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8088190:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80881a0:	9db4 79d9 7843 44ea                         ...yCx.D

080881a8 <__mprec_bigtens>:
 80881a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80881b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80881c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

080881d0 <p05.5385>:
 80881d0:	0005 0000 0019 0000 007d 0000               ........}...

080881dc <link_const_variable_data_end>:
 80881dc:	08080aa9 	.word	0x08080aa9
 80881e0:	0808153f 	.word	0x0808153f
 80881e4:	08081643 	.word	0x08081643
 80881e8:	08081747 	.word	0x08081747
 80881ec:	08081a95 	.word	0x08081a95
 80881f0:	08081fc1 	.word	0x08081fc1
 80881f4:	0808244d 	.word	0x0808244d
 80881f8:	0808262d 	.word	0x0808262d
 80881fc:	08082685 	.word	0x08082685
 8088200:	08083081 	.word	0x08083081
 8088204:	08083385 	.word	0x08083385
 8088208:	08083435 	.word	0x08083435
 808820c:	08083491 	.word	0x08083491
 8088210:	08083515 	.word	0x08083515
 8088214:	08083599 	.word	0x08083599
 8088218:	0808365d 	.word	0x0808365d
 808821c:	08083721 	.word	0x08083721
