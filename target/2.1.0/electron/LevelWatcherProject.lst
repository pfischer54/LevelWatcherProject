
c:/Users/P/OneDrive/Development/Particle/projects/LevelWatcherProject/target/2.1.0/electron/LevelWatcherProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006890  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080868b0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001e8  20000000  080868b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000810  200001e8  200001e8  000401e8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08086a9c  08086a9c  00036a9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08086ac4  08086ac4  00036ac4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014ef98  00000000  00000000  00036ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017ac4  00000000  00000000  00185a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002628  00000000  00000000  0019d524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00005dc8  00000000  00000000  0019fb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002bf2e  00000000  00000000  001a5914  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00035a25  00000000  00000000  001d1842  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b990b  00000000  00000000  00207267  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006de4  00000000  00000000  002c0b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00020da0  00000000  00000000  002c7958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <strftime+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080040:	4809      	ldr	r0, [pc, #36]	; (8080068 <module_user_pre_init+0x28>)
 8080042:	490a      	ldr	r1, [pc, #40]	; (808006c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080044:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080046:	4288      	cmp	r0, r1
 8080048:	d005      	beq.n	8080056 <module_user_pre_init+0x16>
 808004a:	4a09      	ldr	r2, [pc, #36]	; (8080070 <module_user_pre_init+0x30>)
 808004c:	4282      	cmp	r2, r0
 808004e:	d002      	beq.n	8080056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080050:	1a12      	subs	r2, r2, r0
 8080052:	f004 f8c9 	bl	80841e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080056:	4807      	ldr	r0, [pc, #28]	; (8080074 <module_user_pre_init+0x34>)
 8080058:	4a07      	ldr	r2, [pc, #28]	; (8080078 <module_user_pre_init+0x38>)
 808005a:	2100      	movs	r1, #0
 808005c:	1a12      	subs	r2, r2, r0
 808005e:	f004 f8d1 	bl	8084204 <memset>
    return &link_heap_start;
}
 8080062:	4806      	ldr	r0, [pc, #24]	; (808007c <module_user_pre_init+0x3c>)
 8080064:	bd08      	pop	{r3, pc}
 8080066:	bf00      	nop
 8080068:	20000000 	.word	0x20000000
 808006c:	080868b4 	.word	0x080868b4
 8080070:	200001e8 	.word	0x200001e8
 8080074:	200001e8 	.word	0x200001e8
 8080078:	200009f8 	.word	0x200009f8
 808007c:	200009f8 	.word	0x200009f8

08080080 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080080:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080082:	f002 fc37 	bl	80828f4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080086:	2500      	movs	r5, #0
 8080088:	4e05      	ldr	r6, [pc, #20]	; (80800a0 <module_user_init+0x20>)
 808008a:	4c06      	ldr	r4, [pc, #24]	; (80800a4 <module_user_init+0x24>)
 808008c:	1ba4      	subs	r4, r4, r6
 808008e:	08a4      	lsrs	r4, r4, #2
 8080090:	42a5      	cmp	r5, r4
 8080092:	d100      	bne.n	8080096 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080094:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080096:	f856 3b04 	ldr.w	r3, [r6], #4
 808009a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808009c:	3501      	adds	r5, #1
 808009e:	e7f7      	b.n	8080090 <module_user_init+0x10>
 80800a0:	0808688c 	.word	0x0808688c
 80800a4:	080868ac 	.word	0x080868ac

080800a8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800a8:	f000 b94e 	b.w	8080348 <setup>

080800ac <module_user_loop>:
}

void module_user_loop() {
 80800ac:	b508      	push	{r3, lr}
    loop();
 80800ae:	f000 f9cb 	bl	8080448 <loop>
    _post_loop();
}
 80800b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800b6:	f002 bbdf 	b.w	8082878 <_post_loop>

080800ba <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ba:	f001 bf6d 	b.w	8081f98 <malloc>

080800be <_Znaj>:
 80800be:	f001 bf6b 	b.w	8081f98 <malloc>

080800c2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800c2:	f001 bf71 	b.w	8081fa8 <free>

080800c6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800c6:	7800      	ldrb	r0, [r0, #0]
 80800c8:	fab0 f080 	clz	r0, r0
 80800cc:	0940      	lsrs	r0, r0, #5
 80800ce:	4770      	bx	lr

080800d0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d0:	2301      	movs	r3, #1
 80800d2:	7003      	strb	r3, [r0, #0]
 80800d4:	4770      	bx	lr
	...

080800d8 <_ZN16JsonParserStaticILj256ELj20EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80800d8:	b510      	push	{r4, lr}
 80800da:	4604      	mov	r4, r0
 80800dc:	4b02      	ldr	r3, [pc, #8]	; (80800e8 <_ZN16JsonParserStaticILj256ELj20EED1Ev+0x10>)
 80800de:	6003      	str	r3, [r0, #0]
 80800e0:	f000 fe62 	bl	8080da8 <_ZN10JsonParserD1Ev>
 80800e4:	4620      	mov	r0, r4
 80800e6:	bd10      	pop	{r4, pc}
 80800e8:	0808632c 	.word	0x0808632c

080800ec <_ZN16JsonParserStaticILj256ELj20EED0Ev>:
 80800ec:	b510      	push	{r4, lr}
 80800ee:	4604      	mov	r4, r0
 80800f0:	f7ff fff2 	bl	80800d8 <_ZN16JsonParserStaticILj256ELj20EED1Ev>
 80800f4:	4620      	mov	r0, r4
 80800f6:	f44f 711b 	mov.w	r1, #620	; 0x26c
 80800fa:	f003 fac6 	bl	808368a <_ZdlPvj>
 80800fe:	4620      	mov	r0, r4
 8080100:	bd10      	pop	{r4, pc}

08080102 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080102:	b40e      	push	{r1, r2, r3}
 8080104:	b503      	push	{r0, r1, lr}
 8080106:	ab03      	add	r3, sp, #12
 8080108:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 808010c:	2101      	movs	r1, #1
        va_start(args, format);
 808010e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 8080110:	f002 f9d2 	bl	80824b8 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080114:	b002      	add	sp, #8
 8080116:	f85d eb04 	ldr.w	lr, [sp], #4
 808011a:	b003      	add	sp, #12
 808011c:	4770      	bx	lr
	...

08080120 <_Z7setZero6String>:
STARTUP(cellular_credentials_set("3iot", "", "", NULL)); //globalM2M SIM starting 89353
//STARTUP(cellular_credentials_set("luner", "", "", NULL));


int setZero(String command)
{
 8080120:	b507      	push	{r0, r1, r2, lr}
    Serial.printlnf("Set Zero Function called from cloud");
 8080122:	f002 ff93 	bl	808304c <_Z16_fetch_usbserialv>
 8080126:	490b      	ldr	r1, [pc, #44]	; (8080154 <_Z7setZero6String+0x34>)
 8080128:	f7ff ffeb 	bl	8080102 <_ZN5Print8printlnfEPKcz>
    zeroOffsetInMm = 0.0; //Reset zero offset to allow re-calculation
 808012c:	2200      	movs	r2, #0
 808012e:	2300      	movs	r3, #0
 8080130:	4909      	ldr	r1, [pc, #36]	; (8080158 <_Z7setZero6String+0x38>)
    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
 8080132:	480a      	ldr	r0, [pc, #40]	; (808015c <_Z7setZero6String+0x3c>)
    zeroOffsetInMm = 0.0; //Reset zero offset to allow re-calculation
 8080134:	e9c1 2300 	strd	r2, r3, [r1]
    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
 8080138:	2118      	movs	r1, #24
 808013a:	9100      	str	r1, [sp, #0]
 808013c:	f001 fabb 	bl	80816b6 <_ZN14RunningAverage9fillValueEdh>
    zeroingInProgress = true;
 8080140:	2301      	movs	r3, #1
    sample = 1;
    return 0;
}
 8080142:	2000      	movs	r0, #0
    zeroingInProgress = true;
 8080144:	4a06      	ldr	r2, [pc, #24]	; (8080160 <_Z7setZero6String+0x40>)
 8080146:	7013      	strb	r3, [r2, #0]
    sample = 1;
 8080148:	4a06      	ldr	r2, [pc, #24]	; (8080164 <_Z7setZero6String+0x44>)
 808014a:	6013      	str	r3, [r2, #0]
}
 808014c:	b003      	add	sp, #12
 808014e:	f85d fb04 	ldr.w	pc, [sp], #4
 8080152:	bf00      	nop
 8080154:	08086134 	.word	0x08086134
 8080158:	200004e8 	.word	0x200004e8
 808015c:	20000208 	.word	0x20000208
 8080160:	200004f0 	.word	0x200004f0
 8080164:	20000008 	.word	0x20000008

08080168 <_Z18cloudResetFunction6String>:
    Particle.publish("Loop Delay updated", loopDelayData, 600, PRIVATE);
    return 0;
}

int cloudResetFunction(String command)
{
 8080168:	b508      	push	{r3, lr}
    Serial.printlnf("Restart triggered");
 808016a:	f002 ff6f 	bl	808304c <_Z16_fetch_usbserialv>
 808016e:	4906      	ldr	r1, [pc, #24]	; (8080188 <_Z18cloudResetFunction6String+0x20>)
 8080170:	f7ff ffc7 	bl	8080102 <_ZN5Print8printlnfEPKcz>
    resetFlag = true;
 8080174:	2201      	movs	r2, #1
 8080176:	4b05      	ldr	r3, [pc, #20]	; (808018c <_Z18cloudResetFunction6String+0x24>)
 8080178:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808017a:	f001 fcf7 	bl	8081b6c <HAL_Timer_Get_Milli_Seconds>
    rebootSync = millis();
 808017e:	4b04      	ldr	r3, [pc, #16]	; (8080190 <_Z18cloudResetFunction6String+0x28>)
 8080180:	6018      	str	r0, [r3, #0]
    return 0;
}
 8080182:	2000      	movs	r0, #0
 8080184:	bd08      	pop	{r3, pc}
 8080186:	bf00      	nop
 8080188:	08086158 	.word	0x08086158
 808018c:	200004a0 	.word	0x200004a0
 8080190:	2000049c 	.word	0x2000049c

08080194 <_Z5blinkm>:
    blinkLong(3);
    blinkShort(3);
}

void blink(unsigned long onTime)
{
 8080194:	b538      	push	{r3, r4, r5, lr}
 8080196:	4604      	mov	r4, r0
    digitalWrite(onboardLed, HIGH);
 8080198:	4d08      	ldr	r5, [pc, #32]	; (80801bc <_Z5blinkm+0x28>)
 808019a:	2101      	movs	r1, #1
 808019c:	8828      	ldrh	r0, [r5, #0]
 808019e:	f003 f9f8 	bl	8083592 <digitalWrite>
    // We'll leave it on for 1 second...
    delay(onTime);
 80801a2:	4620      	mov	r0, r4
 80801a4:	f002 faf4 	bl	8082790 <delay>
    // Then we'll turn it off...
    digitalWrite(onboardLed, LOW);
 80801a8:	8828      	ldrh	r0, [r5, #0]
 80801aa:	2100      	movs	r1, #0
 80801ac:	f003 f9f1 	bl	8083592 <digitalWrite>
    delay(200);
}
 80801b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(200);
 80801b4:	20c8      	movs	r0, #200	; 0xc8
 80801b6:	f002 baeb 	b.w	8082790 <delay>
 80801ba:	bf00      	nop
 80801bc:	20000004 	.word	0x20000004

080801c0 <_Z9blinkLongi>:

void blinkLong(int times)
{
 80801c0:	b538      	push	{r3, r4, r5, lr}
 80801c2:	4605      	mov	r5, r0
    for (int i = 0; i < times; i++)
 80801c4:	2400      	movs	r4, #0
 80801c6:	42ac      	cmp	r4, r5
 80801c8:	da05      	bge.n	80801d6 <_Z9blinkLongi+0x16>
    {
        blink(600);
 80801ca:	f44f 7016 	mov.w	r0, #600	; 0x258
 80801ce:	f7ff ffe1 	bl	8080194 <_Z5blinkm>
    for (int i = 0; i < times; i++)
 80801d2:	3401      	adds	r4, #1
 80801d4:	e7f7      	b.n	80801c6 <_Z9blinkLongi+0x6>
    }
}
 80801d6:	bd38      	pop	{r3, r4, r5, pc}

080801d8 <_Z10blinkShorti>:

void blinkShort(int times)
{
 80801d8:	b538      	push	{r3, r4, r5, lr}
 80801da:	4605      	mov	r5, r0
    for (int i = 0; i < times; i++)
 80801dc:	2400      	movs	r4, #0
 80801de:	42ac      	cmp	r4, r5
 80801e0:	da04      	bge.n	80801ec <_Z10blinkShorti+0x14>
    {
        blink(200);
 80801e2:	20c8      	movs	r0, #200	; 0xc8
 80801e4:	f7ff ffd6 	bl	8080194 <_Z5blinkm>
    for (int i = 0; i < times; i++)
 80801e8:	3401      	adds	r4, #1
 80801ea:	e7f8      	b.n	80801de <_Z10blinkShorti+0x6>
    }
}
 80801ec:	bd38      	pop	{r3, r4, r5, pc}

080801ee <_Z3sosv>:
{
 80801ee:	b508      	push	{r3, lr}
    blinkShort(3);
 80801f0:	2003      	movs	r0, #3
 80801f2:	f7ff fff1 	bl	80801d8 <_Z10blinkShorti>
    blinkLong(3);
 80801f6:	2003      	movs	r0, #3
 80801f8:	f7ff ffe2 	bl	80801c0 <_Z9blinkLongi>
}
 80801fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    blinkShort(3);
 8080200:	2003      	movs	r0, #3
 8080202:	f7ff bfe9 	b.w	80801d8 <_Z10blinkShorti>

08080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080206:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080208:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 808020a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808020c:	b17c      	cbz	r4, 808022e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 808020e:	6863      	ldr	r3, [r4, #4]
 8080210:	3b01      	subs	r3, #1
 8080212:	6063      	str	r3, [r4, #4]
 8080214:	b95b      	cbnz	r3, 808022e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080216:	6823      	ldr	r3, [r4, #0]
 8080218:	4620      	mov	r0, r4
 808021a:	689b      	ldr	r3, [r3, #8]
 808021c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808021e:	68a3      	ldr	r3, [r4, #8]
 8080220:	3b01      	subs	r3, #1
 8080222:	60a3      	str	r3, [r4, #8]
 8080224:	b91b      	cbnz	r3, 808022e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080226:	6823      	ldr	r3, [r4, #0]
 8080228:	4620      	mov	r0, r4
 808022a:	68db      	ldr	r3, [r3, #12]
 808022c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 808022e:	4628      	mov	r0, r5
 8080230:	bd38      	pop	{r3, r4, r5, pc}
	...

08080234 <_Z12setLoopDelay6String>:
{
 8080234:	b570      	push	{r4, r5, r6, lr}
 8080236:	b09a      	sub	sp, #104	; 0x68
    loopDelay = atol(delay);
 8080238:	6800      	ldr	r0, [r0, #0]
 808023a:	f003 ffc3 	bl	80841c4 <atol>
 808023e:	4d38      	ldr	r5, [pc, #224]	; (8080320 <_Z12setLoopDelay6String+0xec>)
    Serial.printlnf("Loop Delay updated to: " + String::format("%u", loopDelay));
 8080240:	4e38      	ldr	r6, [pc, #224]	; (8080324 <_Z12setLoopDelay6String+0xf0>)
    loopDelay = atol(delay);
 8080242:	6028      	str	r0, [r5, #0]
    Serial.printlnf("Loop Delay updated to: " + String::format("%u", loopDelay));
 8080244:	f002 ff02 	bl	808304c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080248:	4937      	ldr	r1, [pc, #220]	; (8080328 <_Z12setLoopDelay6String+0xf4>)
 808024a:	4604      	mov	r4, r0
 808024c:	a816      	add	r0, sp, #88	; 0x58
 808024e:	f001 ffdd 	bl	808220c <_ZN6StringC1EPKc>
 8080252:	682a      	ldr	r2, [r5, #0]
 8080254:	4631      	mov	r1, r6
 8080256:	a812      	add	r0, sp, #72	; 0x48
 8080258:	f002 f8b4 	bl	80823c4 <_ZN6String6formatEPKcz>
 808025c:	a912      	add	r1, sp, #72	; 0x48
 808025e:	a816      	add	r0, sp, #88	; 0x58
 8080260:	f002 f87d 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080264:	6801      	ldr	r1, [r0, #0]
 8080266:	4620      	mov	r0, r4
 8080268:	f7ff ff4b 	bl	8080102 <_ZN5Print8printlnfEPKcz>
 808026c:	a812      	add	r0, sp, #72	; 0x48
 808026e:	f001 ff83 	bl	8082178 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080272:	a816      	add	r0, sp, #88	; 0x58
 8080274:	f001 ff80 	bl	8082178 <_ZN6StringD1Ev>
    loopDelayData = String("{") +
 8080278:	492c      	ldr	r1, [pc, #176]	; (808032c <_Z12setLoopDelay6String+0xf8>)
 808027a:	a802      	add	r0, sp, #8
 808027c:	f001 ffc6 	bl	808220c <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8080280:	a902      	add	r1, sp, #8
 8080282:	a80a      	add	r0, sp, #40	; 0x28
 8080284:	f002 f801 	bl	808228a <_ZN6StringC1ERKS_>
                    String("\"LoopDelay\":") + String("\"") + String::format("%u", loopDelay) +
 8080288:	4929      	ldr	r1, [pc, #164]	; (8080330 <_Z12setLoopDelay6String+0xfc>)
 808028a:	a806      	add	r0, sp, #24
 808028c:	f001 ffbe 	bl	808220c <_ZN6StringC1EPKc>
 8080290:	a906      	add	r1, sp, #24
 8080292:	a80a      	add	r0, sp, #40	; 0x28
 8080294:	f002 f863 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080298:	4604      	mov	r4, r0
 808029a:	4926      	ldr	r1, [pc, #152]	; (8080334 <_Z12setLoopDelay6String+0x100>)
 808029c:	a80e      	add	r0, sp, #56	; 0x38
 808029e:	f001 ffb5 	bl	808220c <_ZN6StringC1EPKc>
 80802a2:	a90e      	add	r1, sp, #56	; 0x38
 80802a4:	4620      	mov	r0, r4
 80802a6:	f002 f85a 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80802aa:	4604      	mov	r4, r0
 80802ac:	682a      	ldr	r2, [r5, #0]
 80802ae:	4631      	mov	r1, r6
 80802b0:	a812      	add	r0, sp, #72	; 0x48
 80802b2:	f002 f887 	bl	80823c4 <_ZN6String6formatEPKcz>
 80802b6:	a912      	add	r1, sp, #72	; 0x48
 80802b8:	4620      	mov	r0, r4
 80802ba:	f002 f850 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80802be:	4604      	mov	r4, r0
                    String("\"}");
 80802c0:	491d      	ldr	r1, [pc, #116]	; (8080338 <_Z12setLoopDelay6String+0x104>)
 80802c2:	a816      	add	r0, sp, #88	; 0x58
 80802c4:	f001 ffa2 	bl	808220c <_ZN6StringC1EPKc>
 80802c8:	a916      	add	r1, sp, #88	; 0x58
 80802ca:	4620      	mov	r0, r4
 80802cc:	f002 f847 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80802d0:	4c1a      	ldr	r4, [pc, #104]	; (808033c <_Z12setLoopDelay6String+0x108>)
 80802d2:	4601      	mov	r1, r0
 80802d4:	4620      	mov	r0, r4
 80802d6:	f001 ffc9 	bl	808226c <_ZN6StringaSERKS_>
 80802da:	a816      	add	r0, sp, #88	; 0x58
 80802dc:	f001 ff4c 	bl	8082178 <_ZN6StringD1Ev>
                    String("\"LoopDelay\":") + String("\"") + String::format("%u", loopDelay) +
 80802e0:	a812      	add	r0, sp, #72	; 0x48
 80802e2:	f001 ff49 	bl	8082178 <_ZN6StringD1Ev>
 80802e6:	a80e      	add	r0, sp, #56	; 0x38
 80802e8:	f001 ff46 	bl	8082178 <_ZN6StringD1Ev>
 80802ec:	a806      	add	r0, sp, #24
 80802ee:	f001 ff43 	bl	8082178 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80802f2:	a80a      	add	r0, sp, #40	; 0x28
 80802f4:	f001 ff40 	bl	8082178 <_ZN6StringD1Ev>
    loopDelayData = String("{") +
 80802f8:	a802      	add	r0, sp, #8
 80802fa:	f001 ff3d 	bl	8082178 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80802fe:	4b10      	ldr	r3, [pc, #64]	; (8080340 <_Z12setLoopDelay6String+0x10c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080300:	4910      	ldr	r1, [pc, #64]	; (8080344 <_Z12setLoopDelay6String+0x110>)
 8080302:	781b      	ldrb	r3, [r3, #0]
 8080304:	a816      	add	r0, sp, #88	; 0x58
 8080306:	f88d 3000 	strb.w	r3, [sp]
 808030a:	6822      	ldr	r2, [r4, #0]
 808030c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080310:	f002 fc70 	bl	8082bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080314:	a817      	add	r0, sp, #92	; 0x5c
 8080316:	f7ff ff76 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808031a:	2000      	movs	r0, #0
 808031c:	b01a      	add	sp, #104	; 0x68
 808031e:	bd70      	pop	{r4, r5, r6, pc}
 8080320:	20000000 	.word	0x20000000
 8080324:	08086182 	.word	0x08086182
 8080328:	0808616a 	.word	0x0808616a
 808032c:	08086185 	.word	0x08086185
 8080330:	08086187 	.word	0x08086187
 8080334:	08086194 	.word	0x08086194
 8080338:	08086196 	.word	0x08086196
 808033c:	20000220 	.word	0x20000220
 8080340:	200001ec 	.word	0x200001ec
 8080344:	08086199 	.word	0x08086199

08080348 <setup>:

void setup()
{
 8080348:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
    //
    Serial.printlnf("Startup: Running Setup");
 808034c:	f002 fe7e 	bl	808304c <_Z16_fetch_usbserialv>
 8080350:	492d      	ldr	r1, [pc, #180]	; (8080408 <setup+0xc0>)
 8080352:	f7ff fed6 	bl	8080102 <_ZN5Print8printlnfEPKcz>
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
 8080356:	2400      	movs	r4, #0
        conn_prop.size = sizeof(conn_prop);
 8080358:	2308      	movs	r3, #8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 808035a:	2601      	movs	r6, #1
        return register_function(call_raw_user_function, (void*)func, funcKey);
 808035c:	4d2b      	ldr	r5, [pc, #172]	; (808040c <setup+0xc4>)
        conn_prop.size = sizeof(conn_prop);
 808035e:	f8ad 3008 	strh.w	r3, [sp, #8]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8080362:	aa02      	add	r2, sp, #8
 8080364:	4623      	mov	r3, r4
 8080366:	f247 5130 	movw	r1, #30000	; 0x7530
 808036a:	4620      	mov	r0, r4
        particle::protocol::connection_properties_t conn_prop = {0};
 808036c:	f8ad 400a 	strh.w	r4, [sp, #10]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 8080370:	9603      	str	r6, [sp, #12]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8080372:	f001 fe01 	bl	8081f78 <spark_set_connection_property>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080376:	4628      	mov	r0, r5
 8080378:	4a25      	ldr	r2, [pc, #148]	; (8080410 <setup+0xc8>)
 808037a:	4926      	ldr	r1, [pc, #152]	; (8080414 <setup+0xcc>)
 808037c:	f002 fb47 	bl	8082a0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080380:	4628      	mov	r0, r5
 8080382:	4a25      	ldr	r2, [pc, #148]	; (8080418 <setup+0xd0>)
 8080384:	4925      	ldr	r1, [pc, #148]	; (808041c <setup+0xd4>)
 8080386:	f002 fb42 	bl	8082a0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808038a:	4628      	mov	r0, r5
 808038c:	4a24      	ldr	r2, [pc, #144]	; (8080420 <setup+0xd8>)
 808038e:	4925      	ldr	r1, [pc, #148]	; (8080424 <setup+0xdc>)
 8080390:	f002 fb3d 	bl	8082a0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 8080394:	4924      	ldr	r1, [pc, #144]	; (8080428 <setup+0xe0>)
 8080396:	4623      	mov	r3, r4
 8080398:	4622      	mov	r2, r4
 808039a:	e9cd 4400 	strd	r4, r4, [sp]
 808039e:	4823      	ldr	r0, [pc, #140]	; (808042c <setup+0xe4>)
 80803a0:	f001 fdda 	bl	8081f58 <spark_subscribe>
    Particle.function("SetZero", setZero);

    // Subscribe to the webhook response event
    Particle.subscribe("hook-response/startup", startupHandler, MY_DEVICES);

    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);   // Clear out averaging array
 80803a4:	f04f 0800 	mov.w	r8, #0
 80803a8:	f04f 0900 	mov.w	r9, #0
 80803ac:	2318      	movs	r3, #24
 80803ae:	4642      	mov	r2, r8
 80803b0:	9300      	str	r3, [sp, #0]
 80803b2:	481f      	ldr	r0, [pc, #124]	; (8080430 <setup+0xe8>)
 80803b4:	464b      	mov	r3, r9
 80803b6:	f001 f97e 	bl	80816b6 <_ZN14RunningAverage9fillValueEdh>
    shortAveragingArray.fillValue(0.0, SHORT_SAMPLE_SIZE); // Clear out averaging array
 80803ba:	2303      	movs	r3, #3
 80803bc:	4642      	mov	r2, r8
 80803be:	9300      	str	r3, [sp, #0]
 80803c0:	481c      	ldr	r0, [pc, #112]	; (8080434 <setup+0xec>)
 80803c2:	464b      	mov	r3, r9
 80803c4:	f001 f977 	bl	80816b6 <_ZN14RunningAverage9fillValueEdh>
    pinMode(onboardLed, OUTPUT);                           //Setup activity led so we can blink it to show we're rolling...
 80803c8:	4b1b      	ldr	r3, [pc, #108]	; (8080438 <setup+0xf0>)
    //   setADCSampleTime(ADC_SampleTime_3Cycles);
    //set ADC gain  ads.setGain(GAIN_ONE);        // 1x gain   +/- 4.096V  1 bit=0.125mV
    //Setup ADC
    ads.setGain(GAIN_TWO); //GAIN_ONE for ...
 80803ca:	4d1c      	ldr	r5, [pc, #112]	; (808043c <setup+0xf4>)
    pinMode(onboardLed, OUTPUT);                           //Setup activity led so we can blink it to show we're rolling...
 80803cc:	8818      	ldrh	r0, [r3, #0]
 80803ce:	4631      	mov	r1, r6
 80803d0:	f003 f8ce 	bl	8083570 <pinMode>
    ads.setGain(GAIN_TWO); //GAIN_ONE for ...
 80803d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80803d8:	4628      	mov	r0, r5
 80803da:	f001 f9d6 	bl	808178a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    ads.begin();
 80803de:	4628      	mov	r0, r5
 80803e0:	f001 f9cc 	bl	808177c <_ZN16Adafruit_ADS10155beginEv>
 80803e4:	4b16      	ldr	r3, [pc, #88]	; (8080440 <setup+0xf8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80803e6:	4622      	mov	r2, r4
 80803e8:	781b      	ldrb	r3, [r3, #0]
 80803ea:	4916      	ldr	r1, [pc, #88]	; (8080444 <setup+0xfc>)
 80803ec:	f88d 3000 	strb.w	r3, [sp]
 80803f0:	a802      	add	r0, sp, #8
 80803f2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80803f6:	f002 fbfd 	bl	8082bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80803fa:	a803      	add	r0, sp, #12
 80803fc:	f7ff ff03 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("startup", NULL, 600, PRIVATE); //TODO:  Specify and send sensor ID so as to retrieve correct offset.
}
 8080400:	b004      	add	sp, #16
 8080402:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8080406:	bf00      	nop
 8080408:	080861ac 	.word	0x080861ac
 808040c:	080829e3 	.word	0x080829e3
 8080410:	080861c3 	.word	0x080861c3
 8080414:	08080169 	.word	0x08080169
 8080418:	080861d6 	.word	0x080861d6
 808041c:	08080235 	.word	0x08080235
 8080420:	080861e3 	.word	0x080861e3
 8080424:	08080121 	.word	0x08080121
 8080428:	08080be9 	.word	0x08080be9
 808042c:	080861eb 	.word	0x080861eb
 8080430:	20000208 	.word	0x20000208
 8080434:	200004a8 	.word	0x200004a8
 8080438:	20000004 	.word	0x20000004
 808043c:	200001ee 	.word	0x200001ee
 8080440:	200001ec 	.word	0x200001ec
 8080444:	080861f9 	.word	0x080861f9

08080448 <loop>:
//
// Main loop
//
void loop()
{
 8080448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808044c:	b0f8      	sub	sp, #480	; 0x1e0
 808044e:	f001 fb8d 	bl	8081b6c <HAL_Timer_Get_Milli_Seconds>
    if ((millis() >= REBOOT_INTERVAL_IN_MS))
 8080452:	4b27      	ldr	r3, [pc, #156]	; (80804f0 <loop+0xa8>)
 8080454:	4298      	cmp	r0, r3
 8080456:	d911      	bls.n	808047c <loop+0x34>
    {
        //Reboot regularly to freshen up
        // do things here  before reset and then push the button
        sos();
 8080458:	f7ff fec9 	bl	80801ee <_Z3sosv>
 808045c:	4b25      	ldr	r3, [pc, #148]	; (80804f4 <loop+0xac>)
 808045e:	4a26      	ldr	r2, [pc, #152]	; (80804f8 <loop+0xb0>)
 8080460:	781b      	ldrb	r3, [r3, #0]
 8080462:	4926      	ldr	r1, [pc, #152]	; (80804fc <loop+0xb4>)
 8080464:	f88d 3000 	strb.w	r3, [sp]
 8080468:	a86b      	add	r0, sp, #428	; 0x1ac
 808046a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 808046e:	f002 fbc1 	bl	8082bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080472:	a86c      	add	r0, sp, #432	; 0x1b0
 8080474:	f7ff fec7 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Debug", "Reboot intiated", 300, PRIVATE);
        System.reset();
 8080478:	f001 fe0c 	bl	8082094 <_ZN11SystemClass5resetEv>
    }

    if ((resetFlag) && (millis() - rebootSync >= REBOOT_DELAY_IN_MS))
 808047c:	4b20      	ldr	r3, [pc, #128]	; (8080500 <loop+0xb8>)
 808047e:	781b      	ldrb	r3, [r3, #0]
 8080480:	b1d3      	cbz	r3, 80804b8 <loop+0x70>
 8080482:	f001 fb73 	bl	8081b6c <HAL_Timer_Get_Milli_Seconds>
 8080486:	4b1f      	ldr	r3, [pc, #124]	; (8080504 <loop+0xbc>)
 8080488:	681b      	ldr	r3, [r3, #0]
 808048a:	1ac0      	subs	r0, r0, r3
 808048c:	f643 2397 	movw	r3, #14999	; 0x3a97
 8080490:	4298      	cmp	r0, r3
 8080492:	d911      	bls.n	80804b8 <loop+0x70>
    {
        // do things here  before reset and then push the button
        sos();
 8080494:	f7ff feab 	bl	80801ee <_Z3sosv>
 8080498:	4b16      	ldr	r3, [pc, #88]	; (80804f4 <loop+0xac>)
 808049a:	4a1b      	ldr	r2, [pc, #108]	; (8080508 <loop+0xc0>)
 808049c:	781b      	ldrb	r3, [r3, #0]
 808049e:	4917      	ldr	r1, [pc, #92]	; (80804fc <loop+0xb4>)
 80804a0:	f88d 3000 	strb.w	r3, [sp]
 80804a4:	a86b      	add	r0, sp, #428	; 0x1ac
 80804a6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80804aa:	f002 fba3 	bl	8082bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80804ae:	a86c      	add	r0, sp, #432	; 0x1b0
 80804b0:	f7ff fea9 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Debug", "Remote Reset Initiated", 300, PRIVATE);
        System.reset();
 80804b4:	f001 fdee 	bl	8082094 <_ZN11SystemClass5resetEv>
    }

    time_t time = Time.now();
 80804b8:	f002 f94f 	bl	808275a <_ZN9TimeClass3nowEv>

    CellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();
 80804bc:	4913      	ldr	r1, [pc, #76]	; (808050c <loop+0xc4>)
    time_t time = Time.now();
 80804be:	4604      	mov	r4, r0
    CellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();
 80804c0:	a86b      	add	r0, sp, #428	; 0x1ac
 80804c2:	f001 faa9 	bl	8081a18 <_ZNK19CellularHelperClass11getRSSIQualEv>

    if (!startupCompleted)
 80804c6:	4b12      	ldr	r3, [pc, #72]	; (8080510 <loop+0xc8>)
 80804c8:	781b      	ldrb	r3, [r3, #0]
 80804ca:	bb2b      	cbnz	r3, 8080518 <loop+0xd0>
    {
        blinkShort(4);             // Let know i'm waiting...
 80804cc:	2004      	movs	r0, #4
 80804ce:	f7ff fe83 	bl	80801d8 <_Z10blinkShorti>
        delay(STARTUP_LOOP_DELAY); //Wait a bit to  let syseem run ok
 80804d2:	f242 7010 	movw	r0, #10000	; 0x2710

    // Wait nn seconds
    if (zeroingInProgress)
        delay(ZEROING_LOOP_DELAY); //Use shorter delay when averaging for zero...
    else
        delay(loopDelay); //10 min: 600,000 1 min: 60,000 10 sec: 10,000
 80804d6:	f002 f95b 	bl	8082790 <delay>
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80804da:	4b0e      	ldr	r3, [pc, #56]	; (8080514 <loop+0xcc>)
 80804dc:	a872      	add	r0, sp, #456	; 0x1c8
 80804de:	936b      	str	r3, [sp, #428]	; 0x1ac
 80804e0:	f001 fe4a 	bl	8082178 <_ZN6StringD1Ev>
 80804e4:	a86e      	add	r0, sp, #440	; 0x1b8
 80804e6:	f001 fe47 	bl	8082178 <_ZN6StringD1Ev>
}
 80804ea:	b078      	add	sp, #480	; 0x1e0
 80804ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80804f0:	481907ff 	.word	0x481907ff
 80804f4:	200001ec 	.word	0x200001ec
 80804f8:	08086201 	.word	0x08086201
 80804fc:	08086211 	.word	0x08086211
 8080500:	200004a0 	.word	0x200004a0
 8080504:	2000049c 	.word	0x2000049c
 8080508:	08086217 	.word	0x08086217
 808050c:	200004f1 	.word	0x200004f1
 8080510:	200004c0 	.word	0x200004c0
 8080514:	0808645c 	.word	0x0808645c
    blinkShort(1); //Signal normal running loop
 8080518:	2001      	movs	r0, #1
 808051a:	f7ff fe5d 	bl	80801d8 <_Z10blinkShorti>
    waterLevelSampleReading = ads.readADC_SingleEnded(0); //FOR NDC setup -- ads.readADC_Differential_0_1() for ...;
 808051e:	2100      	movs	r1, #0
 8080520:	48bb      	ldr	r0, [pc, #748]	; (8080810 <loop+0x3c8>)
 8080522:	f001 f934 	bl	808178e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8080526:	4abb      	ldr	r2, [pc, #748]	; (8080814 <loop+0x3cc>)
    if (waterLevelSampleReading > 1 and waterLevelSampleReading <= MAX_16_BIT_ANALOGUE_BIT_VALUE)
 8080528:	1e83      	subs	r3, r0, #2
    waterLevelSampleReading = ads.readADC_SingleEnded(0); //FOR NDC setup -- ads.readADC_Differential_0_1() for ...;
 808052a:	6010      	str	r0, [r2, #0]
    if (waterLevelSampleReading > 1 and waterLevelSampleReading <= MAX_16_BIT_ANALOGUE_BIT_VALUE)
 808052c:	f647 5298 	movw	r2, #32152	; 0x7d98
 8080530:	4293      	cmp	r3, r2
 8080532:	d81d      	bhi.n	8080570 <loop+0x128>
        waterLevelInMm = (waterLevelSampleReading - FOUR_MA_OFFSET_IN_BITS) * (SENSOR_FULL_RANGE_IN_MM / (MAX_16_BIT_ANALOGUE_BIT_VALUE - FOUR_MA_OFFSET_IN_BITS)) - zeroOffsetInMm;
 8080534:	f003 fa02 	bl	808393c <__aeabi_i2d>
 8080538:	a3b1      	add	r3, pc, #708	; (adr r3, 8080800 <loop+0x3b8>)
 808053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808053e:	f003 f8af 	bl	80836a0 <__aeabi_dsub>
 8080542:	a3b1      	add	r3, pc, #708	; (adr r3, 8080808 <loop+0x3c0>)
 8080544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080548:	f003 fa62 	bl	8083a10 <__aeabi_dmul>
 808054c:	4bb2      	ldr	r3, [pc, #712]	; (8080818 <loop+0x3d0>)
 808054e:	4db3      	ldr	r5, [pc, #716]	; (808081c <loop+0x3d4>)
 8080550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080554:	f003 f8a4 	bl	80836a0 <__aeabi_dsub>
 8080558:	4602      	mov	r2, r0
 808055a:	460b      	mov	r3, r1
        longAveragingArray.addValue(waterLevelInMm);
 808055c:	48b0      	ldr	r0, [pc, #704]	; (8080820 <loop+0x3d8>)
        waterLevelInMm = (waterLevelSampleReading - FOUR_MA_OFFSET_IN_BITS) * (SENSOR_FULL_RANGE_IN_MM / (MAX_16_BIT_ANALOGUE_BIT_VALUE - FOUR_MA_OFFSET_IN_BITS)) - zeroOffsetInMm;
 808055e:	e9c5 2300 	strd	r2, r3, [r5]
        longAveragingArray.addValue(waterLevelInMm);
 8080562:	f001 f868 	bl	8081636 <_ZN14RunningAverage8addValueEd>
        shortAveragingArray.addValue(waterLevelInMm);
 8080566:	e9d5 2300 	ldrd	r2, r3, [r5]
 808056a:	48ae      	ldr	r0, [pc, #696]	; (8080824 <loop+0x3dc>)
 808056c:	f001 f863 	bl	8081636 <_ZN14RunningAverage8addValueEd>
    Serial.printlnf(String::format("%i", sample) + ", " + String::format("%u", waterLevelSampleReading) + ", " + String::format("%4.1f", waterLevelInMm) + ", " + String::format("%4.1f", longAveragingArray.getAverage()) + ", " + String::format("%4.1f", shortAveragingArray.getAverage()));
 8080570:	f002 fd6c 	bl	808304c <_Z16_fetch_usbserialv>
 8080574:	4dac      	ldr	r5, [pc, #688]	; (8080828 <loop+0x3e0>)
 8080576:	4606      	mov	r6, r0
 8080578:	682a      	ldr	r2, [r5, #0]
 808057a:	49ac      	ldr	r1, [pc, #688]	; (808082c <loop+0x3e4>)
 808057c:	a853      	add	r0, sp, #332	; 0x14c
 808057e:	f001 ff21 	bl	80823c4 <_ZN6String6formatEPKcz>
	StringSumHelper(const String &s) : String(s) {}
 8080582:	a953      	add	r1, sp, #332	; 0x14c
 8080584:	a857      	add	r0, sp, #348	; 0x15c
 8080586:	f001 fe80 	bl	808228a <_ZN6StringC1ERKS_>
 808058a:	49a9      	ldr	r1, [pc, #676]	; (8080830 <loop+0x3e8>)
 808058c:	a857      	add	r0, sp, #348	; 0x15c
 808058e:	f001 fef2 	bl	8082376 <_ZplRK15StringSumHelperPKc>
 8080592:	4607      	mov	r7, r0
 8080594:	4b9f      	ldr	r3, [pc, #636]	; (8080814 <loop+0x3cc>)
 8080596:	49a7      	ldr	r1, [pc, #668]	; (8080834 <loop+0x3ec>)
 8080598:	681a      	ldr	r2, [r3, #0]
 808059a:	a85b      	add	r0, sp, #364	; 0x16c
 808059c:	f001 ff12 	bl	80823c4 <_ZN6String6formatEPKcz>
 80805a0:	4638      	mov	r0, r7
 80805a2:	a95b      	add	r1, sp, #364	; 0x16c
 80805a4:	f001 fedb 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80805a8:	49a1      	ldr	r1, [pc, #644]	; (8080830 <loop+0x3e8>)
 80805aa:	f001 fee4 	bl	8082376 <_ZplRK15StringSumHelperPKc>
 80805ae:	4607      	mov	r7, r0
 80805b0:	4b9a      	ldr	r3, [pc, #616]	; (808081c <loop+0x3d4>)
 80805b2:	49a1      	ldr	r1, [pc, #644]	; (8080838 <loop+0x3f0>)
 80805b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805b8:	a85f      	add	r0, sp, #380	; 0x17c
 80805ba:	f001 ff03 	bl	80823c4 <_ZN6String6formatEPKcz>
 80805be:	4638      	mov	r0, r7
 80805c0:	a95f      	add	r1, sp, #380	; 0x17c
 80805c2:	f001 fecc 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80805c6:	499a      	ldr	r1, [pc, #616]	; (8080830 <loop+0x3e8>)
 80805c8:	f001 fed5 	bl	8082376 <_ZplRK15StringSumHelperPKc>
 80805cc:	4607      	mov	r7, r0
 80805ce:	4894      	ldr	r0, [pc, #592]	; (8080820 <loop+0x3d8>)
 80805d0:	f001 f861 	bl	8081696 <_ZN14RunningAverage10getAverageEv>
 80805d4:	4602      	mov	r2, r0
 80805d6:	460b      	mov	r3, r1
 80805d8:	a863      	add	r0, sp, #396	; 0x18c
 80805da:	4997      	ldr	r1, [pc, #604]	; (8080838 <loop+0x3f0>)
 80805dc:	f001 fef2 	bl	80823c4 <_ZN6String6formatEPKcz>
 80805e0:	4638      	mov	r0, r7
 80805e2:	a963      	add	r1, sp, #396	; 0x18c
 80805e4:	f001 febb 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80805e8:	4991      	ldr	r1, [pc, #580]	; (8080830 <loop+0x3e8>)
 80805ea:	f001 fec4 	bl	8082376 <_ZplRK15StringSumHelperPKc>
 80805ee:	4607      	mov	r7, r0
 80805f0:	488c      	ldr	r0, [pc, #560]	; (8080824 <loop+0x3dc>)
 80805f2:	f001 f850 	bl	8081696 <_ZN14RunningAverage10getAverageEv>
 80805f6:	4602      	mov	r2, r0
 80805f8:	460b      	mov	r3, r1
 80805fa:	a867      	add	r0, sp, #412	; 0x19c
 80805fc:	498e      	ldr	r1, [pc, #568]	; (8080838 <loop+0x3f0>)
 80805fe:	f001 fee1 	bl	80823c4 <_ZN6String6formatEPKcz>
 8080602:	a967      	add	r1, sp, #412	; 0x19c
 8080604:	4638      	mov	r0, r7
 8080606:	f001 feaa 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 808060a:	6801      	ldr	r1, [r0, #0]
 808060c:	4630      	mov	r0, r6
 808060e:	f7ff fd78 	bl	8080102 <_ZN5Print8printlnfEPKcz>
 8080612:	a867      	add	r0, sp, #412	; 0x19c
 8080614:	f001 fdb0 	bl	8082178 <_ZN6StringD1Ev>
 8080618:	a863      	add	r0, sp, #396	; 0x18c
 808061a:	f001 fdad 	bl	8082178 <_ZN6StringD1Ev>
 808061e:	a85f      	add	r0, sp, #380	; 0x17c
 8080620:	f001 fdaa 	bl	8082178 <_ZN6StringD1Ev>
 8080624:	a85b      	add	r0, sp, #364	; 0x16c
 8080626:	f001 fda7 	bl	8082178 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808062a:	a857      	add	r0, sp, #348	; 0x15c
 808062c:	f001 fda4 	bl	8082178 <_ZN6StringD1Ev>
 8080630:	a853      	add	r0, sp, #332	; 0x14c
 8080632:	f001 fda1 	bl	8082178 <_ZN6StringD1Ev>
    if (sample == LONG_SAMPLE_SIZE)
 8080636:	f8d5 8000 	ldr.w	r8, [r5]
 808063a:	f1b8 0f18 	cmp.w	r8, #24
 808063e:	f040 808b 	bne.w	8080758 <loop+0x310>
        sample = -1;           //  Hit the buffers no need to count anymore
 8080642:	f04f 33ff 	mov.w	r3, #4294967295
        if (zeroingInProgress) //This is true if a cloud call has been made to set zero
 8080646:	4f7d      	ldr	r7, [pc, #500]	; (808083c <loop+0x3f4>)
        sample = -1;           //  Hit the buffers no need to count anymore
 8080648:	602b      	str	r3, [r5, #0]
        if (zeroingInProgress) //This is true if a cloud call has been made to set zero
 808064a:	783b      	ldrb	r3, [r7, #0]
 808064c:	2b00      	cmp	r3, #0
 808064e:	f000 8083 	beq.w	8080758 <loop+0x310>
            zeroOffsetInMm = longAveragingArray.getAverage();
 8080652:	4873      	ldr	r0, [pc, #460]	; (8080820 <loop+0x3d8>)
 8080654:	f001 f81f 	bl	8081696 <_ZN14RunningAverage10getAverageEv>
 8080658:	4e6f      	ldr	r6, [pc, #444]	; (8080818 <loop+0x3d0>)
 808065a:	e9c6 0100 	strd	r0, r1, [r6]
            longAveragingArray.clear();
 808065e:	4870      	ldr	r0, [pc, #448]	; (8080820 <loop+0x3d8>)
 8080660:	f000 ffc8 	bl	80815f4 <_ZN14RunningAverage5clearEv>
            longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
 8080664:	2200      	movs	r2, #0
 8080666:	2300      	movs	r3, #0
 8080668:	486d      	ldr	r0, [pc, #436]	; (8080820 <loop+0x3d8>)
 808066a:	f8cd 8000 	str.w	r8, [sp]
 808066e:	f001 f822 	bl	80816b6 <_ZN14RunningAverage9fillValueEdh>
            shortAveragingArray.clear();
 8080672:	486c      	ldr	r0, [pc, #432]	; (8080824 <loop+0x3dc>)
 8080674:	f000 ffbe 	bl	80815f4 <_ZN14RunningAverage5clearEv>
            shortAveragingArray.fillValue(0.0, SHORT_SAMPLE_SIZE);
 8080678:	2303      	movs	r3, #3
 808067a:	2200      	movs	r2, #0
 808067c:	4869      	ldr	r0, [pc, #420]	; (8080824 <loop+0x3dc>)
 808067e:	9300      	str	r3, [sp, #0]
 8080680:	2300      	movs	r3, #0
 8080682:	f001 f818 	bl	80816b6 <_ZN14RunningAverage9fillValueEdh>
            zeroData = String("{") +
 8080686:	496e      	ldr	r1, [pc, #440]	; (8080840 <loop+0x3f8>)
 8080688:	a853      	add	r0, sp, #332	; 0x14c
 808068a:	f001 fdbf 	bl	808220c <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 808068e:	a953      	add	r1, sp, #332	; 0x14c
 8080690:	a85b      	add	r0, sp, #364	; 0x16c
 8080692:	f001 fdfa 	bl	808228a <_ZN6StringC1ERKS_>
                       String("\"ZeroOffsetInMm\":") + String("\"") + String::format("%4.1f", zeroOffsetInMm) +
 8080696:	496b      	ldr	r1, [pc, #428]	; (8080844 <loop+0x3fc>)
 8080698:	a857      	add	r0, sp, #348	; 0x15c
 808069a:	f001 fdb7 	bl	808220c <_ZN6StringC1EPKc>
 808069e:	a957      	add	r1, sp, #348	; 0x15c
 80806a0:	a85b      	add	r0, sp, #364	; 0x16c
 80806a2:	f001 fe5c 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80806a6:	4605      	mov	r5, r0
 80806a8:	4967      	ldr	r1, [pc, #412]	; (8080848 <loop+0x400>)
 80806aa:	a85f      	add	r0, sp, #380	; 0x17c
 80806ac:	f001 fdae 	bl	808220c <_ZN6StringC1EPKc>
 80806b0:	4628      	mov	r0, r5
 80806b2:	a95f      	add	r1, sp, #380	; 0x17c
 80806b4:	f001 fe53 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80806b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80806bc:	4605      	mov	r5, r0
 80806be:	495e      	ldr	r1, [pc, #376]	; (8080838 <loop+0x3f0>)
 80806c0:	a863      	add	r0, sp, #396	; 0x18c
 80806c2:	f001 fe7f 	bl	80823c4 <_ZN6String6formatEPKcz>
 80806c6:	4628      	mov	r0, r5
 80806c8:	a963      	add	r1, sp, #396	; 0x18c
 80806ca:	f001 fe48 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80806ce:	4605      	mov	r5, r0
                       String("\"}");
 80806d0:	495e      	ldr	r1, [pc, #376]	; (808084c <loop+0x404>)
 80806d2:	a867      	add	r0, sp, #412	; 0x19c
 80806d4:	f001 fd9a 	bl	808220c <_ZN6StringC1EPKc>
 80806d8:	4628      	mov	r0, r5
 80806da:	a967      	add	r1, sp, #412	; 0x19c
 80806dc:	f001 fe3f 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80806e0:	4e5b      	ldr	r6, [pc, #364]	; (8080850 <loop+0x408>)
 80806e2:	4601      	mov	r1, r0
 80806e4:	4630      	mov	r0, r6
 80806e6:	f001 fdc1 	bl	808226c <_ZN6StringaSERKS_>
 80806ea:	a867      	add	r0, sp, #412	; 0x19c
 80806ec:	f001 fd44 	bl	8082178 <_ZN6StringD1Ev>
                       String("\"ZeroOffsetInMm\":") + String("\"") + String::format("%4.1f", zeroOffsetInMm) +
 80806f0:	a863      	add	r0, sp, #396	; 0x18c
 80806f2:	f001 fd41 	bl	8082178 <_ZN6StringD1Ev>
 80806f6:	a85f      	add	r0, sp, #380	; 0x17c
 80806f8:	f001 fd3e 	bl	8082178 <_ZN6StringD1Ev>
 80806fc:	a857      	add	r0, sp, #348	; 0x15c
 80806fe:	f001 fd3b 	bl	8082178 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080702:	a85b      	add	r0, sp, #364	; 0x16c
 8080704:	f001 fd38 	bl	8082178 <_ZN6StringD1Ev>
            zeroData = String("{") +
 8080708:	a853      	add	r0, sp, #332	; 0x14c
 808070a:	f001 fd35 	bl	8082178 <_ZN6StringD1Ev>
 808070e:	4b51      	ldr	r3, [pc, #324]	; (8080854 <loop+0x40c>)
 8080710:	4951      	ldr	r1, [pc, #324]	; (8080858 <loop+0x410>)
 8080712:	781b      	ldrb	r3, [r3, #0]
 8080714:	a867      	add	r0, sp, #412	; 0x19c
 8080716:	f88d 3000 	strb.w	r3, [sp]
 808071a:	6832      	ldr	r2, [r6, #0]
 808071c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080720:	f002 fa68 	bl	8082bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080724:	a868      	add	r0, sp, #416	; 0x1a0
 8080726:	f7ff fd6e 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Serial.printlnf("New zeroOffset (saved to cloud): " + zeroData);
 808072a:	f002 fc8f 	bl	808304c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 808072e:	494b      	ldr	r1, [pc, #300]	; (808085c <loop+0x414>)
 8080730:	4605      	mov	r5, r0
 8080732:	a867      	add	r0, sp, #412	; 0x19c
 8080734:	f001 fd6a 	bl	808220c <_ZN6StringC1EPKc>
 8080738:	4631      	mov	r1, r6
 808073a:	a867      	add	r0, sp, #412	; 0x19c
 808073c:	f001 fe0f 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080740:	6801      	ldr	r1, [r0, #0]
 8080742:	4628      	mov	r0, r5
 8080744:	f7ff fcdd 	bl	8080102 <_ZN5Print8printlnfEPKcz>
class StringSumHelper : public String
 8080748:	a867      	add	r0, sp, #412	; 0x19c
 808074a:	f001 fd15 	bl	8082178 <_ZN6StringD1Ev>
            blinkLong(5); // Signal zeroing complete.
 808074e:	2005      	movs	r0, #5
 8080750:	f7ff fd36 	bl	80801c0 <_Z9blinkLongi>
            zeroingInProgress = false;
 8080754:	2300      	movs	r3, #0
 8080756:	703b      	strb	r3, [r7, #0]
    data = String("{") +
 8080758:	4939      	ldr	r1, [pc, #228]	; (8080840 <loop+0x3f8>)
 808075a:	a803      	add	r0, sp, #12
 808075c:	f001 fd56 	bl	808220c <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8080760:	a903      	add	r1, sp, #12
 8080762:	a80b      	add	r0, sp, #44	; 0x2c
 8080764:	f001 fd91 	bl	808228a <_ZN6StringC1ERKS_>
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
 8080768:	493d      	ldr	r1, [pc, #244]	; (8080860 <loop+0x418>)
 808076a:	a807      	add	r0, sp, #28
 808076c:	f001 fd4e 	bl	808220c <_ZN6StringC1EPKc>
 8080770:	a907      	add	r1, sp, #28
 8080772:	a80b      	add	r0, sp, #44	; 0x2c
 8080774:	f001 fdf3 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080778:	4605      	mov	r5, r0
 808077a:	4933      	ldr	r1, [pc, #204]	; (8080848 <loop+0x400>)
 808077c:	a80f      	add	r0, sp, #60	; 0x3c
 808077e:	f001 fd45 	bl	808220c <_ZN6StringC1EPKc>
 8080782:	4628      	mov	r0, r5
 8080784:	a90f      	add	r1, sp, #60	; 0x3c
 8080786:	f001 fdea 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 808078a:	4605      	mov	r5, r0
 808078c:	4b35      	ldr	r3, [pc, #212]	; (8080864 <loop+0x41c>)
 808078e:	4622      	mov	r2, r4
 8080790:	681b      	ldr	r3, [r3, #0]
 8080792:	4935      	ldr	r1, [pc, #212]	; (8080868 <loop+0x420>)
 8080794:	9300      	str	r3, [sp, #0]
 8080796:	a813      	add	r0, sp, #76	; 0x4c
 8080798:	17e3      	asrs	r3, r4, #31
 808079a:	f001 ff7f 	bl	808269c <_ZN9TimeClass6formatExPKc>
 808079e:	a913      	add	r1, sp, #76	; 0x4c
 80807a0:	4628      	mov	r0, r5
 80807a2:	f001 fddc 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80807a6:	4604      	mov	r4, r0
 80807a8:	4930      	ldr	r1, [pc, #192]	; (808086c <loop+0x424>)
 80807aa:	a817      	add	r0, sp, #92	; 0x5c
 80807ac:	f001 fd2e 	bl	808220c <_ZN6StringC1EPKc>
 80807b0:	4620      	mov	r0, r4
 80807b2:	a917      	add	r1, sp, #92	; 0x5c
 80807b4:	f001 fdd3 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80807b8:	4604      	mov	r4, r0
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
 80807ba:	492d      	ldr	r1, [pc, #180]	; (8080870 <loop+0x428>)
 80807bc:	a81b      	add	r0, sp, #108	; 0x6c
 80807be:	f001 fd25 	bl	808220c <_ZN6StringC1EPKc>
 80807c2:	4620      	mov	r0, r4
 80807c4:	a91b      	add	r1, sp, #108	; 0x6c
 80807c6:	f001 fdca 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80807ca:	4604      	mov	r4, r0
 80807cc:	491e      	ldr	r1, [pc, #120]	; (8080848 <loop+0x400>)
 80807ce:	a81f      	add	r0, sp, #124	; 0x7c
 80807d0:	f001 fd1c 	bl	808220c <_ZN6StringC1EPKc>
 80807d4:	4620      	mov	r0, r4
 80807d6:	a91f      	add	r1, sp, #124	; 0x7c
 80807d8:	f001 fdc1 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80807dc:	e9dd 2376 	ldrd	r2, r3, [sp, #472]	; 0x1d8
 80807e0:	4604      	mov	r4, r0
 80807e2:	4924      	ldr	r1, [pc, #144]	; (8080874 <loop+0x42c>)
 80807e4:	a823      	add	r0, sp, #140	; 0x8c
 80807e6:	f001 fded 	bl	80823c4 <_ZN6String6formatEPKcz>
 80807ea:	4620      	mov	r0, r4
 80807ec:	a923      	add	r1, sp, #140	; 0x8c
 80807ee:	f001 fdb6 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80807f2:	4604      	mov	r4, r0
 80807f4:	491d      	ldr	r1, [pc, #116]	; (808086c <loop+0x424>)
 80807f6:	a827      	add	r0, sp, #156	; 0x9c
 80807f8:	e03e      	b.n	8080878 <loop+0x430>
 80807fa:	bf00      	nop
 80807fc:	f3af 8000 	nop.w
 8080800:	00000000 	.word	0x00000000
 8080804:	40b91e00 	.word	0x40b91e00
 8080808:	cdc369d9 	.word	0xcdc369d9
 808080c:	3fb3e751 	.word	0x3fb3e751
 8080810:	200001ee 	.word	0x200001ee
 8080814:	200004d0 	.word	0x200004d0
 8080818:	200004e8 	.word	0x200004e8
 808081c:	200004c8 	.word	0x200004c8
 8080820:	20000208 	.word	0x20000208
 8080824:	200004a8 	.word	0x200004a8
 8080828:	20000008 	.word	0x20000008
 808082c:	0808622e 	.word	0x0808622e
 8080830:	08086231 	.word	0x08086231
 8080834:	08086182 	.word	0x08086182
 8080838:	08086234 	.word	0x08086234
 808083c:	200004f0 	.word	0x200004f0
 8080840:	08086185 	.word	0x08086185
 8080844:	0808623a 	.word	0x0808623a
 8080848:	08086194 	.word	0x08086194
 808084c:	08086196 	.word	0x08086196
 8080850:	200004d4 	.word	0x200004d4
 8080854:	200001ec 	.word	0x200001ec
 8080858:	0808624c 	.word	0x0808624c
 808085c:	08086255 	.word	0x08086255
 8080860:	08086277 	.word	0x08086277
 8080864:	20000010 	.word	0x20000010
 8080868:	20000508 	.word	0x20000508
 808086c:	0808627d 	.word	0x0808627d
 8080870:	08086280 	.word	0x08086280
 8080874:	08086286 	.word	0x08086286
 8080878:	f001 fcc8 	bl	808220c <_ZN6StringC1EPKc>
 808087c:	4620      	mov	r0, r4
 808087e:	a927      	add	r1, sp, #156	; 0x9c
 8080880:	f001 fd6d 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080884:	4604      	mov	r4, r0
           String("\"LsBits\":") + String("\"") + String::format("%u", waterLevelSampleReading) + String("\",") +
 8080886:	4988      	ldr	r1, [pc, #544]	; (8080aa8 <loop+0x660>)
 8080888:	a82b      	add	r0, sp, #172	; 0xac
 808088a:	f001 fcbf 	bl	808220c <_ZN6StringC1EPKc>
 808088e:	4620      	mov	r0, r4
 8080890:	a92b      	add	r1, sp, #172	; 0xac
 8080892:	f001 fd64 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080896:	4604      	mov	r4, r0
 8080898:	4984      	ldr	r1, [pc, #528]	; (8080aac <loop+0x664>)
 808089a:	a82f      	add	r0, sp, #188	; 0xbc
 808089c:	f001 fcb6 	bl	808220c <_ZN6StringC1EPKc>
 80808a0:	4620      	mov	r0, r4
 80808a2:	a92f      	add	r1, sp, #188	; 0xbc
 80808a4:	f001 fd5b 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80808a8:	4604      	mov	r4, r0
 80808aa:	4b81      	ldr	r3, [pc, #516]	; (8080ab0 <loop+0x668>)
 80808ac:	4981      	ldr	r1, [pc, #516]	; (8080ab4 <loop+0x66c>)
 80808ae:	681a      	ldr	r2, [r3, #0]
 80808b0:	a833      	add	r0, sp, #204	; 0xcc
 80808b2:	f001 fd87 	bl	80823c4 <_ZN6String6formatEPKcz>
 80808b6:	4620      	mov	r0, r4
 80808b8:	a933      	add	r1, sp, #204	; 0xcc
 80808ba:	f001 fd50 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80808be:	4604      	mov	r4, r0
 80808c0:	497d      	ldr	r1, [pc, #500]	; (8080ab8 <loop+0x670>)
 80808c2:	a837      	add	r0, sp, #220	; 0xdc
 80808c4:	f001 fca2 	bl	808220c <_ZN6StringC1EPKc>
 80808c8:	4620      	mov	r0, r4
 80808ca:	a937      	add	r1, sp, #220	; 0xdc
 80808cc:	f001 fd47 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80808d0:	4604      	mov	r4, r0
           String("\"LsMm\":") + String("\"") + String::format("%4.1f", waterLevelInMm) + String("\",") +
 80808d2:	497a      	ldr	r1, [pc, #488]	; (8080abc <loop+0x674>)
 80808d4:	a83b      	add	r0, sp, #236	; 0xec
 80808d6:	f001 fc99 	bl	808220c <_ZN6StringC1EPKc>
 80808da:	4620      	mov	r0, r4
 80808dc:	a93b      	add	r1, sp, #236	; 0xec
 80808de:	f001 fd3e 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80808e2:	4604      	mov	r4, r0
 80808e4:	4971      	ldr	r1, [pc, #452]	; (8080aac <loop+0x664>)
 80808e6:	a83f      	add	r0, sp, #252	; 0xfc
 80808e8:	f001 fc90 	bl	808220c <_ZN6StringC1EPKc>
 80808ec:	4620      	mov	r0, r4
 80808ee:	a93f      	add	r1, sp, #252	; 0xfc
 80808f0:	f001 fd35 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80808f4:	4604      	mov	r4, r0
 80808f6:	4b72      	ldr	r3, [pc, #456]	; (8080ac0 <loop+0x678>)
 80808f8:	4972      	ldr	r1, [pc, #456]	; (8080ac4 <loop+0x67c>)
 80808fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80808fe:	a843      	add	r0, sp, #268	; 0x10c
 8080900:	f001 fd60 	bl	80823c4 <_ZN6String6formatEPKcz>
 8080904:	4620      	mov	r0, r4
 8080906:	a943      	add	r1, sp, #268	; 0x10c
 8080908:	f001 fd29 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 808090c:	4604      	mov	r4, r0
 808090e:	496a      	ldr	r1, [pc, #424]	; (8080ab8 <loop+0x670>)
 8080910:	a847      	add	r0, sp, #284	; 0x11c
 8080912:	f001 fc7b 	bl	808220c <_ZN6StringC1EPKc>
 8080916:	4620      	mov	r0, r4
 8080918:	a947      	add	r1, sp, #284	; 0x11c
 808091a:	f001 fd20 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 808091e:	4604      	mov	r4, r0
           String("\"LsAv\":") + String("\"") + String::format("%4.1f", longAveragingArray.getAverage()) + String("\",") +
 8080920:	4969      	ldr	r1, [pc, #420]	; (8080ac8 <loop+0x680>)
 8080922:	a84b      	add	r0, sp, #300	; 0x12c
 8080924:	f001 fc72 	bl	808220c <_ZN6StringC1EPKc>
 8080928:	4620      	mov	r0, r4
 808092a:	a94b      	add	r1, sp, #300	; 0x12c
 808092c:	f001 fd17 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080930:	4604      	mov	r4, r0
 8080932:	495e      	ldr	r1, [pc, #376]	; (8080aac <loop+0x664>)
 8080934:	a84f      	add	r0, sp, #316	; 0x13c
 8080936:	f001 fc69 	bl	808220c <_ZN6StringC1EPKc>
 808093a:	4620      	mov	r0, r4
 808093c:	a94f      	add	r1, sp, #316	; 0x13c
 808093e:	f001 fd0e 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080942:	4604      	mov	r4, r0
 8080944:	4861      	ldr	r0, [pc, #388]	; (8080acc <loop+0x684>)
 8080946:	f000 fea6 	bl	8081696 <_ZN14RunningAverage10getAverageEv>
 808094a:	4602      	mov	r2, r0
 808094c:	460b      	mov	r3, r1
 808094e:	a853      	add	r0, sp, #332	; 0x14c
 8080950:	495c      	ldr	r1, [pc, #368]	; (8080ac4 <loop+0x67c>)
 8080952:	f001 fd37 	bl	80823c4 <_ZN6String6formatEPKcz>
 8080956:	4620      	mov	r0, r4
 8080958:	a953      	add	r1, sp, #332	; 0x14c
 808095a:	f001 fd00 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 808095e:	4604      	mov	r4, r0
 8080960:	4955      	ldr	r1, [pc, #340]	; (8080ab8 <loop+0x670>)
 8080962:	a857      	add	r0, sp, #348	; 0x15c
 8080964:	f001 fc52 	bl	808220c <_ZN6StringC1EPKc>
 8080968:	4620      	mov	r0, r4
 808096a:	a957      	add	r1, sp, #348	; 0x15c
 808096c:	f001 fcf7 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080970:	4604      	mov	r4, r0
           String("\"LsShAv\":") + String("\"") + String::format("%4.1f", shortAveragingArray.getAverage()) +
 8080972:	4957      	ldr	r1, [pc, #348]	; (8080ad0 <loop+0x688>)
 8080974:	a85b      	add	r0, sp, #364	; 0x16c
 8080976:	f001 fc49 	bl	808220c <_ZN6StringC1EPKc>
 808097a:	4620      	mov	r0, r4
 808097c:	a95b      	add	r1, sp, #364	; 0x16c
 808097e:	f001 fcee 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080982:	4604      	mov	r4, r0
 8080984:	4949      	ldr	r1, [pc, #292]	; (8080aac <loop+0x664>)
 8080986:	a85f      	add	r0, sp, #380	; 0x17c
 8080988:	f001 fc40 	bl	808220c <_ZN6StringC1EPKc>
 808098c:	4620      	mov	r0, r4
 808098e:	a95f      	add	r1, sp, #380	; 0x17c
 8080990:	f001 fce5 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080994:	4604      	mov	r4, r0
 8080996:	484f      	ldr	r0, [pc, #316]	; (8080ad4 <loop+0x68c>)
 8080998:	f000 fe7d 	bl	8081696 <_ZN14RunningAverage10getAverageEv>
 808099c:	4602      	mov	r2, r0
 808099e:	460b      	mov	r3, r1
 80809a0:	a863      	add	r0, sp, #396	; 0x18c
 80809a2:	4948      	ldr	r1, [pc, #288]	; (8080ac4 <loop+0x67c>)
 80809a4:	f001 fd0e 	bl	80823c4 <_ZN6String6formatEPKcz>
 80809a8:	4620      	mov	r0, r4
 80809aa:	a963      	add	r1, sp, #396	; 0x18c
 80809ac:	f001 fcd7 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80809b0:	4604      	mov	r4, r0
           String("\"}");
 80809b2:	4949      	ldr	r1, [pc, #292]	; (8080ad8 <loop+0x690>)
 80809b4:	a867      	add	r0, sp, #412	; 0x19c
 80809b6:	f001 fc29 	bl	808220c <_ZN6StringC1EPKc>
 80809ba:	4620      	mov	r0, r4
 80809bc:	a967      	add	r1, sp, #412	; 0x19c
 80809be:	f001 fcce 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 80809c2:	4c46      	ldr	r4, [pc, #280]	; (8080adc <loop+0x694>)
 80809c4:	4601      	mov	r1, r0
 80809c6:	4620      	mov	r0, r4
 80809c8:	f001 fc50 	bl	808226c <_ZN6StringaSERKS_>
 80809cc:	a867      	add	r0, sp, #412	; 0x19c
 80809ce:	f001 fbd3 	bl	8082178 <_ZN6StringD1Ev>
           String("\"LsShAv\":") + String("\"") + String::format("%4.1f", shortAveragingArray.getAverage()) +
 80809d2:	a863      	add	r0, sp, #396	; 0x18c
 80809d4:	f001 fbd0 	bl	8082178 <_ZN6StringD1Ev>
 80809d8:	a85f      	add	r0, sp, #380	; 0x17c
 80809da:	f001 fbcd 	bl	8082178 <_ZN6StringD1Ev>
 80809de:	a85b      	add	r0, sp, #364	; 0x16c
 80809e0:	f001 fbca 	bl	8082178 <_ZN6StringD1Ev>
           String("\"LsAv\":") + String("\"") + String::format("%4.1f", longAveragingArray.getAverage()) + String("\",") +
 80809e4:	a857      	add	r0, sp, #348	; 0x15c
 80809e6:	f001 fbc7 	bl	8082178 <_ZN6StringD1Ev>
 80809ea:	a853      	add	r0, sp, #332	; 0x14c
 80809ec:	f001 fbc4 	bl	8082178 <_ZN6StringD1Ev>
 80809f0:	a84f      	add	r0, sp, #316	; 0x13c
 80809f2:	f001 fbc1 	bl	8082178 <_ZN6StringD1Ev>
 80809f6:	a84b      	add	r0, sp, #300	; 0x12c
 80809f8:	f001 fbbe 	bl	8082178 <_ZN6StringD1Ev>
           String("\"LsMm\":") + String("\"") + String::format("%4.1f", waterLevelInMm) + String("\",") +
 80809fc:	a847      	add	r0, sp, #284	; 0x11c
 80809fe:	f001 fbbb 	bl	8082178 <_ZN6StringD1Ev>
 8080a02:	a843      	add	r0, sp, #268	; 0x10c
 8080a04:	f001 fbb8 	bl	8082178 <_ZN6StringD1Ev>
 8080a08:	a83f      	add	r0, sp, #252	; 0xfc
 8080a0a:	f001 fbb5 	bl	8082178 <_ZN6StringD1Ev>
 8080a0e:	a83b      	add	r0, sp, #236	; 0xec
 8080a10:	f001 fbb2 	bl	8082178 <_ZN6StringD1Ev>
           String("\"LsBits\":") + String("\"") + String::format("%u", waterLevelSampleReading) + String("\",") +
 8080a14:	a837      	add	r0, sp, #220	; 0xdc
 8080a16:	f001 fbaf 	bl	8082178 <_ZN6StringD1Ev>
 8080a1a:	a833      	add	r0, sp, #204	; 0xcc
 8080a1c:	f001 fbac 	bl	8082178 <_ZN6StringD1Ev>
 8080a20:	a82f      	add	r0, sp, #188	; 0xbc
 8080a22:	f001 fba9 	bl	8082178 <_ZN6StringD1Ev>
 8080a26:	a82b      	add	r0, sp, #172	; 0xac
 8080a28:	f001 fba6 	bl	8082178 <_ZN6StringD1Ev>
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
 8080a2c:	a827      	add	r0, sp, #156	; 0x9c
 8080a2e:	f001 fba3 	bl	8082178 <_ZN6StringD1Ev>
 8080a32:	a823      	add	r0, sp, #140	; 0x8c
 8080a34:	f001 fba0 	bl	8082178 <_ZN6StringD1Ev>
 8080a38:	a81f      	add	r0, sp, #124	; 0x7c
 8080a3a:	f001 fb9d 	bl	8082178 <_ZN6StringD1Ev>
 8080a3e:	a81b      	add	r0, sp, #108	; 0x6c
 8080a40:	f001 fb9a 	bl	8082178 <_ZN6StringD1Ev>
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
 8080a44:	a817      	add	r0, sp, #92	; 0x5c
 8080a46:	f001 fb97 	bl	8082178 <_ZN6StringD1Ev>
 8080a4a:	a813      	add	r0, sp, #76	; 0x4c
 8080a4c:	f001 fb94 	bl	8082178 <_ZN6StringD1Ev>
 8080a50:	a80f      	add	r0, sp, #60	; 0x3c
 8080a52:	f001 fb91 	bl	8082178 <_ZN6StringD1Ev>
 8080a56:	a807      	add	r0, sp, #28
 8080a58:	f001 fb8e 	bl	8082178 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080a5c:	a80b      	add	r0, sp, #44	; 0x2c
 8080a5e:	f001 fb8b 	bl	8082178 <_ZN6StringD1Ev>
    data = String("{") +
 8080a62:	a803      	add	r0, sp, #12
 8080a64:	f001 fb88 	bl	8082178 <_ZN6StringD1Ev>
        spark_cloud_flag_connect();
 8080a68:	f001 fa5e 	bl	8081f28 <spark_cloud_flag_connect>
 8080a6c:	4b1c      	ldr	r3, [pc, #112]	; (8080ae0 <loop+0x698>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080a6e:	491d      	ldr	r1, [pc, #116]	; (8080ae4 <loop+0x69c>)
 8080a70:	781b      	ldrb	r3, [r3, #0]
 8080a72:	a867      	add	r0, sp, #412	; 0x19c
 8080a74:	f88d 3000 	strb.w	r3, [sp]
 8080a78:	6822      	ldr	r2, [r4, #0]
 8080a7a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080a7e:	f002 f8b9 	bl	8082bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080a82:	a868      	add	r0, sp, #416	; 0x1a0
 8080a84:	f7ff fbbf 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (sample > 0)
 8080a88:	4a17      	ldr	r2, [pc, #92]	; (8080ae8 <loop+0x6a0>)
 8080a8a:	6813      	ldr	r3, [r2, #0]
 8080a8c:	2b00      	cmp	r3, #0
        ++sample; //Increase sample count if on initial fill
 8080a8e:	bfc4      	itt	gt
 8080a90:	3301      	addgt	r3, #1
 8080a92:	6013      	strgt	r3, [r2, #0]
    if (zeroingInProgress)
 8080a94:	4b15      	ldr	r3, [pc, #84]	; (8080aec <loop+0x6a4>)
 8080a96:	781b      	ldrb	r3, [r3, #0]
 8080a98:	b113      	cbz	r3, 8080aa0 <loop+0x658>
        delay(ZEROING_LOOP_DELAY); //Use shorter delay when averaging for zero...
 8080a9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8080a9e:	e51a      	b.n	80804d6 <loop+0x8e>
        delay(loopDelay); //10 min: 600,000 1 min: 60,000 10 sec: 10,000
 8080aa0:	4b13      	ldr	r3, [pc, #76]	; (8080af0 <loop+0x6a8>)
 8080aa2:	6818      	ldr	r0, [r3, #0]
 8080aa4:	e517      	b.n	80804d6 <loop+0x8e>
 8080aa6:	bf00      	nop
 8080aa8:	08086297 	.word	0x08086297
 8080aac:	08086194 	.word	0x08086194
 8080ab0:	200004d0 	.word	0x200004d0
 8080ab4:	08086182 	.word	0x08086182
 8080ab8:	0808627d 	.word	0x0808627d
 8080abc:	080862a1 	.word	0x080862a1
 8080ac0:	200004c8 	.word	0x200004c8
 8080ac4:	08086234 	.word	0x08086234
 8080ac8:	080862a9 	.word	0x080862a9
 8080acc:	20000208 	.word	0x20000208
 8080ad0:	080862b1 	.word	0x080862b1
 8080ad4:	200004a8 	.word	0x200004a8
 8080ad8:	08086196 	.word	0x08086196
 8080adc:	200001f4 	.word	0x200001f4
 8080ae0:	200001ec 	.word	0x200001ec
 8080ae4:	080862bb 	.word	0x080862bb
 8080ae8:	20000008 	.word	0x20000008
 8080aec:	200004f0 	.word	0x200004f0
 8080af0:	20000000 	.word	0x20000000

08080af4 <_GLOBAL__sub_I_rebootSync>:
        val_(val) {
 8080af4:	2201      	movs	r2, #1
 8080af6:	4b2d      	ldr	r3, [pc, #180]	; (8080bac <_GLOBAL__sub_I_rebootSync+0xb8>)
}
 8080af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);   //averaging bucket
 8080afa:	4d2d      	ldr	r5, [pc, #180]	; (8080bb0 <_GLOBAL__sub_I_rebootSync+0xbc>)
 8080afc:	701a      	strb	r2, [r3, #0]
Adafruit_ADS1115 ads;
 8080afe:	2148      	movs	r1, #72	; 0x48
 8080b00:	482c      	ldr	r0, [pc, #176]	; (8080bb4 <_GLOBAL__sub_I_rebootSync+0xc0>)
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);   //averaging bucket
 8080b02:	4c2d      	ldr	r4, [pc, #180]	; (8080bb8 <_GLOBAL__sub_I_rebootSync+0xc4>)
Adafruit_ADS1115 ads;
 8080b04:	f000 fe33 	bl	808176e <_ZN16Adafruit_ADS1115C1Eh>
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);   //averaging bucket
 8080b08:	4e2c      	ldr	r6, [pc, #176]	; (8080bbc <_GLOBAL__sub_I_rebootSync+0xc8>)
 8080b0a:	2118      	movs	r1, #24
 8080b0c:	4628      	mov	r0, r5
 8080b0e:	f000 fd85 	bl	808161c <_ZN14RunningAverageC1Eh>
 8080b12:	4628      	mov	r0, r5
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE); //averaging bucket
 8080b14:	4d2a      	ldr	r5, [pc, #168]	; (8080bc0 <_GLOBAL__sub_I_rebootSync+0xcc>)
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);   //averaging bucket
 8080b16:	4622      	mov	r2, r4
 8080b18:	4631      	mov	r1, r6
 8080b1a:	f002 fdb1 	bl	8083680 <__aeabi_atexit>
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE); //averaging bucket
 8080b1e:	2103      	movs	r1, #3
 8080b20:	4628      	mov	r0, r5
 8080b22:	f000 fd7b 	bl	808161c <_ZN14RunningAverageC1Eh>
 8080b26:	4631      	mov	r1, r6
String data = String(80);
 8080b28:	4e26      	ldr	r6, [pc, #152]	; (8080bc4 <_GLOBAL__sub_I_rebootSync+0xd0>)
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE); //averaging bucket
 8080b2a:	4622      	mov	r2, r4
 8080b2c:	4628      	mov	r0, r5
 8080b2e:	f002 fda7 	bl	8083680 <__aeabi_atexit>
String data = String(80);
 8080b32:	4d25      	ldr	r5, [pc, #148]	; (8080bc8 <_GLOBAL__sub_I_rebootSync+0xd4>)
 8080b34:	220a      	movs	r2, #10
 8080b36:	2150      	movs	r1, #80	; 0x50
 8080b38:	4630      	mov	r0, r6
 8080b3a:	f001 fbca 	bl	80822d2 <_ZN6StringC1Eih>
 8080b3e:	4630      	mov	r0, r6
String zeroData = String(80);
 8080b40:	4e22      	ldr	r6, [pc, #136]	; (8080bcc <_GLOBAL__sub_I_rebootSync+0xd8>)
String data = String(80);
 8080b42:	4622      	mov	r2, r4
 8080b44:	4629      	mov	r1, r5
 8080b46:	f002 fd9b 	bl	8083680 <__aeabi_atexit>
String zeroData = String(80);
 8080b4a:	220a      	movs	r2, #10
 8080b4c:	2150      	movs	r1, #80	; 0x50
 8080b4e:	4630      	mov	r0, r6
 8080b50:	f001 fbbf 	bl	80822d2 <_ZN6StringC1Eih>
 8080b54:	4630      	mov	r0, r6
String loopDelayData = String(80);
 8080b56:	4e1e      	ldr	r6, [pc, #120]	; (8080bd0 <_GLOBAL__sub_I_rebootSync+0xdc>)
String zeroData = String(80);
 8080b58:	4622      	mov	r2, r4
 8080b5a:	4629      	mov	r1, r5
 8080b5c:	f002 fd90 	bl	8083680 <__aeabi_atexit>
String loopDelayData = String(80);
 8080b60:	220a      	movs	r2, #10
 8080b62:	2150      	movs	r1, #80	; 0x50
 8080b64:	4630      	mov	r0, r6
 8080b66:	f001 fbb4 	bl	80822d2 <_ZN6StringC1Eih>
 8080b6a:	4622      	mov	r2, r4
 8080b6c:	4629      	mov	r1, r5
 8080b6e:	4630      	mov	r0, r6
 8080b70:	f002 fd86 	bl	8083680 <__aeabi_atexit>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 8080b74:	2314      	movs	r3, #20
 8080b76:	4d17      	ldr	r5, [pc, #92]	; (8080bd4 <_GLOBAL__sub_I_rebootSync+0xe0>)
 8080b78:	9300      	str	r3, [sp, #0]
 8080b7a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8080b7e:	f505 7396 	add.w	r3, r5, #300	; 0x12c
 8080b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8080b86:	4628      	mov	r0, r5
 8080b88:	f000 f960 	bl	8080e4c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
 8080b8c:	4b12      	ldr	r3, [pc, #72]	; (8080bd8 <_GLOBAL__sub_I_rebootSync+0xe4>)
JsonParserStatic<256, 20> parser;
 8080b8e:	4622      	mov	r2, r4
 8080b90:	602b      	str	r3, [r5, #0]
 8080b92:	4628      	mov	r0, r5
 8080b94:	4911      	ldr	r1, [pc, #68]	; (8080bdc <_GLOBAL__sub_I_rebootSync+0xe8>)
 8080b96:	f002 fd73 	bl	8083680 <__aeabi_atexit>
STARTUP(cellular_credentials_set("3iot", "", "", NULL)); //globalM2M SIM starting 89353
 8080b9a:	4a11      	ldr	r2, [pc, #68]	; (8080be0 <_GLOBAL__sub_I_rebootSync+0xec>)
 8080b9c:	2300      	movs	r3, #0
 8080b9e:	4611      	mov	r1, r2
 8080ba0:	4810      	ldr	r0, [pc, #64]	; (8080be4 <_GLOBAL__sub_I_rebootSync+0xf0>)
}
 8080ba2:	b002      	add	sp, #8
 8080ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
STARTUP(cellular_credentials_set("3iot", "", "", NULL)); //globalM2M SIM starting 89353
 8080ba8:	f001 b8b0 	b.w	8081d0c <cellular_credentials_set>
 8080bac:	200001ec 	.word	0x200001ec
 8080bb0:	20000208 	.word	0x20000208
 8080bb4:	200001ee 	.word	0x200001ee
 8080bb8:	200001e8 	.word	0x200001e8
 8080bbc:	080815e5 	.word	0x080815e5
 8080bc0:	200004a8 	.word	0x200004a8
 8080bc4:	200001f4 	.word	0x200001f4
 8080bc8:	08082179 	.word	0x08082179
 8080bcc:	200004d4 	.word	0x200004d4
 8080bd0:	20000220 	.word	0x20000220
 8080bd4:	20000230 	.word	0x20000230
 8080bd8:	0808632c 	.word	0x0808632c
 8080bdc:	080800d9 	.word	0x080800d9
 8080be0:	0808643d 	.word	0x0808643d
 8080be4:	080862c5 	.word	0x080862c5

08080be8 <_Z14startupHandlerPKcS0_>:
{
 8080be8:	b530      	push	{r4, r5, lr}
 8080bea:	460c      	mov	r4, r1
 8080bec:	b09b      	sub	sp, #108	; 0x6c
    parser.clear();
 8080bee:	4850      	ldr	r0, [pc, #320]	; (8080d30 <_Z14startupHandlerPKcS0_+0x148>)
 8080bf0:	f000 f928 	bl	8080e44 <_ZN10JsonBuffer5clearEv>
	bool addString(const char *data) { return addData(data, strlen(data)); }
 8080bf4:	4620      	mov	r0, r4
 8080bf6:	f003 fb6c 	bl	80842d2 <strlen>
 8080bfa:	4621      	mov	r1, r4
 8080bfc:	4602      	mov	r2, r0
 8080bfe:	484c      	ldr	r0, [pc, #304]	; (8080d30 <_Z14startupHandlerPKcS0_+0x148>)
 8080c00:	f000 f903 	bl	8080e0a <_ZN10JsonBuffer7addDataEPKcj>
    if (parser.parse())
 8080c04:	484a      	ldr	r0, [pc, #296]	; (8080d30 <_Z14startupHandlerPKcS0_+0x148>)
 8080c06:	f000 fc9f 	bl	8081548 <_ZN10JsonParser5parseEv>
 8080c0a:	4d4a      	ldr	r5, [pc, #296]	; (8080d34 <_Z14startupHandlerPKcS0_+0x14c>)
 8080c0c:	2800      	cmp	r0, #0
 8080c0e:	f000 8089 	beq.w	8080d24 <_Z14startupHandlerPKcS0_+0x13c>
        zeroOffsetInMm = parser.getReference().key("zeroOffsetInMm").valueFloat();
 8080c12:	4947      	ldr	r1, [pc, #284]	; (8080d30 <_Z14startupHandlerPKcS0_+0x148>)
 8080c14:	a812      	add	r0, sp, #72	; 0x48
 8080c16:	f000 f929 	bl	8080e6c <_ZNK10JsonParser12getReferenceEv>
 8080c1a:	4a47      	ldr	r2, [pc, #284]	; (8080d38 <_Z14startupHandlerPKcS0_+0x150>)
 8080c1c:	a912      	add	r1, sp, #72	; 0x48
 8080c1e:	a816      	add	r0, sp, #88	; 0x58
 8080c20:	f000 fa98 	bl	8081154 <_ZNK13JsonReference3keyEPKc>
 8080c24:	2100      	movs	r1, #0
 8080c26:	a816      	add	r0, sp, #88	; 0x58
 8080c28:	f000 f993 	bl	8080f52 <_ZNK13JsonReference10valueFloatEf>
 8080c2c:	f002 fe98 	bl	8083960 <__aeabi_f2d>
 8080c30:	e9c5 0100 	strd	r0, r1, [r5]
 8080c34:	a816      	add	r0, sp, #88	; 0x58
 8080c36:	f000 f897 	bl	8080d68 <_ZN13JsonReferenceD1Ev>
 8080c3a:	a812      	add	r0, sp, #72	; 0x48
 8080c3c:	f000 f894 	bl	8080d68 <_ZN13JsonReferenceD1Ev>
    Serial.printlnf("zeroOffsetInMm (as stored on Azure): " + String::format("%4.1f", zeroOffsetInMm));
 8080c40:	f002 fa04 	bl	808304c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 8080c44:	493d      	ldr	r1, [pc, #244]	; (8080d3c <_Z14startupHandlerPKcS0_+0x154>)
 8080c46:	4604      	mov	r4, r0
 8080c48:	a816      	add	r0, sp, #88	; 0x58
 8080c4a:	f001 fadf 	bl	808220c <_ZN6StringC1EPKc>
 8080c4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8080c52:	a812      	add	r0, sp, #72	; 0x48
 8080c54:	493a      	ldr	r1, [pc, #232]	; (8080d40 <_Z14startupHandlerPKcS0_+0x158>)
 8080c56:	f001 fbb5 	bl	80823c4 <_ZN6String6formatEPKcz>
 8080c5a:	a912      	add	r1, sp, #72	; 0x48
 8080c5c:	a816      	add	r0, sp, #88	; 0x58
 8080c5e:	f001 fb7e 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080c62:	6801      	ldr	r1, [r0, #0]
 8080c64:	4620      	mov	r0, r4
 8080c66:	f7ff fa4c 	bl	8080102 <_ZN5Print8printlnfEPKcz>
 8080c6a:	a812      	add	r0, sp, #72	; 0x48
 8080c6c:	f001 fa84 	bl	8082178 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080c70:	a816      	add	r0, sp, #88	; 0x58
 8080c72:	f001 fa81 	bl	8082178 <_ZN6StringD1Ev>
    zeroData = String("{") +
 8080c76:	4933      	ldr	r1, [pc, #204]	; (8080d44 <_Z14startupHandlerPKcS0_+0x15c>)
 8080c78:	a802      	add	r0, sp, #8
 8080c7a:	f001 fac7 	bl	808220c <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8080c7e:	a902      	add	r1, sp, #8
 8080c80:	a80a      	add	r0, sp, #40	; 0x28
 8080c82:	f001 fb02 	bl	808228a <_ZN6StringC1ERKS_>
               String("\"ZeroOffsetInMm\":") + String("\"") + String::format("%4.1f", zeroOffsetInMm) +
 8080c86:	4930      	ldr	r1, [pc, #192]	; (8080d48 <_Z14startupHandlerPKcS0_+0x160>)
 8080c88:	a806      	add	r0, sp, #24
 8080c8a:	f001 fabf 	bl	808220c <_ZN6StringC1EPKc>
 8080c8e:	a906      	add	r1, sp, #24
 8080c90:	a80a      	add	r0, sp, #40	; 0x28
 8080c92:	f001 fb64 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080c96:	4604      	mov	r4, r0
 8080c98:	492c      	ldr	r1, [pc, #176]	; (8080d4c <_Z14startupHandlerPKcS0_+0x164>)
 8080c9a:	a80e      	add	r0, sp, #56	; 0x38
 8080c9c:	f001 fab6 	bl	808220c <_ZN6StringC1EPKc>
 8080ca0:	a90e      	add	r1, sp, #56	; 0x38
 8080ca2:	4620      	mov	r0, r4
 8080ca4:	f001 fb5b 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080ca8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8080cac:	4604      	mov	r4, r0
 8080cae:	4924      	ldr	r1, [pc, #144]	; (8080d40 <_Z14startupHandlerPKcS0_+0x158>)
 8080cb0:	a812      	add	r0, sp, #72	; 0x48
 8080cb2:	f001 fb87 	bl	80823c4 <_ZN6String6formatEPKcz>
 8080cb6:	a912      	add	r1, sp, #72	; 0x48
 8080cb8:	4620      	mov	r0, r4
 8080cba:	f001 fb50 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080cbe:	4604      	mov	r4, r0
               String("\"}");
 8080cc0:	4923      	ldr	r1, [pc, #140]	; (8080d50 <_Z14startupHandlerPKcS0_+0x168>)
 8080cc2:	a816      	add	r0, sp, #88	; 0x58
 8080cc4:	f001 faa2 	bl	808220c <_ZN6StringC1EPKc>
 8080cc8:	a916      	add	r1, sp, #88	; 0x58
 8080cca:	4620      	mov	r0, r4
 8080ccc:	f001 fb47 	bl	808235e <_ZplRK15StringSumHelperRK6String>
 8080cd0:	4c20      	ldr	r4, [pc, #128]	; (8080d54 <_Z14startupHandlerPKcS0_+0x16c>)
 8080cd2:	4601      	mov	r1, r0
 8080cd4:	4620      	mov	r0, r4
 8080cd6:	f001 fac9 	bl	808226c <_ZN6StringaSERKS_>
 8080cda:	a816      	add	r0, sp, #88	; 0x58
 8080cdc:	f001 fa4c 	bl	8082178 <_ZN6StringD1Ev>
               String("\"ZeroOffsetInMm\":") + String("\"") + String::format("%4.1f", zeroOffsetInMm) +
 8080ce0:	a812      	add	r0, sp, #72	; 0x48
 8080ce2:	f001 fa49 	bl	8082178 <_ZN6StringD1Ev>
 8080ce6:	a80e      	add	r0, sp, #56	; 0x38
 8080ce8:	f001 fa46 	bl	8082178 <_ZN6StringD1Ev>
 8080cec:	a806      	add	r0, sp, #24
 8080cee:	f001 fa43 	bl	8082178 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080cf2:	a80a      	add	r0, sp, #40	; 0x28
 8080cf4:	f001 fa40 	bl	8082178 <_ZN6StringD1Ev>
    zeroData = String("{") +
 8080cf8:	a802      	add	r0, sp, #8
 8080cfa:	f001 fa3d 	bl	8082178 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8080cfe:	4b16      	ldr	r3, [pc, #88]	; (8080d58 <_Z14startupHandlerPKcS0_+0x170>)
 8080d00:	4916      	ldr	r1, [pc, #88]	; (8080d5c <_Z14startupHandlerPKcS0_+0x174>)
 8080d02:	781b      	ldrb	r3, [r3, #0]
 8080d04:	a816      	add	r0, sp, #88	; 0x58
 8080d06:	f88d 3000 	strb.w	r3, [sp]
 8080d0a:	6822      	ldr	r2, [r4, #0]
 8080d0c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080d10:	f001 ff70 	bl	8082bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080d14:	a817      	add	r0, sp, #92	; 0x5c
 8080d16:	f7ff fa76 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    startupCompleted = true; //We can now run loop
 8080d1a:	2201      	movs	r2, #1
 8080d1c:	4b10      	ldr	r3, [pc, #64]	; (8080d60 <_Z14startupHandlerPKcS0_+0x178>)
 8080d1e:	701a      	strb	r2, [r3, #0]
}
 8080d20:	b01b      	add	sp, #108	; 0x6c
 8080d22:	bd30      	pop	{r4, r5, pc}
        Serial.printlnf("error: could not parse json");
 8080d24:	f002 f992 	bl	808304c <_Z16_fetch_usbserialv>
 8080d28:	490e      	ldr	r1, [pc, #56]	; (8080d64 <_Z14startupHandlerPKcS0_+0x17c>)
 8080d2a:	f7ff f9ea 	bl	8080102 <_ZN5Print8printlnfEPKcz>
 8080d2e:	e787      	b.n	8080c40 <_Z14startupHandlerPKcS0_+0x58>
 8080d30:	20000230 	.word	0x20000230
 8080d34:	200004e8 	.word	0x200004e8
 8080d38:	08086314 	.word	0x08086314
 8080d3c:	080862e6 	.word	0x080862e6
 8080d40:	08086234 	.word	0x08086234
 8080d44:	08086185 	.word	0x08086185
 8080d48:	0808623a 	.word	0x0808623a
 8080d4c:	08086194 	.word	0x08086194
 8080d50:	08086196 	.word	0x08086196
 8080d54:	200004d4 	.word	0x200004d4
 8080d58:	200001ec 	.word	0x200001ec
 8080d5c:	0808630c 	.word	0x0808630c
 8080d60:	200004c0 	.word	0x200004c0
 8080d64:	080862ca 	.word	0x080862ca

08080d68 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
 8080d68:	4770      	bx	lr

08080d6a <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
 8080d6a:	b510      	push	{r4, lr}
 8080d6c:	4604      	mov	r4, r0
}
 8080d6e:	210c      	movs	r1, #12
 8080d70:	f002 fc8b 	bl	808368a <_ZdlPvj>
 8080d74:	4620      	mov	r0, r4
 8080d76:	bd10      	pop	{r4, pc}

08080d78 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
 8080d78:	b510      	push	{r4, lr}
 8080d7a:	4b05      	ldr	r3, [pc, #20]	; (8080d90 <_ZN10JsonBufferD1Ev+0x18>)
 8080d7c:	4604      	mov	r4, r0
 8080d7e:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 8080d80:	7c03      	ldrb	r3, [r0, #16]
 8080d82:	b91b      	cbnz	r3, 8080d8c <_ZN10JsonBufferD1Ev+0x14>
 8080d84:	6840      	ldr	r0, [r0, #4]
 8080d86:	b108      	cbz	r0, 8080d8c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 8080d88:	f001 f90e 	bl	8081fa8 <free>
}
 8080d8c:	4620      	mov	r0, r4
 8080d8e:	bd10      	pop	{r4, pc}
 8080d90:	08086344 	.word	0x08086344

08080d94 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 8080d94:	b510      	push	{r4, lr}
 8080d96:	4604      	mov	r4, r0
}
 8080d98:	f7ff ffee 	bl	8080d78 <_ZN10JsonBufferD1Ev>
 8080d9c:	4620      	mov	r0, r4
 8080d9e:	2114      	movs	r1, #20
 8080da0:	f002 fc73 	bl	808368a <_ZdlPvj>
 8080da4:	4620      	mov	r0, r4
 8080da6:	bd10      	pop	{r4, pc}

08080da8 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
 8080da8:	b510      	push	{r4, lr}
 8080daa:	4b07      	ldr	r3, [pc, #28]	; (8080dc8 <_ZN10JsonParserD1Ev+0x20>)
 8080dac:	4604      	mov	r4, r0
 8080dae:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 8080db0:	7c03      	ldrb	r3, [r0, #16]
 8080db2:	b91b      	cbnz	r3, 8080dbc <_ZN10JsonParserD1Ev+0x14>
 8080db4:	6940      	ldr	r0, [r0, #20]
 8080db6:	b108      	cbz	r0, 8080dbc <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 8080db8:	f001 f8f6 	bl	8081fa8 <free>
JsonParser::~JsonParser() {
 8080dbc:	4620      	mov	r0, r4
 8080dbe:	f7ff ffdb 	bl	8080d78 <_ZN10JsonBufferD1Ev>
}
 8080dc2:	4620      	mov	r0, r4
 8080dc4:	bd10      	pop	{r4, pc}
 8080dc6:	bf00      	nop
 8080dc8:	08086354 	.word	0x08086354

08080dcc <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 8080dcc:	b510      	push	{r4, lr}
 8080dce:	4604      	mov	r4, r0
}
 8080dd0:	f7ff ffea 	bl	8080da8 <_ZN10JsonParserD1Ev>
 8080dd4:	4620      	mov	r0, r4
 8080dd6:	212c      	movs	r1, #44	; 0x2c
 8080dd8:	f002 fc57 	bl	808368a <_ZdlPvj>
 8080ddc:	4620      	mov	r0, r4
 8080dde:	bd10      	pop	{r4, pc}

08080de0 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
 8080de0:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 8080de2:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
 8080de4:	4604      	mov	r4, r0
 8080de6:	460d      	mov	r5, r1
	if (!staticBuffers) {
 8080de8:	b10b      	cbz	r3, 8080dee <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
 8080dea:	2000      	movs	r0, #0
}
 8080dec:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
 8080dee:	6840      	ldr	r0, [r0, #4]
 8080df0:	b138      	cbz	r0, 8080e02 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
 8080df2:	f001 f8e1 	bl	8081fb8 <realloc>
		if (newBuffer) {
 8080df6:	2800      	cmp	r0, #0
 8080df8:	d0f7      	beq.n	8080dea <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
 8080dfa:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
 8080dfe:	2001      	movs	r0, #1
 8080e00:	e7f4      	b.n	8080dec <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
 8080e02:	4608      	mov	r0, r1
 8080e04:	f001 f8c8 	bl	8081f98 <malloc>
 8080e08:	e7f5      	b.n	8080df6 <_ZN10JsonBuffer8allocateEj+0x16>

08080e0a <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 8080e0a:	b570      	push	{r4, r5, r6, lr}
 8080e0c:	68c3      	ldr	r3, [r0, #12]
 8080e0e:	460e      	mov	r6, r1
 8080e10:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
 8080e12:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 8080e14:	4604      	mov	r4, r0
 8080e16:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
 8080e18:	b173      	cbz	r3, 8080e38 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 8080e1a:	6883      	ldr	r3, [r0, #8]
 8080e1c:	428b      	cmp	r3, r1
 8080e1e:	d30b      	bcc.n	8080e38 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
 8080e20:	6860      	ldr	r0, [r4, #4]
 8080e22:	68e3      	ldr	r3, [r4, #12]
 8080e24:	462a      	mov	r2, r5
 8080e26:	4631      	mov	r1, r6
 8080e28:	4418      	add	r0, r3
 8080e2a:	f003 f9dd 	bl	80841e8 <memcpy>
	return true;
 8080e2e:	2001      	movs	r0, #1
	offset += dataLen;
 8080e30:	68e2      	ldr	r2, [r4, #12]
 8080e32:	442a      	add	r2, r5
 8080e34:	60e2      	str	r2, [r4, #12]
}
 8080e36:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
 8080e38:	4620      	mov	r0, r4
 8080e3a:	f7ff ffd1 	bl	8080de0 <_ZN10JsonBuffer8allocateEj>
 8080e3e:	2800      	cmp	r0, #0
 8080e40:	d1ee      	bne.n	8080e20 <_ZN10JsonBuffer7addDataEPKcj+0x16>
 8080e42:	e7f8      	b.n	8080e36 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

08080e44 <_ZN10JsonBuffer5clearEv>:
	offset = 0;
 8080e44:	2300      	movs	r3, #0
 8080e46:	60c3      	str	r3, [r0, #12]
}
 8080e48:	4770      	bx	lr
	...

08080e4c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 8080e4c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8080e50:	2200      	movs	r2, #0
 8080e52:	60c2      	str	r2, [r0, #12]
 8080e54:	2201      	movs	r2, #1
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 8080e56:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 8080e58:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 8080e5a:	6143      	str	r3, [r0, #20]
 8080e5c:	4a02      	ldr	r2, [pc, #8]	; (8080e68 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 8080e5e:	9b02      	ldr	r3, [sp, #8]
 8080e60:	6002      	str	r2, [r0, #0]
 8080e62:	61c3      	str	r3, [r0, #28]
}
 8080e64:	bd10      	pop	{r4, pc}
 8080e66:	bf00      	nop
 8080e68:	08086354 	.word	0x08086354

08080e6c <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
 8080e6c:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
 8080e70:	429a      	cmp	r2, r3
 8080e72:	4b04      	ldr	r3, [pc, #16]	; (8080e84 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 8080e74:	bf38      	it	cc
 8080e76:	6082      	strcc	r2, [r0, #8]
 8080e78:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 8080e7c:	bf24      	itt	cs
 8080e7e:	2300      	movcs	r3, #0
 8080e80:	6083      	strcs	r3, [r0, #8]
}
 8080e82:	4770      	bx	lr
 8080e84:	08086364 	.word	0x08086364

08080e88 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 8080e88:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 8080e8a:	6813      	ldr	r3, [r2, #0]
 8080e8c:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 8080e8e:	6813      	ldr	r3, [r2, #0]
 8080e90:	f103 0410 	add.w	r4, r3, #16
 8080e94:	6014      	str	r4, [r2, #0]
 8080e96:	6986      	ldr	r6, [r0, #24]
 8080e98:	42b4      	cmp	r4, r6
 8080e9a:	d20a      	bcs.n	8080eb2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 8080e9c:	699b      	ldr	r3, [r3, #24]
 8080e9e:	688c      	ldr	r4, [r1, #8]
 8080ea0:	42a3      	cmp	r3, r4
 8080ea2:	da01      	bge.n	8080ea8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 8080ea4:	42ab      	cmp	r3, r5
 8080ea6:	ddf2      	ble.n	8080e8e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
 8080ea8:	42a3      	cmp	r3, r4
 8080eaa:	bfcc      	ite	gt
 8080eac:	2000      	movgt	r0, #0
 8080eae:	2001      	movle	r0, #1
 8080eb0:	e000      	b.n	8080eb4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
 8080eb2:	2000      	movs	r0, #0
}
 8080eb4:	bd70      	pop	{r4, r5, r6, pc}

08080eb6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 8080eb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8080eba:	4605      	mov	r5, r0
 8080ebc:	4617      	mov	r7, r2
	size_t index = 0;
 8080ebe:	2600      	movs	r6, #0
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 8080ec0:	4698      	mov	r8, r3
 8080ec2:	9c08      	ldr	r4, [sp, #32]
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 8080ec4:	f101 0310 	add.w	r3, r1, #16
 8080ec8:	9301      	str	r3, [sp, #4]
	while(token < tokensEnd && token->end < container->end) {
 8080eca:	9801      	ldr	r0, [sp, #4]
 8080ecc:	69ab      	ldr	r3, [r5, #24]
 8080ece:	4283      	cmp	r3, r0
 8080ed0:	d91b      	bls.n	8080f0a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
 8080ed2:	6882      	ldr	r2, [r0, #8]
 8080ed4:	688b      	ldr	r3, [r1, #8]
 8080ed6:	429a      	cmp	r2, r3
 8080ed8:	da17      	bge.n	8080f0a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
 8080eda:	42a6      	cmp	r6, r4
 8080edc:	d10b      	bne.n	8080ef6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
 8080ede:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
 8080ee0:	aa01      	add	r2, sp, #4
 8080ee2:	4628      	mov	r0, r5
 8080ee4:	f7ff ffd0 	bl	8080e88 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 8080ee8:	b128      	cbz	r0, 8080ef6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
 8080eea:	9b01      	ldr	r3, [sp, #4]
 8080eec:	f8c8 3000 	str.w	r3, [r8]
}
 8080ef0:	b002      	add	sp, #8
 8080ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
 8080ef6:	aa01      	add	r2, sp, #4
 8080ef8:	4628      	mov	r0, r5
 8080efa:	f7ff ffc5 	bl	8080e88 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 8080efe:	4628      	mov	r0, r5
 8080f00:	aa01      	add	r2, sp, #4
		index++;
 8080f02:	3601      	adds	r6, #1
		skipObject(container, token);
 8080f04:	f7ff ffc0 	bl	8080e88 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
 8080f08:	e7df      	b.n	8080eca <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
 8080f0a:	2000      	movs	r0, #0
 8080f0c:	e7f0      	b.n	8080ef0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

08080f0e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 8080f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 8080f10:	2400      	movs	r4, #0
 8080f12:	3b01      	subs	r3, #1
 8080f14:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 8080f18:	1bf6      	subs	r6, r6, r7
 8080f1a:	42a6      	cmp	r6, r4
 8080f1c:	dd08      	ble.n	8080f30 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
 8080f1e:	42a3      	cmp	r3, r4
 8080f20:	dd06      	ble.n	8080f30 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
 8080f22:	6845      	ldr	r5, [r0, #4]
 8080f24:	443d      	add	r5, r7
 8080f26:	5d2d      	ldrb	r5, [r5, r4]
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 8080f28:	3401      	adds	r4, #1
		dst[ii] = buffer[token->start + ii];
 8080f2a:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 8080f2e:	e7f1      	b.n	8080f14 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
 8080f30:	2300      	movs	r3, #0
 8080f32:	7013      	strb	r3, [r2, #0]
}
 8080f34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080f36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
 8080f36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8080f38:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
 8080f3a:	2310      	movs	r3, #16
 8080f3c:	466a      	mov	r2, sp
 8080f3e:	f7ff ffe6 	bl	8080f0e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
 8080f42:	2100      	movs	r1, #0
 8080f44:	4668      	mov	r0, sp
 8080f46:	f004 f81f 	bl	8084f88 <strtof>
 8080f4a:	6020      	str	r0, [r4, #0]
}
 8080f4c:	2001      	movs	r0, #1
 8080f4e:	b004      	add	sp, #16
 8080f50:	bd10      	pop	{r4, pc}

08080f52 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
 8080f52:	b507      	push	{r0, r1, r2, lr}
 8080f54:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
 8080f56:	6881      	ldr	r1, [r0, #8]
 8080f58:	b119      	cbz	r1, 8080f62 <_ZNK13JsonReference10valueFloatEf+0x10>
 8080f5a:	6840      	ldr	r0, [r0, #4]
 8080f5c:	aa01      	add	r2, sp, #4
 8080f5e:	f7ff ffea 	bl	8080f36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
 8080f62:	9801      	ldr	r0, [sp, #4]
 8080f64:	b003      	add	sp, #12
 8080f66:	f85d fb04 	ldr.w	pc, [sp], #4

08080f6a <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
 8080f6a:	b510      	push	{r4, lr}
 8080f6c:	4604      	mov	r4, r0
	if (str) {
 8080f6e:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
 8080f70:	460b      	mov	r3, r1
	if (str) {
 8080f72:	b128      	cbz	r0, 8080f80 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
 8080f74:	f001 f9e6 	bl	8082344 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
 8080f78:	68e3      	ldr	r3, [r4, #12]
 8080f7a:	3301      	adds	r3, #1
 8080f7c:	60e3      	str	r3, [r4, #12]
	}
}
 8080f7e:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
 8080f80:	6860      	ldr	r0, [r4, #4]
 8080f82:	2800      	cmp	r0, #0
 8080f84:	d0f8      	beq.n	8080f78 <_ZN16JsonParserString6appendEc+0xe>
 8080f86:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8080f8a:	3a01      	subs	r2, #1
 8080f8c:	428a      	cmp	r2, r1
			buf[length] = ch;
 8080f8e:	bf88      	it	hi
 8080f90:	5443      	strbhi	r3, [r0, r1]
 8080f92:	e7f1      	b.n	8080f78 <_ZN16JsonParserString6appendEc+0xe>

08080f94 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
	if (unicode <= 0x007f) {
 8080f94:	287f      	cmp	r0, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 8080f96:	b570      	push	{r4, r5, r6, lr}
 8080f98:	460c      	mov	r4, r1
 8080f9a:	b2c1      	uxtb	r1, r0
	if (unicode <= 0x007f) {
 8080f9c:	d804      	bhi.n	8080fa8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x14>
		str.append((char)value);
 8080f9e:	4620      	mov	r0, r4
}
 8080fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		str.append((char)value);
 8080fa4:	f7ff bfe1 	b.w	8080f6a <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
 8080fa8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8080fac:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8080fb0:	f340 1687 	sbfx	r6, r0, #6, #8
 8080fb4:	f041 0580 	orr.w	r5, r1, #128	; 0x80
 8080fb8:	d207      	bcs.n	8080fca <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
 8080fba:	f066 013f 	orn	r1, r6, #63	; 0x3f
		str.append((char)value);
 8080fbe:	b2c9      	uxtb	r1, r1
		str.append((char)value);
 8080fc0:	4620      	mov	r0, r4
 8080fc2:	f7ff ffd2 	bl	8080f6a <_ZN16JsonParserString6appendEc>
		str.append((char)value);
 8080fc6:	4629      	mov	r1, r5
 8080fc8:	e7e9      	b.n	8080f9e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xa>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
 8080fca:	0b03      	lsrs	r3, r0, #12
		str.append((char)value);
 8080fcc:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
 8080fd0:	4620      	mov	r0, r4
 8080fd2:	f7ff ffca 	bl	8080f6a <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
 8080fd6:	f006 013f 	and.w	r1, r6, #63	; 0x3f
		str.append((char)value);
 8080fda:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8080fde:	e7ef      	b.n	8080fc0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2c>

08080fe0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 8080fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
 8080fe4:	2400      	movs	r4, #0
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 8080fe6:	4680      	mov	r8, r0
 8080fe8:	460f      	mov	r7, r1
 8080fea:	4615      	mov	r5, r2
			escape = false;
 8080fec:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
 8080fee:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 8080ff0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80810b8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
	for(int ii = token->start; ii < token->end; ii++) {
 8080ff4:	68b8      	ldr	r0, [r7, #8]
 8080ff6:	42b0      	cmp	r0, r6
 8080ff8:	dd5a      	ble.n	80810b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
 8080ffa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8080ffe:	5d99      	ldrb	r1, [r3, r6]
 8081000:	199a      	adds	r2, r3, r6
 8081002:	2c00      	cmp	r4, #0
 8081004:	d04b      	beq.n	808109e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
 8081006:	2975      	cmp	r1, #117	; 0x75
 8081008:	d805      	bhi.n	8081016 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 808100a:	296d      	cmp	r1, #109	; 0x6d
 808100c:	d807      	bhi.n	808101e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 808100e:	2962      	cmp	r1, #98	; 0x62
 8081010:	d01e      	beq.n	8081050 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
 8081012:	2966      	cmp	r1, #102	; 0x66
 8081014:	d01e      	beq.n	8081054 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
 8081016:	4628      	mov	r0, r5
 8081018:	f7ff ffa7 	bl	8080f6a <_ZN16JsonParserString6appendEc>
				break;
 808101c:	e03d      	b.n	808109a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 808101e:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
 8081022:	2c07      	cmp	r4, #7
 8081024:	d8f7      	bhi.n	8081016 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 8081026:	f20f 0c08 	addw	ip, pc, #8
 808102a:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 808102e:	bf00      	nop
 8081030:	08081059 	.word	0x08081059
 8081034:	08081017 	.word	0x08081017
 8081038:	08081017 	.word	0x08081017
 808103c:	08081017 	.word	0x08081017
 8081040:	0808105d 	.word	0x0808105d
 8081044:	08081017 	.word	0x08081017
 8081048:	08081061 	.word	0x08081061
 808104c:	08081065 	.word	0x08081065
				str.append('\b');
 8081050:	2108      	movs	r1, #8
 8081052:	e7e0      	b.n	8081016 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
 8081054:	210c      	movs	r1, #12
 8081056:	e7de      	b.n	8081016 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
 8081058:	210a      	movs	r1, #10
 808105a:	e7dc      	b.n	8081016 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
 808105c:	210d      	movs	r1, #13
 808105e:	e7da      	b.n	8081016 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
 8081060:	2109      	movs	r1, #9
 8081062:	e7d8      	b.n	8081016 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
 8081064:	1d31      	adds	r1, r6, #4
 8081066:	4288      	cmp	r0, r1
 8081068:	dd17      	ble.n	808109a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 808106a:	a902      	add	r1, sp, #8
 808106c:	4608      	mov	r0, r1
 808106e:	3304      	adds	r3, #4
 8081070:	4433      	add	r3, r6
						tmp[jj] = buffer[ii + jj + 1];
 8081072:	f812 4f01 	ldrb.w	r4, [r2, #1]!
					for(size_t jj = 0; jj < 4; jj++) {
 8081076:	429a      	cmp	r2, r3
						tmp[jj] = buffer[ii + jj + 1];
 8081078:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
 808107c:	d1f9      	bne.n	8081072 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 808107e:	4651      	mov	r1, sl
 8081080:	aa01      	add	r2, sp, #4
					tmp[4] = 0;
 8081082:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 8081086:	f000 ffa7 	bl	8081fd8 <sscanf>
 808108a:	2801      	cmp	r0, #1
 808108c:	d105      	bne.n	808109a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
 808108e:	4629      	mov	r1, r5
 8081090:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8081094:	f7ff ff7e 	bl	8080f94 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 8081098:	3605      	adds	r6, #5
			escape = false;
 808109a:	2400      	movs	r4, #0
 808109c:	e004      	b.n	80810a8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
 808109e:	295c      	cmp	r1, #92	; 0x5c
 80810a0:	d004      	beq.n	80810ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
 80810a2:	4628      	mov	r0, r5
 80810a4:	f7ff ff61 	bl	8080f6a <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
 80810a8:	3601      	adds	r6, #1
 80810aa:	e7a3      	b.n	8080ff4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
 80810ac:	2401      	movs	r4, #1
 80810ae:	e7fb      	b.n	80810a8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
 80810b0:	2001      	movs	r0, #1
 80810b2:	b004      	add	sp, #16
 80810b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80810b8:	08086334 	.word	0x08086334

080810bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80810bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80810be:	460c      	mov	r4, r1
 80810c0:	4615      	mov	r5, r2
 80810c2:	4606      	mov	r6, r0
	result = "";
 80810c4:	490b      	ldr	r1, [pc, #44]	; (80810f4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80810c6:	4610      	mov	r0, r2
 80810c8:	f001 f8f2 	bl	80822b0 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80810cc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80810d0:	1ac9      	subs	r1, r1, r3
 80810d2:	4628      	mov	r0, r5
 80810d4:	3101      	adds	r1, #1
 80810d6:	f001 f86d 	bl	80821b4 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80810da:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
 80810dc:	466a      	mov	r2, sp
 80810de:	4621      	mov	r1, r4
 80810e0:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80810e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80810e6:	9500      	str	r5, [sp, #0]
 80810e8:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
 80810ea:	f7ff ff79 	bl	8080fe0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80810ee:	b004      	add	sp, #16
 80810f0:	bd70      	pop	{r4, r5, r6, pc}
 80810f2:	bf00      	nop
 80810f4:	0808643d 	.word	0x0808643d

080810f8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80810f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80810fc:	b089      	sub	sp, #36	; 0x24
 80810fe:	4605      	mov	r5, r0
 8081100:	4688      	mov	r8, r1
	String keyName;
 8081102:	a804      	add	r0, sp, #16
 8081104:	4912      	ldr	r1, [pc, #72]	; (8081150 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 8081106:	4616      	mov	r6, r2
 8081108:	4699      	mov	r9, r3
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 808110a:	2700      	movs	r7, #0
	String keyName;
 808110c:	f001 f87e 	bl	808220c <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 8081110:	464b      	mov	r3, r9
 8081112:	4641      	mov	r1, r8
 8081114:	4628      	mov	r0, r5
 8081116:	9700      	str	r7, [sp, #0]
 8081118:	aa03      	add	r2, sp, #12
 808111a:	f7ff fecc 	bl	8080eb6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 808111e:	4604      	mov	r4, r0
 8081120:	b170      	cbz	r0, 8081140 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
 8081122:	4628      	mov	r0, r5
 8081124:	9903      	ldr	r1, [sp, #12]
 8081126:	aa04      	add	r2, sp, #16
 8081128:	f7ff ffc8 	bl	80810bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 808112c:	4604      	mov	r4, r0
 808112e:	b908      	cbnz	r0, 8081134 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 8081130:	3701      	adds	r7, #1
 8081132:	e7ed      	b.n	8081110 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8081134:	4631      	mov	r1, r6
 8081136:	a804      	add	r0, sp, #16
 8081138:	f001 f931 	bl	808239e <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
 808113c:	2800      	cmp	r0, #0
 808113e:	d0f7      	beq.n	8081130 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
 8081140:	a804      	add	r0, sp, #16
 8081142:	f001 f819 	bl	8082178 <_ZN6StringD1Ev>
}
 8081146:	4620      	mov	r0, r4
 8081148:	b009      	add	sp, #36	; 0x24
 808114a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808114e:	bf00      	nop
 8081150:	0808643d 	.word	0x0808643d

08081154 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
 8081154:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8081156:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 8081158:	6889      	ldr	r1, [r1, #8]
JsonReference JsonReference::key(const char *name) const {
 808115a:	4604      	mov	r4, r0
 808115c:	4e09      	ldr	r6, [pc, #36]	; (8081184 <_ZNK13JsonReference3keyEPKc+0x30>)
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 808115e:	b161      	cbz	r1, 808117a <_ZNK13JsonReference3keyEPKc+0x26>
 8081160:	6868      	ldr	r0, [r5, #4]
 8081162:	ab01      	add	r3, sp, #4
 8081164:	f7ff ffc8 	bl	80810f8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 8081168:	b138      	cbz	r0, 808117a <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
 808116a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 808116c:	e9c4 6300 	strd	r6, r3, [r4]
 8081170:	9b01      	ldr	r3, [sp, #4]
}
 8081172:	4620      	mov	r0, r4
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 8081174:	60a3      	str	r3, [r4, #8]
}
 8081176:	b002      	add	sp, #8
 8081178:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
 808117a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 808117c:	e9c4 6300 	strd	r6, r3, [r4]
 8081180:	2300      	movs	r3, #0
 8081182:	e7f6      	b.n	8081172 <_ZNK13JsonReference3keyEPKc+0x1e>
 8081184:	08086364 	.word	0x08086364

08081188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 8081188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808118c:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
 8081190:	f04f 35ff 	mov.w	r5, #4294967295
		jsmntok_t *tokens, unsigned int num_tokens) {
 8081194:	4604      	mov	r4, r0
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 8081196:	6840      	ldr	r0, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8081198:	f8d4 e000 	ldr.w	lr, [r4]
 808119c:	4596      	cmp	lr, r2
 808119e:	f080 81be 	bcs.w	808151e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
 80811a2:	f811 800e 	ldrb.w	r8, [r1, lr]
 80811a6:	f1b8 0f00 	cmp.w	r8, #0
 80811aa:	f000 81b8 	beq.w	808151e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80811ae:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80811b2:	f000 809b 	beq.w	80812ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x164>
 80811b6:	d833      	bhi.n	8081220 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x98>
 80811b8:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80811bc:	f000 80ad 	beq.w	808131a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x192>
 80811c0:	d810      	bhi.n	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5c>
 80811c2:	f1a8 0809 	sub.w	r8, r8, #9
 80811c6:	fa5f f888 	uxtb.w	r8, r8
 80811ca:	f1b8 0f17 	cmp.w	r8, #23
 80811ce:	d80d      	bhi.n	80811ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
 80811d0:	4fc0      	ldr	r7, [pc, #768]	; (80814d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>)
 80811d2:	fa0c f808 	lsl.w	r8, ip, r8
 80811d6:	ea18 0f07 	tst.w	r8, r7
 80811da:	d007      	beq.n	80811ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80811dc:	6827      	ldr	r7, [r4, #0]
 80811de:	3701      	adds	r7, #1
 80811e0:	6027      	str	r7, [r4, #0]
 80811e2:	e7d9      	b.n	8081198 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10>
		switch (c) {
 80811e4:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80811e8:	f000 8136 	beq.w	8081458 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d0>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80811ec:	f8d4 8000 	ldr.w	r8, [r4]
 80811f0:	4542      	cmp	r2, r8
 80811f2:	d90e      	bls.n	8081212 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80811f4:	f811 7008 	ldrb.w	r7, [r1, r8]
 80811f8:	b15f      	cbz	r7, 8081212 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		switch (js[parser->pos]) {
 80811fa:	2f3a      	cmp	r7, #58	; 0x3a
 80811fc:	f200 816e 	bhi.w	80814dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
 8081200:	2f1f      	cmp	r7, #31
 8081202:	f200 8152 	bhi.w	80814aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x322>
 8081206:	2f0a      	cmp	r7, #10
 8081208:	f200 8161 	bhi.w	80814ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x346>
 808120c:	2f08      	cmp	r7, #8
 808120e:	f240 8157 	bls.w	80814c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
	if (tokens == NULL) {
 8081212:	2b00      	cmp	r3, #0
 8081214:	f040 8167 	bne.w	80814e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
		parser->pos--;
 8081218:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
 808121c:	6027      	str	r7, [r4, #0]
 808121e:	e0ab      	b.n	8081378 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
 8081220:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 8081224:	d03a      	beq.n	808129c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 8081226:	d80a      	bhi.n	808123e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb6>
 8081228:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 808122c:	d036      	beq.n	808129c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 808122e:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 8081232:	d1db      	bne.n	80811ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 8081234:	2b00      	cmp	r3, #0
 8081236:	d0d1      	beq.n	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8081238:	f04f 0b02 	mov.w	fp, #2
 808123c:	e006      	b.n	808124c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc4>
		switch (c) {
 808123e:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 8081242:	d1d3      	bne.n	80811ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				if (tokens == NULL)
 8081244:	2b00      	cmp	r3, #0
 8081246:	d0c9      	beq.n	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8081248:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 808124c:	6867      	ldr	r7, [r4, #4]
 808124e:	f107 38ff 	add.w	r8, r7, #4294967295
 8081252:	eb03 1907 	add.w	r9, r3, r7, lsl #4
 8081256:	f1b8 0f00 	cmp.w	r8, #0
 808125a:	db4f      	blt.n	80812fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x174>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 808125c:	f859 7c0c 	ldr.w	r7, [r9, #-12]
 8081260:	f1a9 0a10 	sub.w	sl, r9, #16
 8081264:	3701      	adds	r7, #1
 8081266:	d045      	beq.n	80812f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
 8081268:	f859 7c08 	ldr.w	r7, [r9, #-8]
 808126c:	1c7e      	adds	r6, r7, #1
 808126e:	d141      	bne.n	80812f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
						if (token->type != type) {
 8081270:	f89a 9000 	ldrb.w	r9, [sl]
 8081274:	45d9      	cmp	r9, fp
 8081276:	d145      	bne.n	8081304 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 8081278:	60a7      	str	r7, [r4, #8]
						token->end = parser->pos + 1;
 808127a:	f10e 0701 	add.w	r7, lr, #1
 808127e:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 8081282:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 8081286:	f8de 7004 	ldr.w	r7, [lr, #4]
 808128a:	3701      	adds	r7, #1
 808128c:	d03d      	beq.n	808130a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
 808128e:	f8de 7008 	ldr.w	r7, [lr, #8]
 8081292:	3701      	adds	r7, #1
 8081294:	d139      	bne.n	808130a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
 8081296:	f8c4 8008 	str.w	r8, [r4, #8]
								break;
 808129a:	e79f      	b.n	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				count++;
 808129c:	3001      	adds	r0, #1
				if (tokens == NULL) {
 808129e:	2b00      	cmp	r3, #0
 80812a0:	d09c      	beq.n	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	if (parser->toknext >= num_tokens) {
 80812a2:	6867      	ldr	r7, [r4, #4]
 80812a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80812a6:	42be      	cmp	r6, r7
 80812a8:	d94e      	bls.n	8081348 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c0>
	tok->size = 0;
 80812aa:	2600      	movs	r6, #0
	tok = &tokens[parser->toknext++];
 80812ac:	f107 0e01 	add.w	lr, r7, #1
 80812b0:	f8c4 e004 	str.w	lr, [r4, #4]
 80812b4:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
 80812b8:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
 80812bc:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
 80812c0:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
 80812c4:	68a7      	ldr	r7, [r4, #8]
 80812c6:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80812c8:	bf1f      	itttt	ne
 80812ca:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80812ce:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80812d2:	3701      	addne	r7, #1
 80812d4:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80812d8:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80812dc:	bf0c      	ite	eq
 80812de:	2701      	moveq	r7, #1
 80812e0:	2702      	movne	r7, #2
 80812e2:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
 80812e6:	6827      	ldr	r7, [r4, #0]
 80812e8:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
 80812ec:	6867      	ldr	r7, [r4, #4]
 80812ee:	3f01      	subs	r7, #1
 80812f0:	60a7      	str	r7, [r4, #8]
				break;
 80812f2:	e773      	b.n	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80812f4:	46d1      	mov	r9, sl
 80812f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80812fa:	e7ac      	b.n	8081256 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xce>
				if (i == -1) return JSMN_ERROR_INVAL;
 80812fc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8081300:	f47f af6c 	bne.w	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
							return JSMN_ERROR_INVAL;
 8081304:	f06f 0001 	mvn.w	r0, #1
 8081308:	e020      	b.n	808134c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				for (; i >= 0; i--) {
 808130a:	f108 38ff 	add.w	r8, r8, #4294967295
 808130e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8081312:	f1ae 0e10 	sub.w	lr, lr, #16
 8081316:	d1b6      	bne.n	8081286 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfe>
 8081318:	e760      	b.n	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	parser->pos++;
 808131a:	f10e 0901 	add.w	r9, lr, #1
 808131e:	f8c4 9000 	str.w	r9, [r4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8081322:	f8d4 8000 	ldr.w	r8, [r4]
 8081326:	4542      	cmp	r2, r8
 8081328:	f240 8091 	bls.w	808144e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
 808132c:	f811 7008 	ldrb.w	r7, [r1, r8]
 8081330:	2f00      	cmp	r7, #0
 8081332:	f000 808c 	beq.w	808144e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
		if (c == '\"') {
 8081336:	2f22      	cmp	r7, #34	; 0x22
 8081338:	d12e      	bne.n	8081398 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
			if (tokens == NULL) {
 808133a:	b1eb      	cbz	r3, 8081378 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
 808133c:	6867      	ldr	r7, [r4, #4]
 808133e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8081340:	42be      	cmp	r6, r7
 8081342:	d805      	bhi.n	8081350 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
 8081344:	f8c4 e000 	str.w	lr, [r4]
					return JSMN_ERROR_NOMEM;
 8081348:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return count;
}
 808134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok->size = 0;
 8081350:	2600      	movs	r6, #0
	token->type = type;
 8081352:	f04f 0a03 	mov.w	sl, #3
	tok = &tokens[parser->toknext++];
 8081356:	f107 0e01 	add.w	lr, r7, #1
 808135a:	ea4f 1807 	mov.w	r8, r7, lsl #4
 808135e:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 8081362:	f8c4 e004 	str.w	lr, [r4, #4]
	tok->start = tok->end = -1;
 8081366:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 808136a:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 808136c:	f8d4 e000 	ldr.w	lr, [r4]
	token->type = type;
 8081370:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
 8081374:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
 8081378:	68a7      	ldr	r7, [r4, #8]
				count++;
 808137a:	3001      	adds	r0, #1
				if (parser->toksuper != -1 && tokens != NULL)
 808137c:	1c7e      	adds	r6, r7, #1
 808137e:	f43f af2d 	beq.w	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 8081382:	2b00      	cmp	r3, #0
 8081384:	f43f af2a 	beq.w	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					tokens[parser->toksuper].size++;
 8081388:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 808138c:	f8de 700c 	ldr.w	r7, [lr, #12]
 8081390:	3701      	adds	r7, #1
 8081392:	f8ce 700c 	str.w	r7, [lr, #12]
 8081396:	e721      	b.n	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
		if (c == '\\' && parser->pos + 1 < len) {
 8081398:	2f5c      	cmp	r7, #92	; 0x5c
 808139a:	d111      	bne.n	80813c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 808139c:	f108 0701 	add.w	r7, r8, #1
 80813a0:	42ba      	cmp	r2, r7
 80813a2:	d90d      	bls.n	80813c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos++;
 80813a4:	6027      	str	r7, [r4, #0]
			switch (js[parser->pos]) {
 80813a6:	5dcf      	ldrb	r7, [r1, r7]
 80813a8:	2f75      	cmp	r7, #117	; 0x75
 80813aa:	d82b      	bhi.n	8081404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80813ac:	2f6d      	cmp	r7, #109	; 0x6d
 80813ae:	d80b      	bhi.n	80813c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>
 80813b0:	2f66      	cmp	r7, #102	; 0x66
 80813b2:	d827      	bhi.n	8081404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80813b4:	2f5b      	cmp	r7, #91	; 0x5b
 80813b6:	d81d      	bhi.n	80813f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x26c>
 80813b8:	2f22      	cmp	r7, #34	; 0x22
 80813ba:	d001      	beq.n	80813c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80813bc:	2f2f      	cmp	r7, #47	; 0x2f
 80813be:	d121      	bne.n	8081404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80813c0:	6827      	ldr	r7, [r4, #0]
 80813c2:	3701      	adds	r7, #1
 80813c4:	6027      	str	r7, [r4, #0]
 80813c6:	e7ac      	b.n	8081322 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x19a>
 80813c8:	3f6e      	subs	r7, #110	; 0x6e
 80813ca:	2f07      	cmp	r7, #7
 80813cc:	d81a      	bhi.n	8081404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80813ce:	a601      	add	r6, pc, #4	; (adr r6, 80813d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24c>)
 80813d0:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
 80813d4:	080813c1 	.word	0x080813c1
 80813d8:	08081405 	.word	0x08081405
 80813dc:	08081405 	.word	0x08081405
 80813e0:	08081405 	.word	0x08081405
 80813e4:	080813c1 	.word	0x080813c1
 80813e8:	08081405 	.word	0x08081405
 80813ec:	080813c1 	.word	0x080813c1
 80813f0:	0808140b 	.word	0x0808140b
 80813f4:	f240 4641 	movw	r6, #1089	; 0x441
 80813f8:	3f5c      	subs	r7, #92	; 0x5c
 80813fa:	b2ff      	uxtb	r7, r7
 80813fc:	fa0c f707 	lsl.w	r7, ip, r7
 8081400:	4237      	tst	r7, r6
 8081402:	d1dd      	bne.n	80813c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos = start;
 8081404:	f8c4 e000 	str.w	lr, [r4]
				if (r < 0) return r;
 8081408:	e77c      	b.n	8081304 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
					parser->pos++;
 808140a:	f04f 0a04 	mov.w	sl, #4
 808140e:	f108 0702 	add.w	r7, r8, #2
 8081412:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8081414:	f8d4 8000 	ldr.w	r8, [r4]
 8081418:	4542      	cmp	r2, r8
 808141a:	d803      	bhi.n	8081424 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
					parser->pos--;
 808141c:	6827      	ldr	r7, [r4, #0]
 808141e:	3f01      	subs	r7, #1
 8081420:	6027      	str	r7, [r4, #0]
					break;
 8081422:	e7cd      	b.n	80813c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8081424:	f811 7008 	ldrb.w	r7, [r1, r8]
 8081428:	2f00      	cmp	r7, #0
 808142a:	d0f7      	beq.n	808141c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 808142c:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 8081430:	f1bb 0f09 	cmp.w	fp, #9
 8081434:	d904      	bls.n	8081440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b8>
 8081436:	f027 0720 	bic.w	r7, r7, #32
 808143a:	3f41      	subs	r7, #65	; 0x41
 808143c:	2f05      	cmp	r7, #5
 808143e:	d8e1      	bhi.n	8081404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
						parser->pos++;
 8081440:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8081444:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
 8081448:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 808144a:	d1e3      	bne.n	8081414 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x28c>
 808144c:	e7e6      	b.n	808141c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
	parser->pos = start;
 808144e:	f8c4 e000 	str.w	lr, [r4]
				return JSMN_ERROR_PART;
 8081452:	f06f 0002 	mvn.w	r0, #2
 8081456:	e779      	b.n	808134c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				if (tokens != NULL && parser->toksuper != -1 &&
 8081458:	2b00      	cmp	r3, #0
 808145a:	f43f aebf 	beq.w	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 808145e:	68a7      	ldr	r7, [r4, #8]
 8081460:	1c7e      	adds	r6, r7, #1
 8081462:	f43f aebb 	beq.w	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 8081466:	013f      	lsls	r7, r7, #4
 8081468:	5ddf      	ldrb	r7, [r3, r7]
 808146a:	3f01      	subs	r7, #1
 808146c:	2f01      	cmp	r7, #1
 808146e:	f67f aeb5 	bls.w	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					for (i = parser->toknext - 1; i >= 0; i--) {
 8081472:	6867      	ldr	r7, [r4, #4]
 8081474:	f107 38ff 	add.w	r8, r7, #4294967295
 8081478:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 808147c:	f1b8 0f00 	cmp.w	r8, #0
 8081480:	f6ff aeac 	blt.w	80811dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8081484:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
 8081488:	3f01      	subs	r7, #1
 808148a:	2f01      	cmp	r7, #1
 808148c:	d808      	bhi.n	80814a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 808148e:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 8081492:	3701      	adds	r7, #1
 8081494:	d004      	beq.n	80814a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
 8081496:	f85e 7c08 	ldr.w	r7, [lr, #-8]
 808149a:	3701      	adds	r7, #1
 808149c:	f43f aefb 	beq.w	8081296 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10e>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80814a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80814a4:	f1ae 0e10 	sub.w	lr, lr, #16
 80814a8:	e7e8      	b.n	808147c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f4>
 80814aa:	f1a7 0920 	sub.w	r9, r7, #32
 80814ae:	4e0a      	ldr	r6, [pc, #40]	; (80814d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
 80814b0:	fa5f f989 	uxtb.w	r9, r9
 80814b4:	fa0c f909 	lsl.w	r9, ip, r9
 80814b8:	ea19 0f06 	tst.w	r9, r6
 80814bc:	f47f aea9 	bne.w	8081212 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80814c0:	3f20      	subs	r7, #32
 80814c2:	2f5e      	cmp	r7, #94	; 0x5e
 80814c4:	d89e      	bhi.n	8081404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80814c6:	f108 0701 	add.w	r7, r8, #1
 80814ca:	6027      	str	r7, [r4, #0]
 80814cc:	e68e      	b.n	80811ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
		switch (js[parser->pos]) {
 80814ce:	2f0d      	cmp	r7, #13
 80814d0:	d1f6      	bne.n	80814c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
 80814d2:	e69e      	b.n	8081212 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80814d4:	00800013 	.word	0x00800013
 80814d8:	04001001 	.word	0x04001001
 80814dc:	f007 09df 	and.w	r9, r7, #223	; 0xdf
 80814e0:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 80814e4:	e7f4      	b.n	80814d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
	if (parser->toknext >= num_tokens) {
 80814e6:	6867      	ldr	r7, [r4, #4]
 80814e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80814ea:	42be      	cmp	r6, r7
 80814ec:	f67f af2a 	bls.w	8081344 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1bc>
	tok->size = 0;
 80814f0:	2600      	movs	r6, #0
	token->type = type;
 80814f2:	f04f 0a04 	mov.w	sl, #4
	tok = &tokens[parser->toknext++];
 80814f6:	f107 0801 	add.w	r8, r7, #1
 80814fa:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80814fe:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 8081502:	f8c4 8004 	str.w	r8, [r4, #4]
	tok->start = tok->end = -1;
 8081506:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 808150a:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 808150c:	f8d4 8000 	ldr.w	r8, [r4]
	token->type = type;
 8081510:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
 8081514:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
 8081518:	6827      	ldr	r7, [r4, #0]
 808151a:	3f01      	subs	r7, #1
 808151c:	e67e      	b.n	808121c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x94>
	if (tokens != NULL) {
 808151e:	2b00      	cmp	r3, #0
 8081520:	f43f af14 	beq.w	808134c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
		for (i = parser->toknext - 1; i >= 0; i--) {
 8081524:	6862      	ldr	r2, [r4, #4]
 8081526:	1e51      	subs	r1, r2, #1
 8081528:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 808152c:	2900      	cmp	r1, #0
 808152e:	f6ff af0d 	blt.w	808134c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 8081532:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8081536:	3201      	adds	r2, #1
 8081538:	d003      	beq.n	8081542 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ba>
 808153a:	f853 2c08 	ldr.w	r2, [r3, #-8]
 808153e:	3201      	adds	r2, #1
 8081540:	d087      	beq.n	8081452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		for (i = parser->toknext - 1; i >= 0; i--) {
 8081542:	3901      	subs	r1, #1
 8081544:	3b10      	subs	r3, #16
 8081546:	e7f1      	b.n	808152c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a4>

08081548 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
 8081548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (tokens) {
 808154a:	6943      	ldr	r3, [r0, #20]
bool JsonParser::parse() {
 808154c:	4604      	mov	r4, r0
 808154e:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
 8081552:	b1c3      	cbz	r3, 8081586 <_ZN10JsonParser5parseEv+0x3e>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 8081554:	2200      	movs	r2, #0
	parser->toknext = 0;
 8081556:	e9c0 2208 	strd	r2, r2, [r0, #32]
	parser->toksuper = -1;
 808155a:	f04f 32ff 	mov.w	r2, #4294967295
 808155e:	6282      	str	r2, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 8081560:	69c2      	ldr	r2, [r0, #28]
 8081562:	9200      	str	r2, [sp, #0]
 8081564:	68c2      	ldr	r2, [r0, #12]
 8081566:	6841      	ldr	r1, [r0, #4]
 8081568:	4630      	mov	r0, r6
 808156a:	f7ff fe0d 	bl	8081188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 808156e:	1c43      	adds	r3, r0, #1
 8081570:	d12e      	bne.n	80815d0 <_ZN10JsonParser5parseEv+0x88>
			if (staticBuffers) {
 8081572:	7c25      	ldrb	r5, [r4, #16]
 8081574:	b115      	cbz	r5, 808157c <_ZN10JsonParser5parseEv+0x34>
				return false;
 8081576:	2000      	movs	r0, #0
}
 8081578:	b003      	add	sp, #12
 808157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			free(tokens);
 808157c:	6960      	ldr	r0, [r4, #20]
 808157e:	f000 fd13 	bl	8081fa8 <free>
			tokens = 0;
 8081582:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 8081584:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
 8081586:	2500      	movs	r5, #0
	parser->toksuper = -1;
 8081588:	f04f 37ff 	mov.w	r7, #4294967295
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 808158c:	462b      	mov	r3, r5
 808158e:	4630      	mov	r0, r6
	parser->toknext = 0;
 8081590:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 8081594:	68e2      	ldr	r2, [r4, #12]
 8081596:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 8081598:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 808159a:	9500      	str	r5, [sp, #0]
 808159c:	f7ff fdf4 	bl	8081188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80815a0:	2800      	cmp	r0, #0
 80815a2:	dbe8      	blt.n	8081576 <_ZN10JsonParser5parseEv+0x2e>
	maxTokens = (size_t) result;
 80815a4:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80815a6:	d01b      	beq.n	80815e0 <_ZN10JsonParser5parseEv+0x98>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80815a8:	0100      	lsls	r0, r0, #4
 80815aa:	f000 fcf5 	bl	8081f98 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80815ae:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80815b0:	4603      	mov	r3, r0
 80815b2:	6160      	str	r0, [r4, #20]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80815b4:	9200      	str	r2, [sp, #0]
 80815b6:	4630      	mov	r0, r6
	parser->toknext = 0;
 80815b8:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80815bc:	68e2      	ldr	r2, [r4, #12]
 80815be:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80815c0:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80815c2:	f7ff fde1 	bl	8081188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		tokensEnd = &tokens[result];
 80815c6:	6963      	ldr	r3, [r4, #20]
 80815c8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		tokensEnd = tokens;
 80815cc:	61a3      	str	r3, [r4, #24]
 80815ce:	e005      	b.n	80815dc <_ZN10JsonParser5parseEv+0x94>
		if (result < 0) {
 80815d0:	2800      	cmp	r0, #0
 80815d2:	dbd0      	blt.n	8081576 <_ZN10JsonParser5parseEv+0x2e>
			tokensEnd = &tokens[result];
 80815d4:	6963      	ldr	r3, [r4, #20]
 80815d6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80815da:	61a0      	str	r0, [r4, #24]
	return true;
 80815dc:	2001      	movs	r0, #1
 80815de:	e7cb      	b.n	8081578 <_ZN10JsonParser5parseEv+0x30>
		tokensEnd = tokens;
 80815e0:	6963      	ldr	r3, [r4, #20]
 80815e2:	e7f3      	b.n	80815cc <_ZN10JsonParser5parseEv+0x84>

080815e4 <_ZN14RunningAverageD1Ev>:
    _ar = (double*) malloc(_size * sizeof(double));
    if (_ar == NULL) _size = 0;
    clear();
}

RunningAverage::~RunningAverage()
 80815e4:	b510      	push	{r4, lr}
 80815e6:	4604      	mov	r4, r0
{
    if (_ar != NULL) free(_ar);
 80815e8:	6900      	ldr	r0, [r0, #16]
 80815ea:	b108      	cbz	r0, 80815f0 <_ZN14RunningAverageD1Ev+0xc>
 80815ec:	f000 fcdc 	bl	8081fa8 <free>
}
 80815f0:	4620      	mov	r0, r4
 80815f2:	bd10      	pop	{r4, pc}

080815f4 <_ZN14RunningAverage5clearEv>:

// resets all counters
void RunningAverage::clear()
{
 80815f4:	b530      	push	{r4, r5, lr}
    _cnt = 0;
    _idx = 0;
    _sum = 0.0;
 80815f6:	2400      	movs	r4, #0
 80815f8:	2500      	movs	r5, #0
    _cnt = 0;
 80815fa:	2300      	movs	r3, #0
    _sum = 0.0;
 80815fc:	e9c0 4502 	strd	r4, r5, [r0, #8]
    _cnt = 0;
 8081600:	7043      	strb	r3, [r0, #1]
    _idx = 0;
 8081602:	7083      	strb	r3, [r0, #2]
    for (uint8_t i = 0; i< _size; i++)
 8081604:	7802      	ldrb	r2, [r0, #0]
 8081606:	b2d9      	uxtb	r1, r3
 8081608:	428a      	cmp	r2, r1
 808160a:	d906      	bls.n	808161a <_ZN14RunningAverage5clearEv+0x26>
    {
        _ar[i] = 0.0; // keeps addValue simple
 808160c:	6902      	ldr	r2, [r0, #16]
 808160e:	3301      	adds	r3, #1
 8081610:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8081614:	e9c2 4500 	strd	r4, r5, [r2]
    for (uint8_t i = 0; i< _size; i++)
 8081618:	e7f4      	b.n	8081604 <_ZN14RunningAverage5clearEv+0x10>
    }
}
 808161a:	bd30      	pop	{r4, r5, pc}

0808161c <_ZN14RunningAverageC1Eh>:
RunningAverage::RunningAverage(uint8_t size)
 808161c:	b510      	push	{r4, lr}
 808161e:	4604      	mov	r4, r0
    _size = size;
 8081620:	7001      	strb	r1, [r0, #0]
    _ar = (double*) malloc(_size * sizeof(double));
 8081622:	00c8      	lsls	r0, r1, #3
 8081624:	f000 fcb8 	bl	8081f98 <malloc>
 8081628:	6120      	str	r0, [r4, #16]
    if (_ar == NULL) _size = 0;
 808162a:	b900      	cbnz	r0, 808162e <_ZN14RunningAverageC1Eh+0x12>
 808162c:	7020      	strb	r0, [r4, #0]
    clear();
 808162e:	4620      	mov	r0, r4
 8081630:	f7ff ffe0 	bl	80815f4 <_ZN14RunningAverage5clearEv>
}
 8081634:	bd10      	pop	{r4, pc}

08081636 <_ZN14RunningAverage8addValueEd>:

// adds a new value to the data-set
void RunningAverage::addValue(double value)
{
 8081636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_ar == NULL) return;
 8081638:	6905      	ldr	r5, [r0, #16]
{
 808163a:	4604      	mov	r4, r0
 808163c:	4616      	mov	r6, r2
 808163e:	461f      	mov	r7, r3
    if (_ar == NULL) return;
 8081640:	b345      	cbz	r5, 8081694 <_ZN14RunningAverage8addValueEd+0x5e>
    _sum -= _ar[_idx];
 8081642:	7883      	ldrb	r3, [r0, #2]
 8081644:	f100 0108 	add.w	r1, r0, #8
 8081648:	e9d1 0100 	ldrd	r0, r1, [r1]
 808164c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8081650:	e9d5 2300 	ldrd	r2, r3, [r5]
 8081654:	f002 f824 	bl	80836a0 <__aeabi_dsub>
 8081658:	e9c4 0102 	strd	r0, r1, [r4, #8]
    _ar[_idx] = value;
 808165c:	e9c5 6700 	strd	r6, r7, [r5]
    _sum += _ar[_idx];
 8081660:	78a5      	ldrb	r5, [r4, #2]
 8081662:	6923      	ldr	r3, [r4, #16]
 8081664:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8081668:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 808166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081670:	f002 f818 	bl	80836a4 <__adddf3>
    _idx++;
 8081674:	3501      	adds	r5, #1
    if (_idx == _size) _idx = 0;  // faster than %
 8081676:	7822      	ldrb	r2, [r4, #0]
    _idx++;
 8081678:	b2ed      	uxtb	r5, r5
    if (_idx == _size) _idx = 0;  // faster than %
 808167a:	4295      	cmp	r5, r2
 808167c:	bf08      	it	eq
 808167e:	2300      	moveq	r3, #0
    _idx++;
 8081680:	70a5      	strb	r5, [r4, #2]
    if (_idx == _size) _idx = 0;  // faster than %
 8081682:	bf08      	it	eq
 8081684:	70a3      	strbeq	r3, [r4, #2]
    if (_cnt < _size) _cnt++;
 8081686:	7863      	ldrb	r3, [r4, #1]
    _sum += _ar[_idx];
 8081688:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if (_cnt < _size) _cnt++;
 808168c:	429a      	cmp	r2, r3
 808168e:	bf84      	itt	hi
 8081690:	3301      	addhi	r3, #1
 8081692:	7063      	strbhi	r3, [r4, #1]
}
 8081694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081696 <_ZN14RunningAverage10getAverageEv>:

// returns the average of the data-set added sofar
double RunningAverage::getAverage()
{
 8081696:	b510      	push	{r4, lr}
 8081698:	4604      	mov	r4, r0
    if (_cnt == 0) return 0;
 808169a:	7840      	ldrb	r0, [r0, #1]
 808169c:	b140      	cbz	r0, 80816b0 <_ZN14RunningAverage10getAverageEv+0x1a>
    return _sum / _cnt;
 808169e:	f002 f94d 	bl	808393c <__aeabi_i2d>
 80816a2:	4602      	mov	r2, r0
 80816a4:	460b      	mov	r3, r1
 80816a6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80816aa:	f002 fadb 	bl	8083c64 <__aeabi_ddiv>
}
 80816ae:	bd10      	pop	{r4, pc}
    if (_cnt == 0) return 0;
 80816b0:	2000      	movs	r0, #0
 80816b2:	2100      	movs	r1, #0
 80816b4:	e7fb      	b.n	80816ae <_ZN14RunningAverage10getAverageEv+0x18>

080816b6 <_ZN14RunningAverage9fillValueEdh>:

// fill the average with a value
// the param number determines how often value is added (weight)
// number should preferably be between 1 and size
void RunningAverage::fillValue(double value, uint8_t number)
{
 80816b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80816ba:	4605      	mov	r5, r0
 80816bc:	4616      	mov	r6, r2
 80816be:	461f      	mov	r7, r3
 80816c0:	f89d 8018 	ldrb.w	r8, [sp, #24]
    clear(); // TODO conditional?  if (clr) clear();
 80816c4:	2400      	movs	r4, #0
 80816c6:	f7ff ff95 	bl	80815f4 <_ZN14RunningAverage5clearEv>

    for (uint8_t i = 0; i < number; i++)
 80816ca:	4544      	cmp	r4, r8
 80816cc:	d006      	beq.n	80816dc <_ZN14RunningAverage9fillValueEdh+0x26>
    {
        addValue(value);
 80816ce:	4632      	mov	r2, r6
 80816d0:	463b      	mov	r3, r7
 80816d2:	4628      	mov	r0, r5
 80816d4:	f7ff ffaf 	bl	8081636 <_ZN14RunningAverage8addValueEd>
    for (uint8_t i = 0; i < number; i++)
 80816d8:	3401      	adds	r4, #1
 80816da:	e7f6      	b.n	80816ca <_ZN14RunningAverage9fillValueEdh+0x14>
    }
}
 80816dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080816e0 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 80816e0:	b510      	push	{r4, lr}
 80816e2:	4604      	mov	r4, r0
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
 80816e4:	f001 ffa4 	bl	8083630 <_Z19__fetch_global_Wirev>
 80816e8:	6803      	ldr	r3, [r0, #0]
 80816ea:	4621      	mov	r1, r4
  #else
  Wire.send(x);
  #endif
}
 80816ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 80816f0:	689b      	ldr	r3, [r3, #8]
 80816f2:	4718      	bx	r3

080816f4 <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 80816f4:	b508      	push	{r3, lr}
  return Wire.read();
 80816f6:	f001 ff9b 	bl	8083630 <_Z19__fetch_global_Wirev>
 80816fa:	6803      	ldr	r3, [r0, #0]
 80816fc:	695b      	ldr	r3, [r3, #20]
 80816fe:	4798      	blx	r3
}
 8081700:	b2c0      	uxtb	r0, r0
 8081702:	bd08      	pop	{r3, pc}

08081704 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8081704:	b570      	push	{r4, r5, r6, lr}
 8081706:	4606      	mov	r6, r0
 8081708:	460d      	mov	r5, r1
 808170a:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 808170c:	f001 ff90 	bl	8083630 <_Z19__fetch_global_Wirev>
 8081710:	4631      	mov	r1, r6
 8081712:	f001 fe69 	bl	80833e8 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8081716:	4628      	mov	r0, r5
 8081718:	f7ff ffe2 	bl	80816e0 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 808171c:	0a20      	lsrs	r0, r4, #8
 808171e:	f7ff ffdf 	bl	80816e0 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8081722:	b2e0      	uxtb	r0, r4
 8081724:	f7ff ffdc 	bl	80816e0 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8081728:	f001 ff82 	bl	8083630 <_Z19__fetch_global_Wirev>
}
 808172c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 8081730:	f001 be62 	b.w	80833f8 <_ZN7TwoWire15endTransmissionEv>

08081734 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8081734:	b510      	push	{r4, lr}
 8081736:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8081738:	f001 ff7a 	bl	8083630 <_Z19__fetch_global_Wirev>
 808173c:	4621      	mov	r1, r4
 808173e:	f001 fe53 	bl	80833e8 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8081742:	2000      	movs	r0, #0
 8081744:	f7ff ffcc 	bl	80816e0 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8081748:	f001 ff72 	bl	8083630 <_Z19__fetch_global_Wirev>
 808174c:	f001 fe54 	bl	80833f8 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8081750:	f001 ff6e 	bl	8083630 <_Z19__fetch_global_Wirev>
 8081754:	4621      	mov	r1, r4
 8081756:	2202      	movs	r2, #2
 8081758:	f001 fe43 	bl	80833e2 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 808175c:	f7ff ffca 	bl	80816f4 <_ZL7i2creadv>
 8081760:	4604      	mov	r4, r0
 8081762:	f7ff ffc7 	bl	80816f4 <_ZL7i2creadv>
 8081766:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 808176a:	b280      	uxth	r0, r0
 808176c:	bd10      	pop	{r4, pc}

0808176e <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 808176e:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8081770:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8081772:	2102      	movs	r1, #2
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8081774:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8081776:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8081778:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 808177a:	4770      	bx	lr

0808177c <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 808177c:	b508      	push	{r3, lr}
  Wire.begin();
 808177e:	f001 ff57 	bl	8083630 <_Z19__fetch_global_Wirev>
}
 8081782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 8081786:	f001 bdfd 	b.w	8083384 <_ZN7TwoWire5beginEv>

0808178a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 808178a:	8081      	strh	r1, [r0, #4]
}
 808178c:	4770      	bx	lr

0808178e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 808178e:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8081790:	b510      	push	{r4, lr}
 8081792:	4604      	mov	r4, r0
  if (channel > 3)
 8081794:	d822      	bhi.n	80817dc <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8081796:	2902      	cmp	r1, #2
  config |= m_gain;
 8081798:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 808179a:	d019      	beq.n	80817d0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 808179c:	2903      	cmp	r1, #3
 808179e:	d01a      	beq.n	80817d6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 80817a0:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 80817a2:	bf14      	ite	ne
 80817a4:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 80817a8:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80817ac:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 80817b0:	2101      	movs	r1, #1
 80817b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80817b6:	7820      	ldrb	r0, [r4, #0]
 80817b8:	f7ff ffa4 	bl	8081704 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 80817bc:	7860      	ldrb	r0, [r4, #1]
 80817be:	f000 ffe7 	bl	8082790 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 80817c2:	7820      	ldrb	r0, [r4, #0]
 80817c4:	f7ff ffb6 	bl	8081734 <_ZL12readRegisterhh.isra.0>
 80817c8:	78a3      	ldrb	r3, [r4, #2]
 80817ca:	4118      	asrs	r0, r3
 80817cc:	b280      	uxth	r0, r0
}
 80817ce:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 80817d0:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 80817d4:	e7ea      	b.n	80817ac <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80817d6:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 80817da:	e7e7      	b.n	80817ac <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 80817dc:	2000      	movs	r0, #0
 80817de:	e7f6      	b.n	80817ce <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>

080817e0 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 80817e0:	b430      	push	{r4, r5}
 80817e2:	4605      	mov	r5, r0
 80817e4:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 80817e6:	681b      	ldr	r3, [r3, #0]
 80817e8:	681c      	ldr	r4, [r3, #0]
 80817ea:	4613      	mov	r3, r2
 80817ec:	46a4      	mov	ip, r4
 80817ee:	460a      	mov	r2, r1
 80817f0:	4629      	mov	r1, r5
}
 80817f2:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 80817f4:	4760      	bx	ip

080817f6 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80817f6:	b40e      	push	{r1, r2, r3}
 80817f8:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80817fa:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80817fc:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80817fe:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8081800:	b08d      	sub	sp, #52	; 0x34
 8081802:	aa0f      	add	r2, sp, #60	; 0x3c
 8081804:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8081808:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808180c:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8081810:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081812:	201e      	movs	r0, #30
 8081814:	aa04      	add	r2, sp, #16
 8081816:	f000 fac1 	bl	8081d9c <log_message_v>
}
 808181a:	b00d      	add	sp, #52	; 0x34
 808181c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081820:	b003      	add	sp, #12
 8081822:	4770      	bx	lr

08081824 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8081824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081828:	460c      	mov	r4, r1
 808182a:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 808182c:	494d      	ldr	r1, [pc, #308]	; (8081964 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 808182e:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8081830:	4616      	mov	r6, r2
 8081832:	461d      	mov	r5, r3
	String typeStr;
 8081834:	f000 fcea 	bl	808220c <_ZN6StringC1EPKc>
	switch(type) {
 8081838:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 808183c:	d064      	beq.n	8081908 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 808183e:	dc1f      	bgt.n	8081880 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8081840:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8081844:	d05c      	beq.n	8081900 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8081846:	dc13      	bgt.n	8081870 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8081848:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 808184c:	d056      	beq.n	80818fc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 808184e:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8081852:	d055      	beq.n	8081900 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8081854:	b35c      	cbz	r4, 80818ae <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 8081856:	4622      	mov	r2, r4
 8081858:	a808      	add	r0, sp, #32
 808185a:	4943      	ldr	r1, [pc, #268]	; (8081968 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 808185c:	f000 fdb2 	bl	80823c4 <_ZN6String6formatEPKcz>
 8081860:	a908      	add	r1, sp, #32
 8081862:	a804      	add	r0, sp, #16
 8081864:	f000 fd1c 	bl	80822a0 <_ZN6StringaSEOS_>
 8081868:	a808      	add	r0, sp, #32
 808186a:	f000 fc85 	bl	8082178 <_ZN6StringD1Ev>
		break;
 808186e:	e022      	b.n	80818b6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 8081870:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8081874:	d046      	beq.n	8081904 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 8081876:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 808187a:	d1ec      	bne.n	8081856 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 808187c:	493b      	ldr	r1, [pc, #236]	; (808196c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 808187e:	e017      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8081880:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8081884:	d046      	beq.n	8081914 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8081886:	dc0a      	bgt.n	808189e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8081888:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 808188c:	d03e      	beq.n	808190c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 808188e:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8081892:	d03d      	beq.n	8081910 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 8081894:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8081898:	d1dd      	bne.n	8081856 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 808189a:	4935      	ldr	r1, [pc, #212]	; (8081970 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 808189c:	e008      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 808189e:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 80818a2:	d037      	beq.n	8081914 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 80818a4:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 80818a8:	d1d5      	bne.n	8081856 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 80818aa:	4932      	ldr	r1, [pc, #200]	; (8081974 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 80818ac:	e000      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 80818ae:	4932      	ldr	r1, [pc, #200]	; (8081978 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 80818b0:	a804      	add	r0, sp, #16
 80818b2:	f000 fcfd 	bl	80822b0 <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 80818b6:	462b      	mov	r3, r5
 80818b8:	9a04      	ldr	r2, [sp, #16]
 80818ba:	4930      	ldr	r1, [pc, #192]	; (808197c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 80818bc:	4830      	ldr	r0, [pc, #192]	; (8081980 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80818be:	f7ff ff9a 	bl	80817f6 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 80818c2:	4928      	ldr	r1, [pc, #160]	; (8081964 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80818c4:	a808      	add	r0, sp, #32
 80818c6:	f000 fca1 	bl	808220c <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 80818ca:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 80818cc:	4f2d      	ldr	r7, [pc, #180]	; (8081984 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80818ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80819a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 80818d2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80819a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 80818d6:	42ac      	cmp	r4, r5
 80818d8:	da35      	bge.n	8081946 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 80818da:	5d31      	ldrb	r1, [r6, r4]
 80818dc:	290a      	cmp	r1, #10
 80818de:	d11b      	bne.n	8081918 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 80818e0:	4649      	mov	r1, r9
 80818e2:	a808      	add	r0, sp, #32
 80818e4:	f000 fd1f 	bl	8082326 <_ZN6String6concatEPKc>
			Log.info(out);
 80818e8:	9908      	ldr	r1, [sp, #32]
 80818ea:	4825      	ldr	r0, [pc, #148]	; (8081980 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80818ec:	f7ff ff83 	bl	80817f6 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 80818f0:	491c      	ldr	r1, [pc, #112]	; (8081964 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80818f2:	a808      	add	r0, sp, #32
 80818f4:	f000 fcdc 	bl	80822b0 <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 80818f8:	3401      	adds	r4, #1
 80818fa:	e7ec      	b.n	80818d6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 80818fc:	4922      	ldr	r1, [pc, #136]	; (8081988 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 80818fe:	e7d7      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 8081900:	4922      	ldr	r1, [pc, #136]	; (808198c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8081902:	e7d5      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 8081904:	4922      	ldr	r1, [pc, #136]	; (8081990 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8081906:	e7d3      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 8081908:	4922      	ldr	r1, [pc, #136]	; (8081994 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 808190a:	e7d1      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 808190c:	4922      	ldr	r1, [pc, #136]	; (8081998 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 808190e:	e7cf      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 8081910:	4922      	ldr	r1, [pc, #136]	; (808199c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8081912:	e7cd      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 8081914:	4922      	ldr	r1, [pc, #136]	; (80819a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8081916:	e7cb      	b.n	80818b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 8081918:	290d      	cmp	r1, #13
 808191a:	d104      	bne.n	8081926 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 808191c:	4641      	mov	r1, r8
			out.concat(hex);
 808191e:	a808      	add	r0, sp, #32
 8081920:	f000 fd01 	bl	8082326 <_ZN6String6concatEPKc>
 8081924:	e7e8      	b.n	80818f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8081926:	f1a1 0320 	sub.w	r3, r1, #32
 808192a:	2b5e      	cmp	r3, #94	; 0x5e
 808192c:	d907      	bls.n	808193e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 808192e:	460b      	mov	r3, r1
 8081930:	463a      	mov	r2, r7
 8081932:	210a      	movs	r1, #10
 8081934:	a801      	add	r0, sp, #4
 8081936:	f000 fb57 	bl	8081fe8 <snprintf>
			out.concat(hex);
 808193a:	a901      	add	r1, sp, #4
 808193c:	e7ef      	b.n	808191e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 808193e:	a808      	add	r0, sp, #32
 8081940:	f000 fd00 	bl	8082344 <_ZN6String6concatEc>
 8081944:	e7d8      	b.n	80818f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 8081946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8081948:	b11b      	cbz	r3, 8081952 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 808194a:	9908      	ldr	r1, [sp, #32]
 808194c:	480c      	ldr	r0, [pc, #48]	; (8081980 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808194e:	f7ff ff52 	bl	80817f6 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8081952:	a808      	add	r0, sp, #32
 8081954:	f000 fc10 	bl	8082178 <_ZN6StringD1Ev>
	String typeStr;
 8081958:	a804      	add	r0, sp, #16
 808195a:	f000 fc0d 	bl	8082178 <_ZN6StringD1Ev>
}
 808195e:	b00d      	add	sp, #52	; 0x34
 8081960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081964:	0808643d 	.word	0x0808643d
 8081968:	080863f3 	.word	0x080863f3
 808196c:	08086399 	.word	0x08086399
 8081970:	080863b8 	.word	0x080863b8
 8081974:	080863e6 	.word	0x080863e6
 8081978:	0808636c 	.word	0x0808636c
 808197c:	080863fd 	.word	0x080863fd
 8081980:	20000504 	.word	0x20000504
 8081984:	08086424 	.word	0x08086424
 8081988:	08086379 	.word	0x08086379
 808198c:	08086381 	.word	0x08086381
 8081990:	0808638c 	.word	0x0808638c
 8081994:	080863a8 	.word	0x080863a8
 8081998:	080863c2 	.word	0x080863c2
 808199c:	080863d0 	.word	0x080863d0
 80819a0:	080863dc 	.word	0x080863dc
 80819a4:	08086421 	.word	0x08086421
 80819a8:	0808641e 	.word	0x0808641e

080819ac <_ZN30CellularHelperRSSIQualResponse11postProcessEv>:
void CellularHelperRSSIQualResponse::postProcess() {
 80819ac:	b510      	push	{r4, lr}
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
 80819ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80819b2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
void CellularHelperRSSIQualResponse::postProcess() {
 80819b6:	4604      	mov	r4, r0
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
 80819b8:	4909      	ldr	r1, [pc, #36]	; (80819e0 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x34>)
 80819ba:	69c0      	ldr	r0, [r0, #28]
 80819bc:	f000 fb0c 	bl	8081fd8 <sscanf>
 80819c0:	2802      	cmp	r0, #2
 80819c2:	d10a      	bne.n	80819da <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2e>
		if (rssi < 99) {
 80819c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80819c6:	2b62      	cmp	r3, #98	; 0x62
			rssi = 0;
 80819c8:	bfce      	itee	gt
 80819ca:	2300      	movgt	r3, #0
			rssi = -113 + (rssi * 2);
 80819cc:	005b      	lslle	r3, r3, #1
 80819ce:	3b71      	suble	r3, #113	; 0x71
 80819d0:	62e3      	str	r3, [r4, #44]	; 0x2c
		resp = RESP_OK;
 80819d2:	f06f 0301 	mvn.w	r3, #1
		resp = RESP_ERROR;
 80819d6:	6063      	str	r3, [r4, #4]
}
 80819d8:	bd10      	pop	{r4, pc}
		resp = RESP_ERROR;
 80819da:	f06f 0302 	mvn.w	r3, #2
 80819de:	e7fa      	b.n	80819d6 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2a>
 80819e0:	0808642b 	.word	0x0808642b

080819e4 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 80819e4:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 80819e6:	f06f 0302 	mvn.w	r3, #2
 80819ea:	6043      	str	r3, [r0, #4]
 80819ec:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80819ee:	4604      	mov	r4, r0
 80819f0:	4d07      	ldr	r5, [pc, #28]	; (8081a10 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 80819f2:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80819f4:	4b07      	ldr	r3, [pc, #28]	; (8081a14 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 80819f6:	4629      	mov	r1, r5
 80819f8:	f840 3b0c 	str.w	r3, [r0], #12
 80819fc:	f000 fc06 	bl	808220c <_ZN6StringC1EPKc>
 8081a00:	4629      	mov	r1, r5
 8081a02:	f104 001c 	add.w	r0, r4, #28
 8081a06:	f000 fc01 	bl	808220c <_ZN6StringC1EPKc>
 8081a0a:	4620      	mov	r0, r4
 8081a0c:	bd38      	pop	{r3, r4, r5, pc}
 8081a0e:	bf00      	nop
 8081a10:	0808643d 	.word	0x0808643d
 8081a14:	0808645c 	.word	0x0808645c

08081a18 <_ZNK19CellularHelperClass11getRSSIQualEv>:
CellularHelperRSSIQualResponse CellularHelperClass::getRSSIQual() const {
 8081a18:	b510      	push	{r4, lr}
 8081a1a:	4604      	mov	r4, r0
 * Note that for 2G, qual is not available and 99 is always returned.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperRSSIQualResponse : public CellularHelperPlusStringResponse {
 8081a1c:	f7ff ffe2 	bl	80819e4 <_ZN32CellularHelperPlusStringResponseC1Ev>
 8081a20:	4b0c      	ldr	r3, [pc, #48]	; (8081a54 <_ZNK19CellularHelperClass11getRSSIQualEv+0x3c>)
	resp.command = "CSQ";
 8081a22:	490d      	ldr	r1, [pc, #52]	; (8081a58 <_ZNK19CellularHelperClass11getRSSIQualEv+0x40>)
 8081a24:	6023      	str	r3, [r4, #0]
 8081a26:	2300      	movs	r3, #0
 8081a28:	f104 000c 	add.w	r0, r4, #12
 8081a2c:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8081a30:	f000 fc3e 	bl	80822b0 <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8081a34:	f242 7210 	movw	r2, #10000	; 0x2710
 8081a38:	4621      	mov	r1, r4
 8081a3a:	4b08      	ldr	r3, [pc, #32]	; (8081a5c <_ZNK19CellularHelperClass11getRSSIQualEv+0x44>)
 8081a3c:	4808      	ldr	r0, [pc, #32]	; (8081a60 <_ZNK19CellularHelperClass11getRSSIQualEv+0x48>)
 8081a3e:	f000 f975 	bl	8081d2c <cellular_command>
	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CSQ\r\n");
 8081a42:	6060      	str	r0, [r4, #4]
	if (resp.resp == RESP_OK) {
 8081a44:	3002      	adds	r0, #2
 8081a46:	d102      	bne.n	8081a4e <_ZNK19CellularHelperClass11getRSSIQualEv+0x36>
		resp.postProcess();
 8081a48:	4620      	mov	r0, r4
 8081a4a:	f7ff ffaf 	bl	80819ac <_ZN30CellularHelperRSSIQualResponse11postProcessEv>
}
 8081a4e:	4620      	mov	r0, r4
 8081a50:	bd10      	pop	{r4, pc}
 8081a52:	bf00      	nop
 8081a54:	08086450 	.word	0x08086450
 8081a58:	08086431 	.word	0x08086431
 8081a5c:	08086435 	.word	0x08086435
 8081a60:	080817e1 	.word	0x080817e1

08081a64 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8081a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081a68:	460c      	mov	r4, r1
 8081a6a:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 8081a6c:	1c59      	adds	r1, r3, #1
 8081a6e:	68a3      	ldr	r3, [r4, #8]
 8081a70:	4620      	mov	r0, r4
 8081a72:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8081a74:	4617      	mov	r7, r2
 8081a76:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 8081a7a:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 8081a7c:	f000 fb9a 	bl	80821b4 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8081a80:	42b5      	cmp	r5, r6
 8081a82:	da0c      	bge.n	8081a9e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8081a84:	5d79      	ldrb	r1, [r7, r5]
 8081a86:	f1b8 0f00 	cmp.w	r8, #0
 8081a8a:	d003      	beq.n	8081a94 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 8081a8c:	290d      	cmp	r1, #13
 8081a8e:	d004      	beq.n	8081a9a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 8081a90:	290a      	cmp	r1, #10
 8081a92:	d002      	beq.n	8081a9a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 8081a94:	4620      	mov	r0, r4
 8081a96:	f000 fc55 	bl	8082344 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 8081a9a:	3501      	adds	r5, #1
 8081a9c:	e7f0      	b.n	8081a80 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 8081a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08081aa4 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8081aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8081aa6:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8081aaa:	4606      	mov	r6, r0
 8081aac:	460d      	mov	r5, r1
 8081aae:	4617      	mov	r7, r2
 8081ab0:	461c      	mov	r4, r3
 8081ab2:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 8081ab4:	f1bc 0f00 	cmp.w	ip, #0
 8081ab8:	d001      	beq.n	8081abe <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 8081aba:	f7ff feb3 	bl	8081824 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 8081abe:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8081ac2:	d12a      	bne.n	8081b1a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 8081ac4:	1c60      	adds	r0, r4, #1
 8081ac6:	f000 fa67 	bl	8081f98 <malloc>
		if (copy) {
 8081aca:	4605      	mov	r5, r0
 8081acc:	b328      	cbz	r0, 8081b1a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8081ace:	4622      	mov	r2, r4
 8081ad0:	4639      	mov	r1, r7
 8081ad2:	f002 fc18 	bl	8084306 <strncpy>
			copy[len] = 0;
 8081ad6:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8081ad8:	2120      	movs	r1, #32
			copy[len] = 0;
 8081ada:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8081adc:	4a11      	ldr	r2, [pc, #68]	; (8081b24 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 8081ade:	68f3      	ldr	r3, [r6, #12]
 8081ae0:	a802      	add	r0, sp, #8
 8081ae2:	f000 fa81 	bl	8081fe8 <snprintf>
			char *start = strstr(copy, searchFor);
 8081ae6:	4628      	mov	r0, r5
 8081ae8:	a902      	add	r1, sp, #8
 8081aea:	f002 fc1f 	bl	808432c <strstr>
			if (start) {
 8081aee:	4604      	mov	r4, r0
 8081af0:	b180      	cbz	r0, 8081b14 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 8081af2:	a802      	add	r0, sp, #8
 8081af4:	f002 fbed 	bl	80842d2 <strlen>
 8081af8:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 8081afa:	210d      	movs	r1, #13
 8081afc:	4620      	mov	r0, r4
 8081afe:	f002 fbad 	bl	808425c <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 8081b02:	2301      	movs	r3, #1
 8081b04:	4622      	mov	r2, r4
 8081b06:	9300      	str	r3, [sp, #0]
 8081b08:	f106 011c 	add.w	r1, r6, #28
 8081b0c:	1b03      	subs	r3, r0, r4
 8081b0e:	4806      	ldr	r0, [pc, #24]	; (8081b28 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8081b10:	f7ff ffa8 	bl	8081a64 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 8081b14:	4628      	mov	r0, r5
 8081b16:	f000 fa47 	bl	8081fa8 <free>
}
 8081b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8081b1e:	b00b      	add	sp, #44	; 0x2c
 8081b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081b22:	bf00      	nop
 8081b24:	0808643e 	.word	0x0808643e
 8081b28:	200004f1 	.word	0x200004f1

08081b2c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081b2c:	b508      	push	{r3, lr}
 8081b2e:	4b02      	ldr	r3, [pc, #8]	; (8081b38 <HAL_Pin_Mode+0xc>)
 8081b30:	681b      	ldr	r3, [r3, #0]
 8081b32:	689b      	ldr	r3, [r3, #8]
 8081b34:	9301      	str	r3, [sp, #4]
 8081b36:	bd08      	pop	{r3, pc}
 8081b38:	080401b0 	.word	0x080401b0

08081b3c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081b3c:	b508      	push	{r3, lr}
 8081b3e:	4b02      	ldr	r3, [pc, #8]	; (8081b48 <HAL_Get_Pin_Mode+0xc>)
 8081b40:	681b      	ldr	r3, [r3, #0]
 8081b42:	68db      	ldr	r3, [r3, #12]
 8081b44:	9301      	str	r3, [sp, #4]
 8081b46:	bd08      	pop	{r3, pc}
 8081b48:	080401b0 	.word	0x080401b0

08081b4c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081b4c:	b508      	push	{r3, lr}
 8081b4e:	4b02      	ldr	r3, [pc, #8]	; (8081b58 <HAL_GPIO_Write+0xc>)
 8081b50:	681b      	ldr	r3, [r3, #0]
 8081b52:	691b      	ldr	r3, [r3, #16]
 8081b54:	9301      	str	r3, [sp, #4]
 8081b56:	bd08      	pop	{r3, pc}
 8081b58:	080401b0 	.word	0x080401b0

08081b5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081b5c:	b508      	push	{r3, lr}
 8081b5e:	4b02      	ldr	r3, [pc, #8]	; (8081b68 <HAL_RNG_GetRandomNumber+0xc>)
 8081b60:	681b      	ldr	r3, [r3, #0]
 8081b62:	685b      	ldr	r3, [r3, #4]
 8081b64:	9301      	str	r3, [sp, #4]
 8081b66:	bd08      	pop	{r3, pc}
 8081b68:	0804019c 	.word	0x0804019c

08081b6c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081b6c:	b508      	push	{r3, lr}
 8081b6e:	4b02      	ldr	r3, [pc, #8]	; (8081b78 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081b70:	681b      	ldr	r3, [r3, #0]
 8081b72:	695b      	ldr	r3, [r3, #20]
 8081b74:	9301      	str	r3, [sp, #4]
 8081b76:	bd08      	pop	{r3, pc}
 8081b78:	0804019c 	.word	0x0804019c

08081b7c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8081b7c:	b508      	push	{r3, lr}
 8081b7e:	4b02      	ldr	r3, [pc, #8]	; (8081b88 <hal_rtc_time_is_valid+0xc>)
 8081b80:	681b      	ldr	r3, [r3, #0]
 8081b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081b84:	9301      	str	r3, [sp, #4]
 8081b86:	bd08      	pop	{r3, pc}
 8081b88:	0804019c 	.word	0x0804019c

08081b8c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8081b8c:	b508      	push	{r3, lr}
 8081b8e:	4b02      	ldr	r3, [pc, #8]	; (8081b98 <hal_rtc_get_time+0xc>)
 8081b90:	681b      	ldr	r3, [r3, #0]
 8081b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081b94:	9301      	str	r3, [sp, #4]
 8081b96:	bd08      	pop	{r3, pc}
 8081b98:	0804019c 	.word	0x0804019c

08081b9c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081b9c:	b508      	push	{r3, lr}
 8081b9e:	4b02      	ldr	r3, [pc, #8]	; (8081ba8 <os_mutex_recursive_create+0xc>)
 8081ba0:	681b      	ldr	r3, [r3, #0]
 8081ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081ba4:	9301      	str	r3, [sp, #4]
 8081ba6:	bd08      	pop	{r3, pc}
 8081ba8:	080401d0 	.word	0x080401d0

08081bac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081bac:	b508      	push	{r3, lr}
 8081bae:	4b02      	ldr	r3, [pc, #8]	; (8081bb8 <os_mutex_recursive_destroy+0xc>)
 8081bb0:	681b      	ldr	r3, [r3, #0]
 8081bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081bb4:	9301      	str	r3, [sp, #4]
 8081bb6:	bd08      	pop	{r3, pc}
 8081bb8:	080401d0 	.word	0x080401d0

08081bbc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8081bbc:	b508      	push	{r3, lr}
 8081bbe:	4b02      	ldr	r3, [pc, #8]	; (8081bc8 <hal_usart_init+0xc>)
 8081bc0:	681b      	ldr	r3, [r3, #0]
 8081bc2:	699b      	ldr	r3, [r3, #24]
 8081bc4:	9301      	str	r3, [sp, #4]
 8081bc6:	bd08      	pop	{r3, pc}
 8081bc8:	080401c4 	.word	0x080401c4

08081bcc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8081bcc:	b508      	push	{r3, lr}
 8081bce:	4b02      	ldr	r3, [pc, #8]	; (8081bd8 <hal_usart_write+0xc>)
 8081bd0:	681b      	ldr	r3, [r3, #0]
 8081bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081bd4:	9301      	str	r3, [sp, #4]
 8081bd6:	bd08      	pop	{r3, pc}
 8081bd8:	080401c4 	.word	0x080401c4

08081bdc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8081bdc:	b508      	push	{r3, lr}
 8081bde:	4b02      	ldr	r3, [pc, #8]	; (8081be8 <hal_usart_available+0xc>)
 8081be0:	681b      	ldr	r3, [r3, #0]
 8081be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081be4:	9301      	str	r3, [sp, #4]
 8081be6:	bd08      	pop	{r3, pc}
 8081be8:	080401c4 	.word	0x080401c4

08081bec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8081bec:	b508      	push	{r3, lr}
 8081bee:	4b02      	ldr	r3, [pc, #8]	; (8081bf8 <hal_usart_read+0xc>)
 8081bf0:	681b      	ldr	r3, [r3, #0]
 8081bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081bf4:	9301      	str	r3, [sp, #4]
 8081bf6:	bd08      	pop	{r3, pc}
 8081bf8:	080401c4 	.word	0x080401c4

08081bfc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8081bfc:	b508      	push	{r3, lr}
 8081bfe:	4b02      	ldr	r3, [pc, #8]	; (8081c08 <hal_usart_peek+0xc>)
 8081c00:	681b      	ldr	r3, [r3, #0]
 8081c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081c04:	9301      	str	r3, [sp, #4]
 8081c06:	bd08      	pop	{r3, pc}
 8081c08:	080401c4 	.word	0x080401c4

08081c0c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8081c0c:	b508      	push	{r3, lr}
 8081c0e:	4b02      	ldr	r3, [pc, #8]	; (8081c18 <hal_usart_flush+0xc>)
 8081c10:	681b      	ldr	r3, [r3, #0]
 8081c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081c14:	9301      	str	r3, [sp, #4]
 8081c16:	bd08      	pop	{r3, pc}
 8081c18:	080401c4 	.word	0x080401c4

08081c1c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8081c1c:	b508      	push	{r3, lr}
 8081c1e:	4b02      	ldr	r3, [pc, #8]	; (8081c28 <hal_usart_is_enabled+0xc>)
 8081c20:	681b      	ldr	r3, [r3, #0]
 8081c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081c24:	9301      	str	r3, [sp, #4]
 8081c26:	bd08      	pop	{r3, pc}
 8081c28:	080401c4 	.word	0x080401c4

08081c2c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8081c2c:	b508      	push	{r3, lr}
 8081c2e:	4b02      	ldr	r3, [pc, #8]	; (8081c38 <hal_usart_available_data_for_write+0xc>)
 8081c30:	681b      	ldr	r3, [r3, #0]
 8081c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081c34:	9301      	str	r3, [sp, #4]
 8081c36:	bd08      	pop	{r3, pc}
 8081c38:	080401c4 	.word	0x080401c4

08081c3c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8081c3c:	b508      	push	{r3, lr}
 8081c3e:	4b02      	ldr	r3, [pc, #8]	; (8081c48 <hal_i2c_begin+0xc>)
 8081c40:	681b      	ldr	r3, [r3, #0]
 8081c42:	68db      	ldr	r3, [r3, #12]
 8081c44:	9301      	str	r3, [sp, #4]
 8081c46:	bd08      	pop	{r3, pc}
 8081c48:	080401ac 	.word	0x080401ac

08081c4c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8081c4c:	b508      	push	{r3, lr}
 8081c4e:	4b02      	ldr	r3, [pc, #8]	; (8081c58 <hal_i2c_begin_transmission+0xc>)
 8081c50:	681b      	ldr	r3, [r3, #0]
 8081c52:	699b      	ldr	r3, [r3, #24]
 8081c54:	9301      	str	r3, [sp, #4]
 8081c56:	bd08      	pop	{r3, pc}
 8081c58:	080401ac 	.word	0x080401ac

08081c5c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8081c5c:	b508      	push	{r3, lr}
 8081c5e:	4b02      	ldr	r3, [pc, #8]	; (8081c68 <hal_i2c_end_transmission+0xc>)
 8081c60:	681b      	ldr	r3, [r3, #0]
 8081c62:	69db      	ldr	r3, [r3, #28]
 8081c64:	9301      	str	r3, [sp, #4]
 8081c66:	bd08      	pop	{r3, pc}
 8081c68:	080401ac 	.word	0x080401ac

08081c6c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8081c6c:	b508      	push	{r3, lr}
 8081c6e:	4b02      	ldr	r3, [pc, #8]	; (8081c78 <hal_i2c_write+0xc>)
 8081c70:	681b      	ldr	r3, [r3, #0]
 8081c72:	6a1b      	ldr	r3, [r3, #32]
 8081c74:	9301      	str	r3, [sp, #4]
 8081c76:	bd08      	pop	{r3, pc}
 8081c78:	080401ac 	.word	0x080401ac

08081c7c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8081c7c:	b508      	push	{r3, lr}
 8081c7e:	4b02      	ldr	r3, [pc, #8]	; (8081c88 <hal_i2c_available+0xc>)
 8081c80:	681b      	ldr	r3, [r3, #0]
 8081c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081c84:	9301      	str	r3, [sp, #4]
 8081c86:	bd08      	pop	{r3, pc}
 8081c88:	080401ac 	.word	0x080401ac

08081c8c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8081c8c:	b508      	push	{r3, lr}
 8081c8e:	4b02      	ldr	r3, [pc, #8]	; (8081c98 <hal_i2c_read+0xc>)
 8081c90:	681b      	ldr	r3, [r3, #0]
 8081c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081c94:	9301      	str	r3, [sp, #4]
 8081c96:	bd08      	pop	{r3, pc}
 8081c98:	080401ac 	.word	0x080401ac

08081c9c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8081c9c:	b508      	push	{r3, lr}
 8081c9e:	4b02      	ldr	r3, [pc, #8]	; (8081ca8 <hal_i2c_peek+0xc>)
 8081ca0:	681b      	ldr	r3, [r3, #0]
 8081ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081ca4:	9301      	str	r3, [sp, #4]
 8081ca6:	bd08      	pop	{r3, pc}
 8081ca8:	080401ac 	.word	0x080401ac

08081cac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8081cac:	b508      	push	{r3, lr}
 8081cae:	4b02      	ldr	r3, [pc, #8]	; (8081cb8 <hal_i2c_flush+0xc>)
 8081cb0:	681b      	ldr	r3, [r3, #0]
 8081cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081cb4:	9301      	str	r3, [sp, #4]
 8081cb6:	bd08      	pop	{r3, pc}
 8081cb8:	080401ac 	.word	0x080401ac

08081cbc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8081cbc:	b508      	push	{r3, lr}
 8081cbe:	4b02      	ldr	r3, [pc, #8]	; (8081cc8 <hal_i2c_is_enabled+0xc>)
 8081cc0:	681b      	ldr	r3, [r3, #0]
 8081cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081cc4:	9301      	str	r3, [sp, #4]
 8081cc6:	bd08      	pop	{r3, pc}
 8081cc8:	080401ac 	.word	0x080401ac

08081ccc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8081ccc:	b508      	push	{r3, lr}
 8081cce:	4b02      	ldr	r3, [pc, #8]	; (8081cd8 <hal_i2c_init+0xc>)
 8081cd0:	681b      	ldr	r3, [r3, #0]
 8081cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081cd4:	9301      	str	r3, [sp, #4]
 8081cd6:	bd08      	pop	{r3, pc}
 8081cd8:	080401ac 	.word	0x080401ac

08081cdc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081cdc:	b508      	push	{r3, lr}
 8081cde:	4b02      	ldr	r3, [pc, #8]	; (8081ce8 <hal_i2c_request_ex+0xc>)
 8081ce0:	681b      	ldr	r3, [r3, #0]
 8081ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081ce4:	9301      	str	r3, [sp, #4]
 8081ce6:	bd08      	pop	{r3, pc}
 8081ce8:	080401ac 	.word	0x080401ac

08081cec <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081cec:	b508      	push	{r3, lr}
 8081cee:	4b02      	ldr	r3, [pc, #8]	; (8081cf8 <hal_spi_init+0xc>)
 8081cf0:	681b      	ldr	r3, [r3, #0]
 8081cf2:	69db      	ldr	r3, [r3, #28]
 8081cf4:	9301      	str	r3, [sp, #4]
 8081cf6:	bd08      	pop	{r3, pc}
 8081cf8:	080401b4 	.word	0x080401b4

08081cfc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8081cfc:	b508      	push	{r3, lr}
 8081cfe:	4b02      	ldr	r3, [pc, #8]	; (8081d08 <hal_spi_is_enabled+0xc>)
 8081d00:	681b      	ldr	r3, [r3, #0]
 8081d02:	6a1b      	ldr	r3, [r3, #32]
 8081d04:	9301      	str	r3, [sp, #4]
 8081d06:	bd08      	pop	{r3, pc}
 8081d08:	080401b4 	.word	0x080401b4

08081d0c <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 8081d0c:	b508      	push	{r3, lr}
 8081d0e:	4b02      	ldr	r3, [pc, #8]	; (8081d18 <cellular_credentials_set+0xc>)
 8081d10:	681b      	ldr	r3, [r3, #0]
 8081d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081d14:	9301      	str	r3, [sp, #4]
 8081d16:	bd08      	pop	{r3, pc}
 8081d18:	08060020 	.word	0x08060020

08081d1c <inet_gethostbyname>:
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081d1c:	b508      	push	{r3, lr}
 8081d1e:	4b02      	ldr	r3, [pc, #8]	; (8081d28 <inet_gethostbyname+0xc>)
 8081d20:	681b      	ldr	r3, [r3, #0]
 8081d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081d24:	9301      	str	r3, [sp, #4]
 8081d26:	bd08      	pop	{r3, pc}
 8081d28:	08060020 	.word	0x08060020

08081d2c <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081d2c:	b508      	push	{r3, lr}
 8081d2e:	4b02      	ldr	r3, [pc, #8]	; (8081d38 <cellular_command+0xc>)
 8081d30:	681b      	ldr	r3, [r3, #0]
 8081d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081d34:	9301      	str	r3, [sp, #4]
 8081d36:	bd08      	pop	{r3, pc}
 8081d38:	08060020 	.word	0x08060020

08081d3c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081d3c:	b508      	push	{r3, lr}
 8081d3e:	4b02      	ldr	r3, [pc, #8]	; (8081d48 <HAL_USB_USART_Init+0xc>)
 8081d40:	681b      	ldr	r3, [r3, #0]
 8081d42:	681b      	ldr	r3, [r3, #0]
 8081d44:	9301      	str	r3, [sp, #4]
 8081d46:	bd08      	pop	{r3, pc}
 8081d48:	0806001c 	.word	0x0806001c

08081d4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081d4c:	b508      	push	{r3, lr}
 8081d4e:	4b02      	ldr	r3, [pc, #8]	; (8081d58 <HAL_USB_USART_Available_Data+0xc>)
 8081d50:	681b      	ldr	r3, [r3, #0]
 8081d52:	691b      	ldr	r3, [r3, #16]
 8081d54:	9301      	str	r3, [sp, #4]
 8081d56:	bd08      	pop	{r3, pc}
 8081d58:	0806001c 	.word	0x0806001c

08081d5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081d5c:	b508      	push	{r3, lr}
 8081d5e:	4b02      	ldr	r3, [pc, #8]	; (8081d68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081d60:	681b      	ldr	r3, [r3, #0]
 8081d62:	695b      	ldr	r3, [r3, #20]
 8081d64:	9301      	str	r3, [sp, #4]
 8081d66:	bd08      	pop	{r3, pc}
 8081d68:	0806001c 	.word	0x0806001c

08081d6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081d6c:	b508      	push	{r3, lr}
 8081d6e:	4b02      	ldr	r3, [pc, #8]	; (8081d78 <HAL_USB_USART_Receive_Data+0xc>)
 8081d70:	681b      	ldr	r3, [r3, #0]
 8081d72:	699b      	ldr	r3, [r3, #24]
 8081d74:	9301      	str	r3, [sp, #4]
 8081d76:	bd08      	pop	{r3, pc}
 8081d78:	0806001c 	.word	0x0806001c

08081d7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081d7c:	b508      	push	{r3, lr}
 8081d7e:	4b02      	ldr	r3, [pc, #8]	; (8081d88 <HAL_USB_USART_Send_Data+0xc>)
 8081d80:	681b      	ldr	r3, [r3, #0]
 8081d82:	69db      	ldr	r3, [r3, #28]
 8081d84:	9301      	str	r3, [sp, #4]
 8081d86:	bd08      	pop	{r3, pc}
 8081d88:	0806001c 	.word	0x0806001c

08081d8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081d8c:	b508      	push	{r3, lr}
 8081d8e:	4b02      	ldr	r3, [pc, #8]	; (8081d98 <HAL_USB_USART_Flush_Data+0xc>)
 8081d90:	681b      	ldr	r3, [r3, #0]
 8081d92:	6a1b      	ldr	r3, [r3, #32]
 8081d94:	9301      	str	r3, [sp, #4]
 8081d96:	bd08      	pop	{r3, pc}
 8081d98:	0806001c 	.word	0x0806001c

08081d9c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081d9c:	b508      	push	{r3, lr}
 8081d9e:	4b02      	ldr	r3, [pc, #8]	; (8081da8 <log_message_v+0xc>)
 8081da0:	681b      	ldr	r3, [r3, #0]
 8081da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081da4:	9301      	str	r3, [sp, #4]
 8081da6:	bd08      	pop	{r3, pc}
 8081da8:	080201a0 	.word	0x080201a0

08081dac <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081dac:	b508      	push	{r3, lr}
 8081dae:	4b02      	ldr	r3, [pc, #8]	; (8081db8 <system_mode+0xc>)
 8081db0:	681b      	ldr	r3, [r3, #0]
 8081db2:	681b      	ldr	r3, [r3, #0]
 8081db4:	9301      	str	r3, [sp, #4]
 8081db6:	bd08      	pop	{r3, pc}
 8081db8:	080401a4 	.word	0x080401a4

08081dbc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081dbc:	b508      	push	{r3, lr}
 8081dbe:	4b02      	ldr	r3, [pc, #8]	; (8081dc8 <set_system_mode+0xc>)
 8081dc0:	681b      	ldr	r3, [r3, #0]
 8081dc2:	685b      	ldr	r3, [r3, #4]
 8081dc4:	9301      	str	r3, [sp, #4]
 8081dc6:	bd08      	pop	{r3, pc}
 8081dc8:	080401a4 	.word	0x080401a4

08081dcc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081dcc:	b508      	push	{r3, lr}
 8081dce:	4b02      	ldr	r3, [pc, #8]	; (8081dd8 <system_delay_ms+0xc>)
 8081dd0:	681b      	ldr	r3, [r3, #0]
 8081dd2:	695b      	ldr	r3, [r3, #20]
 8081dd4:	9301      	str	r3, [sp, #4]
 8081dd6:	bd08      	pop	{r3, pc}
 8081dd8:	080401a4 	.word	0x080401a4

08081ddc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081ddc:	b508      	push	{r3, lr}
 8081dde:	4b02      	ldr	r3, [pc, #8]	; (8081de8 <application_thread_current+0xc>)
 8081de0:	681b      	ldr	r3, [r3, #0]
 8081de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081de4:	9301      	str	r3, [sp, #4]
 8081de6:	bd08      	pop	{r3, pc}
 8081de8:	080401a4 	.word	0x080401a4

08081dec <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081dec:	b508      	push	{r3, lr}
 8081dee:	4b02      	ldr	r3, [pc, #8]	; (8081df8 <application_thread_invoke+0xc>)
 8081df0:	681b      	ldr	r3, [r3, #0]
 8081df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081df4:	9301      	str	r3, [sp, #4]
 8081df6:	bd08      	pop	{r3, pc}
 8081df8:	080401a4 	.word	0x080401a4

08081dfc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081dfc:	b508      	push	{r3, lr}
 8081dfe:	4b02      	ldr	r3, [pc, #8]	; (8081e08 <system_thread_get_state+0xc>)
 8081e00:	681b      	ldr	r3, [r3, #0]
 8081e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081e04:	9301      	str	r3, [sp, #4]
 8081e06:	bd08      	pop	{r3, pc}
 8081e08:	080401a4 	.word	0x080401a4

08081e0c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081e0c:	b508      	push	{r3, lr}
 8081e0e:	4b03      	ldr	r3, [pc, #12]	; (8081e1c <system_ctrl_set_app_request_handler+0x10>)
 8081e10:	681b      	ldr	r3, [r3, #0]
 8081e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081e16:	9301      	str	r3, [sp, #4]
 8081e18:	bd08      	pop	{r3, pc}
 8081e1a:	0000      	.short	0x0000
 8081e1c:	080401a4 	.word	0x080401a4

08081e20 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081e20:	b508      	push	{r3, lr}
 8081e22:	4b03      	ldr	r3, [pc, #12]	; (8081e30 <system_ctrl_set_result+0x10>)
 8081e24:	681b      	ldr	r3, [r3, #0]
 8081e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081e2a:	9301      	str	r3, [sp, #4]
 8081e2c:	bd08      	pop	{r3, pc}
 8081e2e:	0000      	.short	0x0000
 8081e30:	080401a4 	.word	0x080401a4

08081e34 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8081e34:	b508      	push	{r3, lr}
 8081e36:	4b03      	ldr	r3, [pc, #12]	; (8081e44 <system_reset+0x10>)
 8081e38:	681b      	ldr	r3, [r3, #0]
 8081e3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8081e3e:	9301      	str	r3, [sp, #4]
 8081e40:	bd08      	pop	{r3, pc}
 8081e42:	0000      	.short	0x0000
 8081e44:	080401a4 	.word	0x080401a4

08081e48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081e48:	b508      	push	{r3, lr}
 8081e4a:	4b02      	ldr	r3, [pc, #8]	; (8081e54 <network_connect+0xc>)
 8081e4c:	681b      	ldr	r3, [r3, #0]
 8081e4e:	685b      	ldr	r3, [r3, #4]
 8081e50:	9301      	str	r3, [sp, #4]
 8081e52:	bd08      	pop	{r3, pc}
 8081e54:	080401c8 	.word	0x080401c8

08081e58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081e58:	b508      	push	{r3, lr}
 8081e5a:	4b02      	ldr	r3, [pc, #8]	; (8081e64 <network_connecting+0xc>)
 8081e5c:	681b      	ldr	r3, [r3, #0]
 8081e5e:	689b      	ldr	r3, [r3, #8]
 8081e60:	9301      	str	r3, [sp, #4]
 8081e62:	bd08      	pop	{r3, pc}
 8081e64:	080401c8 	.word	0x080401c8

08081e68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081e68:	b508      	push	{r3, lr}
 8081e6a:	4b02      	ldr	r3, [pc, #8]	; (8081e74 <network_disconnect+0xc>)
 8081e6c:	681b      	ldr	r3, [r3, #0]
 8081e6e:	68db      	ldr	r3, [r3, #12]
 8081e70:	9301      	str	r3, [sp, #4]
 8081e72:	bd08      	pop	{r3, pc}
 8081e74:	080401c8 	.word	0x080401c8

08081e78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081e78:	b508      	push	{r3, lr}
 8081e7a:	4b02      	ldr	r3, [pc, #8]	; (8081e84 <network_ready+0xc>)
 8081e7c:	681b      	ldr	r3, [r3, #0]
 8081e7e:	691b      	ldr	r3, [r3, #16]
 8081e80:	9301      	str	r3, [sp, #4]
 8081e82:	bd08      	pop	{r3, pc}
 8081e84:	080401c8 	.word	0x080401c8

08081e88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081e88:	b508      	push	{r3, lr}
 8081e8a:	4b02      	ldr	r3, [pc, #8]	; (8081e94 <network_on+0xc>)
 8081e8c:	681b      	ldr	r3, [r3, #0]
 8081e8e:	695b      	ldr	r3, [r3, #20]
 8081e90:	9301      	str	r3, [sp, #4]
 8081e92:	bd08      	pop	{r3, pc}
 8081e94:	080401c8 	.word	0x080401c8

08081e98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081e98:	b508      	push	{r3, lr}
 8081e9a:	4b02      	ldr	r3, [pc, #8]	; (8081ea4 <network_off+0xc>)
 8081e9c:	681b      	ldr	r3, [r3, #0]
 8081e9e:	699b      	ldr	r3, [r3, #24]
 8081ea0:	9301      	str	r3, [sp, #4]
 8081ea2:	bd08      	pop	{r3, pc}
 8081ea4:	080401c8 	.word	0x080401c8

08081ea8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081ea8:	b508      	push	{r3, lr}
 8081eaa:	4b02      	ldr	r3, [pc, #8]	; (8081eb4 <network_listen+0xc>)
 8081eac:	681b      	ldr	r3, [r3, #0]
 8081eae:	69db      	ldr	r3, [r3, #28]
 8081eb0:	9301      	str	r3, [sp, #4]
 8081eb2:	bd08      	pop	{r3, pc}
 8081eb4:	080401c8 	.word	0x080401c8

08081eb8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081eb8:	b508      	push	{r3, lr}
 8081eba:	4b02      	ldr	r3, [pc, #8]	; (8081ec4 <network_listening+0xc>)
 8081ebc:	681b      	ldr	r3, [r3, #0]
 8081ebe:	6a1b      	ldr	r3, [r3, #32]
 8081ec0:	9301      	str	r3, [sp, #4]
 8081ec2:	bd08      	pop	{r3, pc}
 8081ec4:	080401c8 	.word	0x080401c8

08081ec8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081ec8:	b508      	push	{r3, lr}
 8081eca:	4b02      	ldr	r3, [pc, #8]	; (8081ed4 <network_set_listen_timeout+0xc>)
 8081ecc:	681b      	ldr	r3, [r3, #0]
 8081ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ed0:	9301      	str	r3, [sp, #4]
 8081ed2:	bd08      	pop	{r3, pc}
 8081ed4:	080401c8 	.word	0x080401c8

08081ed8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081ed8:	b508      	push	{r3, lr}
 8081eda:	4b02      	ldr	r3, [pc, #8]	; (8081ee4 <network_get_listen_timeout+0xc>)
 8081edc:	681b      	ldr	r3, [r3, #0]
 8081ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081ee0:	9301      	str	r3, [sp, #4]
 8081ee2:	bd08      	pop	{r3, pc}
 8081ee4:	080401c8 	.word	0x080401c8

08081ee8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 8081ee8:	b508      	push	{r3, lr}
 8081eea:	4b02      	ldr	r3, [pc, #8]	; (8081ef4 <network_is_on+0xc>)
 8081eec:	681b      	ldr	r3, [r3, #0]
 8081eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081ef0:	9301      	str	r3, [sp, #4]
 8081ef2:	bd08      	pop	{r3, pc}
 8081ef4:	080401c8 	.word	0x080401c8

08081ef8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 8081ef8:	b508      	push	{r3, lr}
 8081efa:	4b02      	ldr	r3, [pc, #8]	; (8081f04 <network_is_off+0xc>)
 8081efc:	681b      	ldr	r3, [r3, #0]
 8081efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081f00:	9301      	str	r3, [sp, #4]
 8081f02:	bd08      	pop	{r3, pc}
 8081f04:	080401c8 	.word	0x080401c8

08081f08 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081f08:	b508      	push	{r3, lr}
 8081f0a:	4b02      	ldr	r3, [pc, #8]	; (8081f14 <spark_function+0xc>)
 8081f0c:	681b      	ldr	r3, [r3, #0]
 8081f0e:	685b      	ldr	r3, [r3, #4]
 8081f10:	9301      	str	r3, [sp, #4]
 8081f12:	bd08      	pop	{r3, pc}
 8081f14:	080401cc 	.word	0x080401cc

08081f18 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081f18:	b508      	push	{r3, lr}
 8081f1a:	4b02      	ldr	r3, [pc, #8]	; (8081f24 <spark_process+0xc>)
 8081f1c:	681b      	ldr	r3, [r3, #0]
 8081f1e:	689b      	ldr	r3, [r3, #8]
 8081f20:	9301      	str	r3, [sp, #4]
 8081f22:	bd08      	pop	{r3, pc}
 8081f24:	080401cc 	.word	0x080401cc

08081f28 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081f28:	b508      	push	{r3, lr}
 8081f2a:	4b02      	ldr	r3, [pc, #8]	; (8081f34 <spark_cloud_flag_connect+0xc>)
 8081f2c:	681b      	ldr	r3, [r3, #0]
 8081f2e:	68db      	ldr	r3, [r3, #12]
 8081f30:	9301      	str	r3, [sp, #4]
 8081f32:	bd08      	pop	{r3, pc}
 8081f34:	080401cc 	.word	0x080401cc

08081f38 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081f38:	b508      	push	{r3, lr}
 8081f3a:	4b02      	ldr	r3, [pc, #8]	; (8081f44 <spark_cloud_flag_connected+0xc>)
 8081f3c:	681b      	ldr	r3, [r3, #0]
 8081f3e:	695b      	ldr	r3, [r3, #20]
 8081f40:	9301      	str	r3, [sp, #4]
 8081f42:	bd08      	pop	{r3, pc}
 8081f44:	080401cc 	.word	0x080401cc

08081f48 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081f48:	b508      	push	{r3, lr}
 8081f4a:	4b02      	ldr	r3, [pc, #8]	; (8081f54 <spark_send_event+0xc>)
 8081f4c:	681b      	ldr	r3, [r3, #0]
 8081f4e:	6a1b      	ldr	r3, [r3, #32]
 8081f50:	9301      	str	r3, [sp, #4]
 8081f52:	bd08      	pop	{r3, pc}
 8081f54:	080401cc 	.word	0x080401cc

08081f58 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081f58:	b508      	push	{r3, lr}
 8081f5a:	4b02      	ldr	r3, [pc, #8]	; (8081f64 <spark_subscribe+0xc>)
 8081f5c:	681b      	ldr	r3, [r3, #0]
 8081f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081f60:	9301      	str	r3, [sp, #4]
 8081f62:	bd08      	pop	{r3, pc}
 8081f64:	080401cc 	.word	0x080401cc

08081f68 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081f68:	b508      	push	{r3, lr}
 8081f6a:	4b02      	ldr	r3, [pc, #8]	; (8081f74 <spark_sync_time_pending+0xc>)
 8081f6c:	681b      	ldr	r3, [r3, #0]
 8081f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081f70:	9301      	str	r3, [sp, #4]
 8081f72:	bd08      	pop	{r3, pc}
 8081f74:	080401cc 	.word	0x080401cc

08081f78 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 8081f78:	b508      	push	{r3, lr}
 8081f7a:	4b02      	ldr	r3, [pc, #8]	; (8081f84 <spark_set_connection_property+0xc>)
 8081f7c:	681b      	ldr	r3, [r3, #0]
 8081f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081f80:	9301      	str	r3, [sp, #4]
 8081f82:	bd08      	pop	{r3, pc}
 8081f84:	080401cc 	.word	0x080401cc

08081f88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081f88:	b508      	push	{r3, lr}
 8081f8a:	4b02      	ldr	r3, [pc, #8]	; (8081f94 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081f8c:	681b      	ldr	r3, [r3, #0]
 8081f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081f90:	9301      	str	r3, [sp, #4]
 8081f92:	bd08      	pop	{r3, pc}
 8081f94:	080401cc 	.word	0x080401cc

08081f98 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081f98:	b508      	push	{r3, lr}
 8081f9a:	4b02      	ldr	r3, [pc, #8]	; (8081fa4 <malloc+0xc>)
 8081f9c:	681b      	ldr	r3, [r3, #0]
 8081f9e:	681b      	ldr	r3, [r3, #0]
 8081fa0:	9301      	str	r3, [sp, #4]
 8081fa2:	bd08      	pop	{r3, pc}
 8081fa4:	080401a0 	.word	0x080401a0

08081fa8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081fa8:	b508      	push	{r3, lr}
 8081faa:	4b02      	ldr	r3, [pc, #8]	; (8081fb4 <free+0xc>)
 8081fac:	681b      	ldr	r3, [r3, #0]
 8081fae:	685b      	ldr	r3, [r3, #4]
 8081fb0:	9301      	str	r3, [sp, #4]
 8081fb2:	bd08      	pop	{r3, pc}
 8081fb4:	080401a0 	.word	0x080401a0

08081fb8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081fb8:	b508      	push	{r3, lr}
 8081fba:	4b02      	ldr	r3, [pc, #8]	; (8081fc4 <realloc+0xc>)
 8081fbc:	681b      	ldr	r3, [r3, #0]
 8081fbe:	689b      	ldr	r3, [r3, #8]
 8081fc0:	9301      	str	r3, [sp, #4]
 8081fc2:	bd08      	pop	{r3, pc}
 8081fc4:	080401a0 	.word	0x080401a0

08081fc8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081fc8:	b508      	push	{r3, lr}
 8081fca:	4b02      	ldr	r3, [pc, #8]	; (8081fd4 <siprintf+0xc>)
 8081fcc:	681b      	ldr	r3, [r3, #0]
 8081fce:	691b      	ldr	r3, [r3, #16]
 8081fd0:	9301      	str	r3, [sp, #4]
 8081fd2:	bd08      	pop	{r3, pc}
 8081fd4:	080401a0 	.word	0x080401a0

08081fd8 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 8081fd8:	b508      	push	{r3, lr}
 8081fda:	4b02      	ldr	r3, [pc, #8]	; (8081fe4 <sscanf+0xc>)
 8081fdc:	681b      	ldr	r3, [r3, #0]
 8081fde:	695b      	ldr	r3, [r3, #20]
 8081fe0:	9301      	str	r3, [sp, #4]
 8081fe2:	bd08      	pop	{r3, pc}
 8081fe4:	080401a0 	.word	0x080401a0

08081fe8 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081fe8:	b508      	push	{r3, lr}
 8081fea:	4b02      	ldr	r3, [pc, #8]	; (8081ff4 <snprintf+0xc>)
 8081fec:	681b      	ldr	r3, [r3, #0]
 8081fee:	69db      	ldr	r3, [r3, #28]
 8081ff0:	9301      	str	r3, [sp, #4]
 8081ff2:	bd08      	pop	{r3, pc}
 8081ff4:	080401a0 	.word	0x080401a0

08081ff8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8081ff8:	b508      	push	{r3, lr}
 8081ffa:	4b02      	ldr	r3, [pc, #8]	; (8082004 <vsnprintf+0xc>)
 8081ffc:	681b      	ldr	r3, [r3, #0]
 8081ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082000:	9301      	str	r3, [sp, #4]
 8082002:	bd08      	pop	{r3, pc}
 8082004:	080401a0 	.word	0x080401a0

08082008 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8082008:	b508      	push	{r3, lr}
 808200a:	4b02      	ldr	r3, [pc, #8]	; (8082014 <abort+0xc>)
 808200c:	681b      	ldr	r3, [r3, #0]
 808200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082010:	9301      	str	r3, [sp, #4]
 8082012:	bd08      	pop	{r3, pc}
 8082014:	080401a0 	.word	0x080401a0

08082018 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8082018:	b508      	push	{r3, lr}
 808201a:	4b02      	ldr	r3, [pc, #8]	; (8082024 <_malloc_r+0xc>)
 808201c:	681b      	ldr	r3, [r3, #0]
 808201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082020:	9301      	str	r3, [sp, #4]
 8082022:	bd08      	pop	{r3, pc}
 8082024:	080401a0 	.word	0x080401a0

08082028 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8082028:	b508      	push	{r3, lr}
 808202a:	4b02      	ldr	r3, [pc, #8]	; (8082034 <newlib_impure_ptr_callback+0xc>)
 808202c:	681b      	ldr	r3, [r3, #0]
 808202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082030:	9301      	str	r3, [sp, #4]
 8082032:	bd08      	pop	{r3, pc}
 8082034:	080401a0 	.word	0x080401a0

08082038 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8082038:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808203a:	2600      	movs	r6, #0
 808203c:	4604      	mov	r4, r0
 808203e:	460d      	mov	r5, r1
 8082040:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8082044:	f7ff fdaa 	bl	8081b9c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8082048:	4628      	mov	r0, r5
    _spi = spi;
 808204a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 808204c:	f7ff fe4e 	bl	8081cec <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8082050:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8082052:	6066      	str	r6, [r4, #4]
}
 8082054:	bd70      	pop	{r4, r5, r6, pc}

08082056 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8082056:	b510      	push	{r4, lr}
 8082058:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808205a:	6800      	ldr	r0, [r0, #0]
 808205c:	b118      	cbz	r0, 8082066 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 808205e:	f7ff ffa3 	bl	8081fa8 <free>
            wakeupSource_ = nullptr;
 8082062:	2300      	movs	r3, #0
 8082064:	6023      	str	r3, [r4, #0]
        }
    }
 8082066:	bd10      	pop	{r4, pc}

08082068 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8082068:	b510      	push	{r4, lr}
 808206a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 808206c:	f7ff fff3 	bl	8082056 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 8082070:	4620      	mov	r0, r4
 8082072:	bd10      	pop	{r4, pc}

08082074 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 8082074:	b507      	push	{r0, r1, r2, lr}
 8082076:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082078:	2100      	movs	r1, #0
{
 808207a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808207c:	9100      	str	r1, [sp, #0]
 808207e:	2001      	movs	r0, #1
 8082080:	218c      	movs	r1, #140	; 0x8c
 8082082:	f7ff fed7 	bl	8081e34 <system_reset>
}
 8082086:	b003      	add	sp, #12
 8082088:	f85d fb04 	ldr.w	pc, [sp], #4

0808208c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 808208c:	4601      	mov	r1, r0
    reset(0, flags);
 808208e:	2000      	movs	r0, #0
 8082090:	f7ff bff0 	b.w	8082074 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08082094 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8082094:	2000      	movs	r0, #0
 8082096:	f7ff bff9 	b.w	808208c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

0808209c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808209c:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808209e:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80820a0:	b510      	push	{r4, lr}
 80820a2:	4b08      	ldr	r3, [pc, #32]	; (80820c4 <_GLOBAL__sub_I_System+0x28>)
 80820a4:	4c08      	ldr	r4, [pc, #32]	; (80820c8 <_GLOBAL__sub_I_System+0x2c>)
 80820a6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80820a8:	4b08      	ldr	r3, [pc, #32]	; (80820cc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80820aa:	6020      	str	r0, [r4, #0]
 80820ac:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80820ae:	71a0      	strb	r0, [r4, #6]
 80820b0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80820b2:	f7ff fe83 	bl	8081dbc <set_system_mode>
SystemClass System;
 80820b6:	4620      	mov	r0, r4
 80820b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80820bc:	4a04      	ldr	r2, [pc, #16]	; (80820d0 <_GLOBAL__sub_I_System+0x34>)
 80820be:	4905      	ldr	r1, [pc, #20]	; (80820d4 <_GLOBAL__sub_I_System+0x38>)
 80820c0:	f001 bade 	b.w	8083680 <__aeabi_atexit>
 80820c4:	20000500 	.word	0x20000500
 80820c8:	200004f4 	.word	0x200004f4
 80820cc:	ffff0000 	.word	0xffff0000
 80820d0:	200001e8 	.word	0x200001e8
 80820d4:	08082069 	.word	0x08082069

080820d8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80820d8:	b510      	push	{r4, lr}
 80820da:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80820dc:	f002 f8f9 	bl	80842d2 <strlen>
 80820e0:	1e43      	subs	r3, r0, #1
 80820e2:	4620      	mov	r0, r4
 80820e4:	4423      	add	r3, r4
	while(i<j){
 80820e6:	4283      	cmp	r3, r0
 80820e8:	d906      	bls.n	80820f8 <_Z11str_reversePc+0x20>
		c = *i;
 80820ea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80820ec:	7819      	ldrb	r1, [r3, #0]
 80820ee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80820f2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80820f6:	e7f6      	b.n	80820e6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80820f8:	bd10      	pop	{r4, pc}

080820fa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80820fa:	b570      	push	{r4, r5, r6, lr}
 80820fc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80820fe:	1e91      	subs	r1, r2, #2
 8082100:	2922      	cmp	r1, #34	; 0x22
 8082102:	d822      	bhi.n	808214a <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 8082104:	4625      	mov	r5, r4

	div_t result;
	while(a){
 8082106:	b168      	cbz	r0, 8082124 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8082108:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808210c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8082110:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8082112:	2809      	cmp	r0, #9
                *ptr += '0';
 8082114:	bf94      	ite	ls
 8082116:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8082118:	3157      	addhi	r1, #87	; 0x57
 808211a:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 808211c:	4630      	mov	r0, r6
 808211e:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 8082122:	e7f0      	b.n	8082106 <ultoa+0xc>
 8082124:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 8082126:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 8082128:	4423      	add	r3, r4
 808212a:	4293      	cmp	r3, r2
 808212c:	d902      	bls.n	8082134 <ultoa+0x3a>
            *ptr++ = '0';
 808212e:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 8082132:	e7fa      	b.n	808212a <ultoa+0x30>
 8082134:	1b5a      	subs	r2, r3, r5
 8082136:	42ab      	cmp	r3, r5
 8082138:	bf38      	it	cc
 808213a:	2200      	movcc	r2, #0

	*ptr = '\0';
 808213c:	2300      	movs	r3, #0
	str_reverse(buffer);
 808213e:	4620      	mov	r0, r4
	*ptr = '\0';
 8082140:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 8082142:	f7ff ffc9 	bl	80820d8 <_Z11str_reversePc>
	return buffer;
 8082146:	4620      	mov	r0, r4
}
 8082148:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 808214a:	2000      	movs	r0, #0
 808214c:	e7fc      	b.n	8082148 <ultoa+0x4e>

0808214e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808214e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8082150:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082152:	460c      	mov	r4, r1
 8082154:	4615      	mov	r5, r2
	if(a<0){
 8082156:	da0d      	bge.n	8082174 <itoa+0x26>
		*buffer = '-';
 8082158:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808215a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808215e:	bf0c      	ite	eq
 8082160:	4618      	moveq	r0, r3
 8082162:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8082164:	2301      	movs	r3, #1
		*buffer = '-';
 8082166:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 8082168:	462a      	mov	r2, r5
 808216a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 808216c:	f7ff ffc5 	bl	80820fa <ultoa>
	}
	return buffer;
}
 8082170:	4620      	mov	r0, r4
 8082172:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 8082174:	2301      	movs	r3, #1
 8082176:	e7f9      	b.n	808216c <itoa+0x1e>

08082178 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082178:	b510      	push	{r4, lr}
 808217a:	4604      	mov	r4, r0
{
	free(buffer);
 808217c:	6800      	ldr	r0, [r0, #0]
 808217e:	f7ff ff13 	bl	8081fa8 <free>
}
 8082182:	4620      	mov	r0, r4
 8082184:	bd10      	pop	{r4, pc}

08082186 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082186:	b510      	push	{r4, lr}
 8082188:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808218a:	6800      	ldr	r0, [r0, #0]
 808218c:	b108      	cbz	r0, 8082192 <_ZN6String10invalidateEv+0xc>
 808218e:	f7ff ff0b 	bl	8081fa8 <free>
	buffer = NULL;
 8082192:	2300      	movs	r3, #0
	capacity = len = 0;
 8082194:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8082198:	6023      	str	r3, [r4, #0]
}
 808219a:	bd10      	pop	{r4, pc}

0808219c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808219c:	b538      	push	{r3, r4, r5, lr}
 808219e:	4604      	mov	r4, r0
 80821a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80821a2:	6800      	ldr	r0, [r0, #0]
 80821a4:	3101      	adds	r1, #1
 80821a6:	f7ff ff07 	bl	8081fb8 <realloc>
	if (newbuffer) {
 80821aa:	b110      	cbz	r0, 80821b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80821ac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80821b0:	2001      	movs	r0, #1
	}
	return 0;
}
 80821b2:	bd38      	pop	{r3, r4, r5, pc}

080821b4 <_ZN6String7reserveEj>:
{
 80821b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80821b6:	6803      	ldr	r3, [r0, #0]
{
 80821b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80821ba:	b123      	cbz	r3, 80821c6 <_ZN6String7reserveEj+0x12>
 80821bc:	6843      	ldr	r3, [r0, #4]
 80821be:	428b      	cmp	r3, r1
 80821c0:	d301      	bcc.n	80821c6 <_ZN6String7reserveEj+0x12>
 80821c2:	2001      	movs	r0, #1
}
 80821c4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80821c6:	4620      	mov	r0, r4
 80821c8:	f7ff ffe8 	bl	808219c <_ZN6String12changeBufferEj>
 80821cc:	2800      	cmp	r0, #0
 80821ce:	d0f9      	beq.n	80821c4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80821d0:	68a3      	ldr	r3, [r4, #8]
 80821d2:	2b00      	cmp	r3, #0
 80821d4:	d1f5      	bne.n	80821c2 <_ZN6String7reserveEj+0xe>
 80821d6:	6822      	ldr	r2, [r4, #0]
 80821d8:	7013      	strb	r3, [r2, #0]
 80821da:	e7f2      	b.n	80821c2 <_ZN6String7reserveEj+0xe>

080821dc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80821dc:	b570      	push	{r4, r5, r6, lr}
 80821de:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80821e0:	4611      	mov	r1, r2
{
 80821e2:	4604      	mov	r4, r0
 80821e4:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80821e6:	f7ff ffe5 	bl	80821b4 <_ZN6String7reserveEj>
 80821ea:	b920      	cbnz	r0, 80821f6 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80821ec:	4620      	mov	r0, r4
 80821ee:	f7ff ffca 	bl	8082186 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80821f2:	4620      	mov	r0, r4
 80821f4:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80821f6:	462a      	mov	r2, r5
 80821f8:	4631      	mov	r1, r6
 80821fa:	6820      	ldr	r0, [r4, #0]
	len = length;
 80821fc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80821fe:	f001 fff3 	bl	80841e8 <memcpy>
	buffer[len] = 0;
 8082202:	2100      	movs	r1, #0
 8082204:	6822      	ldr	r2, [r4, #0]
 8082206:	68a3      	ldr	r3, [r4, #8]
 8082208:	54d1      	strb	r1, [r2, r3]
	return *this;
 808220a:	e7f2      	b.n	80821f2 <_ZN6String4copyEPKcj+0x16>

0808220c <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 808220c:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 808220e:	2300      	movs	r3, #0
String::String(const char *cstr)
 8082210:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082212:	460d      	mov	r5, r1
	capacity = 0;
 8082214:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082218:	6083      	str	r3, [r0, #8]
	flags = 0;
 808221a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 808221c:	b139      	cbz	r1, 808222e <_ZN6StringC1EPKc+0x22>
 808221e:	4608      	mov	r0, r1
 8082220:	f002 f857 	bl	80842d2 <strlen>
 8082224:	4629      	mov	r1, r5
 8082226:	4602      	mov	r2, r0
 8082228:	4620      	mov	r0, r4
 808222a:	f7ff ffd7 	bl	80821dc <_ZN6String4copyEPKcj>
}
 808222e:	4620      	mov	r0, r4
 8082230:	bd38      	pop	{r3, r4, r5, pc}

08082232 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8082232:	b538      	push	{r3, r4, r5, lr}
 8082234:	4605      	mov	r5, r0
	if (buffer) {
 8082236:	6800      	ldr	r0, [r0, #0]
{
 8082238:	460c      	mov	r4, r1
	if (buffer) {
 808223a:	b168      	cbz	r0, 8082258 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 808223c:	686a      	ldr	r2, [r5, #4]
 808223e:	688b      	ldr	r3, [r1, #8]
 8082240:	429a      	cmp	r2, r3
 8082242:	d307      	bcc.n	8082254 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8082244:	6809      	ldr	r1, [r1, #0]
 8082246:	f002 f820 	bl	808428a <strcpy>
			len = rhs.len;
 808224a:	68a3      	ldr	r3, [r4, #8]
 808224c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808224e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8082250:	60a3      	str	r3, [r4, #8]
}
 8082252:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8082254:	f7ff fea8 	bl	8081fa8 <free>
	buffer = rhs.buffer;
 8082258:	6823      	ldr	r3, [r4, #0]
 808225a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808225c:	6863      	ldr	r3, [r4, #4]
 808225e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8082260:	68a3      	ldr	r3, [r4, #8]
 8082262:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8082264:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8082266:	e9c4 3300 	strd	r3, r3, [r4]
 808226a:	e7f1      	b.n	8082250 <_ZN6String4moveERS_+0x1e>

0808226c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808226c:	4288      	cmp	r0, r1
{
 808226e:	b510      	push	{r4, lr}
 8082270:	460b      	mov	r3, r1
 8082272:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082274:	d004      	beq.n	8082280 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082276:	6809      	ldr	r1, [r1, #0]
 8082278:	b121      	cbz	r1, 8082284 <_ZN6StringaSERKS_+0x18>
 808227a:	689a      	ldr	r2, [r3, #8]
 808227c:	f7ff ffae 	bl	80821dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8082280:	4620      	mov	r0, r4
 8082282:	bd10      	pop	{r4, pc}
	else invalidate();
 8082284:	f7ff ff7f 	bl	8082186 <_ZN6String10invalidateEv>
 8082288:	e7fa      	b.n	8082280 <_ZN6StringaSERKS_+0x14>

0808228a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 808228a:	2300      	movs	r3, #0
String::String(const String &value)
 808228c:	b510      	push	{r4, lr}
 808228e:	4604      	mov	r4, r0
	capacity = 0;
 8082290:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082294:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082296:	7303      	strb	r3, [r0, #12]
	*this = value;
 8082298:	f7ff ffe8 	bl	808226c <_ZN6StringaSERKS_>
}
 808229c:	4620      	mov	r0, r4
 808229e:	bd10      	pop	{r4, pc}

080822a0 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80822a0:	4288      	cmp	r0, r1
{
 80822a2:	b510      	push	{r4, lr}
 80822a4:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80822a6:	d001      	beq.n	80822ac <_ZN6StringaSEOS_+0xc>
 80822a8:	f7ff ffc3 	bl	8082232 <_ZN6String4moveERS_>
	return *this;
}
 80822ac:	4620      	mov	r0, r4
 80822ae:	bd10      	pop	{r4, pc}

080822b0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80822b0:	b538      	push	{r3, r4, r5, lr}
 80822b2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80822b4:	460c      	mov	r4, r1
 80822b6:	b149      	cbz	r1, 80822cc <_ZN6StringaSEPKc+0x1c>
 80822b8:	4608      	mov	r0, r1
 80822ba:	f002 f80a 	bl	80842d2 <strlen>
 80822be:	4621      	mov	r1, r4
 80822c0:	4602      	mov	r2, r0
 80822c2:	4628      	mov	r0, r5
 80822c4:	f7ff ff8a 	bl	80821dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80822c8:	4628      	mov	r0, r5
 80822ca:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80822cc:	f7ff ff5b 	bl	8082186 <_ZN6String10invalidateEv>
 80822d0:	e7fa      	b.n	80822c8 <_ZN6StringaSEPKc+0x18>

080822d2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80822d2:	b510      	push	{r4, lr}
	buffer = NULL;
 80822d4:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80822d6:	4604      	mov	r4, r0
 80822d8:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80822da:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80822de:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80822e0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80822e2:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80822e4:	a901      	add	r1, sp, #4
 80822e6:	f7ff ff32 	bl	808214e <itoa>
	*this = buf;
 80822ea:	4620      	mov	r0, r4
 80822ec:	a901      	add	r1, sp, #4
 80822ee:	f7ff ffdf 	bl	80822b0 <_ZN6StringaSEPKc>
}
 80822f2:	4620      	mov	r0, r4
 80822f4:	b00a      	add	sp, #40	; 0x28
 80822f6:	bd10      	pop	{r4, pc}

080822f8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80822f8:	b570      	push	{r4, r5, r6, lr}
 80822fa:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80822fc:	460e      	mov	r6, r1
 80822fe:	b909      	cbnz	r1, 8082304 <_ZN6String6concatEPKcj+0xc>
 8082300:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8082302:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8082304:	b16a      	cbz	r2, 8082322 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8082306:	6884      	ldr	r4, [r0, #8]
 8082308:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 808230a:	4621      	mov	r1, r4
 808230c:	f7ff ff52 	bl	80821b4 <_ZN6String7reserveEj>
 8082310:	2800      	cmp	r0, #0
 8082312:	d0f5      	beq.n	8082300 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8082314:	6828      	ldr	r0, [r5, #0]
 8082316:	68ab      	ldr	r3, [r5, #8]
 8082318:	4631      	mov	r1, r6
 808231a:	4418      	add	r0, r3
 808231c:	f001 ffb5 	bl	808428a <strcpy>
	len = newlen;
 8082320:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8082322:	2001      	movs	r0, #1
 8082324:	e7ed      	b.n	8082302 <_ZN6String6concatEPKcj+0xa>

08082326 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 8082326:	b538      	push	{r3, r4, r5, lr}
 8082328:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808232a:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808232c:	4608      	mov	r0, r1
	if (!cstr) return 0;
 808232e:	b141      	cbz	r1, 8082342 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8082330:	f001 ffcf 	bl	80842d2 <strlen>
 8082334:	4621      	mov	r1, r4
 8082336:	4602      	mov	r2, r0
 8082338:	4628      	mov	r0, r5
}
 808233a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 808233e:	f7ff bfdb 	b.w	80822f8 <_ZN6String6concatEPKcj>
}
 8082342:	bd38      	pop	{r3, r4, r5, pc}

08082344 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8082344:	2300      	movs	r3, #0
{
 8082346:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 8082348:	2201      	movs	r2, #1
	buf[0] = c;
 808234a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 808234e:	a901      	add	r1, sp, #4
	buf[1] = 0;
 8082350:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8082354:	f7ff ffd0 	bl	80822f8 <_ZN6String6concatEPKcj>
}
 8082358:	b003      	add	sp, #12
 808235a:	f85d fb04 	ldr.w	pc, [sp], #4

0808235e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808235e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8082360:	688a      	ldr	r2, [r1, #8]
 8082362:	6809      	ldr	r1, [r1, #0]
{
 8082364:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8082366:	f7ff ffc7 	bl	80822f8 <_ZN6String6concatEPKcj>
 808236a:	b910      	cbnz	r0, 8082372 <_ZplRK15StringSumHelperRK6String+0x14>
 808236c:	4620      	mov	r0, r4
 808236e:	f7ff ff0a 	bl	8082186 <_ZN6String10invalidateEv>
	return a;
}
 8082372:	4620      	mov	r0, r4
 8082374:	bd10      	pop	{r4, pc}

08082376 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8082376:	b538      	push	{r3, r4, r5, lr}
 8082378:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808237a:	460d      	mov	r5, r1
 808237c:	b921      	cbnz	r1, 8082388 <_ZplRK15StringSumHelperPKc+0x12>
 808237e:	4620      	mov	r0, r4
 8082380:	f7ff ff01 	bl	8082186 <_ZN6String10invalidateEv>
	return a;
}
 8082384:	4620      	mov	r0, r4
 8082386:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8082388:	4608      	mov	r0, r1
 808238a:	f001 ffa2 	bl	80842d2 <strlen>
 808238e:	4629      	mov	r1, r5
 8082390:	4602      	mov	r2, r0
 8082392:	4620      	mov	r0, r4
 8082394:	f7ff ffb0 	bl	80822f8 <_ZN6String6concatEPKcj>
 8082398:	2800      	cmp	r0, #0
 808239a:	d0f0      	beq.n	808237e <_ZplRK15StringSumHelperPKc+0x8>
 808239c:	e7f2      	b.n	8082384 <_ZplRK15StringSumHelperPKc+0xe>

0808239e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808239e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80823a0:	6882      	ldr	r2, [r0, #8]
 80823a2:	b93a      	cbnz	r2, 80823b4 <_ZNK6String6equalsEPKc+0x16>
 80823a4:	b121      	cbz	r1, 80823b0 <_ZNK6String6equalsEPKc+0x12>
 80823a6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80823a8:	fab0 f080 	clz	r0, r0
 80823ac:	0940      	lsrs	r0, r0, #5
 80823ae:	e000      	b.n	80823b2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80823b0:	2001      	movs	r0, #1
}
 80823b2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80823b4:	6800      	ldr	r0, [r0, #0]
 80823b6:	b909      	cbnz	r1, 80823bc <_ZNK6String6equalsEPKc+0x1e>
 80823b8:	7800      	ldrb	r0, [r0, #0]
 80823ba:	e7f5      	b.n	80823a8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80823bc:	f001 ff5b 	bl	8084276 <strcmp>
 80823c0:	e7f2      	b.n	80823a8 <_ZNK6String6equalsEPKc+0xa>
	...

080823c4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80823c4:	b40e      	push	{r1, r2, r3}
 80823c6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80823c8:	ad09      	add	r5, sp, #36	; 0x24
 80823ca:	f855 7b04 	ldr.w	r7, [r5], #4
 80823ce:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80823d0:	462b      	mov	r3, r5
 80823d2:	463a      	mov	r2, r7
 80823d4:	2105      	movs	r1, #5
 80823d6:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80823d8:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80823da:	f7ff fe0d 	bl	8081ff8 <vsnprintf>
 80823de:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80823e0:	490b      	ldr	r1, [pc, #44]	; (8082410 <_ZN6String6formatEPKcz+0x4c>)
 80823e2:	4620      	mov	r0, r4
 80823e4:	f7ff ff12 	bl	808220c <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 80823e8:	4631      	mov	r1, r6
 80823ea:	4620      	mov	r0, r4
 80823ec:	f7ff fee2 	bl	80821b4 <_ZN6String7reserveEj>
    if (result.buffer) {
 80823f0:	6820      	ldr	r0, [r4, #0]
 80823f2:	b130      	cbz	r0, 8082402 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80823f4:	462b      	mov	r3, r5
 80823f6:	463a      	mov	r2, r7
 80823f8:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80823fa:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80823fc:	f7ff fdfc 	bl	8081ff8 <vsnprintf>
        va_end(marker);
        result.len = n;
 8082400:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 8082402:	4620      	mov	r0, r4
 8082404:	b004      	add	sp, #16
 8082406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 808240a:	b003      	add	sp, #12
 808240c:	4770      	bx	lr
 808240e:	bf00      	nop
 8082410:	0808643d 	.word	0x0808643d

08082414 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082416:	4606      	mov	r6, r0
 8082418:	460d      	mov	r5, r1
  size_t n = 0;
 808241a:	2400      	movs	r4, #0
 808241c:	188f      	adds	r7, r1, r2
  while (size--) {
 808241e:	42bd      	cmp	r5, r7
 8082420:	d00c      	beq.n	808243c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082422:	6833      	ldr	r3, [r6, #0]
 8082424:	4630      	mov	r0, r6
 8082426:	689b      	ldr	r3, [r3, #8]
 8082428:	f815 1b01 	ldrb.w	r1, [r5], #1
 808242c:	4798      	blx	r3
     if (chunk>=0)
 808242e:	1e03      	subs	r3, r0, #0
 8082430:	db01      	blt.n	8082436 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082432:	441c      	add	r4, r3
  while (size--) {
 8082434:	e7f3      	b.n	808241e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082436:	2c00      	cmp	r4, #0
 8082438:	bf08      	it	eq
 808243a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 808243c:	4620      	mov	r0, r4
 808243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082440 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082440:	b570      	push	{r4, r5, r6, lr}
 8082442:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082444:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082446:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8082448:	b149      	cbz	r1, 808245e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808244a:	f001 ff42 	bl	80842d2 <strlen>
 808244e:	682b      	ldr	r3, [r5, #0]
 8082450:	4602      	mov	r2, r0
 8082452:	4621      	mov	r1, r4
 8082454:	4628      	mov	r0, r5
    }
 8082456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 808245a:	68db      	ldr	r3, [r3, #12]
 808245c:	4718      	bx	r3
    }
 808245e:	bd70      	pop	{r4, r5, r6, pc}

08082460 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082460:	6803      	ldr	r3, [r0, #0]
 8082462:	689b      	ldr	r3, [r3, #8]
 8082464:	4718      	bx	r3

08082466 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082466:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082468:	210d      	movs	r1, #13
{
 808246a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808246c:	f7ff fff8 	bl	8082460 <_ZN5Print5printEc>
  n += print('\n');
 8082470:	210a      	movs	r1, #10
  size_t n = print('\r');
 8082472:	4604      	mov	r4, r0
  n += print('\n');
 8082474:	4628      	mov	r0, r5
 8082476:	f7ff fff3 	bl	8082460 <_ZN5Print5printEc>
  return n;
}
 808247a:	4420      	add	r0, r4
 808247c:	bd38      	pop	{r3, r4, r5, pc}

0808247e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808247e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082480:	2a01      	cmp	r2, #1
 8082482:	bf98      	it	ls
 8082484:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082486:	b530      	push	{r4, r5, lr}
 8082488:	b08b      	sub	sp, #44	; 0x2c
 808248a:	460c      	mov	r4, r1
  *str = '\0';
 808248c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8082490:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8082492:	4625      	mov	r5, r4
 8082494:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8082498:	fb04 5312 	mls	r3, r4, r2, r5
 808249c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808249e:	2b09      	cmp	r3, #9
 80824a0:	bf94      	ite	ls
 80824a2:	3330      	addls	r3, #48	; 0x30
 80824a4:	3337      	addhi	r3, #55	; 0x37
 80824a6:	b2db      	uxtb	r3, r3
  } while(n);
 80824a8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80824aa:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80824ae:	d9f0      	bls.n	8082492 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80824b0:	f7ff ffc6 	bl	8082440 <_ZN5Print5writeEPKc>
}
 80824b4:	b00b      	add	sp, #44	; 0x2c
 80824b6:	bd30      	pop	{r4, r5, pc}

080824b8 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80824b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80824bc:	b086      	sub	sp, #24
 80824be:	af00      	add	r7, sp, #0
 80824c0:	4605      	mov	r5, r0
 80824c2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80824c4:	1d38      	adds	r0, r7, #4
 80824c6:	2114      	movs	r1, #20
{
 80824c8:	4614      	mov	r4, r2
    va_copy(args2, args);
 80824ca:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80824cc:	f7ff fd94 	bl	8081ff8 <vsnprintf>

    if (n<bufsize)
 80824d0:	2813      	cmp	r0, #19
 80824d2:	d80e      	bhi.n	80824f2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80824d4:	4628      	mov	r0, r5
 80824d6:	1d39      	adds	r1, r7, #4
 80824d8:	f7ff ffb2 	bl	8082440 <_ZN5Print5writeEPKc>
 80824dc:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80824de:	b11e      	cbz	r6, 80824e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80824e0:	4628      	mov	r0, r5
 80824e2:	f7ff ffc0 	bl	8082466 <_ZN5Print7printlnEv>
 80824e6:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80824e8:	4620      	mov	r0, r4
 80824ea:	3718      	adds	r7, #24
 80824ec:	46bd      	mov	sp, r7
 80824ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80824f2:	f100 0308 	add.w	r3, r0, #8
 80824f6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80824fa:	46e8      	mov	r8, sp
        char bigger[n+1];
 80824fc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8082500:	4622      	mov	r2, r4
 8082502:	1c41      	adds	r1, r0, #1
 8082504:	683b      	ldr	r3, [r7, #0]
 8082506:	4668      	mov	r0, sp
 8082508:	f7ff fd76 	bl	8081ff8 <vsnprintf>
  return write(str);
 808250c:	4669      	mov	r1, sp
 808250e:	4628      	mov	r0, r5
 8082510:	f7ff ff96 	bl	8082440 <_ZN5Print5writeEPKc>
 8082514:	4604      	mov	r4, r0
 8082516:	46c5      	mov	sp, r8
 8082518:	e7e1      	b.n	80824de <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

0808251a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 808251a:	680b      	ldr	r3, [r1, #0]
 808251c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 808251e:	b113      	cbz	r3, 8082526 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8082520:	685a      	ldr	r2, [r3, #4]
 8082522:	3201      	adds	r2, #1
 8082524:	605a      	str	r2, [r3, #4]
      }
 8082526:	4770      	bx	lr

08082528 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082528:	4b01      	ldr	r3, [pc, #4]	; (8082530 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808252a:	4a02      	ldr	r2, [pc, #8]	; (8082534 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808252c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808252e:	4770      	bx	lr
 8082530:	20000504 	.word	0x20000504
 8082534:	08086460 	.word	0x08086460

08082538 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8082538:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808253a:	2000      	movs	r0, #0
 808253c:	f7ff fd14 	bl	8081f68 <spark_sync_time_pending>
 8082540:	b128      	cbz	r0, 808254e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082542:	f7ff fcf9 	bl	8081f38 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082546:	f080 0001 	eor.w	r0, r0, #1
 808254a:	b2c0      	uxtb	r0, r0
    }
 808254c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 808254e:	2001      	movs	r0, #1
 8082550:	e7fc      	b.n	808254c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08082554 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082554:	b530      	push	{r4, r5, lr}
 8082556:	4604      	mov	r4, r0
    t += time_zone_cache;
 8082558:	4818      	ldr	r0, [pc, #96]	; (80825bc <_ZN9TimeClass7timeStrEx+0x68>)
{
 808255a:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 808255c:	e9d0 1000 	ldrd	r1, r0, [r0]
 8082560:	1852      	adds	r2, r2, r1
 8082562:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 8082566:	4816      	ldr	r0, [pc, #88]	; (80825c0 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8082568:	2500      	movs	r5, #0
    t += dst_current_cache;
 808256a:	e9d0 1000 	ldrd	r1, r0, [r0]
 808256e:	1852      	adds	r2, r2, r1
 8082570:	eb40 0303 	adc.w	r3, r0, r3
 8082574:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8082578:	2224      	movs	r2, #36	; 0x24
 808257a:	2100      	movs	r1, #0
 808257c:	eb0d 0002 	add.w	r0, sp, r2
 8082580:	f001 fe40 	bl	8084204 <memset>
    localtime_r(&t, &calendar_time);
 8082584:	a909      	add	r1, sp, #36	; 0x24
 8082586:	4668      	mov	r0, sp
 8082588:	f7fd fd4a 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 808258c:	2216      	movs	r2, #22
 808258e:	4629      	mov	r1, r5
 8082590:	a803      	add	r0, sp, #12
 8082592:	9502      	str	r5, [sp, #8]
 8082594:	f001 fe36 	bl	8084204 <memset>
    asctime_r(&calendar_time, ascstr);
 8082598:	a902      	add	r1, sp, #8
 808259a:	a809      	add	r0, sp, #36	; 0x24
 808259c:	f001 fdec 	bl	8084178 <asctime_r>
    int len = strlen(ascstr);
 80825a0:	a802      	add	r0, sp, #8
 80825a2:	f001 fe96 	bl	80842d2 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80825a6:	ab12      	add	r3, sp, #72	; 0x48
 80825a8:	4418      	add	r0, r3
 80825aa:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80825ae:	a902      	add	r1, sp, #8
 80825b0:	4620      	mov	r0, r4
 80825b2:	f7ff fe2b 	bl	808220c <_ZN6StringC1EPKc>
}
 80825b6:	4620      	mov	r0, r4
 80825b8:	b013      	add	sp, #76	; 0x4c
 80825ba:	bd30      	pop	{r4, r5, pc}
 80825bc:	20000518 	.word	0x20000518
 80825c0:	20000510 	.word	0x20000510

080825c4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80825c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80825c8:	b0a5      	sub	sp, #148	; 0x94
 80825ca:	4607      	mov	r7, r0
 80825cc:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80825ce:	a814      	add	r0, sp, #80	; 0x50
{
 80825d0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80825d2:	223f      	movs	r2, #63	; 0x3f
{
 80825d4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80825d6:	f001 fe96 	bl	8084306 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80825da:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80825dc:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80825de:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80825e2:	f001 fe76 	bl	80842d2 <strlen>
 80825e6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80825e8:	bb5d      	cbnz	r5, 8082642 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80825ea:	492a      	ldr	r1, [pc, #168]	; (8082694 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80825ec:	a803      	add	r0, sp, #12
 80825ee:	f001 fe4c 	bl	808428a <strcpy>
{
 80825f2:	2500      	movs	r5, #0
 80825f4:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80825f6:	f104 3bff 	add.w	fp, r4, #4294967295
 80825fa:	45ab      	cmp	fp, r5
 80825fc:	d936      	bls.n	808266c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80825fe:	46b1      	mov	r9, r6
 8082600:	f819 3b01 	ldrb.w	r3, [r9], #1
 8082604:	f105 0a01 	add.w	sl, r5, #1
 8082608:	2b25      	cmp	r3, #37	; 0x25
 808260a:	d117      	bne.n	808263c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 808260c:	7873      	ldrb	r3, [r6, #1]
 808260e:	2b7a      	cmp	r3, #122	; 0x7a
 8082610:	d114      	bne.n	808263c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 8082612:	a803      	add	r0, sp, #12
 8082614:	f001 fe5d 	bl	80842d2 <strlen>
 8082618:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808261a:	ab14      	add	r3, sp, #80	; 0x50
 808261c:	1828      	adds	r0, r5, r0
 808261e:	4418      	add	r0, r3
 8082620:	ebab 0205 	sub.w	r2, fp, r5
 8082624:	1cb1      	adds	r1, r6, #2
 8082626:	f001 fddf 	bl	80841e8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808262a:	4622      	mov	r2, r4
 808262c:	a903      	add	r1, sp, #12
 808262e:	4630      	mov	r0, r6
 8082630:	f001 fdda 	bl	80841e8 <memcpy>
            len = strlen(format_str);
 8082634:	a814      	add	r0, sp, #80	; 0x50
 8082636:	f001 fe4c 	bl	80842d2 <strlen>
 808263a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 808263c:	464e      	mov	r6, r9
 808263e:	4655      	mov	r5, sl
 8082640:	e7d9      	b.n	80825f6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8082642:	213c      	movs	r1, #60	; 0x3c
 8082644:	fb95 f3f1 	sdiv	r3, r5, r1
 8082648:	2b00      	cmp	r3, #0
 808264a:	bfb8      	it	lt
 808264c:	425b      	neglt	r3, r3
 808264e:	fbb3 f2f1 	udiv	r2, r3, r1
 8082652:	fb01 3312 	mls	r3, r1, r2, r3
 8082656:	9300      	str	r3, [sp, #0]
 8082658:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808265c:	2110      	movs	r1, #16
 808265e:	fb95 f3f3 	sdiv	r3, r5, r3
 8082662:	4a0d      	ldr	r2, [pc, #52]	; (8082698 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 8082664:	a803      	add	r0, sp, #12
 8082666:	f7ff fcbf 	bl	8081fe8 <snprintf>
 808266a:	e7c2      	b.n	80825f2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 808266c:	2100      	movs	r1, #0
 808266e:	222e      	movs	r2, #46	; 0x2e
 8082670:	a808      	add	r0, sp, #32
 8082672:	9107      	str	r1, [sp, #28]
 8082674:	f001 fdc6 	bl	8084204 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8082678:	4643      	mov	r3, r8
 808267a:	aa14      	add	r2, sp, #80	; 0x50
 808267c:	2132      	movs	r1, #50	; 0x32
 808267e:	a807      	add	r0, sp, #28
 8082680:	f7fd fcd6 	bl	8080030 <strftime>
    return String(buf);
 8082684:	4638      	mov	r0, r7
 8082686:	a907      	add	r1, sp, #28
 8082688:	f7ff fdc0 	bl	808220c <_ZN6StringC1EPKc>
}
 808268c:	4638      	mov	r0, r7
 808268e:	b025      	add	sp, #148	; 0x94
 8082690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082694:	08086464 	.word	0x08086464
 8082698:	08086466 	.word	0x08086466

0808269c <_ZN9TimeClass6formatExPKc>:
{
 808269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808269e:	b08d      	sub	sp, #52	; 0x34
 80826a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80826a2:	4604      	mov	r4, r0
 80826a4:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80826a8:	b915      	cbnz	r5, 80826b0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80826aa:	4b19      	ldr	r3, [pc, #100]	; (8082710 <_ZN9TimeClass6formatExPKc+0x74>)
 80826ac:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80826ae:	b12d      	cbz	r5, 80826bc <_ZN9TimeClass6formatExPKc+0x20>
 80826b0:	4b18      	ldr	r3, [pc, #96]	; (8082714 <_ZN9TimeClass6formatExPKc+0x78>)
 80826b2:	4628      	mov	r0, r5
 80826b4:	6819      	ldr	r1, [r3, #0]
 80826b6:	f001 fdde 	bl	8084276 <strcmp>
 80826ba:	b938      	cbnz	r0, 80826cc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80826bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80826c0:	4620      	mov	r0, r4
 80826c2:	f7ff ff47 	bl	8082554 <_ZN9TimeClass7timeStrEx>
}
 80826c6:	4620      	mov	r0, r4
 80826c8:	b00d      	add	sp, #52	; 0x34
 80826ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80826cc:	9900      	ldr	r1, [sp, #0]
 80826ce:	4e12      	ldr	r6, [pc, #72]	; (8082718 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80826d0:	4f12      	ldr	r7, [pc, #72]	; (808271c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80826d2:	e9d6 3200 	ldrd	r3, r2, [r6]
 80826d6:	185b      	adds	r3, r3, r1
 80826d8:	9901      	ldr	r1, [sp, #4]
 80826da:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80826de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80826e2:	181b      	adds	r3, r3, r0
 80826e4:	eb41 0202 	adc.w	r2, r1, r2
 80826e8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80826ec:	2100      	movs	r1, #0
 80826ee:	2224      	movs	r2, #36	; 0x24
 80826f0:	a803      	add	r0, sp, #12
 80826f2:	f001 fd87 	bl	8084204 <memset>
    localtime_r(&t, &calendar_time);
 80826f6:	a903      	add	r1, sp, #12
 80826f8:	4668      	mov	r0, sp
 80826fa:	f7fd fc91 	bl	8080020 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80826fe:	6832      	ldr	r2, [r6, #0]
 8082700:	683b      	ldr	r3, [r7, #0]
 8082702:	4620      	mov	r0, r4
 8082704:	4413      	add	r3, r2
 8082706:	a903      	add	r1, sp, #12
 8082708:	462a      	mov	r2, r5
 808270a:	f7ff ff5b 	bl	80825c4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 808270e:	e7da      	b.n	80826c6 <_ZN9TimeClass6formatExPKc+0x2a>
 8082710:	2000050c 	.word	0x2000050c
 8082714:	2000000c 	.word	0x2000000c
 8082718:	20000518 	.word	0x20000518
 808271c:	20000510 	.word	0x20000510

08082720 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8082720:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8082722:	2000      	movs	r0, #0
 8082724:	f7ff fa2a 	bl	8081b7c <hal_rtc_time_is_valid>
    if (rtcstate)
 8082728:	4604      	mov	r4, r0
 808272a:	b9a0      	cbnz	r0, 8082756 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808272c:	f7ff fb3e 	bl	8081dac <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082730:	2801      	cmp	r0, #1
 8082732:	d110      	bne.n	8082756 <_ZN9TimeClass7isValidEv+0x36>
 8082734:	4620      	mov	r0, r4
 8082736:	f7ff fb61 	bl	8081dfc <system_thread_get_state>
 808273a:	b960      	cbnz	r0, 8082756 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 808273c:	f7ff fefc 	bl	8082538 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082740:	b910      	cbnz	r0, 8082748 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8082742:	f7ff fbe9 	bl	8081f18 <spark_process>
        while (_while() && !_condition()) {
 8082746:	e7f9      	b.n	808273c <_ZN9TimeClass7isValidEv+0x1c>
 8082748:	f7ff fef6 	bl	8082538 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 808274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8082750:	2000      	movs	r0, #0
 8082752:	f7ff ba13 	b.w	8081b7c <hal_rtc_time_is_valid>
}
 8082756:	4620      	mov	r0, r4
 8082758:	bd10      	pop	{r4, pc}

0808275a <_ZN9TimeClass3nowEv>:
{
 808275a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 808275c:	f7ff ffe0 	bl	8082720 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8082760:	2210      	movs	r2, #16
 8082762:	2100      	movs	r1, #0
 8082764:	4668      	mov	r0, sp
 8082766:	f001 fd4d 	bl	8084204 <memset>
    hal_rtc_get_time(&tv, nullptr);
 808276a:	2100      	movs	r1, #0
 808276c:	4668      	mov	r0, sp
 808276e:	f7ff fa0d 	bl	8081b8c <hal_rtc_get_time>
}
 8082772:	9800      	ldr	r0, [sp, #0]
 8082774:	b005      	add	sp, #20
 8082776:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808277c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808277c:	4b02      	ldr	r3, [pc, #8]	; (8082788 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808277e:	681a      	ldr	r2, [r3, #0]
 8082780:	4b02      	ldr	r3, [pc, #8]	; (808278c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082782:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8082784:	4770      	bx	lr
 8082786:	bf00      	nop
 8082788:	2000000c 	.word	0x2000000c
 808278c:	2000050c 	.word	0x2000050c

08082790 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082790:	2100      	movs	r1, #0
 8082792:	f7ff bb1b 	b.w	8081dcc <system_delay_ms>

08082796 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082796:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8082798:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 808279a:	4604      	mov	r4, r0
      if (_M_manager)
 808279c:	b113      	cbz	r3, 80827a4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808279e:	2203      	movs	r2, #3
 80827a0:	4601      	mov	r1, r0
 80827a2:	4798      	blx	r3
    }
 80827a4:	4620      	mov	r0, r4
 80827a6:	bd10      	pop	{r4, pc}

080827a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80827a8:	b510      	push	{r4, lr}
 80827aa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80827ac:	f7ff fff3 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
 80827b0:	4620      	mov	r0, r4
 80827b2:	bd10      	pop	{r4, pc}

080827b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80827b4:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80827b6:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80827b8:	460b      	mov	r3, r1
 80827ba:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80827bc:	c803      	ldmia	r0, {r0, r1}
 80827be:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80827c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80827c6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80827ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80827ce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80827d2:	b002      	add	sp, #8
 80827d4:	bd10      	pop	{r4, pc}
	...

080827d8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80827d8:	2300      	movs	r3, #0
 80827da:	4803      	ldr	r0, [pc, #12]	; (80827e8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80827dc:	4a03      	ldr	r2, [pc, #12]	; (80827ec <_GLOBAL__sub_I_RGB+0x14>)
 80827de:	4904      	ldr	r1, [pc, #16]	; (80827f0 <_GLOBAL__sub_I_RGB+0x18>)
 80827e0:	6083      	str	r3, [r0, #8]
 80827e2:	f000 bf4d 	b.w	8083680 <__aeabi_atexit>
 80827e6:	bf00      	nop
 80827e8:	20000520 	.word	0x20000520
 80827ec:	200001e8 	.word	0x200001e8
 80827f0:	080827a9 	.word	0x080827a9

080827f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80827f4:	4b01      	ldr	r3, [pc, #4]	; (80827fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80827f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80827f8:	4770      	bx	lr
 80827fa:	bf00      	nop
 80827fc:	20000014 	.word	0x20000014

08082800 <serialEventRun>:
{
 8082800:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8082802:	4b17      	ldr	r3, [pc, #92]	; (8082860 <serialEventRun+0x60>)
 8082804:	b143      	cbz	r3, 8082818 <serialEventRun+0x18>
 8082806:	f000 fc21 	bl	808304c <_Z16_fetch_usbserialv>
 808280a:	6803      	ldr	r3, [r0, #0]
 808280c:	691b      	ldr	r3, [r3, #16]
 808280e:	4798      	blx	r3
 8082810:	2800      	cmp	r0, #0
 8082812:	dd01      	ble.n	8082818 <serialEventRun+0x18>
        serialEvent();
 8082814:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8082818:	4b12      	ldr	r3, [pc, #72]	; (8082864 <serialEventRun+0x64>)
 808281a:	b143      	cbz	r3, 808282e <serialEventRun+0x2e>
 808281c:	f000 fd38 	bl	8083290 <_Z22__fetch_global_Serial1v>
 8082820:	6803      	ldr	r3, [r0, #0]
 8082822:	691b      	ldr	r3, [r3, #16]
 8082824:	4798      	blx	r3
 8082826:	2800      	cmp	r0, #0
 8082828:	dd01      	ble.n	808282e <serialEventRun+0x2e>
        serialEvent1();
 808282a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808282e:	4b0e      	ldr	r3, [pc, #56]	; (8082868 <serialEventRun+0x68>)
 8082830:	b10b      	cbz	r3, 8082836 <serialEventRun+0x36>
 8082832:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8082836:	4b0d      	ldr	r3, [pc, #52]	; (808286c <serialEventRun+0x6c>)
 8082838:	b10b      	cbz	r3, 808283e <serialEventRun+0x3e>
 808283a:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 808283e:	4b0c      	ldr	r3, [pc, #48]	; (8082870 <serialEventRun+0x70>)
 8082840:	b10b      	cbz	r3, 8082846 <serialEventRun+0x46>
 8082842:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8082846:	4b0b      	ldr	r3, [pc, #44]	; (8082874 <serialEventRun+0x74>)
 8082848:	b143      	cbz	r3, 808285c <serialEventRun+0x5c>
 808284a:	f000 fc3d 	bl	80830c8 <_Z17_fetch_usbserial1v>
 808284e:	6803      	ldr	r3, [r0, #0]
 8082850:	691b      	ldr	r3, [r3, #16]
 8082852:	4798      	blx	r3
 8082854:	2800      	cmp	r0, #0
 8082856:	dd01      	ble.n	808285c <serialEventRun+0x5c>
        usbSerialEvent1();
 8082858:	f3af 8000 	nop.w
}
 808285c:	bd08      	pop	{r3, pc}
 808285e:	bf00      	nop
	...

08082878 <_post_loop>:
{
 8082878:	b508      	push	{r3, lr}
	serialEventRun();
 808287a:	f7ff ffc1 	bl	8082800 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808287e:	f7ff f975 	bl	8081b6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082882:	4b01      	ldr	r3, [pc, #4]	; (8082888 <_post_loop+0x10>)
 8082884:	6018      	str	r0, [r3, #0]
}
 8082886:	bd08      	pop	{r3, pc}
 8082888:	200009d4 	.word	0x200009d4

0808288c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808288c:	4802      	ldr	r0, [pc, #8]	; (8082898 <_Z33system_initialize_user_backup_ramv+0xc>)
 808288e:	4a03      	ldr	r2, [pc, #12]	; (808289c <_Z33system_initialize_user_backup_ramv+0x10>)
 8082890:	4903      	ldr	r1, [pc, #12]	; (80828a0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082892:	1a12      	subs	r2, r2, r0
 8082894:	f001 bca8 	b.w	80841e8 <memcpy>
 8082898:	40024000 	.word	0x40024000
 808289c:	40024004 	.word	0x40024004
 80828a0:	080868b0 	.word	0x080868b0

080828a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80828a4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80828a6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80828a8:	461a      	mov	r2, r3
 80828aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80828ae:	9300      	str	r3, [sp, #0]
 80828b0:	f7ff fab6 	bl	8081e20 <system_ctrl_set_result>
}
 80828b4:	b003      	add	sp, #12
 80828b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080828bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80828bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80828be:	8843      	ldrh	r3, [r0, #2]
 80828c0:	2b0a      	cmp	r3, #10
 80828c2:	d008      	beq.n	80828d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80828c4:	2b50      	cmp	r3, #80	; 0x50
 80828c6:	d10b      	bne.n	80828e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80828c8:	4b09      	ldr	r3, [pc, #36]	; (80828f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80828ca:	681b      	ldr	r3, [r3, #0]
 80828cc:	b14b      	cbz	r3, 80828e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80828ce:	b003      	add	sp, #12
 80828d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80828d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80828d6:	f7ff ffe5 	bl	80828a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80828da:	b003      	add	sp, #12
 80828dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80828e0:	2300      	movs	r3, #0
 80828e2:	461a      	mov	r2, r3
 80828e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80828e8:	9300      	str	r3, [sp, #0]
 80828ea:	f7ff fa99 	bl	8081e20 <system_ctrl_set_result>
}
 80828ee:	e7f4      	b.n	80828da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80828f0:	20000534 	.word	0x20000534

080828f4 <module_user_init_hook>:
{
 80828f4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80828f6:	4c12      	ldr	r4, [pc, #72]	; (8082940 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80828f8:	2100      	movs	r1, #0
 80828fa:	4812      	ldr	r0, [pc, #72]	; (8082944 <module_user_init_hook+0x50>)
 80828fc:	f7ff fb94 	bl	8082028 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082900:	4d11      	ldr	r5, [pc, #68]	; (8082948 <module_user_init_hook+0x54>)
 8082902:	6823      	ldr	r3, [r4, #0]
 8082904:	42ab      	cmp	r3, r5
 8082906:	bf0c      	ite	eq
 8082908:	2201      	moveq	r2, #1
 808290a:	2200      	movne	r2, #0
 808290c:	4b0f      	ldr	r3, [pc, #60]	; (808294c <module_user_init_hook+0x58>)
 808290e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082910:	d002      	beq.n	8082918 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8082912:	f7ff ffbb 	bl	808288c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8082916:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082918:	f7ff f920 	bl	8081b5c <HAL_RNG_GetRandomNumber>
 808291c:	4604      	mov	r4, r0
    srand(seed);
 808291e:	f001 fc79 	bl	8084214 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8082922:	4b0b      	ldr	r3, [pc, #44]	; (8082950 <module_user_init_hook+0x5c>)
 8082924:	b113      	cbz	r3, 808292c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8082926:	4620      	mov	r0, r4
 8082928:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808292c:	2100      	movs	r1, #0
 808292e:	4808      	ldr	r0, [pc, #32]	; (8082950 <module_user_init_hook+0x5c>)
 8082930:	f7ff fb2a 	bl	8081f88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8082934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082938:	2100      	movs	r1, #0
 808293a:	4806      	ldr	r0, [pc, #24]	; (8082954 <module_user_init_hook+0x60>)
 808293c:	f7ff ba66 	b.w	8081e0c <system_ctrl_set_app_request_handler>
 8082940:	40024000 	.word	0x40024000
 8082944:	080827f5 	.word	0x080827f5
 8082948:	9a271c1e 	.word	0x9a271c1e
 808294c:	20000530 	.word	0x20000530
 8082950:	00000000 	.word	0x00000000
 8082954:	080828bd 	.word	0x080828bd

08082958 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082958:	4770      	bx	lr

0808295a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808295a:	2000      	movs	r0, #0
 808295c:	4770      	bx	lr

0808295e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808295e:	b510      	push	{r4, lr}
 8082960:	4604      	mov	r4, r0
 8082962:	2110      	movs	r1, #16
 8082964:	f000 fe91 	bl	808368a <_ZdlPvj>
 8082968:	4620      	mov	r0, r4
 808296a:	bd10      	pop	{r4, pc}

0808296c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808296c:	b508      	push	{r3, lr}
      { delete this; }
 808296e:	f7ff fff6 	bl	808295e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082972:	bd08      	pop	{r3, pc}

08082974 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082974:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8082976:	b530      	push	{r4, r5, lr}
        type_(type) {
 8082978:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808297c:	6002      	str	r2, [r0, #0]
 808297e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8082980:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082982:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8082984:	680c      	ldr	r4, [r1, #0]
 8082986:	8085      	strh	r5, [r0, #4]
 8082988:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808298a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808298c:	bd30      	pop	{r4, r5, pc}

0808298e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808298e:	b510      	push	{r4, lr}
 8082990:	4604      	mov	r4, r0
    free((void*)msg_);
 8082992:	6800      	ldr	r0, [r0, #0]
 8082994:	f7ff fb08 	bl	8081fa8 <free>
}
 8082998:	4620      	mov	r0, r4
 808299a:	bd10      	pop	{r4, pc}

0808299c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808299c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808299e:	68c4      	ldr	r4, [r0, #12]
 80829a0:	b1f4      	cbz	r4, 80829e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80829a2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80829a4:	2b02      	cmp	r3, #2
 80829a6:	d103      	bne.n	80829b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80829a8:	f104 000c 	add.w	r0, r4, #12
 80829ac:	f7ff ffef 	bl	808298e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80829b0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80829b2:	b135      	cbz	r5, 80829c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80829b4:	4628      	mov	r0, r5
 80829b6:	f7ff feee 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
 80829ba:	2110      	movs	r1, #16
 80829bc:	4628      	mov	r0, r5
 80829be:	f000 fe64 	bl	808368a <_ZdlPvj>
 80829c2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80829c4:	b135      	cbz	r5, 80829d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80829c6:	4628      	mov	r0, r5
 80829c8:	f7ff fee5 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
 80829cc:	2110      	movs	r1, #16
 80829ce:	4628      	mov	r0, r5
 80829d0:	f000 fe5b 	bl	808368a <_ZdlPvj>
 80829d4:	4620      	mov	r0, r4
 80829d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80829da:	2114      	movs	r1, #20
 80829dc:	f000 be55 	b.w	808368a <_ZdlPvj>
 80829e0:	bd38      	pop	{r3, r4, r5, pc}

080829e2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80829e2:	b510      	push	{r4, lr}
 80829e4:	b088      	sub	sp, #32
 80829e6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80829e8:	4668      	mov	r0, sp
 80829ea:	f7ff fc0f 	bl	808220c <_ZN6StringC1EPKc>
    return (*fn)(p);
 80829ee:	4669      	mov	r1, sp
 80829f0:	a804      	add	r0, sp, #16
 80829f2:	f7ff fc4a 	bl	808228a <_ZN6StringC1ERKS_>
 80829f6:	a804      	add	r0, sp, #16
 80829f8:	47a0      	blx	r4
 80829fa:	4604      	mov	r4, r0
 80829fc:	a804      	add	r0, sp, #16
 80829fe:	f7ff fbbb 	bl	8082178 <_ZN6StringD1Ev>
    String p(param);
 8082a02:	4668      	mov	r0, sp
 8082a04:	f7ff fbb8 	bl	8082178 <_ZN6StringD1Ev>
}
 8082a08:	4620      	mov	r0, r4
 8082a0a:	b008      	add	sp, #32
 8082a0c:	bd10      	pop	{r4, pc}

08082a0e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082a0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8082a10:	2300      	movs	r3, #0
         size = sizeof(*this);
 8082a12:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8082a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8082a18:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082a1a:	4669      	mov	r1, sp
 8082a1c:	461a      	mov	r2, r3
 8082a1e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8082a20:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8082a24:	f8ad 4000 	strh.w	r4, [sp]
 8082a28:	f7ff fa6e 	bl	8081f08 <spark_function>
}
 8082a2c:	b004      	add	sp, #16
 8082a2e:	bd10      	pop	{r4, pc}

08082a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082a32:	460e      	mov	r6, r1
 8082a34:	4604      	mov	r4, r0
 8082a36:	f856 3b04 	ldr.w	r3, [r6], #4
 8082a3a:	460d      	mov	r5, r1
 8082a3c:	a801      	add	r0, sp, #4
 8082a3e:	4631      	mov	r1, r6
 8082a40:	9300      	str	r3, [sp, #0]
 8082a42:	f7ff fd6a 	bl	808251a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082a46:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082a48:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082a4a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8082a4c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8082a4e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8082a50:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8082a52:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082a54:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8082a56:	f7fd fbd6 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082a5a:	4630      	mov	r0, r6
 8082a5c:	f7fd fbd3 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8082a60:	4628      	mov	r0, r5
 8082a62:	2108      	movs	r1, #8
 8082a64:	f000 fe11 	bl	808368a <_ZdlPvj>
        return p;
    }
 8082a68:	4620      	mov	r0, r4
 8082a6a:	b002      	add	sp, #8
 8082a6c:	bd70      	pop	{r4, r5, r6, pc}

08082a6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082a6e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8082a70:	b510      	push	{r4, lr}
      if (_M_empty())
 8082a72:	b90a      	cbnz	r2, 8082a78 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082a74:	f000 fe0d 	bl	8083692 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082a78:	68c3      	ldr	r3, [r0, #12]
    }
 8082a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082a7e:	4718      	bx	r3

08082a80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082a80:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8082a82:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8082a84:	f100 0110 	add.w	r1, r0, #16
 8082a88:	f7ff fff1 	bl	8082a6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8082a8c:	bd08      	pop	{r3, pc}

08082a8e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8082a8e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8082a90:	b510      	push	{r4, lr}
      if (_M_empty())
 8082a92:	b90a      	cbnz	r2, 8082a98 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082a94:	f000 fdfd 	bl	8083692 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082a98:	68c3      	ldr	r3, [r0, #12]
    }
 8082a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082a9e:	4718      	bx	r3

08082aa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082aa0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8082aa2:	6800      	ldr	r0, [r0, #0]
 8082aa4:	f100 0110 	add.w	r1, r0, #16
 8082aa8:	f7ff fff1 	bl	8082a8e <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8082aac:	bd08      	pop	{r3, pc}
	...

08082ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8082ab0:	b538      	push	{r3, r4, r5, lr}
 8082ab2:	2300      	movs	r3, #0
 8082ab4:	4604      	mov	r4, r0
 8082ab6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082ab8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8082aba:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082abc:	f7fd fafd 	bl	80800ba <_Znwj>
 8082ac0:	b128      	cbz	r0, 8082ace <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8082ac2:	2301      	movs	r3, #1
 8082ac4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8082ac8:	4b02      	ldr	r3, [pc, #8]	; (8082ad4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082aca:	60c5      	str	r5, [r0, #12]
 8082acc:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082ace:	6020      	str	r0, [r4, #0]
	}
 8082ad0:	4620      	mov	r0, r4
 8082ad2:	bd38      	pop	{r3, r4, r5, pc}
 8082ad4:	08086498 	.word	0x08086498

08082ad8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8082ad8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082ada:	2300      	movs	r3, #0
 8082adc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082ade:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082ae0:	4604      	mov	r4, r0
 8082ae2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082ae4:	b12b      	cbz	r3, 8082af2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082ae6:	2202      	movs	r2, #2
 8082ae8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082aea:	68eb      	ldr	r3, [r5, #12]
 8082aec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082aee:	68ab      	ldr	r3, [r5, #8]
 8082af0:	60a3      	str	r3, [r4, #8]
    }
 8082af2:	4620      	mov	r0, r4
 8082af4:	bd38      	pop	{r3, r4, r5, pc}
	...

08082af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8082af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082afa:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8082afc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8082afe:	4668      	mov	r0, sp
 8082b00:	f7ff ff38 	bl	8082974 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8082b04:	f04f 0302 	mov.w	r3, #2
 8082b08:	e8d4 2f4f 	ldrexb	r2, [r4]
 8082b0c:	2a00      	cmp	r2, #0
 8082b0e:	d103      	bne.n	8082b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8082b10:	e8c4 3f41 	strexb	r1, r3, [r4]
 8082b14:	2900      	cmp	r1, #0
 8082b16:	d1f7      	bne.n	8082b08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8082b18:	d125      	bne.n	8082b66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8082b1a:	f104 050c 	add.w	r5, r4, #12
 8082b1e:	4669      	mov	r1, sp
 8082b20:	4628      	mov	r0, r5
 8082b22:	f7ff ff27 	bl	8082974 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8082b26:	2301      	movs	r3, #1
 8082b28:	f3bf 8f5b 	dmb	ish
 8082b2c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8082b2e:	2000      	movs	r0, #0
 8082b30:	f3bf 8f5b 	dmb	ish
 8082b34:	f104 0308 	add.w	r3, r4, #8
 8082b38:	e853 6f00 	ldrex	r6, [r3]
 8082b3c:	e843 0200 	strex	r2, r0, [r3]
 8082b40:	2a00      	cmp	r2, #0
 8082b42:	d1f9      	bne.n	8082b38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8082b44:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082b48:	b16e      	cbz	r6, 8082b66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8082b4a:	f7ff f947 	bl	8081ddc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8082b4e:	b178      	cbz	r0, 8082b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082b50:	4629      	mov	r1, r5
 8082b52:	4630      	mov	r0, r6
 8082b54:	f7ff ff8b 	bl	8082a6e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8082b58:	4630      	mov	r0, r6
 8082b5a:	f7ff fe1c 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8082b5e:	2110      	movs	r1, #16
 8082b60:	4630      	mov	r0, r6
 8082b62:	f000 fd92 	bl	808368a <_ZdlPvj>
        p_->setError(std::move(error));
 8082b66:	4668      	mov	r0, sp
 8082b68:	f7ff ff11 	bl	808298e <_ZN8particle5ErrorD1Ev>
    }
 8082b6c:	b009      	add	sp, #36	; 0x24
 8082b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082b70:	4631      	mov	r1, r6
 8082b72:	a802      	add	r0, sp, #8
 8082b74:	f7ff ffb0 	bl	8082ad8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8082b78:	68e0      	ldr	r0, [r4, #12]
 8082b7a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082b7e:	b108      	cbz	r0, 8082b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8082b80:	f001 fb8c 	bl	808429c <strdup>
        type_(type) {
 8082b84:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082b86:	2010      	movs	r0, #16
 8082b88:	f8ad 501c 	strh.w	r5, [sp, #28]
 8082b8c:	f7fd fa95 	bl	80800ba <_Znwj>
 8082b90:	4605      	mov	r5, r0
 8082b92:	b1e8      	cbz	r0, 8082bd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8082b94:	2700      	movs	r7, #0
 8082b96:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082b98:	2018      	movs	r0, #24
 8082b9a:	f7fd fa8e 	bl	80800ba <_Znwj>
 8082b9e:	4604      	mov	r4, r0
 8082ba0:	b188      	cbz	r0, 8082bc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8082ba2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082ba4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082ba6:	a802      	add	r0, sp, #8
 8082ba8:	f7ff fe04 	bl	80827b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082bac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082bae:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082bb0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082bb2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082bb4:	9204      	str	r2, [sp, #16]
 8082bb6:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082bb8:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8082bba:	60e3      	str	r3, [r4, #12]
 8082bbc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8082bc0:	9205      	str	r2, [sp, #20]
 8082bc2:	f7ff fed7 	bl	8082974 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8082bc6:	4b08      	ldr	r3, [pc, #32]	; (8082be8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082bc8:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082bca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082bcc:	4b07      	ldr	r3, [pc, #28]	; (8082bec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8082bce:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8082bd0:	a806      	add	r0, sp, #24
 8082bd2:	f7ff fedc 	bl	808298e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082bd6:	a802      	add	r0, sp, #8
 8082bd8:	f7ff fddd 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082bdc:	2200      	movs	r2, #0
 8082bde:	4629      	mov	r1, r5
 8082be0:	4803      	ldr	r0, [pc, #12]	; (8082bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8082be2:	f7ff f903 	bl	8081dec <application_thread_invoke>
 8082be6:	e7b7      	b.n	8082b58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8082be8:	08082a81 	.word	0x08082a81
 8082bec:	08082d19 	.word	0x08082d19
 8082bf0:	080832e1 	.word	0x080832e1

08082bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082bf8:	b08a      	sub	sp, #40	; 0x28
 8082bfa:	4605      	mov	r5, r0
 8082bfc:	460c      	mov	r4, r1
 8082bfe:	4617      	mov	r7, r2
 8082c00:	4698      	mov	r8, r3
 8082c02:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082c06:	f7ff f997 	bl	8081f38 <spark_cloud_flag_connected>
 8082c0a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8082c0c:	4682      	mov	sl, r0
 8082c0e:	bb38      	cbnz	r0, 8082c60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8082c10:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8082c14:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082c16:	a905      	add	r1, sp, #20
 8082c18:	4630      	mov	r0, r6
 8082c1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082c1e:	f7ff fea9 	bl	8082974 <_ZN8particle5ErrorC1EOS0_>
 8082c22:	2014      	movs	r0, #20
 8082c24:	f7fd fa49 	bl	80800ba <_Znwj>
 8082c28:	4604      	mov	r4, r0
 8082c2a:	b148      	cbz	r0, 8082c40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082c2c:	2302      	movs	r3, #2
 8082c2e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082c30:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082c32:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082c36:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8082c38:	4631      	mov	r1, r6
 8082c3a:	300c      	adds	r0, #12
 8082c3c:	f7ff fe9a 	bl	8082974 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082c40:	4628      	mov	r0, r5
	: __shared_count(__p)
 8082c42:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082c44:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8082c48:	f7ff ff32 	bl	8082ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082c4c:	4630      	mov	r0, r6
 8082c4e:	f7ff fe9e 	bl	808298e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8082c52:	a805      	add	r0, sp, #20
 8082c54:	f7ff fe9b 	bl	808298e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 8082c58:	4628      	mov	r0, r5
 8082c5a:	b00a      	add	sp, #40	; 0x28
 8082c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082c60:	230c      	movs	r3, #12
 8082c62:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082c66:	2014      	movs	r0, #20
 8082c68:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8082c6c:	9307      	str	r3, [sp, #28]
 8082c6e:	f7fd fa24 	bl	80800ba <_Znwj>
 8082c72:	4601      	mov	r1, r0
 8082c74:	b128      	cbz	r0, 8082c82 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082c76:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8082c7a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082c7e:	f880 a001 	strb.w	sl, [r0, #1]
 8082c82:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082c84:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8082c86:	f7ff ff13 	bl	8082ab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8082c8a:	4b22      	ldr	r3, [pc, #136]	; (8082d14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082c8c:	2008      	movs	r0, #8
 8082c8e:	9308      	str	r3, [sp, #32]
 8082c90:	f7fd fa13 	bl	80800ba <_Znwj>
 8082c94:	4682      	mov	sl, r0
 8082c96:	b128      	cbz	r0, 8082ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082c98:	9b03      	ldr	r3, [sp, #12]
 8082c9a:	a904      	add	r1, sp, #16
 8082c9c:	f840 3b04 	str.w	r3, [r0], #4
 8082ca0:	f7ff fc3b 	bl	808251a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082ca4:	4642      	mov	r2, r8
 8082ca6:	4639      	mov	r1, r7
 8082ca8:	4620      	mov	r0, r4
 8082caa:	9600      	str	r6, [sp, #0]
 8082cac:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8082cb0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082cb4:	f7ff f948 	bl	8081f48 <spark_send_event>
 8082cb8:	b9b8      	cbnz	r0, 8082cea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8082cba:	9b03      	ldr	r3, [sp, #12]
 8082cbc:	785b      	ldrb	r3, [r3, #1]
 8082cbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082cc2:	b993      	cbnz	r3, 8082cea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8082cc4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8082cc8:	a905      	add	r1, sp, #20
 8082cca:	a803      	add	r0, sp, #12
 8082ccc:	9205      	str	r2, [sp, #20]
 8082cce:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082cd2:	f7ff ff11 	bl	8082af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082cd6:	a805      	add	r0, sp, #20
 8082cd8:	f7ff fe59 	bl	808298e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082cdc:	a805      	add	r0, sp, #20
 8082cde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082ce0:	f7ff fea6 	bl	8082a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8082ce4:	a806      	add	r0, sp, #24
 8082ce6:	f7fd fa8e 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082cea:	9b03      	ldr	r3, [sp, #12]
 8082cec:	a904      	add	r1, sp, #16
 8082cee:	a806      	add	r0, sp, #24
 8082cf0:	9305      	str	r3, [sp, #20]
 8082cf2:	f7ff fc12 	bl	808251a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082cf6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082cf8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082cfa:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8082cfc:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8082cfe:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8082d00:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8082d02:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8082d04:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8082d06:	f7fd fa7e 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082d0a:	a804      	add	r0, sp, #16
 8082d0c:	f7fd fa7b 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8082d10:	e7a2      	b.n	8082c58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8082d12:	bf00      	nop
 8082d14:	08082ddd 	.word	0x08082ddd

08082d18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8082d18:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082d1c:	4605      	mov	r5, r0
	  switch (__op)
 8082d1e:	d007      	beq.n	8082d30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8082d20:	2a03      	cmp	r2, #3
 8082d22:	d018      	beq.n	8082d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8082d24:	2a01      	cmp	r2, #1
 8082d26:	d101      	bne.n	8082d2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8082d28:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082d2a:	6003      	str	r3, [r0, #0]
	}
 8082d2c:	2000      	movs	r0, #0
 8082d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082d30:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8082d32:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082d34:	f7fd f9c1 	bl	80800ba <_Znwj>
 8082d38:	4604      	mov	r4, r0
 8082d3a:	b150      	cbz	r0, 8082d52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082d3c:	4631      	mov	r1, r6
 8082d3e:	f7ff fecb 	bl	8082ad8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8082d42:	6930      	ldr	r0, [r6, #16]
 8082d44:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082d48:	b108      	cbz	r0, 8082d4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8082d4a:	f001 faa7 	bl	808429c <strdup>
        type_(type) {
 8082d4e:	6120      	str	r0, [r4, #16]
 8082d50:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8082d52:	602c      	str	r4, [r5, #0]
	}
 8082d54:	e7ea      	b.n	8082d2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082d56:	6804      	ldr	r4, [r0, #0]
 8082d58:	2c00      	cmp	r4, #0
 8082d5a:	d0e7      	beq.n	8082d2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8082d5c:	f104 0010 	add.w	r0, r4, #16
 8082d60:	f7ff fe15 	bl	808298e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082d64:	4620      	mov	r0, r4
 8082d66:	f7ff fd16 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082d6a:	2118      	movs	r1, #24
 8082d6c:	4620      	mov	r0, r4
 8082d6e:	f000 fc8c 	bl	808368a <_ZdlPvj>
 8082d72:	e7db      	b.n	8082d2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08082d74 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8082d74:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082d76:	2300      	movs	r3, #0
 8082d78:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082d7a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082d7c:	4604      	mov	r4, r0
 8082d7e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082d80:	b12b      	cbz	r3, 8082d8e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082d82:	2202      	movs	r2, #2
 8082d84:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082d86:	68eb      	ldr	r3, [r5, #12]
 8082d88:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082d8a:	68ab      	ldr	r3, [r5, #8]
 8082d8c:	60a3      	str	r3, [r4, #8]
    }
 8082d8e:	4620      	mov	r0, r4
 8082d90:	bd38      	pop	{r3, r4, r5, pc}

08082d92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8082d92:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082d94:	b570      	push	{r4, r5, r6, lr}
 8082d96:	4604      	mov	r4, r0
	  switch (__op)
 8082d98:	d007      	beq.n	8082daa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8082d9a:	2a03      	cmp	r2, #3
 8082d9c:	d012      	beq.n	8082dc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8082d9e:	2a01      	cmp	r2, #1
 8082da0:	d101      	bne.n	8082da6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8082da2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082da4:	6003      	str	r3, [r0, #0]
	}
 8082da6:	2000      	movs	r0, #0
 8082da8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082daa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8082dac:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082dae:	f7fd f984 	bl	80800ba <_Znwj>
 8082db2:	4605      	mov	r5, r0
 8082db4:	b120      	cbz	r0, 8082dc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8082db6:	4631      	mov	r1, r6
 8082db8:	f7ff ffdc 	bl	8082d74 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082dbc:	7c33      	ldrb	r3, [r6, #16]
 8082dbe:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8082dc0:	6025      	str	r5, [r4, #0]
	}
 8082dc2:	e7f0      	b.n	8082da6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082dc4:	6804      	ldr	r4, [r0, #0]
 8082dc6:	2c00      	cmp	r4, #0
 8082dc8:	d0ed      	beq.n	8082da6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8082dca:	4620      	mov	r0, r4
 8082dcc:	f7ff fce3 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082dd0:	2114      	movs	r1, #20
 8082dd2:	4620      	mov	r0, r4
 8082dd4:	f000 fc59 	bl	808368a <_ZdlPvj>
 8082dd8:	e7e5      	b.n	8082da6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08082ddc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082dde:	4604      	mov	r4, r0
 8082de0:	b089      	sub	sp, #36	; 0x24
 8082de2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082de4:	a801      	add	r0, sp, #4
 8082de6:	4611      	mov	r1, r2
 8082de8:	f7ff fe22 	bl	8082a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082dec:	b1a4      	cbz	r4, 8082e18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8082dee:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082df0:	b11d      	cbz	r5, 8082dfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8082df2:	4628      	mov	r0, r5
 8082df4:	f001 fa52 	bl	808429c <strdup>
 8082df8:	4605      	mov	r5, r0
 8082dfa:	a801      	add	r0, sp, #4
 8082dfc:	a903      	add	r1, sp, #12
        type_(type) {
 8082dfe:	9503      	str	r5, [sp, #12]
 8082e00:	f8ad 4010 	strh.w	r4, [sp, #16]
 8082e04:	f7ff fe78 	bl	8082af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082e08:	a803      	add	r0, sp, #12
 8082e0a:	f7ff fdc0 	bl	808298e <_ZN8particle5ErrorD1Ev>
 8082e0e:	a802      	add	r0, sp, #8
 8082e10:	f7fd f9f9 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082e14:	b009      	add	sp, #36	; 0x24
 8082e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8082e18:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8082e1a:	9d01      	ldr	r5, [sp, #4]
 8082e1c:	e8d5 2f4f 	ldrexb	r2, [r5]
 8082e20:	2a00      	cmp	r2, #0
 8082e22:	d103      	bne.n	8082e2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8082e24:	e8c5 3f41 	strexb	r1, r3, [r5]
 8082e28:	2900      	cmp	r1, #0
 8082e2a:	d1f7      	bne.n	8082e1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8082e2c:	d1ef      	bne.n	8082e0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8082e2e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8082e30:	f3bf 8f5b 	dmb	ish
 8082e34:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8082e36:	f3bf 8f5b 	dmb	ish
 8082e3a:	1d2b      	adds	r3, r5, #4
 8082e3c:	e853 6f00 	ldrex	r6, [r3]
 8082e40:	e843 4200 	strex	r2, r4, [r3]
 8082e44:	2a00      	cmp	r2, #0
 8082e46:	d1f9      	bne.n	8082e3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8082e48:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082e4c:	2e00      	cmp	r6, #0
 8082e4e:	d0de      	beq.n	8082e0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8082e50:	4620      	mov	r0, r4
 8082e52:	f7fe ffc3 	bl	8081ddc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8082e56:	4607      	mov	r7, r0
 8082e58:	b160      	cbz	r0, 8082e74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082e5a:	4630      	mov	r0, r6
 8082e5c:	f105 010c 	add.w	r1, r5, #12
 8082e60:	f7ff fe15 	bl	8082a8e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8082e64:	4630      	mov	r0, r6
 8082e66:	f7ff fc96 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8082e6a:	2110      	movs	r1, #16
 8082e6c:	4630      	mov	r0, r6
 8082e6e:	f000 fc0c 	bl	808368a <_ZdlPvj>
 8082e72:	e7cc      	b.n	8082e0e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082e74:	4631      	mov	r1, r6
 8082e76:	a803      	add	r0, sp, #12
 8082e78:	f7ff ff7c 	bl	8082d74 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082e7c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082e7e:	2010      	movs	r0, #16
 8082e80:	f88d 301c 	strb.w	r3, [sp, #28]
 8082e84:	f7fd f919 	bl	80800ba <_Znwj>
 8082e88:	4605      	mov	r5, r0
 8082e8a:	b1d0      	cbz	r0, 8082ec2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8082e8c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082e8e:	2014      	movs	r0, #20
 8082e90:	f7fd f913 	bl	80800ba <_Znwj>
 8082e94:	4604      	mov	r4, r0
 8082e96:	b178      	cbz	r0, 8082eb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8082e98:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082e9a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082e9c:	a803      	add	r0, sp, #12
 8082e9e:	f7ff fc89 	bl	80827b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082ea2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082ea4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082ea6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082ea8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8082eaa:	9205      	str	r2, [sp, #20]
 8082eac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082eae:	60e3      	str	r3, [r4, #12]
 8082eb0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8082eb4:	9206      	str	r2, [sp, #24]
 8082eb6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8082eb8:	4b06      	ldr	r3, [pc, #24]	; (8082ed4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082eba:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082ebc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082ebe:	4b06      	ldr	r3, [pc, #24]	; (8082ed8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8082ec0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8082ec2:	a803      	add	r0, sp, #12
 8082ec4:	f7ff fc67 	bl	8082796 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082ec8:	2200      	movs	r2, #0
 8082eca:	4629      	mov	r1, r5
 8082ecc:	4803      	ldr	r0, [pc, #12]	; (8082edc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8082ece:	f7fe ff8d 	bl	8081dec <application_thread_invoke>
 8082ed2:	e7c7      	b.n	8082e64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8082ed4:	08082aa1 	.word	0x08082aa1
 8082ed8:	08082d93 	.word	0x08082d93
 8082edc:	080832e1 	.word	0x080832e1

08082ee0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082ee0:	4770      	bx	lr

08082ee2 <_ZN9IPAddressD0Ev>:
 8082ee2:	b510      	push	{r4, lr}
 8082ee4:	4604      	mov	r4, r0
 8082ee6:	2108      	movs	r1, #8
 8082ee8:	f000 fbcf 	bl	808368a <_ZdlPvj>
 8082eec:	4620      	mov	r0, r4
 8082eee:	bd10      	pop	{r4, pc}

08082ef0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082ef2:	460e      	mov	r6, r1
 8082ef4:	2400      	movs	r4, #0
 8082ef6:	f100 0708 	add.w	r7, r0, #8
 8082efa:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8082efc:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082f00:	220a      	movs	r2, #10
 8082f02:	4630      	mov	r0, r6
 8082f04:	f7ff fabb 	bl	808247e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082f08:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082f0a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082f0c:	d101      	bne.n	8082f12 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082f0e:	4620      	mov	r0, r4
 8082f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082f12:	2c00      	cmp	r4, #0
 8082f14:	d0f2      	beq.n	8082efc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082f16:	212e      	movs	r1, #46	; 0x2e
 8082f18:	4630      	mov	r0, r6
 8082f1a:	f7ff faa1 	bl	8082460 <_ZN5Print5printEc>
 8082f1e:	4404      	add	r4, r0
 8082f20:	e7ec      	b.n	8082efc <_ZNK9IPAddress7printToER5Print+0xc>
	...

08082f24 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082f24:	4a02      	ldr	r2, [pc, #8]	; (8082f30 <_ZN9IPAddressC1Ev+0xc>)
 8082f26:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082f28:	2200      	movs	r2, #0
 8082f2a:	6042      	str	r2, [r0, #4]
}
 8082f2c:	4770      	bx	lr
 8082f2e:	bf00      	nop
 8082f30:	080864b4 	.word	0x080864b4

08082f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8082f34:	4a02      	ldr	r2, [pc, #8]	; (8082f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082f36:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8082f38:	680a      	ldr	r2, [r1, #0]
 8082f3a:	6042      	str	r2, [r0, #4]
}
 8082f3c:	4770      	bx	lr
 8082f3e:	bf00      	nop
 8082f40:	080864b4 	.word	0x080864b4

08082f44 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8082f44:	4a01      	ldr	r2, [pc, #4]	; (8082f4c <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8082f46:	e9c0 2100 	strd	r2, r1, [r0]
}
 8082f4a:	4770      	bx	lr
 8082f4c:	080864b4 	.word	0x080864b4

08082f50 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8082f50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082f52:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082f56:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8082f5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082f5e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8082f62:	6044      	str	r4, [r0, #4]
}
 8082f64:	bd10      	pop	{r4, pc}
	...

08082f68 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082f6a:	4d04      	ldr	r5, [pc, #16]	; (8082f7c <_ZN9IPAddressC1Ehhhh+0x14>)
 8082f6c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082f6e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082f72:	9500      	str	r5, [sp, #0]
 8082f74:	f7ff ffec 	bl	8082f50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082f78:	b003      	add	sp, #12
 8082f7a:	bd30      	pop	{r4, r5, pc}
 8082f7c:	080864b4 	.word	0x080864b4

08082f80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082f80:	7441      	strb	r1, [r0, #17]
}
 8082f82:	4770      	bx	lr

08082f84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082f84:	4770      	bx	lr

08082f86 <_ZN9USBSerial4readEv>:
{
 8082f86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082f88:	2100      	movs	r1, #0
 8082f8a:	7c00      	ldrb	r0, [r0, #16]
 8082f8c:	f7fe feee 	bl	8081d6c <HAL_USB_USART_Receive_Data>
}
 8082f90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082f94:	bd08      	pop	{r3, pc}

08082f96 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8082f96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082f98:	2101      	movs	r1, #1
 8082f9a:	7c00      	ldrb	r0, [r0, #16]
 8082f9c:	f7fe fee6 	bl	8081d6c <HAL_USB_USART_Receive_Data>
}
 8082fa0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082fa4:	bd08      	pop	{r3, pc}

08082fa6 <_ZN9USBSerial17availableForWriteEv>:
{
 8082fa6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082fa8:	7c00      	ldrb	r0, [r0, #16]
 8082faa:	f7fe fed7 	bl	8081d5c <HAL_USB_USART_Available_Data_For_Write>
}
 8082fae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082fb2:	bd08      	pop	{r3, pc}

08082fb4 <_ZN9USBSerial9availableEv>:
{
 8082fb4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082fb6:	7c00      	ldrb	r0, [r0, #16]
 8082fb8:	f7fe fec8 	bl	8081d4c <HAL_USB_USART_Available_Data>
}
 8082fbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082fc0:	bd08      	pop	{r3, pc}

08082fc2 <_ZN9USBSerial5writeEh>:
{
 8082fc2:	b538      	push	{r3, r4, r5, lr}
 8082fc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082fc6:	7c00      	ldrb	r0, [r0, #16]
{
 8082fc8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082fca:	f7fe fec7 	bl	8081d5c <HAL_USB_USART_Available_Data_For_Write>
 8082fce:	2800      	cmp	r0, #0
 8082fd0:	dc01      	bgt.n	8082fd6 <_ZN9USBSerial5writeEh+0x14>
 8082fd2:	7c60      	ldrb	r0, [r4, #17]
 8082fd4:	b128      	cbz	r0, 8082fe2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082fd6:	4629      	mov	r1, r5
 8082fd8:	7c20      	ldrb	r0, [r4, #16]
 8082fda:	f7fe fecf 	bl	8081d7c <HAL_USB_USART_Send_Data>
 8082fde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8082fe2:	bd38      	pop	{r3, r4, r5, pc}

08082fe4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8082fe4:	7c00      	ldrb	r0, [r0, #16]
 8082fe6:	f7fe bed1 	b.w	8081d8c <HAL_USB_USART_Flush_Data>

08082fea <_ZN9USBSerialD0Ev>:
 8082fea:	b510      	push	{r4, lr}
 8082fec:	4604      	mov	r4, r0
 8082fee:	2114      	movs	r1, #20
 8082ff0:	f000 fb4b 	bl	808368a <_ZdlPvj>
 8082ff4:	4620      	mov	r0, r4
 8082ff6:	bd10      	pop	{r4, pc}

08082ff8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082ff8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082ffe:	4604      	mov	r4, r0
 8083000:	4608      	mov	r0, r1
 8083002:	2100      	movs	r1, #0
 8083004:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8083008:	4b04      	ldr	r3, [pc, #16]	; (808301c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808300a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808300c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808300e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8083010:	4611      	mov	r1, r2
  _blocking = true;
 8083012:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8083014:	f7fe fe92 	bl	8081d3c <HAL_USB_USART_Init>
}
 8083018:	4620      	mov	r0, r4
 808301a:	bd10      	pop	{r4, pc}
 808301c:	080864c8 	.word	0x080864c8

08083020 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8083020:	b510      	push	{r4, lr}
 8083022:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083024:	2214      	movs	r2, #20
 8083026:	2100      	movs	r1, #0
 8083028:	f001 f8ec 	bl	8084204 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808302c:	4b05      	ldr	r3, [pc, #20]	; (8083044 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808302e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8083030:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8083032:	4b05      	ldr	r3, [pc, #20]	; (8083048 <_Z19acquireSerialBufferv+0x28>)
 8083034:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083036:	f240 1301 	movw	r3, #257	; 0x101
 808303a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808303c:	2381      	movs	r3, #129	; 0x81
 808303e:	8223      	strh	r3, [r4, #16]
}
 8083040:	bd10      	pop	{r4, pc}
 8083042:	bf00      	nop
 8083044:	20000568 	.word	0x20000568
 8083048:	20000669 	.word	0x20000669

0808304c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808304c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808304e:	4d0f      	ldr	r5, [pc, #60]	; (808308c <_Z16_fetch_usbserialv+0x40>)
{
 8083050:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8083052:	a801      	add	r0, sp, #4
 8083054:	f7ff ffe4 	bl	8083020 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083058:	7829      	ldrb	r1, [r5, #0]
 808305a:	f3bf 8f5b 	dmb	ish
 808305e:	f011 0401 	ands.w	r4, r1, #1
 8083062:	d110      	bne.n	8083086 <_Z16_fetch_usbserialv+0x3a>
 8083064:	4628      	mov	r0, r5
 8083066:	f7fd f82e 	bl	80800c6 <__cxa_guard_acquire>
 808306a:	b160      	cbz	r0, 8083086 <_Z16_fetch_usbserialv+0x3a>
 808306c:	4621      	mov	r1, r4
 808306e:	aa01      	add	r2, sp, #4
 8083070:	4807      	ldr	r0, [pc, #28]	; (8083090 <_Z16_fetch_usbserialv+0x44>)
 8083072:	f7ff ffc1 	bl	8082ff8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083076:	4628      	mov	r0, r5
 8083078:	f7fd f82a 	bl	80800d0 <__cxa_guard_release>
 808307c:	4a05      	ldr	r2, [pc, #20]	; (8083094 <_Z16_fetch_usbserialv+0x48>)
 808307e:	4906      	ldr	r1, [pc, #24]	; (8083098 <_Z16_fetch_usbserialv+0x4c>)
 8083080:	4803      	ldr	r0, [pc, #12]	; (8083090 <_Z16_fetch_usbserialv+0x44>)
 8083082:	f000 fafd 	bl	8083680 <__aeabi_atexit>
	return _usbserial;
}
 8083086:	4802      	ldr	r0, [pc, #8]	; (8083090 <_Z16_fetch_usbserialv+0x44>)
 8083088:	b007      	add	sp, #28
 808308a:	bd30      	pop	{r4, r5, pc}
 808308c:	20000538 	.word	0x20000538
 8083090:	20000540 	.word	0x20000540
 8083094:	200001e8 	.word	0x200001e8
 8083098:	08082f85 	.word	0x08082f85

0808309c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808309c:	b510      	push	{r4, lr}
 808309e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80830a0:	2214      	movs	r2, #20
 80830a2:	2100      	movs	r1, #0
 80830a4:	f001 f8ae 	bl	8084204 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80830a8:	4b05      	ldr	r3, [pc, #20]	; (80830c0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80830aa:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80830ac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80830ae:	4b05      	ldr	r3, [pc, #20]	; (80830c4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80830b0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80830b2:	f240 1301 	movw	r3, #257	; 0x101
 80830b6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80830b8:	2381      	movs	r3, #129	; 0x81
 80830ba:	8223      	strh	r3, [r4, #16]
}
 80830bc:	bd10      	pop	{r4, pc}
 80830be:	bf00      	nop
 80830c0:	200006ea 	.word	0x200006ea
 80830c4:	200007eb 	.word	0x200007eb

080830c8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80830c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80830ca:	4c0f      	ldr	r4, [pc, #60]	; (8083108 <_Z17_fetch_usbserial1v+0x40>)
{
 80830cc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80830ce:	a801      	add	r0, sp, #4
 80830d0:	f7ff ffe4 	bl	808309c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80830d4:	7823      	ldrb	r3, [r4, #0]
 80830d6:	f3bf 8f5b 	dmb	ish
 80830da:	07db      	lsls	r3, r3, #31
 80830dc:	d410      	bmi.n	8083100 <_Z17_fetch_usbserial1v+0x38>
 80830de:	4620      	mov	r0, r4
 80830e0:	f7fc fff1 	bl	80800c6 <__cxa_guard_acquire>
 80830e4:	b160      	cbz	r0, 8083100 <_Z17_fetch_usbserial1v+0x38>
 80830e6:	2101      	movs	r1, #1
 80830e8:	aa01      	add	r2, sp, #4
 80830ea:	4808      	ldr	r0, [pc, #32]	; (808310c <_Z17_fetch_usbserial1v+0x44>)
 80830ec:	f7ff ff84 	bl	8082ff8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80830f0:	4620      	mov	r0, r4
 80830f2:	f7fc ffed 	bl	80800d0 <__cxa_guard_release>
 80830f6:	4a06      	ldr	r2, [pc, #24]	; (8083110 <_Z17_fetch_usbserial1v+0x48>)
 80830f8:	4906      	ldr	r1, [pc, #24]	; (8083114 <_Z17_fetch_usbserial1v+0x4c>)
 80830fa:	4804      	ldr	r0, [pc, #16]	; (808310c <_Z17_fetch_usbserial1v+0x44>)
 80830fc:	f000 fac0 	bl	8083680 <__aeabi_atexit>
  return _usbserial1;
}
 8083100:	4802      	ldr	r0, [pc, #8]	; (808310c <_Z17_fetch_usbserial1v+0x44>)
 8083102:	b006      	add	sp, #24
 8083104:	bd10      	pop	{r4, pc}
 8083106:	bf00      	nop
 8083108:	2000053c 	.word	0x2000053c
 808310c:	20000554 	.word	0x20000554
 8083110:	200001e8 	.word	0x200001e8
 8083114:	08082f85 	.word	0x08082f85

08083118 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8083118:	2200      	movs	r2, #0
 808311a:	6840      	ldr	r0, [r0, #4]
 808311c:	4611      	mov	r1, r2
 808311e:	f7fe beab 	b.w	8081e78 <network_ready>

08083122 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8083122:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8083124:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8083126:	b085      	sub	sp, #20
 8083128:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808312a:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808312c:	460f      	mov	r7, r1
 808312e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8083130:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083132:	f001 f8ce 	bl	80842d2 <strlen>
 8083136:	687b      	ldr	r3, [r7, #4]
 8083138:	b281      	uxth	r1, r0
 808313a:	9600      	str	r6, [sp, #0]
 808313c:	4628      	mov	r0, r5
 808313e:	aa03      	add	r2, sp, #12
 8083140:	f7fe fdec 	bl	8081d1c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8083144:	b130      	cbz	r0, 8083154 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8083146:	4631      	mov	r1, r6
 8083148:	4620      	mov	r0, r4
 808314a:	f7ff fefb 	bl	8082f44 <_ZN9IPAddressC1Em>
    }
 808314e:	4620      	mov	r0, r4
 8083150:	b005      	add	sp, #20
 8083152:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8083154:	4620      	mov	r0, r4
 8083156:	a903      	add	r1, sp, #12
 8083158:	f7ff feec 	bl	8082f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808315c:	e7f7      	b.n	808314e <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808315e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808315e:	2200      	movs	r2, #0
 8083160:	6840      	ldr	r0, [r0, #4]
 8083162:	4611      	mov	r1, r2
 8083164:	f7fe bea8 	b.w	8081eb8 <network_listening>

08083168 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8083168:	2200      	movs	r2, #0
 808316a:	6840      	ldr	r0, [r0, #4]
 808316c:	4611      	mov	r1, r2
 808316e:	f7fe beb3 	b.w	8081ed8 <network_get_listen_timeout>

08083172 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8083172:	2200      	movs	r2, #0
 8083174:	6840      	ldr	r0, [r0, #4]
 8083176:	f7fe bea7 	b.w	8081ec8 <network_set_listen_timeout>

0808317a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808317a:	2200      	movs	r2, #0
 808317c:	6840      	ldr	r0, [r0, #4]
 808317e:	f081 0101 	eor.w	r1, r1, #1
 8083182:	f7fe be91 	b.w	8081ea8 <network_listen>

08083186 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8083186:	2300      	movs	r3, #0
 8083188:	6840      	ldr	r0, [r0, #4]
 808318a:	461a      	mov	r2, r3
 808318c:	4619      	mov	r1, r3
 808318e:	f7fe be83 	b.w	8081e98 <network_off>

08083192 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8083192:	2300      	movs	r3, #0
 8083194:	6840      	ldr	r0, [r0, #4]
 8083196:	461a      	mov	r2, r3
 8083198:	4619      	mov	r1, r3
 808319a:	f7fe be75 	b.w	8081e88 <network_on>

0808319e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808319e:	2200      	movs	r2, #0
 80831a0:	6840      	ldr	r0, [r0, #4]
 80831a2:	4611      	mov	r1, r2
 80831a4:	f7fe be58 	b.w	8081e58 <network_connecting>

080831a8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80831a8:	2200      	movs	r2, #0
 80831aa:	2102      	movs	r1, #2
 80831ac:	6840      	ldr	r0, [r0, #4]
 80831ae:	f7fe be5b 	b.w	8081e68 <network_disconnect>

080831b2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80831b2:	2300      	movs	r3, #0
 80831b4:	6840      	ldr	r0, [r0, #4]
 80831b6:	461a      	mov	r2, r3
 80831b8:	f7fe be46 	b.w	8081e48 <network_connect>

080831bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80831bc:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80831be:	2428      	movs	r4, #40	; 0x28
 80831c0:	4b07      	ldr	r3, [pc, #28]	; (80831e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80831c2:	4622      	mov	r2, r4
 80831c4:	4618      	mov	r0, r3
 80831c6:	2100      	movs	r1, #0
 80831c8:	f001 f81c 	bl	8084204 <memset>
        cid = -1;
 80831cc:	f04f 32ff 	mov.w	r2, #4294967295
 80831d0:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80831d2:	2204      	movs	r2, #4
 80831d4:	4b03      	ldr	r3, [pc, #12]	; (80831e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80831d6:	8004      	strh	r4, [r0, #0]
 80831d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80831da:	4a03      	ldr	r2, [pc, #12]	; (80831e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 80831dc:	601a      	str	r2, [r3, #0]
 80831de:	bd10      	pop	{r4, pc}
 80831e0:	20000874 	.word	0x20000874
 80831e4:	2000086c 	.word	0x2000086c
 80831e8:	080864f8 	.word	0x080864f8

080831ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80831ec:	4770      	bx	lr

080831ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80831ee:	7441      	strb	r1, [r0, #17]
}
 80831f0:	4770      	bx	lr

080831f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80831f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80831f4:	7c00      	ldrb	r0, [r0, #16]
 80831f6:	f7fe fd19 	bl	8081c2c <hal_usart_available_data_for_write>
}
 80831fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80831fe:	bd08      	pop	{r3, pc}

08083200 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8083200:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 8083202:	7c00      	ldrb	r0, [r0, #16]
 8083204:	f7fe fcea 	bl	8081bdc <hal_usart_available>
}
 8083208:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808320c:	bd08      	pop	{r3, pc}

0808320e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808320e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8083210:	7c00      	ldrb	r0, [r0, #16]
 8083212:	f7fe fcf3 	bl	8081bfc <hal_usart_peek>
}
 8083216:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808321a:	bd08      	pop	{r3, pc}

0808321c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808321c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808321e:	7c00      	ldrb	r0, [r0, #16]
 8083220:	f7fe fce4 	bl	8081bec <hal_usart_read>
}
 8083224:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083228:	bd08      	pop	{r3, pc}

0808322a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808322a:	7c00      	ldrb	r0, [r0, #16]
 808322c:	f7fe bcee 	b.w	8081c0c <hal_usart_flush>

08083230 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083230:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083232:	7c46      	ldrb	r6, [r0, #17]
{
 8083234:	4604      	mov	r4, r0
 8083236:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083238:	b12e      	cbz	r6, 8083246 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808323a:	4629      	mov	r1, r5
 808323c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808323e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8083242:	f7fe bcc3 	b.w	8081bcc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083246:	7c00      	ldrb	r0, [r0, #16]
 8083248:	f7fe fcf0 	bl	8081c2c <hal_usart_available_data_for_write>
 808324c:	2800      	cmp	r0, #0
 808324e:	dcf4      	bgt.n	808323a <_ZN11USARTSerial5writeEh+0xa>
}
 8083250:	4630      	mov	r0, r6
 8083252:	bd70      	pop	{r4, r5, r6, pc}

08083254 <_ZN11USARTSerialD0Ev>:
 8083254:	b510      	push	{r4, lr}
 8083256:	4604      	mov	r4, r0
 8083258:	2114      	movs	r1, #20
 808325a:	f000 fa16 	bl	808368a <_ZdlPvj>
 808325e:	4620      	mov	r0, r4
 8083260:	bd10      	pop	{r4, pc}
	...

08083264 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8083264:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8083268:	b510      	push	{r4, lr}
 808326a:	4604      	mov	r4, r0
 808326c:	4608      	mov	r0, r1
 808326e:	4611      	mov	r1, r2
 8083270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083274:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8083278:	4a04      	ldr	r2, [pc, #16]	; (808328c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808327a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808327c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808327e:	2201      	movs	r2, #1
 8083280:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8083282:	461a      	mov	r2, r3
 8083284:	f7fe fc9a 	bl	8081bbc <hal_usart_init>
}
 8083288:	4620      	mov	r0, r4
 808328a:	bd10      	pop	{r4, pc}
 808328c:	08086534 	.word	0x08086534

08083290 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083290:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083292:	4d0d      	ldr	r5, [pc, #52]	; (80832c8 <_Z22__fetch_global_Serial1v+0x38>)
 8083294:	7829      	ldrb	r1, [r5, #0]
 8083296:	f3bf 8f5b 	dmb	ish
 808329a:	f011 0401 	ands.w	r4, r1, #1
 808329e:	d111      	bne.n	80832c4 <_Z22__fetch_global_Serial1v+0x34>
 80832a0:	4628      	mov	r0, r5
 80832a2:	f7fc ff10 	bl	80800c6 <__cxa_guard_acquire>
 80832a6:	b168      	cbz	r0, 80832c4 <_Z22__fetch_global_Serial1v+0x34>
 80832a8:	4621      	mov	r1, r4
 80832aa:	4a08      	ldr	r2, [pc, #32]	; (80832cc <_Z22__fetch_global_Serial1v+0x3c>)
 80832ac:	4b08      	ldr	r3, [pc, #32]	; (80832d0 <_Z22__fetch_global_Serial1v+0x40>)
 80832ae:	4809      	ldr	r0, [pc, #36]	; (80832d4 <_Z22__fetch_global_Serial1v+0x44>)
 80832b0:	f7ff ffd8 	bl	8083264 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80832b4:	4628      	mov	r0, r5
 80832b6:	f7fc ff0b 	bl	80800d0 <__cxa_guard_release>
 80832ba:	4a07      	ldr	r2, [pc, #28]	; (80832d8 <_Z22__fetch_global_Serial1v+0x48>)
 80832bc:	4907      	ldr	r1, [pc, #28]	; (80832dc <_Z22__fetch_global_Serial1v+0x4c>)
 80832be:	4805      	ldr	r0, [pc, #20]	; (80832d4 <_Z22__fetch_global_Serial1v+0x44>)
 80832c0:	f000 f9de 	bl	8083680 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80832c4:	4803      	ldr	r0, [pc, #12]	; (80832d4 <_Z22__fetch_global_Serial1v+0x44>)
 80832c6:	bd38      	pop	{r3, r4, r5, pc}
 80832c8:	2000089c 	.word	0x2000089c
 80832cc:	200008a0 	.word	0x200008a0
 80832d0:	20000924 	.word	0x20000924
 80832d4:	200009a8 	.word	0x200009a8
 80832d8:	200001e8 	.word	0x200001e8
 80832dc:	080831ed 	.word	0x080831ed

080832e0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80832e0:	b510      	push	{r4, lr}
      if (_M_empty())
 80832e2:	6883      	ldr	r3, [r0, #8]
 80832e4:	4604      	mov	r4, r0
 80832e6:	b90b      	cbnz	r3, 80832ec <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80832e8:	f000 f9d3 	bl	8083692 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80832ec:	68c3      	ldr	r3, [r0, #12]
 80832ee:	4798      	blx	r3
      if (_M_manager)
 80832f0:	68a3      	ldr	r3, [r4, #8]
 80832f2:	b11b      	cbz	r3, 80832fc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80832f4:	2203      	movs	r2, #3
 80832f6:	4621      	mov	r1, r4
 80832f8:	4620      	mov	r0, r4
 80832fa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80832fc:	4620      	mov	r0, r4
}
 80832fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8083302:	2110      	movs	r1, #16
 8083304:	f000 b9c1 	b.w	808368a <_ZdlPvj>

08083308 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8083308:	4770      	bx	lr

0808330a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808330a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808330c:	4606      	mov	r6, r0
 808330e:	4615      	mov	r5, r2
 8083310:	460c      	mov	r4, r1
 8083312:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8083314:	42bc      	cmp	r4, r7
 8083316:	d006      	beq.n	8083326 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8083318:	6833      	ldr	r3, [r6, #0]
 808331a:	4630      	mov	r0, r6
 808331c:	689b      	ldr	r3, [r3, #8]
 808331e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8083322:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8083324:	e7f6      	b.n	8083314 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8083326:	4628      	mov	r0, r5
 8083328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808332a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808332a:	2200      	movs	r2, #0
 808332c:	7c00      	ldrb	r0, [r0, #16]
 808332e:	f7fe bc9d 	b.w	8081c6c <hal_i2c_write>

08083332 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8083332:	2100      	movs	r1, #0
 8083334:	7c00      	ldrb	r0, [r0, #16]
 8083336:	f7fe bca1 	b.w	8081c7c <hal_i2c_available>

0808333a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808333a:	2100      	movs	r1, #0
 808333c:	7c00      	ldrb	r0, [r0, #16]
 808333e:	f7fe bca5 	b.w	8081c8c <hal_i2c_read>

08083342 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8083342:	2100      	movs	r1, #0
 8083344:	7c00      	ldrb	r0, [r0, #16]
 8083346:	f7fe bca9 	b.w	8081c9c <hal_i2c_peek>

0808334a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808334a:	2100      	movs	r1, #0
 808334c:	7c00      	ldrb	r0, [r0, #16]
 808334e:	f7fe bcad 	b.w	8081cac <hal_i2c_flush>

08083352 <_ZN7TwoWireD0Ev>:
 8083352:	b510      	push	{r4, lr}
 8083354:	4604      	mov	r4, r0
 8083356:	2114      	movs	r1, #20
 8083358:	f000 f997 	bl	808368a <_ZdlPvj>
 808335c:	4620      	mov	r0, r4
 808335e:	bd10      	pop	{r4, pc}

08083360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8083360:	b510      	push	{r4, lr}
 8083362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083366:	4604      	mov	r4, r0
 8083368:	4608      	mov	r0, r1
 808336a:	2100      	movs	r1, #0
 808336c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8083370:	4b03      	ldr	r3, [pc, #12]	; (8083380 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8083372:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8083374:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8083376:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8083378:	f7fe fca8 	bl	8081ccc <hal_i2c_init>
}
 808337c:	4620      	mov	r0, r4
 808337e:	bd10      	pop	{r4, pc}
 8083380:	08086564 	.word	0x08086564

08083384 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8083384:	2300      	movs	r3, #0
 8083386:	7c00      	ldrb	r0, [r0, #16]
 8083388:	461a      	mov	r2, r3
 808338a:	4619      	mov	r1, r3
 808338c:	f7fe bc56 	b.w	8081c3c <hal_i2c_begin>

08083390 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8083390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8083392:	2200      	movs	r2, #0
 8083394:	2314      	movs	r3, #20
 8083396:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808339a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808339e:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80833a0:	7c00      	ldrb	r0, [r0, #16]
 80833a2:	f88d 3008 	strb.w	r3, [sp, #8]
 80833a6:	684b      	ldr	r3, [r1, #4]
 80833a8:	9303      	str	r3, [sp, #12]
 80833aa:	68cb      	ldr	r3, [r1, #12]
 80833ac:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80833ae:	7a0b      	ldrb	r3, [r1, #8]
 80833b0:	a901      	add	r1, sp, #4
 80833b2:	9305      	str	r3, [sp, #20]
 80833b4:	f7fe fc92 	bl	8081cdc <hal_i2c_request_ex>
}
 80833b8:	b007      	add	sp, #28
 80833ba:	f85d fb04 	ldr.w	pc, [sp], #4

080833be <_ZN7TwoWire11requestFromEhjh>:
{
 80833be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80833c0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80833c2:	f88d 1000 	strb.w	r1, [sp]
 80833c6:	f04f 0164 	mov.w	r1, #100	; 0x64
 80833ca:	bf18      	it	ne
 80833cc:	2301      	movne	r3, #1
 80833ce:	9103      	str	r1, [sp, #12]
 80833d0:	4669      	mov	r1, sp
    size_ = size;
 80833d2:	9201      	str	r2, [sp, #4]
 80833d4:	f88d 3008 	strb.w	r3, [sp, #8]
 80833d8:	f7ff ffda 	bl	8083390 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80833dc:	b005      	add	sp, #20
 80833de:	f85d fb04 	ldr.w	pc, [sp], #4

080833e2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80833e2:	2301      	movs	r3, #1
 80833e4:	f7ff bfeb 	b.w	80833be <_ZN7TwoWire11requestFromEhjh>

080833e8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80833e8:	2200      	movs	r2, #0
 80833ea:	7c00      	ldrb	r0, [r0, #16]
 80833ec:	f7fe bc2e 	b.w	8081c4c <hal_i2c_begin_transmission>

080833f0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80833f0:	2200      	movs	r2, #0
 80833f2:	7c00      	ldrb	r0, [r0, #16]
 80833f4:	f7fe bc32 	b.w	8081c5c <hal_i2c_end_transmission>

080833f8 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80833f8:	2101      	movs	r1, #1
 80833fa:	f7ff bff9 	b.w	80833f0 <_ZN7TwoWire15endTransmissionEh>

080833fe <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80833fe:	2300      	movs	r3, #0
 8083400:	6840      	ldr	r0, [r0, #4]
 8083402:	461a      	mov	r2, r3
 8083404:	f7fe bd20 	b.w	8081e48 <network_connect>

08083408 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8083408:	2200      	movs	r2, #0
 808340a:	2102      	movs	r1, #2
 808340c:	6840      	ldr	r0, [r0, #4]
 808340e:	f7fe bd2b 	b.w	8081e68 <network_disconnect>

08083412 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8083412:	2200      	movs	r2, #0
 8083414:	6840      	ldr	r0, [r0, #4]
 8083416:	4611      	mov	r1, r2
 8083418:	f7fe bd1e 	b.w	8081e58 <network_connecting>

0808341c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808341c:	2200      	movs	r2, #0
 808341e:	6840      	ldr	r0, [r0, #4]
 8083420:	4611      	mov	r1, r2
 8083422:	f7fe bd29 	b.w	8081e78 <network_ready>

08083426 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8083426:	2300      	movs	r3, #0
 8083428:	6840      	ldr	r0, [r0, #4]
 808342a:	461a      	mov	r2, r3
 808342c:	4619      	mov	r1, r3
 808342e:	f7fe bd2b 	b.w	8081e88 <network_on>

08083432 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8083432:	2300      	movs	r3, #0
 8083434:	6840      	ldr	r0, [r0, #4]
 8083436:	461a      	mov	r2, r3
 8083438:	4619      	mov	r1, r3
 808343a:	f7fe bd2d 	b.w	8081e98 <network_off>

0808343e <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 808343e:	2100      	movs	r1, #0
 8083440:	6840      	ldr	r0, [r0, #4]
 8083442:	f7fe bd51 	b.w	8081ee8 <network_is_on>

08083446 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8083446:	2100      	movs	r1, #0
 8083448:	6840      	ldr	r0, [r0, #4]
 808344a:	f7fe bd55 	b.w	8081ef8 <network_is_off>

0808344e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808344e:	2200      	movs	r2, #0
 8083450:	6840      	ldr	r0, [r0, #4]
 8083452:	f081 0101 	eor.w	r1, r1, #1
 8083456:	f7fe bd27 	b.w	8081ea8 <network_listen>

0808345a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808345a:	2200      	movs	r2, #0
 808345c:	6840      	ldr	r0, [r0, #4]
 808345e:	f7fe bd33 	b.w	8081ec8 <network_set_listen_timeout>

08083462 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8083462:	2200      	movs	r2, #0
 8083464:	6840      	ldr	r0, [r0, #4]
 8083466:	4611      	mov	r1, r2
 8083468:	f7fe bd36 	b.w	8081ed8 <network_get_listen_timeout>

0808346c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808346c:	2200      	movs	r2, #0
 808346e:	6840      	ldr	r0, [r0, #4]
 8083470:	4611      	mov	r1, r2
 8083472:	f7fe bd21 	b.w	8081eb8 <network_listening>
	...

08083478 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8083478:	b570      	push	{r4, r5, r6, lr}
 808347a:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808347c:	2600      	movs	r6, #0
 808347e:	b086      	sub	sp, #24
 8083480:	4604      	mov	r4, r0
    IPAddress addr;
 8083482:	a804      	add	r0, sp, #16
 8083484:	f7ff fd4e 	bl	8082f24 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083488:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808348a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808348c:	f000 ff21 	bl	80842d2 <strlen>
 8083490:	4b0a      	ldr	r3, [pc, #40]	; (80834bc <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8083492:	9600      	str	r6, [sp, #0]
 8083494:	b281      	uxth	r1, r0
 8083496:	685b      	ldr	r3, [r3, #4]
 8083498:	4628      	mov	r0, r5
 808349a:	aa03      	add	r2, sp, #12
 808349c:	f7fe fc3e 	bl	8081d1c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80834a0:	b130      	cbz	r0, 80834b0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80834a2:	4631      	mov	r1, r6
 80834a4:	4620      	mov	r0, r4
 80834a6:	f7ff fd4d 	bl	8082f44 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80834aa:	4620      	mov	r0, r4
 80834ac:	b006      	add	sp, #24
 80834ae:	bd70      	pop	{r4, r5, r6, pc}
 80834b0:	4620      	mov	r0, r4
 80834b2:	a903      	add	r1, sp, #12
 80834b4:	f7ff fd3e 	bl	8082f34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80834b8:	e7f7      	b.n	80834aa <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 80834ba:	bf00      	nop
 80834bc:	2000086c 	.word	0x2000086c

080834c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80834c0:	4b02      	ldr	r3, [pc, #8]	; (80834cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80834c2:	4a03      	ldr	r2, [pc, #12]	; (80834d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80834c4:	601a      	str	r2, [r3, #0]
 80834c6:	2200      	movs	r2, #0
 80834c8:	605a      	str	r2, [r3, #4]

} // spark
 80834ca:	4770      	bx	lr
 80834cc:	200009bc 	.word	0x200009bc
 80834d0:	0808658c 	.word	0x0808658c

080834d4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80834d4:	b510      	push	{r4, lr}
 80834d6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80834d8:	6880      	ldr	r0, [r0, #8]
 80834da:	b108      	cbz	r0, 80834e0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80834dc:	f7fe fb66 	bl	8081bac <os_mutex_recursive_destroy>
 80834e0:	4620      	mov	r0, r4
 80834e2:	bd10      	pop	{r4, pc}

080834e4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80834e4:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80834e6:	b570      	push	{r4, r5, r6, lr}
 80834e8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80834ea:	d901      	bls.n	80834f0 <pinAvailable+0xc>
    return false;
 80834ec:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80834ee:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80834f0:	f1a0 030d 	sub.w	r3, r0, #13
 80834f4:	2b02      	cmp	r3, #2
 80834f6:	d90b      	bls.n	8083510 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80834f8:	2801      	cmp	r0, #1
 80834fa:	d826      	bhi.n	808354a <pinAvailable+0x66>
 80834fc:	f000 f898 	bl	8083630 <_Z19__fetch_global_Wirev>
 8083500:	2100      	movs	r1, #0
 8083502:	7c00      	ldrb	r0, [r0, #16]
 8083504:	f7fe fbda 	bl	8081cbc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8083508:	f080 0001 	eor.w	r0, r0, #1
 808350c:	b2c0      	uxtb	r0, r0
 808350e:	e7ee      	b.n	80834ee <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8083510:	4e13      	ldr	r6, [pc, #76]	; (8083560 <pinAvailable+0x7c>)
 8083512:	7831      	ldrb	r1, [r6, #0]
 8083514:	f3bf 8f5b 	dmb	ish
 8083518:	f011 0501 	ands.w	r5, r1, #1
 808351c:	d10f      	bne.n	808353e <pinAvailable+0x5a>
 808351e:	4630      	mov	r0, r6
 8083520:	f7fc fdd1 	bl	80800c6 <__cxa_guard_acquire>
 8083524:	b158      	cbz	r0, 808353e <pinAvailable+0x5a>
 8083526:	4629      	mov	r1, r5
 8083528:	480e      	ldr	r0, [pc, #56]	; (8083564 <pinAvailable+0x80>)
 808352a:	f7fe fd85 	bl	8082038 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808352e:	4630      	mov	r0, r6
 8083530:	f7fc fdce 	bl	80800d0 <__cxa_guard_release>
 8083534:	4a0c      	ldr	r2, [pc, #48]	; (8083568 <pinAvailable+0x84>)
 8083536:	490d      	ldr	r1, [pc, #52]	; (808356c <pinAvailable+0x88>)
 8083538:	480a      	ldr	r0, [pc, #40]	; (8083564 <pinAvailable+0x80>)
 808353a:	f000 f8a1 	bl	8083680 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808353e:	4b09      	ldr	r3, [pc, #36]	; (8083564 <pinAvailable+0x80>)
 8083540:	7818      	ldrb	r0, [r3, #0]
 8083542:	f7fe fbdb 	bl	8081cfc <hal_spi_is_enabled>
 8083546:	2800      	cmp	r0, #0
 8083548:	d1d0      	bne.n	80834ec <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808354a:	3c12      	subs	r4, #18
 808354c:	2c01      	cmp	r4, #1
 808354e:	d805      	bhi.n	808355c <pinAvailable+0x78>
 8083550:	f7ff fe9e 	bl	8083290 <_Z22__fetch_global_Serial1v>
 8083554:	7c00      	ldrb	r0, [r0, #16]
 8083556:	f7fe fb61 	bl	8081c1c <hal_usart_is_enabled>
 808355a:	e7d5      	b.n	8083508 <pinAvailable+0x24>
  return true; // 'pin' is available
 808355c:	2001      	movs	r0, #1
 808355e:	e7c6      	b.n	80834ee <pinAvailable+0xa>
 8083560:	200009c4 	.word	0x200009c4
 8083564:	200009c8 	.word	0x200009c8
 8083568:	200001e8 	.word	0x200001e8
 808356c:	080834d5 	.word	0x080834d5

08083570 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083570:	282e      	cmp	r0, #46	; 0x2e
{
 8083572:	b538      	push	{r3, r4, r5, lr}
 8083574:	4604      	mov	r4, r0
 8083576:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083578:	d80a      	bhi.n	8083590 <pinMode+0x20>
 808357a:	29ff      	cmp	r1, #255	; 0xff
 808357c:	d008      	beq.n	8083590 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808357e:	f7ff ffb1 	bl	80834e4 <pinAvailable>
 8083582:	b128      	cbz	r0, 8083590 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8083584:	4629      	mov	r1, r5
 8083586:	4620      	mov	r0, r4
}
 8083588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 808358c:	f7fe bace 	b.w	8081b2c <HAL_Pin_Mode>
}
 8083590:	bd38      	pop	{r3, r4, r5, pc}

08083592 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083592:	b538      	push	{r3, r4, r5, lr}
 8083594:	4604      	mov	r4, r0
 8083596:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083598:	f7fe fad0 	bl	8081b3c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808359c:	28ff      	cmp	r0, #255	; 0xff
 808359e:	d010      	beq.n	80835c2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80835a0:	2806      	cmp	r0, #6
 80835a2:	d804      	bhi.n	80835ae <digitalWrite+0x1c>
 80835a4:	234d      	movs	r3, #77	; 0x4d
 80835a6:	fa23 f000 	lsr.w	r0, r3, r0
 80835aa:	07c3      	lsls	r3, r0, #31
 80835ac:	d409      	bmi.n	80835c2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80835ae:	4620      	mov	r0, r4
 80835b0:	f7ff ff98 	bl	80834e4 <pinAvailable>
 80835b4:	b128      	cbz	r0, 80835c2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80835b6:	4629      	mov	r1, r5
 80835b8:	4620      	mov	r0, r4
}
 80835ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80835be:	f7fe bac5 	b.w	8081b4c <HAL_GPIO_Write>
}
 80835c2:	bd38      	pop	{r3, r4, r5, pc}

080835c4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80835c4:	2300      	movs	r3, #0
 80835c6:	b513      	push	{r0, r1, r4, lr}
 80835c8:	4c07      	ldr	r4, [pc, #28]	; (80835e8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80835ca:	461a      	mov	r2, r3
 80835cc:	4619      	mov	r1, r3
 80835ce:	4620      	mov	r0, r4
 80835d0:	9300      	str	r3, [sp, #0]
 80835d2:	f7ff fcc9 	bl	8082f68 <_ZN9IPAddressC1Ehhhh>
 80835d6:	4620      	mov	r0, r4
 80835d8:	4a04      	ldr	r2, [pc, #16]	; (80835ec <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80835da:	4905      	ldr	r1, [pc, #20]	; (80835f0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80835dc:	b002      	add	sp, #8
 80835de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80835e2:	f000 b84d 	b.w	8083680 <__aeabi_atexit>
 80835e6:	bf00      	nop
 80835e8:	200009d8 	.word	0x200009d8
 80835ec:	200001e8 	.word	0x200001e8
 80835f0:	08082ee1 	.word	0x08082ee1

080835f4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80835f4:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 80835f6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80835f8:	2520      	movs	r5, #32
 80835fa:	8043      	strh	r3, [r0, #2]
 80835fc:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80835fe:	4e08      	ldr	r6, [pc, #32]	; (8083620 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8083600:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8083602:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083604:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8083606:	6085      	str	r5, [r0, #8]
 8083608:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808360a:	4628      	mov	r0, r5
 808360c:	f000 f83f 	bl	808368e <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083610:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083612:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083614:	4628      	mov	r0, r5
 8083616:	f000 f83a 	bl	808368e <_ZnajRKSt9nothrow_t>
	};
 808361a:	60e0      	str	r0, [r4, #12]

	return config;
}
 808361c:	4620      	mov	r0, r4
 808361e:	bd70      	pop	{r4, r5, r6, pc}
 8083620:	080865c0 	.word	0x080865c0

08083624 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 8083624:	b510      	push	{r4, lr}
 8083626:	4604      	mov	r4, r0
	return defaultWireConfig();
 8083628:	f7ff ffe4 	bl	80835f4 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808362c:	4620      	mov	r0, r4
 808362e:	bd10      	pop	{r4, pc}

08083630 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8083630:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083632:	4d0f      	ldr	r5, [pc, #60]	; (8083670 <_Z19__fetch_global_Wirev+0x40>)
{
 8083634:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083636:	7829      	ldrb	r1, [r5, #0]
 8083638:	f3bf 8f5b 	dmb	ish
 808363c:	f011 0401 	ands.w	r4, r1, #1
 8083640:	d113      	bne.n	808366a <_Z19__fetch_global_Wirev+0x3a>
 8083642:	4628      	mov	r0, r5
 8083644:	f7fc fd3f 	bl	80800c6 <__cxa_guard_acquire>
 8083648:	b178      	cbz	r0, 808366a <_Z19__fetch_global_Wirev+0x3a>
 808364a:	a801      	add	r0, sp, #4
 808364c:	f7ff ffea 	bl	8083624 <_Z17acquireWireBufferv>
 8083650:	4621      	mov	r1, r4
 8083652:	aa01      	add	r2, sp, #4
 8083654:	4807      	ldr	r0, [pc, #28]	; (8083674 <_Z19__fetch_global_Wirev+0x44>)
 8083656:	f7ff fe83 	bl	8083360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808365a:	4628      	mov	r0, r5
 808365c:	f7fc fd38 	bl	80800d0 <__cxa_guard_release>
 8083660:	4a05      	ldr	r2, [pc, #20]	; (8083678 <_Z19__fetch_global_Wirev+0x48>)
 8083662:	4906      	ldr	r1, [pc, #24]	; (808367c <_Z19__fetch_global_Wirev+0x4c>)
 8083664:	4803      	ldr	r0, [pc, #12]	; (8083674 <_Z19__fetch_global_Wirev+0x44>)
 8083666:	f000 f80b 	bl	8083680 <__aeabi_atexit>
	return wire;
}
 808366a:	4802      	ldr	r0, [pc, #8]	; (8083674 <_Z19__fetch_global_Wirev+0x44>)
 808366c:	b007      	add	sp, #28
 808366e:	bd30      	pop	{r4, r5, pc}
 8083670:	200009e0 	.word	0x200009e0
 8083674:	200009e4 	.word	0x200009e4
 8083678:	200001e8 	.word	0x200001e8
 808367c:	08083309 	.word	0x08083309

08083680 <__aeabi_atexit>:
 8083680:	460b      	mov	r3, r1
 8083682:	4601      	mov	r1, r0
 8083684:	4618      	mov	r0, r3
 8083686:	f000 bda1 	b.w	80841cc <__cxa_atexit>

0808368a <_ZdlPvj>:
 808368a:	f7fc bd1a 	b.w	80800c2 <_ZdlPv>

0808368e <_ZnajRKSt9nothrow_t>:
 808368e:	f7fc bd16 	b.w	80800be <_Znaj>

08083692 <_ZSt25__throw_bad_function_callv>:
 8083692:	b508      	push	{r3, lr}
 8083694:	f7fe fcb8 	bl	8082008 <abort>

08083698 <__aeabi_drsub>:
 8083698:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808369c:	e002      	b.n	80836a4 <__adddf3>
 808369e:	bf00      	nop

080836a0 <__aeabi_dsub>:
 80836a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080836a4 <__adddf3>:
 80836a4:	b530      	push	{r4, r5, lr}
 80836a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80836aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80836ae:	ea94 0f05 	teq	r4, r5
 80836b2:	bf08      	it	eq
 80836b4:	ea90 0f02 	teqeq	r0, r2
 80836b8:	bf1f      	itttt	ne
 80836ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80836be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80836c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80836c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80836ca:	f000 80e2 	beq.w	8083892 <__adddf3+0x1ee>
 80836ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80836d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80836d6:	bfb8      	it	lt
 80836d8:	426d      	neglt	r5, r5
 80836da:	dd0c      	ble.n	80836f6 <__adddf3+0x52>
 80836dc:	442c      	add	r4, r5
 80836de:	ea80 0202 	eor.w	r2, r0, r2
 80836e2:	ea81 0303 	eor.w	r3, r1, r3
 80836e6:	ea82 0000 	eor.w	r0, r2, r0
 80836ea:	ea83 0101 	eor.w	r1, r3, r1
 80836ee:	ea80 0202 	eor.w	r2, r0, r2
 80836f2:	ea81 0303 	eor.w	r3, r1, r3
 80836f6:	2d36      	cmp	r5, #54	; 0x36
 80836f8:	bf88      	it	hi
 80836fa:	bd30      	pophi	{r4, r5, pc}
 80836fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083700:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083704:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083708:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808370c:	d002      	beq.n	8083714 <__adddf3+0x70>
 808370e:	4240      	negs	r0, r0
 8083710:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083714:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083718:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808371c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083720:	d002      	beq.n	8083728 <__adddf3+0x84>
 8083722:	4252      	negs	r2, r2
 8083724:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083728:	ea94 0f05 	teq	r4, r5
 808372c:	f000 80a7 	beq.w	808387e <__adddf3+0x1da>
 8083730:	f1a4 0401 	sub.w	r4, r4, #1
 8083734:	f1d5 0e20 	rsbs	lr, r5, #32
 8083738:	db0d      	blt.n	8083756 <__adddf3+0xb2>
 808373a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808373e:	fa22 f205 	lsr.w	r2, r2, r5
 8083742:	1880      	adds	r0, r0, r2
 8083744:	f141 0100 	adc.w	r1, r1, #0
 8083748:	fa03 f20e 	lsl.w	r2, r3, lr
 808374c:	1880      	adds	r0, r0, r2
 808374e:	fa43 f305 	asr.w	r3, r3, r5
 8083752:	4159      	adcs	r1, r3
 8083754:	e00e      	b.n	8083774 <__adddf3+0xd0>
 8083756:	f1a5 0520 	sub.w	r5, r5, #32
 808375a:	f10e 0e20 	add.w	lr, lr, #32
 808375e:	2a01      	cmp	r2, #1
 8083760:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083764:	bf28      	it	cs
 8083766:	f04c 0c02 	orrcs.w	ip, ip, #2
 808376a:	fa43 f305 	asr.w	r3, r3, r5
 808376e:	18c0      	adds	r0, r0, r3
 8083770:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083778:	d507      	bpl.n	808378a <__adddf3+0xe6>
 808377a:	f04f 0e00 	mov.w	lr, #0
 808377e:	f1dc 0c00 	rsbs	ip, ip, #0
 8083782:	eb7e 0000 	sbcs.w	r0, lr, r0
 8083786:	eb6e 0101 	sbc.w	r1, lr, r1
 808378a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808378e:	d31b      	bcc.n	80837c8 <__adddf3+0x124>
 8083790:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083794:	d30c      	bcc.n	80837b0 <__adddf3+0x10c>
 8083796:	0849      	lsrs	r1, r1, #1
 8083798:	ea5f 0030 	movs.w	r0, r0, rrx
 808379c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80837a0:	f104 0401 	add.w	r4, r4, #1
 80837a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80837a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80837ac:	f080 809a 	bcs.w	80838e4 <__adddf3+0x240>
 80837b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80837b4:	bf08      	it	eq
 80837b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80837ba:	f150 0000 	adcs.w	r0, r0, #0
 80837be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80837c2:	ea41 0105 	orr.w	r1, r1, r5
 80837c6:	bd30      	pop	{r4, r5, pc}
 80837c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80837cc:	4140      	adcs	r0, r0
 80837ce:	eb41 0101 	adc.w	r1, r1, r1
 80837d2:	3c01      	subs	r4, #1
 80837d4:	bf28      	it	cs
 80837d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80837da:	d2e9      	bcs.n	80837b0 <__adddf3+0x10c>
 80837dc:	f091 0f00 	teq	r1, #0
 80837e0:	bf04      	itt	eq
 80837e2:	4601      	moveq	r1, r0
 80837e4:	2000      	moveq	r0, #0
 80837e6:	fab1 f381 	clz	r3, r1
 80837ea:	bf08      	it	eq
 80837ec:	3320      	addeq	r3, #32
 80837ee:	f1a3 030b 	sub.w	r3, r3, #11
 80837f2:	f1b3 0220 	subs.w	r2, r3, #32
 80837f6:	da0c      	bge.n	8083812 <__adddf3+0x16e>
 80837f8:	320c      	adds	r2, #12
 80837fa:	dd08      	ble.n	808380e <__adddf3+0x16a>
 80837fc:	f102 0c14 	add.w	ip, r2, #20
 8083800:	f1c2 020c 	rsb	r2, r2, #12
 8083804:	fa01 f00c 	lsl.w	r0, r1, ip
 8083808:	fa21 f102 	lsr.w	r1, r1, r2
 808380c:	e00c      	b.n	8083828 <__adddf3+0x184>
 808380e:	f102 0214 	add.w	r2, r2, #20
 8083812:	bfd8      	it	le
 8083814:	f1c2 0c20 	rsble	ip, r2, #32
 8083818:	fa01 f102 	lsl.w	r1, r1, r2
 808381c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083820:	bfdc      	itt	le
 8083822:	ea41 010c 	orrle.w	r1, r1, ip
 8083826:	4090      	lslle	r0, r2
 8083828:	1ae4      	subs	r4, r4, r3
 808382a:	bfa2      	ittt	ge
 808382c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083830:	4329      	orrge	r1, r5
 8083832:	bd30      	popge	{r4, r5, pc}
 8083834:	ea6f 0404 	mvn.w	r4, r4
 8083838:	3c1f      	subs	r4, #31
 808383a:	da1c      	bge.n	8083876 <__adddf3+0x1d2>
 808383c:	340c      	adds	r4, #12
 808383e:	dc0e      	bgt.n	808385e <__adddf3+0x1ba>
 8083840:	f104 0414 	add.w	r4, r4, #20
 8083844:	f1c4 0220 	rsb	r2, r4, #32
 8083848:	fa20 f004 	lsr.w	r0, r0, r4
 808384c:	fa01 f302 	lsl.w	r3, r1, r2
 8083850:	ea40 0003 	orr.w	r0, r0, r3
 8083854:	fa21 f304 	lsr.w	r3, r1, r4
 8083858:	ea45 0103 	orr.w	r1, r5, r3
 808385c:	bd30      	pop	{r4, r5, pc}
 808385e:	f1c4 040c 	rsb	r4, r4, #12
 8083862:	f1c4 0220 	rsb	r2, r4, #32
 8083866:	fa20 f002 	lsr.w	r0, r0, r2
 808386a:	fa01 f304 	lsl.w	r3, r1, r4
 808386e:	ea40 0003 	orr.w	r0, r0, r3
 8083872:	4629      	mov	r1, r5
 8083874:	bd30      	pop	{r4, r5, pc}
 8083876:	fa21 f004 	lsr.w	r0, r1, r4
 808387a:	4629      	mov	r1, r5
 808387c:	bd30      	pop	{r4, r5, pc}
 808387e:	f094 0f00 	teq	r4, #0
 8083882:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083886:	bf06      	itte	eq
 8083888:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808388c:	3401      	addeq	r4, #1
 808388e:	3d01      	subne	r5, #1
 8083890:	e74e      	b.n	8083730 <__adddf3+0x8c>
 8083892:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083896:	bf18      	it	ne
 8083898:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808389c:	d029      	beq.n	80838f2 <__adddf3+0x24e>
 808389e:	ea94 0f05 	teq	r4, r5
 80838a2:	bf08      	it	eq
 80838a4:	ea90 0f02 	teqeq	r0, r2
 80838a8:	d005      	beq.n	80838b6 <__adddf3+0x212>
 80838aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80838ae:	bf04      	itt	eq
 80838b0:	4619      	moveq	r1, r3
 80838b2:	4610      	moveq	r0, r2
 80838b4:	bd30      	pop	{r4, r5, pc}
 80838b6:	ea91 0f03 	teq	r1, r3
 80838ba:	bf1e      	ittt	ne
 80838bc:	2100      	movne	r1, #0
 80838be:	2000      	movne	r0, #0
 80838c0:	bd30      	popne	{r4, r5, pc}
 80838c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80838c6:	d105      	bne.n	80838d4 <__adddf3+0x230>
 80838c8:	0040      	lsls	r0, r0, #1
 80838ca:	4149      	adcs	r1, r1
 80838cc:	bf28      	it	cs
 80838ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80838d2:	bd30      	pop	{r4, r5, pc}
 80838d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80838d8:	bf3c      	itt	cc
 80838da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80838de:	bd30      	popcc	{r4, r5, pc}
 80838e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80838e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80838e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80838ec:	f04f 0000 	mov.w	r0, #0
 80838f0:	bd30      	pop	{r4, r5, pc}
 80838f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80838f6:	bf1a      	itte	ne
 80838f8:	4619      	movne	r1, r3
 80838fa:	4610      	movne	r0, r2
 80838fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083900:	bf1c      	itt	ne
 8083902:	460b      	movne	r3, r1
 8083904:	4602      	movne	r2, r0
 8083906:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808390a:	bf06      	itte	eq
 808390c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083910:	ea91 0f03 	teqeq	r1, r3
 8083914:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083918:	bd30      	pop	{r4, r5, pc}
 808391a:	bf00      	nop

0808391c <__aeabi_ui2d>:
 808391c:	f090 0f00 	teq	r0, #0
 8083920:	bf04      	itt	eq
 8083922:	2100      	moveq	r1, #0
 8083924:	4770      	bxeq	lr
 8083926:	b530      	push	{r4, r5, lr}
 8083928:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808392c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083930:	f04f 0500 	mov.w	r5, #0
 8083934:	f04f 0100 	mov.w	r1, #0
 8083938:	e750      	b.n	80837dc <__adddf3+0x138>
 808393a:	bf00      	nop

0808393c <__aeabi_i2d>:
 808393c:	f090 0f00 	teq	r0, #0
 8083940:	bf04      	itt	eq
 8083942:	2100      	moveq	r1, #0
 8083944:	4770      	bxeq	lr
 8083946:	b530      	push	{r4, r5, lr}
 8083948:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808394c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083950:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083954:	bf48      	it	mi
 8083956:	4240      	negmi	r0, r0
 8083958:	f04f 0100 	mov.w	r1, #0
 808395c:	e73e      	b.n	80837dc <__adddf3+0x138>
 808395e:	bf00      	nop

08083960 <__aeabi_f2d>:
 8083960:	0042      	lsls	r2, r0, #1
 8083962:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083966:	ea4f 0131 	mov.w	r1, r1, rrx
 808396a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808396e:	bf1f      	itttt	ne
 8083970:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083974:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083978:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808397c:	4770      	bxne	lr
 808397e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8083982:	bf08      	it	eq
 8083984:	4770      	bxeq	lr
 8083986:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808398a:	bf04      	itt	eq
 808398c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8083990:	4770      	bxeq	lr
 8083992:	b530      	push	{r4, r5, lr}
 8083994:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808399c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80839a0:	e71c      	b.n	80837dc <__adddf3+0x138>
 80839a2:	bf00      	nop

080839a4 <__aeabi_ul2d>:
 80839a4:	ea50 0201 	orrs.w	r2, r0, r1
 80839a8:	bf08      	it	eq
 80839aa:	4770      	bxeq	lr
 80839ac:	b530      	push	{r4, r5, lr}
 80839ae:	f04f 0500 	mov.w	r5, #0
 80839b2:	e00a      	b.n	80839ca <__aeabi_l2d+0x16>

080839b4 <__aeabi_l2d>:
 80839b4:	ea50 0201 	orrs.w	r2, r0, r1
 80839b8:	bf08      	it	eq
 80839ba:	4770      	bxeq	lr
 80839bc:	b530      	push	{r4, r5, lr}
 80839be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80839c2:	d502      	bpl.n	80839ca <__aeabi_l2d+0x16>
 80839c4:	4240      	negs	r0, r0
 80839c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80839ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80839ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80839d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80839d6:	f43f aed8 	beq.w	808378a <__adddf3+0xe6>
 80839da:	f04f 0203 	mov.w	r2, #3
 80839de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80839e2:	bf18      	it	ne
 80839e4:	3203      	addne	r2, #3
 80839e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80839ea:	bf18      	it	ne
 80839ec:	3203      	addne	r2, #3
 80839ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80839f2:	f1c2 0320 	rsb	r3, r2, #32
 80839f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80839fa:	fa20 f002 	lsr.w	r0, r0, r2
 80839fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8083a02:	ea40 000e 	orr.w	r0, r0, lr
 8083a06:	fa21 f102 	lsr.w	r1, r1, r2
 8083a0a:	4414      	add	r4, r2
 8083a0c:	e6bd      	b.n	808378a <__adddf3+0xe6>
 8083a0e:	bf00      	nop

08083a10 <__aeabi_dmul>:
 8083a10:	b570      	push	{r4, r5, r6, lr}
 8083a12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083a16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083a1e:	bf1d      	ittte	ne
 8083a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083a24:	ea94 0f0c 	teqne	r4, ip
 8083a28:	ea95 0f0c 	teqne	r5, ip
 8083a2c:	f000 f8de 	bleq	8083bec <__aeabi_dmul+0x1dc>
 8083a30:	442c      	add	r4, r5
 8083a32:	ea81 0603 	eor.w	r6, r1, r3
 8083a36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083a3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083a3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083a42:	bf18      	it	ne
 8083a44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083a50:	d038      	beq.n	8083ac4 <__aeabi_dmul+0xb4>
 8083a52:	fba0 ce02 	umull	ip, lr, r0, r2
 8083a56:	f04f 0500 	mov.w	r5, #0
 8083a5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083a5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083a62:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083a66:	f04f 0600 	mov.w	r6, #0
 8083a6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083a6e:	f09c 0f00 	teq	ip, #0
 8083a72:	bf18      	it	ne
 8083a74:	f04e 0e01 	orrne.w	lr, lr, #1
 8083a78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083a7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083a80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083a84:	d204      	bcs.n	8083a90 <__aeabi_dmul+0x80>
 8083a86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083a8a:	416d      	adcs	r5, r5
 8083a8c:	eb46 0606 	adc.w	r6, r6, r6
 8083a90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083a94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083a98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083a9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083aa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083aa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083aa8:	bf88      	it	hi
 8083aaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083aae:	d81e      	bhi.n	8083aee <__aeabi_dmul+0xde>
 8083ab0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083ab4:	bf08      	it	eq
 8083ab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083aba:	f150 0000 	adcs.w	r0, r0, #0
 8083abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083ac2:	bd70      	pop	{r4, r5, r6, pc}
 8083ac4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083ac8:	ea46 0101 	orr.w	r1, r6, r1
 8083acc:	ea40 0002 	orr.w	r0, r0, r2
 8083ad0:	ea81 0103 	eor.w	r1, r1, r3
 8083ad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083ad8:	bfc2      	ittt	gt
 8083ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083ae2:	bd70      	popgt	{r4, r5, r6, pc}
 8083ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083ae8:	f04f 0e00 	mov.w	lr, #0
 8083aec:	3c01      	subs	r4, #1
 8083aee:	f300 80ab 	bgt.w	8083c48 <__aeabi_dmul+0x238>
 8083af2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083af6:	bfde      	ittt	le
 8083af8:	2000      	movle	r0, #0
 8083afa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083afe:	bd70      	pople	{r4, r5, r6, pc}
 8083b00:	f1c4 0400 	rsb	r4, r4, #0
 8083b04:	3c20      	subs	r4, #32
 8083b06:	da35      	bge.n	8083b74 <__aeabi_dmul+0x164>
 8083b08:	340c      	adds	r4, #12
 8083b0a:	dc1b      	bgt.n	8083b44 <__aeabi_dmul+0x134>
 8083b0c:	f104 0414 	add.w	r4, r4, #20
 8083b10:	f1c4 0520 	rsb	r5, r4, #32
 8083b14:	fa00 f305 	lsl.w	r3, r0, r5
 8083b18:	fa20 f004 	lsr.w	r0, r0, r4
 8083b1c:	fa01 f205 	lsl.w	r2, r1, r5
 8083b20:	ea40 0002 	orr.w	r0, r0, r2
 8083b24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083b30:	fa21 f604 	lsr.w	r6, r1, r4
 8083b34:	eb42 0106 	adc.w	r1, r2, r6
 8083b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083b3c:	bf08      	it	eq
 8083b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083b42:	bd70      	pop	{r4, r5, r6, pc}
 8083b44:	f1c4 040c 	rsb	r4, r4, #12
 8083b48:	f1c4 0520 	rsb	r5, r4, #32
 8083b4c:	fa00 f304 	lsl.w	r3, r0, r4
 8083b50:	fa20 f005 	lsr.w	r0, r0, r5
 8083b54:	fa01 f204 	lsl.w	r2, r1, r4
 8083b58:	ea40 0002 	orr.w	r0, r0, r2
 8083b5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083b64:	f141 0100 	adc.w	r1, r1, #0
 8083b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083b6c:	bf08      	it	eq
 8083b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083b72:	bd70      	pop	{r4, r5, r6, pc}
 8083b74:	f1c4 0520 	rsb	r5, r4, #32
 8083b78:	fa00 f205 	lsl.w	r2, r0, r5
 8083b7c:	ea4e 0e02 	orr.w	lr, lr, r2
 8083b80:	fa20 f304 	lsr.w	r3, r0, r4
 8083b84:	fa01 f205 	lsl.w	r2, r1, r5
 8083b88:	ea43 0302 	orr.w	r3, r3, r2
 8083b8c:	fa21 f004 	lsr.w	r0, r1, r4
 8083b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b94:	fa21 f204 	lsr.w	r2, r1, r4
 8083b98:	ea20 0002 	bic.w	r0, r0, r2
 8083b9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083ba4:	bf08      	it	eq
 8083ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083baa:	bd70      	pop	{r4, r5, r6, pc}
 8083bac:	f094 0f00 	teq	r4, #0
 8083bb0:	d10f      	bne.n	8083bd2 <__aeabi_dmul+0x1c2>
 8083bb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083bb6:	0040      	lsls	r0, r0, #1
 8083bb8:	eb41 0101 	adc.w	r1, r1, r1
 8083bbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083bc0:	bf08      	it	eq
 8083bc2:	3c01      	subeq	r4, #1
 8083bc4:	d0f7      	beq.n	8083bb6 <__aeabi_dmul+0x1a6>
 8083bc6:	ea41 0106 	orr.w	r1, r1, r6
 8083bca:	f095 0f00 	teq	r5, #0
 8083bce:	bf18      	it	ne
 8083bd0:	4770      	bxne	lr
 8083bd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083bd6:	0052      	lsls	r2, r2, #1
 8083bd8:	eb43 0303 	adc.w	r3, r3, r3
 8083bdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083be0:	bf08      	it	eq
 8083be2:	3d01      	subeq	r5, #1
 8083be4:	d0f7      	beq.n	8083bd6 <__aeabi_dmul+0x1c6>
 8083be6:	ea43 0306 	orr.w	r3, r3, r6
 8083bea:	4770      	bx	lr
 8083bec:	ea94 0f0c 	teq	r4, ip
 8083bf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083bf4:	bf18      	it	ne
 8083bf6:	ea95 0f0c 	teqne	r5, ip
 8083bfa:	d00c      	beq.n	8083c16 <__aeabi_dmul+0x206>
 8083bfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083c00:	bf18      	it	ne
 8083c02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083c06:	d1d1      	bne.n	8083bac <__aeabi_dmul+0x19c>
 8083c08:	ea81 0103 	eor.w	r1, r1, r3
 8083c0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c10:	f04f 0000 	mov.w	r0, #0
 8083c14:	bd70      	pop	{r4, r5, r6, pc}
 8083c16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083c1a:	bf06      	itte	eq
 8083c1c:	4610      	moveq	r0, r2
 8083c1e:	4619      	moveq	r1, r3
 8083c20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083c24:	d019      	beq.n	8083c5a <__aeabi_dmul+0x24a>
 8083c26:	ea94 0f0c 	teq	r4, ip
 8083c2a:	d102      	bne.n	8083c32 <__aeabi_dmul+0x222>
 8083c2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083c30:	d113      	bne.n	8083c5a <__aeabi_dmul+0x24a>
 8083c32:	ea95 0f0c 	teq	r5, ip
 8083c36:	d105      	bne.n	8083c44 <__aeabi_dmul+0x234>
 8083c38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083c3c:	bf1c      	itt	ne
 8083c3e:	4610      	movne	r0, r2
 8083c40:	4619      	movne	r1, r3
 8083c42:	d10a      	bne.n	8083c5a <__aeabi_dmul+0x24a>
 8083c44:	ea81 0103 	eor.w	r1, r1, r3
 8083c48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083c50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083c54:	f04f 0000 	mov.w	r0, #0
 8083c58:	bd70      	pop	{r4, r5, r6, pc}
 8083c5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083c5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083c62:	bd70      	pop	{r4, r5, r6, pc}

08083c64 <__aeabi_ddiv>:
 8083c64:	b570      	push	{r4, r5, r6, lr}
 8083c66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083c72:	bf1d      	ittte	ne
 8083c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083c78:	ea94 0f0c 	teqne	r4, ip
 8083c7c:	ea95 0f0c 	teqne	r5, ip
 8083c80:	f000 f8a7 	bleq	8083dd2 <__aeabi_ddiv+0x16e>
 8083c84:	eba4 0405 	sub.w	r4, r4, r5
 8083c88:	ea81 0e03 	eor.w	lr, r1, r3
 8083c8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083c94:	f000 8088 	beq.w	8083da8 <__aeabi_ddiv+0x144>
 8083c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083c9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083ca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083ca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083ca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083cac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083cb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083cb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083cb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083cbc:	429d      	cmp	r5, r3
 8083cbe:	bf08      	it	eq
 8083cc0:	4296      	cmpeq	r6, r2
 8083cc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083cc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083cca:	d202      	bcs.n	8083cd2 <__aeabi_ddiv+0x6e>
 8083ccc:	085b      	lsrs	r3, r3, #1
 8083cce:	ea4f 0232 	mov.w	r2, r2, rrx
 8083cd2:	1ab6      	subs	r6, r6, r2
 8083cd4:	eb65 0503 	sbc.w	r5, r5, r3
 8083cd8:	085b      	lsrs	r3, r3, #1
 8083cda:	ea4f 0232 	mov.w	r2, r2, rrx
 8083cde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083ce2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 8083cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083cee:	bf22      	ittt	cs
 8083cf0:	1ab6      	subcs	r6, r6, r2
 8083cf2:	4675      	movcs	r5, lr
 8083cf4:	ea40 000c 	orrcs.w	r0, r0, ip
 8083cf8:	085b      	lsrs	r3, r3, #1
 8083cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8083cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d06:	bf22      	ittt	cs
 8083d08:	1ab6      	subcs	r6, r6, r2
 8083d0a:	4675      	movcs	r5, lr
 8083d0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083d10:	085b      	lsrs	r3, r3, #1
 8083d12:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d16:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d1e:	bf22      	ittt	cs
 8083d20:	1ab6      	subcs	r6, r6, r2
 8083d22:	4675      	movcs	r5, lr
 8083d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083d28:	085b      	lsrs	r3, r3, #1
 8083d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d36:	bf22      	ittt	cs
 8083d38:	1ab6      	subcs	r6, r6, r2
 8083d3a:	4675      	movcs	r5, lr
 8083d3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083d40:	ea55 0e06 	orrs.w	lr, r5, r6
 8083d44:	d018      	beq.n	8083d78 <__aeabi_ddiv+0x114>
 8083d46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083d4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083d4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083d52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083d56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083d5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083d5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083d62:	d1c0      	bne.n	8083ce6 <__aeabi_ddiv+0x82>
 8083d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083d68:	d10b      	bne.n	8083d82 <__aeabi_ddiv+0x11e>
 8083d6a:	ea41 0100 	orr.w	r1, r1, r0
 8083d6e:	f04f 0000 	mov.w	r0, #0
 8083d72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083d76:	e7b6      	b.n	8083ce6 <__aeabi_ddiv+0x82>
 8083d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083d7c:	bf04      	itt	eq
 8083d7e:	4301      	orreq	r1, r0
 8083d80:	2000      	moveq	r0, #0
 8083d82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083d86:	bf88      	it	hi
 8083d88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083d8c:	f63f aeaf 	bhi.w	8083aee <__aeabi_dmul+0xde>
 8083d90:	ebb5 0c03 	subs.w	ip, r5, r3
 8083d94:	bf04      	itt	eq
 8083d96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083d9e:	f150 0000 	adcs.w	r0, r0, #0
 8083da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083da6:	bd70      	pop	{r4, r5, r6, pc}
 8083da8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083dac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083db0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083db4:	bfc2      	ittt	gt
 8083db6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083dbe:	bd70      	popgt	{r4, r5, r6, pc}
 8083dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083dc4:	f04f 0e00 	mov.w	lr, #0
 8083dc8:	3c01      	subs	r4, #1
 8083dca:	e690      	b.n	8083aee <__aeabi_dmul+0xde>
 8083dcc:	ea45 0e06 	orr.w	lr, r5, r6
 8083dd0:	e68d      	b.n	8083aee <__aeabi_dmul+0xde>
 8083dd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083dd6:	ea94 0f0c 	teq	r4, ip
 8083dda:	bf08      	it	eq
 8083ddc:	ea95 0f0c 	teqeq	r5, ip
 8083de0:	f43f af3b 	beq.w	8083c5a <__aeabi_dmul+0x24a>
 8083de4:	ea94 0f0c 	teq	r4, ip
 8083de8:	d10a      	bne.n	8083e00 <__aeabi_ddiv+0x19c>
 8083dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083dee:	f47f af34 	bne.w	8083c5a <__aeabi_dmul+0x24a>
 8083df2:	ea95 0f0c 	teq	r5, ip
 8083df6:	f47f af25 	bne.w	8083c44 <__aeabi_dmul+0x234>
 8083dfa:	4610      	mov	r0, r2
 8083dfc:	4619      	mov	r1, r3
 8083dfe:	e72c      	b.n	8083c5a <__aeabi_dmul+0x24a>
 8083e00:	ea95 0f0c 	teq	r5, ip
 8083e04:	d106      	bne.n	8083e14 <__aeabi_ddiv+0x1b0>
 8083e06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083e0a:	f43f aefd 	beq.w	8083c08 <__aeabi_dmul+0x1f8>
 8083e0e:	4610      	mov	r0, r2
 8083e10:	4619      	mov	r1, r3
 8083e12:	e722      	b.n	8083c5a <__aeabi_dmul+0x24a>
 8083e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083e18:	bf18      	it	ne
 8083e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083e1e:	f47f aec5 	bne.w	8083bac <__aeabi_dmul+0x19c>
 8083e22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083e26:	f47f af0d 	bne.w	8083c44 <__aeabi_dmul+0x234>
 8083e2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083e2e:	f47f aeeb 	bne.w	8083c08 <__aeabi_dmul+0x1f8>
 8083e32:	e712      	b.n	8083c5a <__aeabi_dmul+0x24a>

08083e34 <__gedf2>:
 8083e34:	f04f 3cff 	mov.w	ip, #4294967295
 8083e38:	e006      	b.n	8083e48 <__cmpdf2+0x4>
 8083e3a:	bf00      	nop

08083e3c <__ledf2>:
 8083e3c:	f04f 0c01 	mov.w	ip, #1
 8083e40:	e002      	b.n	8083e48 <__cmpdf2+0x4>
 8083e42:	bf00      	nop

08083e44 <__cmpdf2>:
 8083e44:	f04f 0c01 	mov.w	ip, #1
 8083e48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083e54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083e58:	bf18      	it	ne
 8083e5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8083e5e:	d01b      	beq.n	8083e98 <__cmpdf2+0x54>
 8083e60:	b001      	add	sp, #4
 8083e62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8083e66:	bf0c      	ite	eq
 8083e68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8083e6c:	ea91 0f03 	teqne	r1, r3
 8083e70:	bf02      	ittt	eq
 8083e72:	ea90 0f02 	teqeq	r0, r2
 8083e76:	2000      	moveq	r0, #0
 8083e78:	4770      	bxeq	lr
 8083e7a:	f110 0f00 	cmn.w	r0, #0
 8083e7e:	ea91 0f03 	teq	r1, r3
 8083e82:	bf58      	it	pl
 8083e84:	4299      	cmppl	r1, r3
 8083e86:	bf08      	it	eq
 8083e88:	4290      	cmpeq	r0, r2
 8083e8a:	bf2c      	ite	cs
 8083e8c:	17d8      	asrcs	r0, r3, #31
 8083e8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8083e92:	f040 0001 	orr.w	r0, r0, #1
 8083e96:	4770      	bx	lr
 8083e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083ea0:	d102      	bne.n	8083ea8 <__cmpdf2+0x64>
 8083ea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083ea6:	d107      	bne.n	8083eb8 <__cmpdf2+0x74>
 8083ea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083eb0:	d1d6      	bne.n	8083e60 <__cmpdf2+0x1c>
 8083eb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083eb6:	d0d3      	beq.n	8083e60 <__cmpdf2+0x1c>
 8083eb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083ebc:	4770      	bx	lr
 8083ebe:	bf00      	nop

08083ec0 <__aeabi_cdrcmple>:
 8083ec0:	4684      	mov	ip, r0
 8083ec2:	4610      	mov	r0, r2
 8083ec4:	4662      	mov	r2, ip
 8083ec6:	468c      	mov	ip, r1
 8083ec8:	4619      	mov	r1, r3
 8083eca:	4663      	mov	r3, ip
 8083ecc:	e000      	b.n	8083ed0 <__aeabi_cdcmpeq>
 8083ece:	bf00      	nop

08083ed0 <__aeabi_cdcmpeq>:
 8083ed0:	b501      	push	{r0, lr}
 8083ed2:	f7ff ffb7 	bl	8083e44 <__cmpdf2>
 8083ed6:	2800      	cmp	r0, #0
 8083ed8:	bf48      	it	mi
 8083eda:	f110 0f00 	cmnmi.w	r0, #0
 8083ede:	bd01      	pop	{r0, pc}

08083ee0 <__aeabi_dcmpeq>:
 8083ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083ee4:	f7ff fff4 	bl	8083ed0 <__aeabi_cdcmpeq>
 8083ee8:	bf0c      	ite	eq
 8083eea:	2001      	moveq	r0, #1
 8083eec:	2000      	movne	r0, #0
 8083eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8083ef2:	bf00      	nop

08083ef4 <__aeabi_dcmplt>:
 8083ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083ef8:	f7ff ffea 	bl	8083ed0 <__aeabi_cdcmpeq>
 8083efc:	bf34      	ite	cc
 8083efe:	2001      	movcc	r0, #1
 8083f00:	2000      	movcs	r0, #0
 8083f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f06:	bf00      	nop

08083f08 <__aeabi_dcmple>:
 8083f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f0c:	f7ff ffe0 	bl	8083ed0 <__aeabi_cdcmpeq>
 8083f10:	bf94      	ite	ls
 8083f12:	2001      	movls	r0, #1
 8083f14:	2000      	movhi	r0, #0
 8083f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f1a:	bf00      	nop

08083f1c <__aeabi_dcmpge>:
 8083f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f20:	f7ff ffce 	bl	8083ec0 <__aeabi_cdrcmple>
 8083f24:	bf94      	ite	ls
 8083f26:	2001      	movls	r0, #1
 8083f28:	2000      	movhi	r0, #0
 8083f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f2e:	bf00      	nop

08083f30 <__aeabi_dcmpgt>:
 8083f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f34:	f7ff ffc4 	bl	8083ec0 <__aeabi_cdrcmple>
 8083f38:	bf34      	ite	cc
 8083f3a:	2001      	movcc	r0, #1
 8083f3c:	2000      	movcs	r0, #0
 8083f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f42:	bf00      	nop

08083f44 <__aeabi_dcmpun>:
 8083f44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f4c:	d102      	bne.n	8083f54 <__aeabi_dcmpun+0x10>
 8083f4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083f52:	d10a      	bne.n	8083f6a <__aeabi_dcmpun+0x26>
 8083f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f5c:	d102      	bne.n	8083f64 <__aeabi_dcmpun+0x20>
 8083f5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083f62:	d102      	bne.n	8083f6a <__aeabi_dcmpun+0x26>
 8083f64:	f04f 0000 	mov.w	r0, #0
 8083f68:	4770      	bx	lr
 8083f6a:	f04f 0001 	mov.w	r0, #1
 8083f6e:	4770      	bx	lr

08083f70 <__aeabi_d2uiz>:
 8083f70:	004a      	lsls	r2, r1, #1
 8083f72:	d211      	bcs.n	8083f98 <__aeabi_d2uiz+0x28>
 8083f74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083f78:	d211      	bcs.n	8083f9e <__aeabi_d2uiz+0x2e>
 8083f7a:	d50d      	bpl.n	8083f98 <__aeabi_d2uiz+0x28>
 8083f7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083f80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083f84:	d40e      	bmi.n	8083fa4 <__aeabi_d2uiz+0x34>
 8083f86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083f8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083f92:	fa23 f002 	lsr.w	r0, r3, r2
 8083f96:	4770      	bx	lr
 8083f98:	f04f 0000 	mov.w	r0, #0
 8083f9c:	4770      	bx	lr
 8083f9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083fa2:	d102      	bne.n	8083faa <__aeabi_d2uiz+0x3a>
 8083fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8083fa8:	4770      	bx	lr
 8083faa:	f04f 0000 	mov.w	r0, #0
 8083fae:	4770      	bx	lr

08083fb0 <__aeabi_d2f>:
 8083fb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083fb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083fb8:	bf24      	itt	cs
 8083fba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083fbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083fc2:	d90d      	bls.n	8083fe0 <__aeabi_d2f+0x30>
 8083fc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083fc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083fcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083fd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083fd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083fd8:	bf08      	it	eq
 8083fda:	f020 0001 	biceq.w	r0, r0, #1
 8083fde:	4770      	bx	lr
 8083fe0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083fe4:	d121      	bne.n	808402a <__aeabi_d2f+0x7a>
 8083fe6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083fea:	bfbc      	itt	lt
 8083fec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083ff0:	4770      	bxlt	lr
 8083ff2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083ff6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083ffa:	f1c2 0218 	rsb	r2, r2, #24
 8083ffe:	f1c2 0c20 	rsb	ip, r2, #32
 8084002:	fa10 f30c 	lsls.w	r3, r0, ip
 8084006:	fa20 f002 	lsr.w	r0, r0, r2
 808400a:	bf18      	it	ne
 808400c:	f040 0001 	orrne.w	r0, r0, #1
 8084010:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084014:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084018:	fa03 fc0c 	lsl.w	ip, r3, ip
 808401c:	ea40 000c 	orr.w	r0, r0, ip
 8084020:	fa23 f302 	lsr.w	r3, r3, r2
 8084024:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084028:	e7cc      	b.n	8083fc4 <__aeabi_d2f+0x14>
 808402a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808402e:	d107      	bne.n	8084040 <__aeabi_d2f+0x90>
 8084030:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084034:	bf1e      	ittt	ne
 8084036:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808403a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808403e:	4770      	bxne	lr
 8084040:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084044:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084048:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808404c:	4770      	bx	lr
 808404e:	bf00      	nop

08084050 <__gesf2>:
 8084050:	f04f 3cff 	mov.w	ip, #4294967295
 8084054:	e006      	b.n	8084064 <__cmpsf2+0x4>
 8084056:	bf00      	nop

08084058 <__lesf2>:
 8084058:	f04f 0c01 	mov.w	ip, #1
 808405c:	e002      	b.n	8084064 <__cmpsf2+0x4>
 808405e:	bf00      	nop

08084060 <__cmpsf2>:
 8084060:	f04f 0c01 	mov.w	ip, #1
 8084064:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808406c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084074:	bf18      	it	ne
 8084076:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808407a:	d011      	beq.n	80840a0 <__cmpsf2+0x40>
 808407c:	b001      	add	sp, #4
 808407e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8084082:	bf18      	it	ne
 8084084:	ea90 0f01 	teqne	r0, r1
 8084088:	bf58      	it	pl
 808408a:	ebb2 0003 	subspl.w	r0, r2, r3
 808408e:	bf88      	it	hi
 8084090:	17c8      	asrhi	r0, r1, #31
 8084092:	bf38      	it	cc
 8084094:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084098:	bf18      	it	ne
 808409a:	f040 0001 	orrne.w	r0, r0, #1
 808409e:	4770      	bx	lr
 80840a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80840a4:	d102      	bne.n	80840ac <__cmpsf2+0x4c>
 80840a6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80840aa:	d105      	bne.n	80840b8 <__cmpsf2+0x58>
 80840ac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80840b0:	d1e4      	bne.n	808407c <__cmpsf2+0x1c>
 80840b2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80840b6:	d0e1      	beq.n	808407c <__cmpsf2+0x1c>
 80840b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80840bc:	4770      	bx	lr
 80840be:	bf00      	nop

080840c0 <__aeabi_cfrcmple>:
 80840c0:	4684      	mov	ip, r0
 80840c2:	4608      	mov	r0, r1
 80840c4:	4661      	mov	r1, ip
 80840c6:	e7ff      	b.n	80840c8 <__aeabi_cfcmpeq>

080840c8 <__aeabi_cfcmpeq>:
 80840c8:	b50f      	push	{r0, r1, r2, r3, lr}
 80840ca:	f7ff ffc9 	bl	8084060 <__cmpsf2>
 80840ce:	2800      	cmp	r0, #0
 80840d0:	bf48      	it	mi
 80840d2:	f110 0f00 	cmnmi.w	r0, #0
 80840d6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080840d8 <__aeabi_fcmpeq>:
 80840d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80840dc:	f7ff fff4 	bl	80840c8 <__aeabi_cfcmpeq>
 80840e0:	bf0c      	ite	eq
 80840e2:	2001      	moveq	r0, #1
 80840e4:	2000      	movne	r0, #0
 80840e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80840ea:	bf00      	nop

080840ec <__aeabi_fcmplt>:
 80840ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80840f0:	f7ff ffea 	bl	80840c8 <__aeabi_cfcmpeq>
 80840f4:	bf34      	ite	cc
 80840f6:	2001      	movcc	r0, #1
 80840f8:	2000      	movcs	r0, #0
 80840fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80840fe:	bf00      	nop

08084100 <__aeabi_fcmple>:
 8084100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084104:	f7ff ffe0 	bl	80840c8 <__aeabi_cfcmpeq>
 8084108:	bf94      	ite	ls
 808410a:	2001      	movls	r0, #1
 808410c:	2000      	movhi	r0, #0
 808410e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084112:	bf00      	nop

08084114 <__aeabi_fcmpge>:
 8084114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084118:	f7ff ffd2 	bl	80840c0 <__aeabi_cfrcmple>
 808411c:	bf94      	ite	ls
 808411e:	2001      	movls	r0, #1
 8084120:	2000      	movhi	r0, #0
 8084122:	f85d fb08 	ldr.w	pc, [sp], #8
 8084126:	bf00      	nop

08084128 <__aeabi_fcmpgt>:
 8084128:	f84d ed08 	str.w	lr, [sp, #-8]!
 808412c:	f7ff ffc8 	bl	80840c0 <__aeabi_cfrcmple>
 8084130:	bf34      	ite	cc
 8084132:	2001      	movcc	r0, #1
 8084134:	2000      	movcs	r0, #0
 8084136:	f85d fb08 	ldr.w	pc, [sp], #8
 808413a:	bf00      	nop

0808413c <__aeabi_d2ulz>:
 808413c:	b5d0      	push	{r4, r6, r7, lr}
 808413e:	2200      	movs	r2, #0
 8084140:	4b0b      	ldr	r3, [pc, #44]	; (8084170 <__aeabi_d2ulz+0x34>)
 8084142:	4606      	mov	r6, r0
 8084144:	460f      	mov	r7, r1
 8084146:	f7ff fc63 	bl	8083a10 <__aeabi_dmul>
 808414a:	f7ff ff11 	bl	8083f70 <__aeabi_d2uiz>
 808414e:	4604      	mov	r4, r0
 8084150:	f7ff fbe4 	bl	808391c <__aeabi_ui2d>
 8084154:	2200      	movs	r2, #0
 8084156:	4b07      	ldr	r3, [pc, #28]	; (8084174 <__aeabi_d2ulz+0x38>)
 8084158:	f7ff fc5a 	bl	8083a10 <__aeabi_dmul>
 808415c:	4602      	mov	r2, r0
 808415e:	460b      	mov	r3, r1
 8084160:	4630      	mov	r0, r6
 8084162:	4639      	mov	r1, r7
 8084164:	f7ff fa9c 	bl	80836a0 <__aeabi_dsub>
 8084168:	f7ff ff02 	bl	8083f70 <__aeabi_d2uiz>
 808416c:	4621      	mov	r1, r4
 808416e:	bdd0      	pop	{r4, r6, r7, pc}
 8084170:	3df00000 	.word	0x3df00000
 8084174:	41f00000 	.word	0x41f00000

08084178 <asctime_r>:
 8084178:	b510      	push	{r4, lr}
 808417a:	460c      	mov	r4, r1
 808417c:	6941      	ldr	r1, [r0, #20]
 808417e:	b086      	sub	sp, #24
 8084180:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8084184:	6903      	ldr	r3, [r0, #16]
 8084186:	6982      	ldr	r2, [r0, #24]
 8084188:	9104      	str	r1, [sp, #16]
 808418a:	6801      	ldr	r1, [r0, #0]
 808418c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8084190:	9103      	str	r1, [sp, #12]
 8084192:	6841      	ldr	r1, [r0, #4]
 8084194:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8084198:	9102      	str	r1, [sp, #8]
 808419a:	6881      	ldr	r1, [r0, #8]
 808419c:	9101      	str	r1, [sp, #4]
 808419e:	68c1      	ldr	r1, [r0, #12]
 80841a0:	4620      	mov	r0, r4
 80841a2:	9100      	str	r1, [sp, #0]
 80841a4:	4904      	ldr	r1, [pc, #16]	; (80841b8 <asctime_r+0x40>)
 80841a6:	440b      	add	r3, r1
 80841a8:	4904      	ldr	r1, [pc, #16]	; (80841bc <asctime_r+0x44>)
 80841aa:	440a      	add	r2, r1
 80841ac:	4904      	ldr	r1, [pc, #16]	; (80841c0 <asctime_r+0x48>)
 80841ae:	f7fd ff0b 	bl	8081fc8 <siprintf>
 80841b2:	4620      	mov	r0, r4
 80841b4:	b006      	add	sp, #24
 80841b6:	bd10      	pop	{r4, pc}
 80841b8:	080865f6 	.word	0x080865f6
 80841bc:	080865e1 	.word	0x080865e1
 80841c0:	080865c1 	.word	0x080865c1

080841c4 <atol>:
 80841c4:	220a      	movs	r2, #10
 80841c6:	2100      	movs	r1, #0
 80841c8:	f000 bfaa 	b.w	8085120 <strtol>

080841cc <__cxa_atexit>:
 80841cc:	b510      	push	{r4, lr}
 80841ce:	4604      	mov	r4, r0
 80841d0:	4804      	ldr	r0, [pc, #16]	; (80841e4 <__cxa_atexit+0x18>)
 80841d2:	4613      	mov	r3, r2
 80841d4:	b120      	cbz	r0, 80841e0 <__cxa_atexit+0x14>
 80841d6:	460a      	mov	r2, r1
 80841d8:	2002      	movs	r0, #2
 80841da:	4621      	mov	r1, r4
 80841dc:	f3af 8000 	nop.w
 80841e0:	bd10      	pop	{r4, pc}
 80841e2:	bf00      	nop
 80841e4:	00000000 	.word	0x00000000

080841e8 <memcpy>:
 80841e8:	440a      	add	r2, r1
 80841ea:	4291      	cmp	r1, r2
 80841ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80841f0:	d100      	bne.n	80841f4 <memcpy+0xc>
 80841f2:	4770      	bx	lr
 80841f4:	b510      	push	{r4, lr}
 80841f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80841fa:	4291      	cmp	r1, r2
 80841fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8084200:	d1f9      	bne.n	80841f6 <memcpy+0xe>
 8084202:	bd10      	pop	{r4, pc}

08084204 <memset>:
 8084204:	4603      	mov	r3, r0
 8084206:	4402      	add	r2, r0
 8084208:	4293      	cmp	r3, r2
 808420a:	d100      	bne.n	808420e <memset+0xa>
 808420c:	4770      	bx	lr
 808420e:	f803 1b01 	strb.w	r1, [r3], #1
 8084212:	e7f9      	b.n	8084208 <memset+0x4>

08084214 <srand>:
 8084214:	b538      	push	{r3, r4, r5, lr}
 8084216:	4b0d      	ldr	r3, [pc, #52]	; (808424c <srand+0x38>)
 8084218:	4604      	mov	r4, r0
 808421a:	681d      	ldr	r5, [r3, #0]
 808421c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808421e:	b97b      	cbnz	r3, 8084240 <srand+0x2c>
 8084220:	2018      	movs	r0, #24
 8084222:	f7fd feb9 	bl	8081f98 <malloc>
 8084226:	4a0a      	ldr	r2, [pc, #40]	; (8084250 <srand+0x3c>)
 8084228:	4b0a      	ldr	r3, [pc, #40]	; (8084254 <srand+0x40>)
 808422a:	63a8      	str	r0, [r5, #56]	; 0x38
 808422c:	e9c0 2300 	strd	r2, r3, [r0]
 8084230:	4b09      	ldr	r3, [pc, #36]	; (8084258 <srand+0x44>)
 8084232:	2201      	movs	r2, #1
 8084234:	6083      	str	r3, [r0, #8]
 8084236:	230b      	movs	r3, #11
 8084238:	8183      	strh	r3, [r0, #12]
 808423a:	2300      	movs	r3, #0
 808423c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084240:	2200      	movs	r2, #0
 8084242:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8084244:	611c      	str	r4, [r3, #16]
 8084246:	615a      	str	r2, [r3, #20]
 8084248:	bd38      	pop	{r3, r4, r5, pc}
 808424a:	bf00      	nop
 808424c:	20000014 	.word	0x20000014
 8084250:	abcd330e 	.word	0xabcd330e
 8084254:	e66d1234 	.word	0xe66d1234
 8084258:	0005deec 	.word	0x0005deec

0808425c <strchr>:
 808425c:	4603      	mov	r3, r0
 808425e:	b2c9      	uxtb	r1, r1
 8084260:	4618      	mov	r0, r3
 8084262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084266:	b112      	cbz	r2, 808426e <strchr+0x12>
 8084268:	428a      	cmp	r2, r1
 808426a:	d1f9      	bne.n	8084260 <strchr+0x4>
 808426c:	4770      	bx	lr
 808426e:	2900      	cmp	r1, #0
 8084270:	bf18      	it	ne
 8084272:	2000      	movne	r0, #0
 8084274:	4770      	bx	lr

08084276 <strcmp>:
 8084276:	f810 2b01 	ldrb.w	r2, [r0], #1
 808427a:	f811 3b01 	ldrb.w	r3, [r1], #1
 808427e:	2a01      	cmp	r2, #1
 8084280:	bf28      	it	cs
 8084282:	429a      	cmpcs	r2, r3
 8084284:	d0f7      	beq.n	8084276 <strcmp>
 8084286:	1ad0      	subs	r0, r2, r3
 8084288:	4770      	bx	lr

0808428a <strcpy>:
 808428a:	4603      	mov	r3, r0
 808428c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084290:	f803 2b01 	strb.w	r2, [r3], #1
 8084294:	2a00      	cmp	r2, #0
 8084296:	d1f9      	bne.n	808428c <strcpy+0x2>
 8084298:	4770      	bx	lr
	...

0808429c <strdup>:
 808429c:	4b02      	ldr	r3, [pc, #8]	; (80842a8 <strdup+0xc>)
 808429e:	4601      	mov	r1, r0
 80842a0:	6818      	ldr	r0, [r3, #0]
 80842a2:	f000 b803 	b.w	80842ac <_strdup_r>
 80842a6:	bf00      	nop
 80842a8:	20000014 	.word	0x20000014

080842ac <_strdup_r>:
 80842ac:	b570      	push	{r4, r5, r6, lr}
 80842ae:	4604      	mov	r4, r0
 80842b0:	4608      	mov	r0, r1
 80842b2:	460d      	mov	r5, r1
 80842b4:	f000 f80d 	bl	80842d2 <strlen>
 80842b8:	1c46      	adds	r6, r0, #1
 80842ba:	4631      	mov	r1, r6
 80842bc:	4620      	mov	r0, r4
 80842be:	f7fd feab 	bl	8082018 <_malloc_r>
 80842c2:	4604      	mov	r4, r0
 80842c4:	b118      	cbz	r0, 80842ce <_strdup_r+0x22>
 80842c6:	4632      	mov	r2, r6
 80842c8:	4629      	mov	r1, r5
 80842ca:	f7ff ff8d 	bl	80841e8 <memcpy>
 80842ce:	4620      	mov	r0, r4
 80842d0:	bd70      	pop	{r4, r5, r6, pc}

080842d2 <strlen>:
 80842d2:	4603      	mov	r3, r0
 80842d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80842d8:	2a00      	cmp	r2, #0
 80842da:	d1fb      	bne.n	80842d4 <strlen+0x2>
 80842dc:	1a18      	subs	r0, r3, r0
 80842de:	3801      	subs	r0, #1
 80842e0:	4770      	bx	lr

080842e2 <strncmp>:
 80842e2:	b510      	push	{r4, lr}
 80842e4:	b16a      	cbz	r2, 8084302 <strncmp+0x20>
 80842e6:	3901      	subs	r1, #1
 80842e8:	1884      	adds	r4, r0, r2
 80842ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80842ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80842f2:	4293      	cmp	r3, r2
 80842f4:	d103      	bne.n	80842fe <strncmp+0x1c>
 80842f6:	42a0      	cmp	r0, r4
 80842f8:	d001      	beq.n	80842fe <strncmp+0x1c>
 80842fa:	2b00      	cmp	r3, #0
 80842fc:	d1f5      	bne.n	80842ea <strncmp+0x8>
 80842fe:	1a98      	subs	r0, r3, r2
 8084300:	bd10      	pop	{r4, pc}
 8084302:	4610      	mov	r0, r2
 8084304:	e7fc      	b.n	8084300 <strncmp+0x1e>

08084306 <strncpy>:
 8084306:	4603      	mov	r3, r0
 8084308:	b510      	push	{r4, lr}
 808430a:	3901      	subs	r1, #1
 808430c:	b132      	cbz	r2, 808431c <strncpy+0x16>
 808430e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084312:	3a01      	subs	r2, #1
 8084314:	f803 4b01 	strb.w	r4, [r3], #1
 8084318:	2c00      	cmp	r4, #0
 808431a:	d1f7      	bne.n	808430c <strncpy+0x6>
 808431c:	2100      	movs	r1, #0
 808431e:	441a      	add	r2, r3
 8084320:	4293      	cmp	r3, r2
 8084322:	d100      	bne.n	8084326 <strncpy+0x20>
 8084324:	bd10      	pop	{r4, pc}
 8084326:	f803 1b01 	strb.w	r1, [r3], #1
 808432a:	e7f9      	b.n	8084320 <strncpy+0x1a>

0808432c <strstr>:
 808432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808432e:	780c      	ldrb	r4, [r1, #0]
 8084330:	b164      	cbz	r4, 808434c <strstr+0x20>
 8084332:	4603      	mov	r3, r0
 8084334:	781a      	ldrb	r2, [r3, #0]
 8084336:	4618      	mov	r0, r3
 8084338:	1c5e      	adds	r6, r3, #1
 808433a:	b90a      	cbnz	r2, 8084340 <strstr+0x14>
 808433c:	4610      	mov	r0, r2
 808433e:	e005      	b.n	808434c <strstr+0x20>
 8084340:	4294      	cmp	r4, r2
 8084342:	d108      	bne.n	8084356 <strstr+0x2a>
 8084344:	460d      	mov	r5, r1
 8084346:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808434a:	b902      	cbnz	r2, 808434e <strstr+0x22>
 808434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808434e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8084352:	4297      	cmp	r7, r2
 8084354:	d0f7      	beq.n	8084346 <strstr+0x1a>
 8084356:	4633      	mov	r3, r6
 8084358:	e7ec      	b.n	8084334 <strstr+0x8>

0808435a <sulp>:
 808435a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808435e:	460f      	mov	r7, r1
 8084360:	4690      	mov	r8, r2
 8084362:	f001 fd4b 	bl	8085dfc <__ulp>
 8084366:	4604      	mov	r4, r0
 8084368:	460d      	mov	r5, r1
 808436a:	f1b8 0f00 	cmp.w	r8, #0
 808436e:	d011      	beq.n	8084394 <sulp+0x3a>
 8084370:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8084374:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8084378:	2b00      	cmp	r3, #0
 808437a:	dd0b      	ble.n	8084394 <sulp+0x3a>
 808437c:	2400      	movs	r4, #0
 808437e:	051b      	lsls	r3, r3, #20
 8084380:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8084384:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8084388:	4622      	mov	r2, r4
 808438a:	462b      	mov	r3, r5
 808438c:	f7ff fb40 	bl	8083a10 <__aeabi_dmul>
 8084390:	4604      	mov	r4, r0
 8084392:	460d      	mov	r5, r1
 8084394:	4620      	mov	r0, r4
 8084396:	4629      	mov	r1, r5
 8084398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808439c:	0000      	movs	r0, r0
	...

080843a0 <_strtod_l>:
 80843a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80843a4:	469b      	mov	fp, r3
 80843a6:	2300      	movs	r3, #0
 80843a8:	b0a1      	sub	sp, #132	; 0x84
 80843aa:	931c      	str	r3, [sp, #112]	; 0x70
 80843ac:	4ba1      	ldr	r3, [pc, #644]	; (8084634 <_strtod_l+0x294>)
 80843ae:	4682      	mov	sl, r0
 80843b0:	681f      	ldr	r7, [r3, #0]
 80843b2:	460e      	mov	r6, r1
 80843b4:	4638      	mov	r0, r7
 80843b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80843b8:	f7ff ff8b 	bl	80842d2 <strlen>
 80843bc:	f04f 0800 	mov.w	r8, #0
 80843c0:	4604      	mov	r4, r0
 80843c2:	f04f 0900 	mov.w	r9, #0
 80843c6:	961b      	str	r6, [sp, #108]	; 0x6c
 80843c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80843ca:	781a      	ldrb	r2, [r3, #0]
 80843cc:	2a2b      	cmp	r2, #43	; 0x2b
 80843ce:	d04c      	beq.n	808446a <_strtod_l+0xca>
 80843d0:	d83a      	bhi.n	8084448 <_strtod_l+0xa8>
 80843d2:	2a0d      	cmp	r2, #13
 80843d4:	d833      	bhi.n	808443e <_strtod_l+0x9e>
 80843d6:	2a08      	cmp	r2, #8
 80843d8:	d833      	bhi.n	8084442 <_strtod_l+0xa2>
 80843da:	2a00      	cmp	r2, #0
 80843dc:	d03d      	beq.n	808445a <_strtod_l+0xba>
 80843de:	2300      	movs	r3, #0
 80843e0:	930c      	str	r3, [sp, #48]	; 0x30
 80843e2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80843e4:	782b      	ldrb	r3, [r5, #0]
 80843e6:	2b30      	cmp	r3, #48	; 0x30
 80843e8:	f040 80af 	bne.w	808454a <_strtod_l+0x1aa>
 80843ec:	786b      	ldrb	r3, [r5, #1]
 80843ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80843f2:	2b58      	cmp	r3, #88	; 0x58
 80843f4:	d16c      	bne.n	80844d0 <_strtod_l+0x130>
 80843f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80843f8:	4650      	mov	r0, sl
 80843fa:	9301      	str	r3, [sp, #4]
 80843fc:	ab1c      	add	r3, sp, #112	; 0x70
 80843fe:	9300      	str	r3, [sp, #0]
 8084400:	4a8d      	ldr	r2, [pc, #564]	; (8084638 <_strtod_l+0x298>)
 8084402:	f8cd b008 	str.w	fp, [sp, #8]
 8084406:	ab1d      	add	r3, sp, #116	; 0x74
 8084408:	a91b      	add	r1, sp, #108	; 0x6c
 808440a:	f000 fefb 	bl	8085204 <__gethex>
 808440e:	f010 0607 	ands.w	r6, r0, #7
 8084412:	4604      	mov	r4, r0
 8084414:	d005      	beq.n	8084422 <_strtod_l+0x82>
 8084416:	2e06      	cmp	r6, #6
 8084418:	d129      	bne.n	808446e <_strtod_l+0xce>
 808441a:	2300      	movs	r3, #0
 808441c:	3501      	adds	r5, #1
 808441e:	951b      	str	r5, [sp, #108]	; 0x6c
 8084420:	930c      	str	r3, [sp, #48]	; 0x30
 8084422:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084424:	2b00      	cmp	r3, #0
 8084426:	f040 8596 	bne.w	8084f56 <_strtod_l+0xbb6>
 808442a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808442c:	b1d3      	cbz	r3, 8084464 <_strtod_l+0xc4>
 808442e:	4642      	mov	r2, r8
 8084430:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8084434:	4610      	mov	r0, r2
 8084436:	4619      	mov	r1, r3
 8084438:	b021      	add	sp, #132	; 0x84
 808443a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808443e:	2a20      	cmp	r2, #32
 8084440:	d1cd      	bne.n	80843de <_strtod_l+0x3e>
 8084442:	3301      	adds	r3, #1
 8084444:	931b      	str	r3, [sp, #108]	; 0x6c
 8084446:	e7bf      	b.n	80843c8 <_strtod_l+0x28>
 8084448:	2a2d      	cmp	r2, #45	; 0x2d
 808444a:	d1c8      	bne.n	80843de <_strtod_l+0x3e>
 808444c:	2201      	movs	r2, #1
 808444e:	920c      	str	r2, [sp, #48]	; 0x30
 8084450:	1c5a      	adds	r2, r3, #1
 8084452:	921b      	str	r2, [sp, #108]	; 0x6c
 8084454:	785b      	ldrb	r3, [r3, #1]
 8084456:	2b00      	cmp	r3, #0
 8084458:	d1c3      	bne.n	80843e2 <_strtod_l+0x42>
 808445a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808445c:	961b      	str	r6, [sp, #108]	; 0x6c
 808445e:	2b00      	cmp	r3, #0
 8084460:	f040 8577 	bne.w	8084f52 <_strtod_l+0xbb2>
 8084464:	4642      	mov	r2, r8
 8084466:	464b      	mov	r3, r9
 8084468:	e7e4      	b.n	8084434 <_strtod_l+0x94>
 808446a:	2200      	movs	r2, #0
 808446c:	e7ef      	b.n	808444e <_strtod_l+0xae>
 808446e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8084470:	b13a      	cbz	r2, 8084482 <_strtod_l+0xe2>
 8084472:	2135      	movs	r1, #53	; 0x35
 8084474:	a81e      	add	r0, sp, #120	; 0x78
 8084476:	f001 fdb8 	bl	8085fea <__copybits>
 808447a:	4650      	mov	r0, sl
 808447c:	991c      	ldr	r1, [sp, #112]	; 0x70
 808447e:	f001 f9f3 	bl	8085868 <_Bfree>
 8084482:	3e01      	subs	r6, #1
 8084484:	2e05      	cmp	r6, #5
 8084486:	d807      	bhi.n	8084498 <_strtod_l+0xf8>
 8084488:	e8df f006 	tbb	[pc, r6]
 808448c:	1d180b0e 	.word	0x1d180b0e
 8084490:	030e      	.short	0x030e
 8084492:	f04f 0900 	mov.w	r9, #0
 8084496:	46c8      	mov	r8, r9
 8084498:	0721      	lsls	r1, r4, #28
 808449a:	d5c2      	bpl.n	8084422 <_strtod_l+0x82>
 808449c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80844a0:	e7bf      	b.n	8084422 <_strtod_l+0x82>
 80844a2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80844a6:	e7f7      	b.n	8084498 <_strtod_l+0xf8>
 80844a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80844aa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80844ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80844b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80844b6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80844ba:	e7ed      	b.n	8084498 <_strtod_l+0xf8>
 80844bc:	f04f 0800 	mov.w	r8, #0
 80844c0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808463c <_strtod_l+0x29c>
 80844c4:	e7e8      	b.n	8084498 <_strtod_l+0xf8>
 80844c6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80844ca:	f04f 38ff 	mov.w	r8, #4294967295
 80844ce:	e7e3      	b.n	8084498 <_strtod_l+0xf8>
 80844d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80844d2:	1c5a      	adds	r2, r3, #1
 80844d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80844d6:	785b      	ldrb	r3, [r3, #1]
 80844d8:	2b30      	cmp	r3, #48	; 0x30
 80844da:	d0f9      	beq.n	80844d0 <_strtod_l+0x130>
 80844dc:	2b00      	cmp	r3, #0
 80844de:	d0a0      	beq.n	8084422 <_strtod_l+0x82>
 80844e0:	2301      	movs	r3, #1
 80844e2:	9307      	str	r3, [sp, #28]
 80844e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80844e6:	220a      	movs	r2, #10
 80844e8:	9308      	str	r3, [sp, #32]
 80844ea:	2300      	movs	r3, #0
 80844ec:	469b      	mov	fp, r3
 80844ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80844f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80844f4:	7805      	ldrb	r5, [r0, #0]
 80844f6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80844fa:	b2d9      	uxtb	r1, r3
 80844fc:	2909      	cmp	r1, #9
 80844fe:	d926      	bls.n	808454e <_strtod_l+0x1ae>
 8084500:	4622      	mov	r2, r4
 8084502:	4639      	mov	r1, r7
 8084504:	f7ff feed 	bl	80842e2 <strncmp>
 8084508:	2800      	cmp	r0, #0
 808450a:	d032      	beq.n	8084572 <_strtod_l+0x1d2>
 808450c:	2000      	movs	r0, #0
 808450e:	462b      	mov	r3, r5
 8084510:	465c      	mov	r4, fp
 8084512:	4602      	mov	r2, r0
 8084514:	9004      	str	r0, [sp, #16]
 8084516:	2b65      	cmp	r3, #101	; 0x65
 8084518:	d001      	beq.n	808451e <_strtod_l+0x17e>
 808451a:	2b45      	cmp	r3, #69	; 0x45
 808451c:	d113      	bne.n	8084546 <_strtod_l+0x1a6>
 808451e:	b91c      	cbnz	r4, 8084528 <_strtod_l+0x188>
 8084520:	9b07      	ldr	r3, [sp, #28]
 8084522:	4303      	orrs	r3, r0
 8084524:	d099      	beq.n	808445a <_strtod_l+0xba>
 8084526:	2400      	movs	r4, #0
 8084528:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 808452a:	1c73      	adds	r3, r6, #1
 808452c:	931b      	str	r3, [sp, #108]	; 0x6c
 808452e:	7873      	ldrb	r3, [r6, #1]
 8084530:	2b2b      	cmp	r3, #43	; 0x2b
 8084532:	d078      	beq.n	8084626 <_strtod_l+0x286>
 8084534:	2b2d      	cmp	r3, #45	; 0x2d
 8084536:	d07b      	beq.n	8084630 <_strtod_l+0x290>
 8084538:	2700      	movs	r7, #0
 808453a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808453e:	2909      	cmp	r1, #9
 8084540:	f240 8082 	bls.w	8084648 <_strtod_l+0x2a8>
 8084544:	961b      	str	r6, [sp, #108]	; 0x6c
 8084546:	2500      	movs	r5, #0
 8084548:	e09e      	b.n	8084688 <_strtod_l+0x2e8>
 808454a:	2300      	movs	r3, #0
 808454c:	e7c9      	b.n	80844e2 <_strtod_l+0x142>
 808454e:	f1bb 0f08 	cmp.w	fp, #8
 8084552:	bfd5      	itete	le
 8084554:	9906      	ldrle	r1, [sp, #24]
 8084556:	9905      	ldrgt	r1, [sp, #20]
 8084558:	fb02 3301 	mlale	r3, r2, r1, r3
 808455c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8084560:	f100 0001 	add.w	r0, r0, #1
 8084564:	bfd4      	ite	le
 8084566:	9306      	strle	r3, [sp, #24]
 8084568:	9305      	strgt	r3, [sp, #20]
 808456a:	f10b 0b01 	add.w	fp, fp, #1
 808456e:	901b      	str	r0, [sp, #108]	; 0x6c
 8084570:	e7bf      	b.n	80844f2 <_strtod_l+0x152>
 8084572:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084574:	191a      	adds	r2, r3, r4
 8084576:	921b      	str	r2, [sp, #108]	; 0x6c
 8084578:	5d1b      	ldrb	r3, [r3, r4]
 808457a:	f1bb 0f00 	cmp.w	fp, #0
 808457e:	d036      	beq.n	80845ee <_strtod_l+0x24e>
 8084580:	465c      	mov	r4, fp
 8084582:	9004      	str	r0, [sp, #16]
 8084584:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8084588:	2a09      	cmp	r2, #9
 808458a:	d912      	bls.n	80845b2 <_strtod_l+0x212>
 808458c:	2201      	movs	r2, #1
 808458e:	e7c2      	b.n	8084516 <_strtod_l+0x176>
 8084590:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084592:	3001      	adds	r0, #1
 8084594:	1c5a      	adds	r2, r3, #1
 8084596:	921b      	str	r2, [sp, #108]	; 0x6c
 8084598:	785b      	ldrb	r3, [r3, #1]
 808459a:	2b30      	cmp	r3, #48	; 0x30
 808459c:	d0f8      	beq.n	8084590 <_strtod_l+0x1f0>
 808459e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80845a2:	2a08      	cmp	r2, #8
 80845a4:	f200 84dc 	bhi.w	8084f60 <_strtod_l+0xbc0>
 80845a8:	9004      	str	r0, [sp, #16]
 80845aa:	2000      	movs	r0, #0
 80845ac:	4604      	mov	r4, r0
 80845ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80845b0:	9208      	str	r2, [sp, #32]
 80845b2:	3b30      	subs	r3, #48	; 0x30
 80845b4:	f100 0201 	add.w	r2, r0, #1
 80845b8:	d013      	beq.n	80845e2 <_strtod_l+0x242>
 80845ba:	9904      	ldr	r1, [sp, #16]
 80845bc:	1905      	adds	r5, r0, r4
 80845be:	4411      	add	r1, r2
 80845c0:	9104      	str	r1, [sp, #16]
 80845c2:	4622      	mov	r2, r4
 80845c4:	210a      	movs	r1, #10
 80845c6:	42aa      	cmp	r2, r5
 80845c8:	d113      	bne.n	80845f2 <_strtod_l+0x252>
 80845ca:	1822      	adds	r2, r4, r0
 80845cc:	2a08      	cmp	r2, #8
 80845ce:	f104 0401 	add.w	r4, r4, #1
 80845d2:	4404      	add	r4, r0
 80845d4:	dc1b      	bgt.n	808460e <_strtod_l+0x26e>
 80845d6:	220a      	movs	r2, #10
 80845d8:	9906      	ldr	r1, [sp, #24]
 80845da:	fb02 3301 	mla	r3, r2, r1, r3
 80845de:	9306      	str	r3, [sp, #24]
 80845e0:	2200      	movs	r2, #0
 80845e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80845e4:	4610      	mov	r0, r2
 80845e6:	1c59      	adds	r1, r3, #1
 80845e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80845ea:	785b      	ldrb	r3, [r3, #1]
 80845ec:	e7ca      	b.n	8084584 <_strtod_l+0x1e4>
 80845ee:	4658      	mov	r0, fp
 80845f0:	e7d3      	b.n	808459a <_strtod_l+0x1fa>
 80845f2:	2a08      	cmp	r2, #8
 80845f4:	dc04      	bgt.n	8084600 <_strtod_l+0x260>
 80845f6:	9f06      	ldr	r7, [sp, #24]
 80845f8:	434f      	muls	r7, r1
 80845fa:	9706      	str	r7, [sp, #24]
 80845fc:	3201      	adds	r2, #1
 80845fe:	e7e2      	b.n	80845c6 <_strtod_l+0x226>
 8084600:	1c57      	adds	r7, r2, #1
 8084602:	2f10      	cmp	r7, #16
 8084604:	bfde      	ittt	le
 8084606:	9f05      	ldrle	r7, [sp, #20]
 8084608:	434f      	mulle	r7, r1
 808460a:	9705      	strle	r7, [sp, #20]
 808460c:	e7f6      	b.n	80845fc <_strtod_l+0x25c>
 808460e:	2c10      	cmp	r4, #16
 8084610:	bfdf      	itttt	le
 8084612:	220a      	movle	r2, #10
 8084614:	9905      	ldrle	r1, [sp, #20]
 8084616:	fb02 3301 	mlale	r3, r2, r1, r3
 808461a:	9305      	strle	r3, [sp, #20]
 808461c:	e7e0      	b.n	80845e0 <_strtod_l+0x240>
 808461e:	2300      	movs	r3, #0
 8084620:	2201      	movs	r2, #1
 8084622:	9304      	str	r3, [sp, #16]
 8084624:	e77c      	b.n	8084520 <_strtod_l+0x180>
 8084626:	2700      	movs	r7, #0
 8084628:	1cb3      	adds	r3, r6, #2
 808462a:	931b      	str	r3, [sp, #108]	; 0x6c
 808462c:	78b3      	ldrb	r3, [r6, #2]
 808462e:	e784      	b.n	808453a <_strtod_l+0x19a>
 8084630:	2701      	movs	r7, #1
 8084632:	e7f9      	b.n	8084628 <_strtod_l+0x288>
 8084634:	0808677c 	.word	0x0808677c
 8084638:	08086628 	.word	0x08086628
 808463c:	7ff00000 	.word	0x7ff00000
 8084640:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084642:	1c59      	adds	r1, r3, #1
 8084644:	911b      	str	r1, [sp, #108]	; 0x6c
 8084646:	785b      	ldrb	r3, [r3, #1]
 8084648:	2b30      	cmp	r3, #48	; 0x30
 808464a:	d0f9      	beq.n	8084640 <_strtod_l+0x2a0>
 808464c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8084650:	2908      	cmp	r1, #8
 8084652:	f63f af78 	bhi.w	8084546 <_strtod_l+0x1a6>
 8084656:	f04f 0e0a 	mov.w	lr, #10
 808465a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808465e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084660:	9309      	str	r3, [sp, #36]	; 0x24
 8084662:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084664:	1c59      	adds	r1, r3, #1
 8084666:	911b      	str	r1, [sp, #108]	; 0x6c
 8084668:	785b      	ldrb	r3, [r3, #1]
 808466a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 808466e:	2d09      	cmp	r5, #9
 8084670:	d935      	bls.n	80846de <_strtod_l+0x33e>
 8084672:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8084674:	1b49      	subs	r1, r1, r5
 8084676:	2908      	cmp	r1, #8
 8084678:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808467c:	dc02      	bgt.n	8084684 <_strtod_l+0x2e4>
 808467e:	4565      	cmp	r5, ip
 8084680:	bfa8      	it	ge
 8084682:	4665      	movge	r5, ip
 8084684:	b107      	cbz	r7, 8084688 <_strtod_l+0x2e8>
 8084686:	426d      	negs	r5, r5
 8084688:	2c00      	cmp	r4, #0
 808468a:	d14c      	bne.n	8084726 <_strtod_l+0x386>
 808468c:	9907      	ldr	r1, [sp, #28]
 808468e:	4301      	orrs	r1, r0
 8084690:	f47f aec7 	bne.w	8084422 <_strtod_l+0x82>
 8084694:	2a00      	cmp	r2, #0
 8084696:	f47f aee0 	bne.w	808445a <_strtod_l+0xba>
 808469a:	2b69      	cmp	r3, #105	; 0x69
 808469c:	d026      	beq.n	80846ec <_strtod_l+0x34c>
 808469e:	dc23      	bgt.n	80846e8 <_strtod_l+0x348>
 80846a0:	2b49      	cmp	r3, #73	; 0x49
 80846a2:	d023      	beq.n	80846ec <_strtod_l+0x34c>
 80846a4:	2b4e      	cmp	r3, #78	; 0x4e
 80846a6:	f47f aed8 	bne.w	808445a <_strtod_l+0xba>
 80846aa:	499c      	ldr	r1, [pc, #624]	; (808491c <_strtod_l+0x57c>)
 80846ac:	a81b      	add	r0, sp, #108	; 0x6c
 80846ae:	f000 ffe5 	bl	808567c <__match>
 80846b2:	2800      	cmp	r0, #0
 80846b4:	f43f aed1 	beq.w	808445a <_strtod_l+0xba>
 80846b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80846ba:	781b      	ldrb	r3, [r3, #0]
 80846bc:	2b28      	cmp	r3, #40	; 0x28
 80846be:	d12c      	bne.n	808471a <_strtod_l+0x37a>
 80846c0:	4997      	ldr	r1, [pc, #604]	; (8084920 <_strtod_l+0x580>)
 80846c2:	aa1e      	add	r2, sp, #120	; 0x78
 80846c4:	a81b      	add	r0, sp, #108	; 0x6c
 80846c6:	f000 ffed 	bl	80856a4 <__hexnan>
 80846ca:	2805      	cmp	r0, #5
 80846cc:	d125      	bne.n	808471a <_strtod_l+0x37a>
 80846ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80846d0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80846d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80846d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80846dc:	e6a1      	b.n	8084422 <_strtod_l+0x82>
 80846de:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80846e2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80846e6:	e7bc      	b.n	8084662 <_strtod_l+0x2c2>
 80846e8:	2b6e      	cmp	r3, #110	; 0x6e
 80846ea:	e7dc      	b.n	80846a6 <_strtod_l+0x306>
 80846ec:	498d      	ldr	r1, [pc, #564]	; (8084924 <_strtod_l+0x584>)
 80846ee:	a81b      	add	r0, sp, #108	; 0x6c
 80846f0:	f000 ffc4 	bl	808567c <__match>
 80846f4:	2800      	cmp	r0, #0
 80846f6:	f43f aeb0 	beq.w	808445a <_strtod_l+0xba>
 80846fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80846fc:	498a      	ldr	r1, [pc, #552]	; (8084928 <_strtod_l+0x588>)
 80846fe:	3b01      	subs	r3, #1
 8084700:	a81b      	add	r0, sp, #108	; 0x6c
 8084702:	931b      	str	r3, [sp, #108]	; 0x6c
 8084704:	f000 ffba 	bl	808567c <__match>
 8084708:	b910      	cbnz	r0, 8084710 <_strtod_l+0x370>
 808470a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808470c:	3301      	adds	r3, #1
 808470e:	931b      	str	r3, [sp, #108]	; 0x6c
 8084710:	f04f 0800 	mov.w	r8, #0
 8084714:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8084938 <_strtod_l+0x598>
 8084718:	e683      	b.n	8084422 <_strtod_l+0x82>
 808471a:	4884      	ldr	r0, [pc, #528]	; (808492c <_strtod_l+0x58c>)
 808471c:	f001 fcb8 	bl	8086090 <nan>
 8084720:	4680      	mov	r8, r0
 8084722:	4689      	mov	r9, r1
 8084724:	e67d      	b.n	8084422 <_strtod_l+0x82>
 8084726:	9b04      	ldr	r3, [sp, #16]
 8084728:	f1bb 0f00 	cmp.w	fp, #0
 808472c:	bf08      	it	eq
 808472e:	46a3      	moveq	fp, r4
 8084730:	1aeb      	subs	r3, r5, r3
 8084732:	2c10      	cmp	r4, #16
 8084734:	9806      	ldr	r0, [sp, #24]
 8084736:	4626      	mov	r6, r4
 8084738:	9307      	str	r3, [sp, #28]
 808473a:	bfa8      	it	ge
 808473c:	2610      	movge	r6, #16
 808473e:	f7ff f8ed 	bl	808391c <__aeabi_ui2d>
 8084742:	2c09      	cmp	r4, #9
 8084744:	4680      	mov	r8, r0
 8084746:	4689      	mov	r9, r1
 8084748:	dd13      	ble.n	8084772 <_strtod_l+0x3d2>
 808474a:	4b79      	ldr	r3, [pc, #484]	; (8084930 <_strtod_l+0x590>)
 808474c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8084750:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8084754:	f7ff f95c 	bl	8083a10 <__aeabi_dmul>
 8084758:	4680      	mov	r8, r0
 808475a:	9805      	ldr	r0, [sp, #20]
 808475c:	4689      	mov	r9, r1
 808475e:	f7ff f8dd 	bl	808391c <__aeabi_ui2d>
 8084762:	4602      	mov	r2, r0
 8084764:	460b      	mov	r3, r1
 8084766:	4640      	mov	r0, r8
 8084768:	4649      	mov	r1, r9
 808476a:	f7fe ff9b 	bl	80836a4 <__adddf3>
 808476e:	4680      	mov	r8, r0
 8084770:	4689      	mov	r9, r1
 8084772:	2c0f      	cmp	r4, #15
 8084774:	dc36      	bgt.n	80847e4 <_strtod_l+0x444>
 8084776:	9b07      	ldr	r3, [sp, #28]
 8084778:	2b00      	cmp	r3, #0
 808477a:	f43f ae52 	beq.w	8084422 <_strtod_l+0x82>
 808477e:	dd22      	ble.n	80847c6 <_strtod_l+0x426>
 8084780:	2b16      	cmp	r3, #22
 8084782:	dc09      	bgt.n	8084798 <_strtod_l+0x3f8>
 8084784:	4c6a      	ldr	r4, [pc, #424]	; (8084930 <_strtod_l+0x590>)
 8084786:	4642      	mov	r2, r8
 8084788:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 808478c:	464b      	mov	r3, r9
 808478e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8084792:	f7ff f93d 	bl	8083a10 <__aeabi_dmul>
 8084796:	e7c3      	b.n	8084720 <_strtod_l+0x380>
 8084798:	9a07      	ldr	r2, [sp, #28]
 808479a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808479e:	4293      	cmp	r3, r2
 80847a0:	db20      	blt.n	80847e4 <_strtod_l+0x444>
 80847a2:	4d63      	ldr	r5, [pc, #396]	; (8084930 <_strtod_l+0x590>)
 80847a4:	f1c4 040f 	rsb	r4, r4, #15
 80847a8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80847ac:	4642      	mov	r2, r8
 80847ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80847b2:	464b      	mov	r3, r9
 80847b4:	f7ff f92c 	bl	8083a10 <__aeabi_dmul>
 80847b8:	9b07      	ldr	r3, [sp, #28]
 80847ba:	1b1c      	subs	r4, r3, r4
 80847bc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80847c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80847c4:	e7e5      	b.n	8084792 <_strtod_l+0x3f2>
 80847c6:	9b07      	ldr	r3, [sp, #28]
 80847c8:	3316      	adds	r3, #22
 80847ca:	db0b      	blt.n	80847e4 <_strtod_l+0x444>
 80847cc:	9b04      	ldr	r3, [sp, #16]
 80847ce:	4a58      	ldr	r2, [pc, #352]	; (8084930 <_strtod_l+0x590>)
 80847d0:	1b5d      	subs	r5, r3, r5
 80847d2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80847d6:	4640      	mov	r0, r8
 80847d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80847dc:	4649      	mov	r1, r9
 80847de:	f7ff fa41 	bl	8083c64 <__aeabi_ddiv>
 80847e2:	e79d      	b.n	8084720 <_strtod_l+0x380>
 80847e4:	9b07      	ldr	r3, [sp, #28]
 80847e6:	1ba6      	subs	r6, r4, r6
 80847e8:	441e      	add	r6, r3
 80847ea:	2e00      	cmp	r6, #0
 80847ec:	dd71      	ble.n	80848d2 <_strtod_l+0x532>
 80847ee:	f016 030f 	ands.w	r3, r6, #15
 80847f2:	d00a      	beq.n	808480a <_strtod_l+0x46a>
 80847f4:	494e      	ldr	r1, [pc, #312]	; (8084930 <_strtod_l+0x590>)
 80847f6:	4642      	mov	r2, r8
 80847f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80847fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084800:	464b      	mov	r3, r9
 8084802:	f7ff f905 	bl	8083a10 <__aeabi_dmul>
 8084806:	4680      	mov	r8, r0
 8084808:	4689      	mov	r9, r1
 808480a:	f036 060f 	bics.w	r6, r6, #15
 808480e:	d050      	beq.n	80848b2 <_strtod_l+0x512>
 8084810:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8084814:	dd27      	ble.n	8084866 <_strtod_l+0x4c6>
 8084816:	f04f 0b00 	mov.w	fp, #0
 808481a:	f8cd b010 	str.w	fp, [sp, #16]
 808481e:	f8cd b020 	str.w	fp, [sp, #32]
 8084822:	f8cd b018 	str.w	fp, [sp, #24]
 8084826:	2322      	movs	r3, #34	; 0x22
 8084828:	f04f 0800 	mov.w	r8, #0
 808482c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8084938 <_strtod_l+0x598>
 8084830:	f8ca 3000 	str.w	r3, [sl]
 8084834:	9b08      	ldr	r3, [sp, #32]
 8084836:	2b00      	cmp	r3, #0
 8084838:	f43f adf3 	beq.w	8084422 <_strtod_l+0x82>
 808483c:	4650      	mov	r0, sl
 808483e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084840:	f001 f812 	bl	8085868 <_Bfree>
 8084844:	4650      	mov	r0, sl
 8084846:	9906      	ldr	r1, [sp, #24]
 8084848:	f001 f80e 	bl	8085868 <_Bfree>
 808484c:	4650      	mov	r0, sl
 808484e:	9904      	ldr	r1, [sp, #16]
 8084850:	f001 f80a 	bl	8085868 <_Bfree>
 8084854:	4650      	mov	r0, sl
 8084856:	9908      	ldr	r1, [sp, #32]
 8084858:	f001 f806 	bl	8085868 <_Bfree>
 808485c:	4659      	mov	r1, fp
 808485e:	4650      	mov	r0, sl
 8084860:	f001 f802 	bl	8085868 <_Bfree>
 8084864:	e5dd      	b.n	8084422 <_strtod_l+0x82>
 8084866:	2300      	movs	r3, #0
 8084868:	4640      	mov	r0, r8
 808486a:	4649      	mov	r1, r9
 808486c:	461f      	mov	r7, r3
 808486e:	1136      	asrs	r6, r6, #4
 8084870:	2e01      	cmp	r6, #1
 8084872:	dc21      	bgt.n	80848b8 <_strtod_l+0x518>
 8084874:	b10b      	cbz	r3, 808487a <_strtod_l+0x4da>
 8084876:	4680      	mov	r8, r0
 8084878:	4689      	mov	r9, r1
 808487a:	4b2e      	ldr	r3, [pc, #184]	; (8084934 <_strtod_l+0x594>)
 808487c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8084880:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8084884:	4642      	mov	r2, r8
 8084886:	e9d7 0100 	ldrd	r0, r1, [r7]
 808488a:	464b      	mov	r3, r9
 808488c:	f7ff f8c0 	bl	8083a10 <__aeabi_dmul>
 8084890:	4b29      	ldr	r3, [pc, #164]	; (8084938 <_strtod_l+0x598>)
 8084892:	460a      	mov	r2, r1
 8084894:	400b      	ands	r3, r1
 8084896:	4929      	ldr	r1, [pc, #164]	; (808493c <_strtod_l+0x59c>)
 8084898:	4680      	mov	r8, r0
 808489a:	428b      	cmp	r3, r1
 808489c:	d8bb      	bhi.n	8084816 <_strtod_l+0x476>
 808489e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80848a2:	428b      	cmp	r3, r1
 80848a4:	bf86      	itte	hi
 80848a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80848aa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8084940 <_strtod_l+0x5a0>
 80848ae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80848b2:	2300      	movs	r3, #0
 80848b4:	9305      	str	r3, [sp, #20]
 80848b6:	e07e      	b.n	80849b6 <_strtod_l+0x616>
 80848b8:	07f2      	lsls	r2, r6, #31
 80848ba:	d507      	bpl.n	80848cc <_strtod_l+0x52c>
 80848bc:	4b1d      	ldr	r3, [pc, #116]	; (8084934 <_strtod_l+0x594>)
 80848be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80848c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848c6:	f7ff f8a3 	bl	8083a10 <__aeabi_dmul>
 80848ca:	2301      	movs	r3, #1
 80848cc:	3701      	adds	r7, #1
 80848ce:	1076      	asrs	r6, r6, #1
 80848d0:	e7ce      	b.n	8084870 <_strtod_l+0x4d0>
 80848d2:	d0ee      	beq.n	80848b2 <_strtod_l+0x512>
 80848d4:	4276      	negs	r6, r6
 80848d6:	f016 020f 	ands.w	r2, r6, #15
 80848da:	d00a      	beq.n	80848f2 <_strtod_l+0x552>
 80848dc:	4b14      	ldr	r3, [pc, #80]	; (8084930 <_strtod_l+0x590>)
 80848de:	4640      	mov	r0, r8
 80848e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80848e4:	4649      	mov	r1, r9
 80848e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848ea:	f7ff f9bb 	bl	8083c64 <__aeabi_ddiv>
 80848ee:	4680      	mov	r8, r0
 80848f0:	4689      	mov	r9, r1
 80848f2:	1136      	asrs	r6, r6, #4
 80848f4:	d0dd      	beq.n	80848b2 <_strtod_l+0x512>
 80848f6:	2e1f      	cmp	r6, #31
 80848f8:	dd24      	ble.n	8084944 <_strtod_l+0x5a4>
 80848fa:	f04f 0b00 	mov.w	fp, #0
 80848fe:	f8cd b010 	str.w	fp, [sp, #16]
 8084902:	f8cd b020 	str.w	fp, [sp, #32]
 8084906:	f8cd b018 	str.w	fp, [sp, #24]
 808490a:	2322      	movs	r3, #34	; 0x22
 808490c:	f04f 0800 	mov.w	r8, #0
 8084910:	f04f 0900 	mov.w	r9, #0
 8084914:	f8ca 3000 	str.w	r3, [sl]
 8084918:	e78c      	b.n	8084834 <_strtod_l+0x494>
 808491a:	bf00      	nop
 808491c:	08086623 	.word	0x08086623
 8084920:	0808663c 	.word	0x0808663c
 8084924:	0808661a 	.word	0x0808661a
 8084928:	0808661d 	.word	0x0808661d
 808492c:	0808643d 	.word	0x0808643d
 8084930:	080867b8 	.word	0x080867b8
 8084934:	08086790 	.word	0x08086790
 8084938:	7ff00000 	.word	0x7ff00000
 808493c:	7ca00000 	.word	0x7ca00000
 8084940:	7fefffff 	.word	0x7fefffff
 8084944:	f016 0310 	ands.w	r3, r6, #16
 8084948:	bf18      	it	ne
 808494a:	236a      	movne	r3, #106	; 0x6a
 808494c:	4640      	mov	r0, r8
 808494e:	9305      	str	r3, [sp, #20]
 8084950:	4649      	mov	r1, r9
 8084952:	2300      	movs	r3, #0
 8084954:	4fb2      	ldr	r7, [pc, #712]	; (8084c20 <_strtod_l+0x880>)
 8084956:	07f2      	lsls	r2, r6, #31
 8084958:	d504      	bpl.n	8084964 <_strtod_l+0x5c4>
 808495a:	e9d7 2300 	ldrd	r2, r3, [r7]
 808495e:	f7ff f857 	bl	8083a10 <__aeabi_dmul>
 8084962:	2301      	movs	r3, #1
 8084964:	1076      	asrs	r6, r6, #1
 8084966:	f107 0708 	add.w	r7, r7, #8
 808496a:	d1f4      	bne.n	8084956 <_strtod_l+0x5b6>
 808496c:	b10b      	cbz	r3, 8084972 <_strtod_l+0x5d2>
 808496e:	4680      	mov	r8, r0
 8084970:	4689      	mov	r9, r1
 8084972:	9b05      	ldr	r3, [sp, #20]
 8084974:	b1bb      	cbz	r3, 80849a6 <_strtod_l+0x606>
 8084976:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808497a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808497e:	2b00      	cmp	r3, #0
 8084980:	4649      	mov	r1, r9
 8084982:	dd10      	ble.n	80849a6 <_strtod_l+0x606>
 8084984:	2b1f      	cmp	r3, #31
 8084986:	f340 812b 	ble.w	8084be0 <_strtod_l+0x840>
 808498a:	2b34      	cmp	r3, #52	; 0x34
 808498c:	bfd8      	it	le
 808498e:	f04f 32ff 	movle.w	r2, #4294967295
 8084992:	f04f 0800 	mov.w	r8, #0
 8084996:	bfcf      	iteee	gt
 8084998:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808499c:	3b20      	suble	r3, #32
 808499e:	fa02 f303 	lslle.w	r3, r2, r3
 80849a2:	ea03 0901 	andle.w	r9, r3, r1
 80849a6:	2200      	movs	r2, #0
 80849a8:	2300      	movs	r3, #0
 80849aa:	4640      	mov	r0, r8
 80849ac:	4649      	mov	r1, r9
 80849ae:	f7ff fa97 	bl	8083ee0 <__aeabi_dcmpeq>
 80849b2:	2800      	cmp	r0, #0
 80849b4:	d1a1      	bne.n	80848fa <_strtod_l+0x55a>
 80849b6:	9b06      	ldr	r3, [sp, #24]
 80849b8:	465a      	mov	r2, fp
 80849ba:	9300      	str	r3, [sp, #0]
 80849bc:	4650      	mov	r0, sl
 80849be:	4623      	mov	r3, r4
 80849c0:	9908      	ldr	r1, [sp, #32]
 80849c2:	f000 ffa6 	bl	8085912 <__s2b>
 80849c6:	9008      	str	r0, [sp, #32]
 80849c8:	2800      	cmp	r0, #0
 80849ca:	f43f af24 	beq.w	8084816 <_strtod_l+0x476>
 80849ce:	9b04      	ldr	r3, [sp, #16]
 80849d0:	f04f 0b00 	mov.w	fp, #0
 80849d4:	1b5d      	subs	r5, r3, r5
 80849d6:	9b07      	ldr	r3, [sp, #28]
 80849d8:	f8cd b010 	str.w	fp, [sp, #16]
 80849dc:	2b00      	cmp	r3, #0
 80849de:	bfb4      	ite	lt
 80849e0:	462b      	movlt	r3, r5
 80849e2:	2300      	movge	r3, #0
 80849e4:	930e      	str	r3, [sp, #56]	; 0x38
 80849e6:	9b07      	ldr	r3, [sp, #28]
 80849e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80849ec:	9316      	str	r3, [sp, #88]	; 0x58
 80849ee:	9b08      	ldr	r3, [sp, #32]
 80849f0:	4650      	mov	r0, sl
 80849f2:	6859      	ldr	r1, [r3, #4]
 80849f4:	f000 ff04 	bl	8085800 <_Balloc>
 80849f8:	9006      	str	r0, [sp, #24]
 80849fa:	2800      	cmp	r0, #0
 80849fc:	f43f af13 	beq.w	8084826 <_strtod_l+0x486>
 8084a00:	9b08      	ldr	r3, [sp, #32]
 8084a02:	300c      	adds	r0, #12
 8084a04:	691a      	ldr	r2, [r3, #16]
 8084a06:	f103 010c 	add.w	r1, r3, #12
 8084a0a:	3202      	adds	r2, #2
 8084a0c:	0092      	lsls	r2, r2, #2
 8084a0e:	f7ff fbeb 	bl	80841e8 <memcpy>
 8084a12:	ab1e      	add	r3, sp, #120	; 0x78
 8084a14:	9301      	str	r3, [sp, #4]
 8084a16:	ab1d      	add	r3, sp, #116	; 0x74
 8084a18:	9300      	str	r3, [sp, #0]
 8084a1a:	4642      	mov	r2, r8
 8084a1c:	464b      	mov	r3, r9
 8084a1e:	4650      	mov	r0, sl
 8084a20:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8084a24:	f001 fa64 	bl	8085ef0 <__d2b>
 8084a28:	901c      	str	r0, [sp, #112]	; 0x70
 8084a2a:	2800      	cmp	r0, #0
 8084a2c:	f43f aefb 	beq.w	8084826 <_strtod_l+0x486>
 8084a30:	2101      	movs	r1, #1
 8084a32:	4650      	mov	r0, sl
 8084a34:	f000 fff9 	bl	8085a2a <__i2b>
 8084a38:	4603      	mov	r3, r0
 8084a3a:	9004      	str	r0, [sp, #16]
 8084a3c:	2800      	cmp	r0, #0
 8084a3e:	f43f aef2 	beq.w	8084826 <_strtod_l+0x486>
 8084a42:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8084a44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8084a46:	2d00      	cmp	r5, #0
 8084a48:	bfab      	itete	ge
 8084a4a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8084a4c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8084a4e:	18ee      	addge	r6, r5, r3
 8084a50:	1b5c      	sublt	r4, r3, r5
 8084a52:	9b05      	ldr	r3, [sp, #20]
 8084a54:	bfa8      	it	ge
 8084a56:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8084a58:	eba5 0503 	sub.w	r5, r5, r3
 8084a5c:	4415      	add	r5, r2
 8084a5e:	4b71      	ldr	r3, [pc, #452]	; (8084c24 <_strtod_l+0x884>)
 8084a60:	f105 35ff 	add.w	r5, r5, #4294967295
 8084a64:	bfb8      	it	lt
 8084a66:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8084a68:	429d      	cmp	r5, r3
 8084a6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8084a6e:	f280 80c9 	bge.w	8084c04 <_strtod_l+0x864>
 8084a72:	1b5b      	subs	r3, r3, r5
 8084a74:	2b1f      	cmp	r3, #31
 8084a76:	f04f 0701 	mov.w	r7, #1
 8084a7a:	eba2 0203 	sub.w	r2, r2, r3
 8084a7e:	f300 80b6 	bgt.w	8084bee <_strtod_l+0x84e>
 8084a82:	2500      	movs	r5, #0
 8084a84:	fa07 f303 	lsl.w	r3, r7, r3
 8084a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8084a8a:	18b7      	adds	r7, r6, r2
 8084a8c:	9b05      	ldr	r3, [sp, #20]
 8084a8e:	42be      	cmp	r6, r7
 8084a90:	4414      	add	r4, r2
 8084a92:	441c      	add	r4, r3
 8084a94:	4633      	mov	r3, r6
 8084a96:	bfa8      	it	ge
 8084a98:	463b      	movge	r3, r7
 8084a9a:	42a3      	cmp	r3, r4
 8084a9c:	bfa8      	it	ge
 8084a9e:	4623      	movge	r3, r4
 8084aa0:	2b00      	cmp	r3, #0
 8084aa2:	bfc2      	ittt	gt
 8084aa4:	1aff      	subgt	r7, r7, r3
 8084aa6:	1ae4      	subgt	r4, r4, r3
 8084aa8:	1af6      	subgt	r6, r6, r3
 8084aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8084aac:	2b00      	cmp	r3, #0
 8084aae:	dd17      	ble.n	8084ae0 <_strtod_l+0x740>
 8084ab0:	461a      	mov	r2, r3
 8084ab2:	4650      	mov	r0, sl
 8084ab4:	9904      	ldr	r1, [sp, #16]
 8084ab6:	f001 f85d 	bl	8085b74 <__pow5mult>
 8084aba:	9004      	str	r0, [sp, #16]
 8084abc:	2800      	cmp	r0, #0
 8084abe:	f43f aeb2 	beq.w	8084826 <_strtod_l+0x486>
 8084ac2:	4601      	mov	r1, r0
 8084ac4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8084ac6:	4650      	mov	r0, sl
 8084ac8:	f000 ffb8 	bl	8085a3c <__multiply>
 8084acc:	9009      	str	r0, [sp, #36]	; 0x24
 8084ace:	2800      	cmp	r0, #0
 8084ad0:	f43f aea9 	beq.w	8084826 <_strtod_l+0x486>
 8084ad4:	4650      	mov	r0, sl
 8084ad6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084ad8:	f000 fec6 	bl	8085868 <_Bfree>
 8084adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084ade:	931c      	str	r3, [sp, #112]	; 0x70
 8084ae0:	2f00      	cmp	r7, #0
 8084ae2:	f300 8093 	bgt.w	8084c0c <_strtod_l+0x86c>
 8084ae6:	9b07      	ldr	r3, [sp, #28]
 8084ae8:	2b00      	cmp	r3, #0
 8084aea:	dd08      	ble.n	8084afe <_strtod_l+0x75e>
 8084aec:	4650      	mov	r0, sl
 8084aee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8084af0:	9906      	ldr	r1, [sp, #24]
 8084af2:	f001 f83f 	bl	8085b74 <__pow5mult>
 8084af6:	9006      	str	r0, [sp, #24]
 8084af8:	2800      	cmp	r0, #0
 8084afa:	f43f ae94 	beq.w	8084826 <_strtod_l+0x486>
 8084afe:	2c00      	cmp	r4, #0
 8084b00:	dd08      	ble.n	8084b14 <_strtod_l+0x774>
 8084b02:	4622      	mov	r2, r4
 8084b04:	4650      	mov	r0, sl
 8084b06:	9906      	ldr	r1, [sp, #24]
 8084b08:	f001 f882 	bl	8085c10 <__lshift>
 8084b0c:	9006      	str	r0, [sp, #24]
 8084b0e:	2800      	cmp	r0, #0
 8084b10:	f43f ae89 	beq.w	8084826 <_strtod_l+0x486>
 8084b14:	2e00      	cmp	r6, #0
 8084b16:	dd08      	ble.n	8084b2a <_strtod_l+0x78a>
 8084b18:	4632      	mov	r2, r6
 8084b1a:	4650      	mov	r0, sl
 8084b1c:	9904      	ldr	r1, [sp, #16]
 8084b1e:	f001 f877 	bl	8085c10 <__lshift>
 8084b22:	9004      	str	r0, [sp, #16]
 8084b24:	2800      	cmp	r0, #0
 8084b26:	f43f ae7e 	beq.w	8084826 <_strtod_l+0x486>
 8084b2a:	4650      	mov	r0, sl
 8084b2c:	9a06      	ldr	r2, [sp, #24]
 8084b2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084b30:	f001 f8e8 	bl	8085d04 <__mdiff>
 8084b34:	4683      	mov	fp, r0
 8084b36:	2800      	cmp	r0, #0
 8084b38:	f43f ae75 	beq.w	8084826 <_strtod_l+0x486>
 8084b3c:	2400      	movs	r4, #0
 8084b3e:	68c3      	ldr	r3, [r0, #12]
 8084b40:	9904      	ldr	r1, [sp, #16]
 8084b42:	60c4      	str	r4, [r0, #12]
 8084b44:	930d      	str	r3, [sp, #52]	; 0x34
 8084b46:	f001 f8c2 	bl	8085cce <__mcmp>
 8084b4a:	42a0      	cmp	r0, r4
 8084b4c:	da70      	bge.n	8084c30 <_strtod_l+0x890>
 8084b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084b50:	ea53 0308 	orrs.w	r3, r3, r8
 8084b54:	f040 8096 	bne.w	8084c84 <_strtod_l+0x8e4>
 8084b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8084b5c:	2b00      	cmp	r3, #0
 8084b5e:	f040 8091 	bne.w	8084c84 <_strtod_l+0x8e4>
 8084b62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8084b66:	0d1b      	lsrs	r3, r3, #20
 8084b68:	051b      	lsls	r3, r3, #20
 8084b6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8084b6e:	f240 8089 	bls.w	8084c84 <_strtod_l+0x8e4>
 8084b72:	f8db 3014 	ldr.w	r3, [fp, #20]
 8084b76:	b923      	cbnz	r3, 8084b82 <_strtod_l+0x7e2>
 8084b78:	f8db 3010 	ldr.w	r3, [fp, #16]
 8084b7c:	2b01      	cmp	r3, #1
 8084b7e:	f340 8081 	ble.w	8084c84 <_strtod_l+0x8e4>
 8084b82:	4659      	mov	r1, fp
 8084b84:	2201      	movs	r2, #1
 8084b86:	4650      	mov	r0, sl
 8084b88:	f001 f842 	bl	8085c10 <__lshift>
 8084b8c:	9904      	ldr	r1, [sp, #16]
 8084b8e:	4683      	mov	fp, r0
 8084b90:	f001 f89d 	bl	8085cce <__mcmp>
 8084b94:	2800      	cmp	r0, #0
 8084b96:	dd75      	ble.n	8084c84 <_strtod_l+0x8e4>
 8084b98:	9905      	ldr	r1, [sp, #20]
 8084b9a:	464b      	mov	r3, r9
 8084b9c:	4a22      	ldr	r2, [pc, #136]	; (8084c28 <_strtod_l+0x888>)
 8084b9e:	2900      	cmp	r1, #0
 8084ba0:	f000 8091 	beq.w	8084cc6 <_strtod_l+0x926>
 8084ba4:	ea02 0109 	and.w	r1, r2, r9
 8084ba8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8084bac:	f300 808b 	bgt.w	8084cc6 <_strtod_l+0x926>
 8084bb0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8084bb4:	f77f aea9 	ble.w	808490a <_strtod_l+0x56a>
 8084bb8:	2300      	movs	r3, #0
 8084bba:	4a1c      	ldr	r2, [pc, #112]	; (8084c2c <_strtod_l+0x88c>)
 8084bbc:	4640      	mov	r0, r8
 8084bbe:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8084bc2:	4649      	mov	r1, r9
 8084bc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8084bc8:	f7fe ff22 	bl	8083a10 <__aeabi_dmul>
 8084bcc:	460b      	mov	r3, r1
 8084bce:	4303      	orrs	r3, r0
 8084bd0:	bf08      	it	eq
 8084bd2:	2322      	moveq	r3, #34	; 0x22
 8084bd4:	4680      	mov	r8, r0
 8084bd6:	4689      	mov	r9, r1
 8084bd8:	bf08      	it	eq
 8084bda:	f8ca 3000 	streq.w	r3, [sl]
 8084bde:	e62d      	b.n	808483c <_strtod_l+0x49c>
 8084be0:	f04f 32ff 	mov.w	r2, #4294967295
 8084be4:	fa02 f303 	lsl.w	r3, r2, r3
 8084be8:	ea03 0808 	and.w	r8, r3, r8
 8084bec:	e6db      	b.n	80849a6 <_strtod_l+0x606>
 8084bee:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8084bf2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8084bf6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8084bfa:	35e2      	adds	r5, #226	; 0xe2
 8084bfc:	fa07 f505 	lsl.w	r5, r7, r5
 8084c00:	970f      	str	r7, [sp, #60]	; 0x3c
 8084c02:	e742      	b.n	8084a8a <_strtod_l+0x6ea>
 8084c04:	2301      	movs	r3, #1
 8084c06:	2500      	movs	r5, #0
 8084c08:	930f      	str	r3, [sp, #60]	; 0x3c
 8084c0a:	e73e      	b.n	8084a8a <_strtod_l+0x6ea>
 8084c0c:	463a      	mov	r2, r7
 8084c0e:	4650      	mov	r0, sl
 8084c10:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084c12:	f000 fffd 	bl	8085c10 <__lshift>
 8084c16:	901c      	str	r0, [sp, #112]	; 0x70
 8084c18:	2800      	cmp	r0, #0
 8084c1a:	f47f af64 	bne.w	8084ae6 <_strtod_l+0x746>
 8084c1e:	e602      	b.n	8084826 <_strtod_l+0x486>
 8084c20:	08086650 	.word	0x08086650
 8084c24:	fffffc02 	.word	0xfffffc02
 8084c28:	7ff00000 	.word	0x7ff00000
 8084c2c:	39500000 	.word	0x39500000
 8084c30:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8084c34:	d166      	bne.n	8084d04 <_strtod_l+0x964>
 8084c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8084c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8084c3c:	b35a      	cbz	r2, 8084c96 <_strtod_l+0x8f6>
 8084c3e:	4a9c      	ldr	r2, [pc, #624]	; (8084eb0 <_strtod_l+0xb10>)
 8084c40:	4293      	cmp	r3, r2
 8084c42:	d12c      	bne.n	8084c9e <_strtod_l+0x8fe>
 8084c44:	9b05      	ldr	r3, [sp, #20]
 8084c46:	4640      	mov	r0, r8
 8084c48:	b303      	cbz	r3, 8084c8c <_strtod_l+0x8ec>
 8084c4a:	464b      	mov	r3, r9
 8084c4c:	4a99      	ldr	r2, [pc, #612]	; (8084eb4 <_strtod_l+0xb14>)
 8084c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8084c52:	401a      	ands	r2, r3
 8084c54:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8084c58:	d81b      	bhi.n	8084c92 <_strtod_l+0x8f2>
 8084c5a:	0d12      	lsrs	r2, r2, #20
 8084c5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8084c60:	fa01 f303 	lsl.w	r3, r1, r3
 8084c64:	4298      	cmp	r0, r3
 8084c66:	d11a      	bne.n	8084c9e <_strtod_l+0x8fe>
 8084c68:	4b93      	ldr	r3, [pc, #588]	; (8084eb8 <_strtod_l+0xb18>)
 8084c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8084c6c:	429a      	cmp	r2, r3
 8084c6e:	d102      	bne.n	8084c76 <_strtod_l+0x8d6>
 8084c70:	3001      	adds	r0, #1
 8084c72:	f43f add8 	beq.w	8084826 <_strtod_l+0x486>
 8084c76:	f04f 0800 	mov.w	r8, #0
 8084c7a:	4b8e      	ldr	r3, [pc, #568]	; (8084eb4 <_strtod_l+0xb14>)
 8084c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8084c7e:	401a      	ands	r2, r3
 8084c80:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8084c84:	9b05      	ldr	r3, [sp, #20]
 8084c86:	2b00      	cmp	r3, #0
 8084c88:	d196      	bne.n	8084bb8 <_strtod_l+0x818>
 8084c8a:	e5d7      	b.n	808483c <_strtod_l+0x49c>
 8084c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8084c90:	e7e8      	b.n	8084c64 <_strtod_l+0x8c4>
 8084c92:	460b      	mov	r3, r1
 8084c94:	e7e6      	b.n	8084c64 <_strtod_l+0x8c4>
 8084c96:	ea53 0308 	orrs.w	r3, r3, r8
 8084c9a:	f43f af7d 	beq.w	8084b98 <_strtod_l+0x7f8>
 8084c9e:	b1e5      	cbz	r5, 8084cda <_strtod_l+0x93a>
 8084ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084ca2:	421d      	tst	r5, r3
 8084ca4:	d0ee      	beq.n	8084c84 <_strtod_l+0x8e4>
 8084ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084ca8:	4640      	mov	r0, r8
 8084caa:	4649      	mov	r1, r9
 8084cac:	9a05      	ldr	r2, [sp, #20]
 8084cae:	b1c3      	cbz	r3, 8084ce2 <_strtod_l+0x942>
 8084cb0:	f7ff fb53 	bl	808435a <sulp>
 8084cb4:	4602      	mov	r2, r0
 8084cb6:	460b      	mov	r3, r1
 8084cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084cbc:	f7fe fcf2 	bl	80836a4 <__adddf3>
 8084cc0:	4680      	mov	r8, r0
 8084cc2:	4689      	mov	r9, r1
 8084cc4:	e7de      	b.n	8084c84 <_strtod_l+0x8e4>
 8084cc6:	4013      	ands	r3, r2
 8084cc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8084ccc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8084cd0:	f04f 38ff 	mov.w	r8, #4294967295
 8084cd4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8084cd8:	e7d4      	b.n	8084c84 <_strtod_l+0x8e4>
 8084cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8084cdc:	ea13 0f08 	tst.w	r3, r8
 8084ce0:	e7e0      	b.n	8084ca4 <_strtod_l+0x904>
 8084ce2:	f7ff fb3a 	bl	808435a <sulp>
 8084ce6:	4602      	mov	r2, r0
 8084ce8:	460b      	mov	r3, r1
 8084cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084cee:	f7fe fcd7 	bl	80836a0 <__aeabi_dsub>
 8084cf2:	2200      	movs	r2, #0
 8084cf4:	2300      	movs	r3, #0
 8084cf6:	4680      	mov	r8, r0
 8084cf8:	4689      	mov	r9, r1
 8084cfa:	f7ff f8f1 	bl	8083ee0 <__aeabi_dcmpeq>
 8084cfe:	2800      	cmp	r0, #0
 8084d00:	d0c0      	beq.n	8084c84 <_strtod_l+0x8e4>
 8084d02:	e602      	b.n	808490a <_strtod_l+0x56a>
 8084d04:	4658      	mov	r0, fp
 8084d06:	9904      	ldr	r1, [sp, #16]
 8084d08:	f001 f941 	bl	8085f8e <__ratio>
 8084d0c:	2200      	movs	r2, #0
 8084d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8084d12:	4606      	mov	r6, r0
 8084d14:	460f      	mov	r7, r1
 8084d16:	f7ff f8f7 	bl	8083f08 <__aeabi_dcmple>
 8084d1a:	2800      	cmp	r0, #0
 8084d1c:	d075      	beq.n	8084e0a <_strtod_l+0xa6a>
 8084d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084d20:	2b00      	cmp	r3, #0
 8084d22:	d047      	beq.n	8084db4 <_strtod_l+0xa14>
 8084d24:	2600      	movs	r6, #0
 8084d26:	4f65      	ldr	r7, [pc, #404]	; (8084ebc <_strtod_l+0xb1c>)
 8084d28:	4d64      	ldr	r5, [pc, #400]	; (8084ebc <_strtod_l+0xb1c>)
 8084d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8084d30:	0d1b      	lsrs	r3, r3, #20
 8084d32:	051b      	lsls	r3, r3, #20
 8084d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8084d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084d38:	4b61      	ldr	r3, [pc, #388]	; (8084ec0 <_strtod_l+0xb20>)
 8084d3a:	429a      	cmp	r2, r3
 8084d3c:	f040 80c8 	bne.w	8084ed0 <_strtod_l+0xb30>
 8084d40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8084d44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8084d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084d4a:	4640      	mov	r0, r8
 8084d4c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8084d50:	4649      	mov	r1, r9
 8084d52:	f001 f853 	bl	8085dfc <__ulp>
 8084d56:	4602      	mov	r2, r0
 8084d58:	460b      	mov	r3, r1
 8084d5a:	4630      	mov	r0, r6
 8084d5c:	4639      	mov	r1, r7
 8084d5e:	f7fe fe57 	bl	8083a10 <__aeabi_dmul>
 8084d62:	4642      	mov	r2, r8
 8084d64:	464b      	mov	r3, r9
 8084d66:	f7fe fc9d 	bl	80836a4 <__adddf3>
 8084d6a:	460b      	mov	r3, r1
 8084d6c:	4951      	ldr	r1, [pc, #324]	; (8084eb4 <_strtod_l+0xb14>)
 8084d6e:	4a55      	ldr	r2, [pc, #340]	; (8084ec4 <_strtod_l+0xb24>)
 8084d70:	4019      	ands	r1, r3
 8084d72:	4291      	cmp	r1, r2
 8084d74:	4680      	mov	r8, r0
 8084d76:	d95e      	bls.n	8084e36 <_strtod_l+0xa96>
 8084d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8084d7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8084d7e:	4293      	cmp	r3, r2
 8084d80:	d103      	bne.n	8084d8a <_strtod_l+0x9ea>
 8084d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084d84:	3301      	adds	r3, #1
 8084d86:	f43f ad4e 	beq.w	8084826 <_strtod_l+0x486>
 8084d8a:	f04f 38ff 	mov.w	r8, #4294967295
 8084d8e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8084eb8 <_strtod_l+0xb18>
 8084d92:	4650      	mov	r0, sl
 8084d94:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084d96:	f000 fd67 	bl	8085868 <_Bfree>
 8084d9a:	4650      	mov	r0, sl
 8084d9c:	9906      	ldr	r1, [sp, #24]
 8084d9e:	f000 fd63 	bl	8085868 <_Bfree>
 8084da2:	4650      	mov	r0, sl
 8084da4:	9904      	ldr	r1, [sp, #16]
 8084da6:	f000 fd5f 	bl	8085868 <_Bfree>
 8084daa:	4659      	mov	r1, fp
 8084dac:	4650      	mov	r0, sl
 8084dae:	f000 fd5b 	bl	8085868 <_Bfree>
 8084db2:	e61c      	b.n	80849ee <_strtod_l+0x64e>
 8084db4:	f1b8 0f00 	cmp.w	r8, #0
 8084db8:	d119      	bne.n	8084dee <_strtod_l+0xa4e>
 8084dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8084dc0:	b9e3      	cbnz	r3, 8084dfc <_strtod_l+0xa5c>
 8084dc2:	2200      	movs	r2, #0
 8084dc4:	4630      	mov	r0, r6
 8084dc6:	4639      	mov	r1, r7
 8084dc8:	4b3c      	ldr	r3, [pc, #240]	; (8084ebc <_strtod_l+0xb1c>)
 8084dca:	f7ff f893 	bl	8083ef4 <__aeabi_dcmplt>
 8084dce:	b9c8      	cbnz	r0, 8084e04 <_strtod_l+0xa64>
 8084dd0:	2200      	movs	r2, #0
 8084dd2:	4630      	mov	r0, r6
 8084dd4:	4639      	mov	r1, r7
 8084dd6:	4b3c      	ldr	r3, [pc, #240]	; (8084ec8 <_strtod_l+0xb28>)
 8084dd8:	f7fe fe1a 	bl	8083a10 <__aeabi_dmul>
 8084ddc:	4604      	mov	r4, r0
 8084dde:	460d      	mov	r5, r1
 8084de0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8084de4:	9418      	str	r4, [sp, #96]	; 0x60
 8084de6:	9319      	str	r3, [sp, #100]	; 0x64
 8084de8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8084dec:	e79d      	b.n	8084d2a <_strtod_l+0x98a>
 8084dee:	f1b8 0f01 	cmp.w	r8, #1
 8084df2:	d103      	bne.n	8084dfc <_strtod_l+0xa5c>
 8084df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084df6:	2b00      	cmp	r3, #0
 8084df8:	f43f ad87 	beq.w	808490a <_strtod_l+0x56a>
 8084dfc:	2600      	movs	r6, #0
 8084dfe:	2400      	movs	r4, #0
 8084e00:	4f32      	ldr	r7, [pc, #200]	; (8084ecc <_strtod_l+0xb2c>)
 8084e02:	e791      	b.n	8084d28 <_strtod_l+0x988>
 8084e04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8084e06:	4d30      	ldr	r5, [pc, #192]	; (8084ec8 <_strtod_l+0xb28>)
 8084e08:	e7ea      	b.n	8084de0 <_strtod_l+0xa40>
 8084e0a:	4b2f      	ldr	r3, [pc, #188]	; (8084ec8 <_strtod_l+0xb28>)
 8084e0c:	2200      	movs	r2, #0
 8084e0e:	4630      	mov	r0, r6
 8084e10:	4639      	mov	r1, r7
 8084e12:	f7fe fdfd 	bl	8083a10 <__aeabi_dmul>
 8084e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084e18:	4604      	mov	r4, r0
 8084e1a:	460d      	mov	r5, r1
 8084e1c:	b933      	cbnz	r3, 8084e2c <_strtod_l+0xa8c>
 8084e1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8084e22:	9010      	str	r0, [sp, #64]	; 0x40
 8084e24:	9311      	str	r3, [sp, #68]	; 0x44
 8084e26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8084e2a:	e77e      	b.n	8084d2a <_strtod_l+0x98a>
 8084e2c:	4602      	mov	r2, r0
 8084e2e:	460b      	mov	r3, r1
 8084e30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8084e34:	e7f7      	b.n	8084e26 <_strtod_l+0xa86>
 8084e36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8084e3a:	9b05      	ldr	r3, [sp, #20]
 8084e3c:	2b00      	cmp	r3, #0
 8084e3e:	d1a8      	bne.n	8084d92 <_strtod_l+0x9f2>
 8084e40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8084e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084e46:	0d1b      	lsrs	r3, r3, #20
 8084e48:	051b      	lsls	r3, r3, #20
 8084e4a:	429a      	cmp	r2, r3
 8084e4c:	d1a1      	bne.n	8084d92 <_strtod_l+0x9f2>
 8084e4e:	4620      	mov	r0, r4
 8084e50:	4629      	mov	r1, r5
 8084e52:	f001 f94b 	bl	80860ec <__aeabi_d2lz>
 8084e56:	f7fe fdad 	bl	80839b4 <__aeabi_l2d>
 8084e5a:	4602      	mov	r2, r0
 8084e5c:	460b      	mov	r3, r1
 8084e5e:	4620      	mov	r0, r4
 8084e60:	4629      	mov	r1, r5
 8084e62:	f7fe fc1d 	bl	80836a0 <__aeabi_dsub>
 8084e66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8084e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8084e6c:	ea43 0308 	orr.w	r3, r3, r8
 8084e70:	4313      	orrs	r3, r2
 8084e72:	4604      	mov	r4, r0
 8084e74:	460d      	mov	r5, r1
 8084e76:	d066      	beq.n	8084f46 <_strtod_l+0xba6>
 8084e78:	a309      	add	r3, pc, #36	; (adr r3, 8084ea0 <_strtod_l+0xb00>)
 8084e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084e7e:	f7ff f839 	bl	8083ef4 <__aeabi_dcmplt>
 8084e82:	2800      	cmp	r0, #0
 8084e84:	f47f acda 	bne.w	808483c <_strtod_l+0x49c>
 8084e88:	a307      	add	r3, pc, #28	; (adr r3, 8084ea8 <_strtod_l+0xb08>)
 8084e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084e8e:	4620      	mov	r0, r4
 8084e90:	4629      	mov	r1, r5
 8084e92:	f7ff f84d 	bl	8083f30 <__aeabi_dcmpgt>
 8084e96:	2800      	cmp	r0, #0
 8084e98:	f43f af7b 	beq.w	8084d92 <_strtod_l+0x9f2>
 8084e9c:	e4ce      	b.n	808483c <_strtod_l+0x49c>
 8084e9e:	bf00      	nop
 8084ea0:	94a03595 	.word	0x94a03595
 8084ea4:	3fdfffff 	.word	0x3fdfffff
 8084ea8:	35afe535 	.word	0x35afe535
 8084eac:	3fe00000 	.word	0x3fe00000
 8084eb0:	000fffff 	.word	0x000fffff
 8084eb4:	7ff00000 	.word	0x7ff00000
 8084eb8:	7fefffff 	.word	0x7fefffff
 8084ebc:	3ff00000 	.word	0x3ff00000
 8084ec0:	7fe00000 	.word	0x7fe00000
 8084ec4:	7c9fffff 	.word	0x7c9fffff
 8084ec8:	3fe00000 	.word	0x3fe00000
 8084ecc:	bff00000 	.word	0xbff00000
 8084ed0:	9b05      	ldr	r3, [sp, #20]
 8084ed2:	b313      	cbz	r3, 8084f1a <_strtod_l+0xb7a>
 8084ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8084ed6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8084eda:	d81e      	bhi.n	8084f1a <_strtod_l+0xb7a>
 8084edc:	a326      	add	r3, pc, #152	; (adr r3, 8084f78 <_strtod_l+0xbd8>)
 8084ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084ee2:	4620      	mov	r0, r4
 8084ee4:	4629      	mov	r1, r5
 8084ee6:	f7ff f80f 	bl	8083f08 <__aeabi_dcmple>
 8084eea:	b190      	cbz	r0, 8084f12 <_strtod_l+0xb72>
 8084eec:	4629      	mov	r1, r5
 8084eee:	4620      	mov	r0, r4
 8084ef0:	f7ff f83e 	bl	8083f70 <__aeabi_d2uiz>
 8084ef4:	2801      	cmp	r0, #1
 8084ef6:	bf38      	it	cc
 8084ef8:	2001      	movcc	r0, #1
 8084efa:	f7fe fd0f 	bl	808391c <__aeabi_ui2d>
 8084efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084f00:	4604      	mov	r4, r0
 8084f02:	460d      	mov	r5, r1
 8084f04:	b9d3      	cbnz	r3, 8084f3c <_strtod_l+0xb9c>
 8084f06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8084f0a:	9012      	str	r0, [sp, #72]	; 0x48
 8084f0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8084f0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8084f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084f14:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8084f18:	1a9f      	subs	r7, r3, r2
 8084f1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084f1e:	f000 ff6d 	bl	8085dfc <__ulp>
 8084f22:	4602      	mov	r2, r0
 8084f24:	460b      	mov	r3, r1
 8084f26:	4630      	mov	r0, r6
 8084f28:	4639      	mov	r1, r7
 8084f2a:	f7fe fd71 	bl	8083a10 <__aeabi_dmul>
 8084f2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8084f32:	f7fe fbb7 	bl	80836a4 <__adddf3>
 8084f36:	4680      	mov	r8, r0
 8084f38:	4689      	mov	r9, r1
 8084f3a:	e77e      	b.n	8084e3a <_strtod_l+0xa9a>
 8084f3c:	4602      	mov	r2, r0
 8084f3e:	460b      	mov	r3, r1
 8084f40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8084f44:	e7e3      	b.n	8084f0e <_strtod_l+0xb6e>
 8084f46:	a30e      	add	r3, pc, #56	; (adr r3, 8084f80 <_strtod_l+0xbe0>)
 8084f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084f4c:	f7fe ffd2 	bl	8083ef4 <__aeabi_dcmplt>
 8084f50:	e7a1      	b.n	8084e96 <_strtod_l+0xaf6>
 8084f52:	2300      	movs	r3, #0
 8084f54:	930c      	str	r3, [sp, #48]	; 0x30
 8084f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084f58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8084f5a:	6013      	str	r3, [r2, #0]
 8084f5c:	f7ff ba65 	b.w	808442a <_strtod_l+0x8a>
 8084f60:	2b65      	cmp	r3, #101	; 0x65
 8084f62:	f43f ab5c 	beq.w	808461e <_strtod_l+0x27e>
 8084f66:	2b45      	cmp	r3, #69	; 0x45
 8084f68:	f43f ab59 	beq.w	808461e <_strtod_l+0x27e>
 8084f6c:	2201      	movs	r2, #1
 8084f6e:	f7ff bb8d 	b.w	808468c <_strtod_l+0x2ec>
 8084f72:	bf00      	nop
 8084f74:	f3af 8000 	nop.w
 8084f78:	ffc00000 	.word	0xffc00000
 8084f7c:	41dfffff 	.word	0x41dfffff
 8084f80:	94a03595 	.word	0x94a03595
 8084f84:	3fcfffff 	.word	0x3fcfffff

08084f88 <strtof>:
 8084f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084f8c:	4f22      	ldr	r7, [pc, #136]	; (8085018 <strtof+0x90>)
 8084f8e:	460a      	mov	r2, r1
 8084f90:	4b22      	ldr	r3, [pc, #136]	; (808501c <strtof+0x94>)
 8084f92:	4601      	mov	r1, r0
 8084f94:	6838      	ldr	r0, [r7, #0]
 8084f96:	f7ff fa03 	bl	80843a0 <_strtod_l>
 8084f9a:	4602      	mov	r2, r0
 8084f9c:	460b      	mov	r3, r1
 8084f9e:	4606      	mov	r6, r0
 8084fa0:	460c      	mov	r4, r1
 8084fa2:	f7fe ffcf 	bl	8083f44 <__aeabi_dcmpun>
 8084fa6:	b168      	cbz	r0, 8084fc4 <strtof+0x3c>
 8084fa8:	2c00      	cmp	r4, #0
 8084faa:	481d      	ldr	r0, [pc, #116]	; (8085020 <strtof+0x98>)
 8084fac:	da06      	bge.n	8084fbc <strtof+0x34>
 8084fae:	f001 f875 	bl	808609c <nanf>
 8084fb2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8084fb6:	4628      	mov	r0, r5
 8084fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8084fc0:	f001 b86c 	b.w	808609c <nanf>
 8084fc4:	4621      	mov	r1, r4
 8084fc6:	4630      	mov	r0, r6
 8084fc8:	f7fe fff2 	bl	8083fb0 <__aeabi_d2f>
 8084fcc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8084fd0:	4605      	mov	r5, r0
 8084fd2:	4914      	ldr	r1, [pc, #80]	; (8085024 <strtof+0x9c>)
 8084fd4:	4640      	mov	r0, r8
 8084fd6:	f001 f873 	bl	80860c0 <__aeabi_fcmpun>
 8084fda:	2800      	cmp	r0, #0
 8084fdc:	d1eb      	bne.n	8084fb6 <strtof+0x2e>
 8084fde:	4640      	mov	r0, r8
 8084fe0:	4910      	ldr	r1, [pc, #64]	; (8085024 <strtof+0x9c>)
 8084fe2:	f7ff f88d 	bl	8084100 <__aeabi_fcmple>
 8084fe6:	2800      	cmp	r0, #0
 8084fe8:	d1e5      	bne.n	8084fb6 <strtof+0x2e>
 8084fea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8084fee:	f04f 32ff 	mov.w	r2, #4294967295
 8084ff2:	4630      	mov	r0, r6
 8084ff4:	4621      	mov	r1, r4
 8084ff6:	4b0c      	ldr	r3, [pc, #48]	; (8085028 <strtof+0xa0>)
 8084ff8:	f7fe ffa4 	bl	8083f44 <__aeabi_dcmpun>
 8084ffc:	b940      	cbnz	r0, 8085010 <strtof+0x88>
 8084ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8085002:	4630      	mov	r0, r6
 8085004:	4621      	mov	r1, r4
 8085006:	4b08      	ldr	r3, [pc, #32]	; (8085028 <strtof+0xa0>)
 8085008:	f7fe ff7e 	bl	8083f08 <__aeabi_dcmple>
 808500c:	2800      	cmp	r0, #0
 808500e:	d0d2      	beq.n	8084fb6 <strtof+0x2e>
 8085010:	2222      	movs	r2, #34	; 0x22
 8085012:	683b      	ldr	r3, [r7, #0]
 8085014:	601a      	str	r2, [r3, #0]
 8085016:	e7ce      	b.n	8084fb6 <strtof+0x2e>
 8085018:	20000014 	.word	0x20000014
 808501c:	2000007c 	.word	0x2000007c
 8085020:	0808643d 	.word	0x0808643d
 8085024:	7f7fffff 	.word	0x7f7fffff
 8085028:	7fefffff 	.word	0x7fefffff

0808502c <_strtol_l.isra.0>:
 808502c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085030:	468c      	mov	ip, r1
 8085032:	4686      	mov	lr, r0
 8085034:	4e39      	ldr	r6, [pc, #228]	; (808511c <_strtol_l.isra.0+0xf0>)
 8085036:	4660      	mov	r0, ip
 8085038:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808503c:	5da5      	ldrb	r5, [r4, r6]
 808503e:	f015 0508 	ands.w	r5, r5, #8
 8085042:	d1f8      	bne.n	8085036 <_strtol_l.isra.0+0xa>
 8085044:	2c2d      	cmp	r4, #45	; 0x2d
 8085046:	d133      	bne.n	80850b0 <_strtol_l.isra.0+0x84>
 8085048:	f04f 0801 	mov.w	r8, #1
 808504c:	f89c 4000 	ldrb.w	r4, [ip]
 8085050:	f100 0c02 	add.w	ip, r0, #2
 8085054:	2b00      	cmp	r3, #0
 8085056:	d05c      	beq.n	8085112 <_strtol_l.isra.0+0xe6>
 8085058:	2b10      	cmp	r3, #16
 808505a:	d10c      	bne.n	8085076 <_strtol_l.isra.0+0x4a>
 808505c:	2c30      	cmp	r4, #48	; 0x30
 808505e:	d10a      	bne.n	8085076 <_strtol_l.isra.0+0x4a>
 8085060:	f89c 0000 	ldrb.w	r0, [ip]
 8085064:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085068:	2858      	cmp	r0, #88	; 0x58
 808506a:	d14d      	bne.n	8085108 <_strtol_l.isra.0+0xdc>
 808506c:	2310      	movs	r3, #16
 808506e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8085072:	f10c 0c02 	add.w	ip, ip, #2
 8085076:	2600      	movs	r6, #0
 8085078:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 808507c:	3f01      	subs	r7, #1
 808507e:	fbb7 f9f3 	udiv	r9, r7, r3
 8085082:	4630      	mov	r0, r6
 8085084:	fb03 7a19 	mls	sl, r3, r9, r7
 8085088:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 808508c:	2d09      	cmp	r5, #9
 808508e:	d818      	bhi.n	80850c2 <_strtol_l.isra.0+0x96>
 8085090:	462c      	mov	r4, r5
 8085092:	42a3      	cmp	r3, r4
 8085094:	dd24      	ble.n	80850e0 <_strtol_l.isra.0+0xb4>
 8085096:	1c75      	adds	r5, r6, #1
 8085098:	d007      	beq.n	80850aa <_strtol_l.isra.0+0x7e>
 808509a:	4581      	cmp	r9, r0
 808509c:	d31d      	bcc.n	80850da <_strtol_l.isra.0+0xae>
 808509e:	d101      	bne.n	80850a4 <_strtol_l.isra.0+0x78>
 80850a0:	45a2      	cmp	sl, r4
 80850a2:	db1a      	blt.n	80850da <_strtol_l.isra.0+0xae>
 80850a4:	2601      	movs	r6, #1
 80850a6:	fb00 4003 	mla	r0, r0, r3, r4
 80850aa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80850ae:	e7eb      	b.n	8085088 <_strtol_l.isra.0+0x5c>
 80850b0:	2c2b      	cmp	r4, #43	; 0x2b
 80850b2:	bf08      	it	eq
 80850b4:	f89c 4000 	ldrbeq.w	r4, [ip]
 80850b8:	46a8      	mov	r8, r5
 80850ba:	bf08      	it	eq
 80850bc:	f100 0c02 	addeq.w	ip, r0, #2
 80850c0:	e7c8      	b.n	8085054 <_strtol_l.isra.0+0x28>
 80850c2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80850c6:	2d19      	cmp	r5, #25
 80850c8:	d801      	bhi.n	80850ce <_strtol_l.isra.0+0xa2>
 80850ca:	3c37      	subs	r4, #55	; 0x37
 80850cc:	e7e1      	b.n	8085092 <_strtol_l.isra.0+0x66>
 80850ce:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80850d2:	2d19      	cmp	r5, #25
 80850d4:	d804      	bhi.n	80850e0 <_strtol_l.isra.0+0xb4>
 80850d6:	3c57      	subs	r4, #87	; 0x57
 80850d8:	e7db      	b.n	8085092 <_strtol_l.isra.0+0x66>
 80850da:	f04f 36ff 	mov.w	r6, #4294967295
 80850de:	e7e4      	b.n	80850aa <_strtol_l.isra.0+0x7e>
 80850e0:	1c73      	adds	r3, r6, #1
 80850e2:	d106      	bne.n	80850f2 <_strtol_l.isra.0+0xc6>
 80850e4:	2322      	movs	r3, #34	; 0x22
 80850e6:	4638      	mov	r0, r7
 80850e8:	f8ce 3000 	str.w	r3, [lr]
 80850ec:	b942      	cbnz	r2, 8085100 <_strtol_l.isra.0+0xd4>
 80850ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80850f2:	f1b8 0f00 	cmp.w	r8, #0
 80850f6:	d000      	beq.n	80850fa <_strtol_l.isra.0+0xce>
 80850f8:	4240      	negs	r0, r0
 80850fa:	2a00      	cmp	r2, #0
 80850fc:	d0f7      	beq.n	80850ee <_strtol_l.isra.0+0xc2>
 80850fe:	b10e      	cbz	r6, 8085104 <_strtol_l.isra.0+0xd8>
 8085100:	f10c 31ff 	add.w	r1, ip, #4294967295
 8085104:	6011      	str	r1, [r2, #0]
 8085106:	e7f2      	b.n	80850ee <_strtol_l.isra.0+0xc2>
 8085108:	2430      	movs	r4, #48	; 0x30
 808510a:	2b00      	cmp	r3, #0
 808510c:	d1b3      	bne.n	8085076 <_strtol_l.isra.0+0x4a>
 808510e:	2308      	movs	r3, #8
 8085110:	e7b1      	b.n	8085076 <_strtol_l.isra.0+0x4a>
 8085112:	2c30      	cmp	r4, #48	; 0x30
 8085114:	d0a4      	beq.n	8085060 <_strtol_l.isra.0+0x34>
 8085116:	230a      	movs	r3, #10
 8085118:	e7ad      	b.n	8085076 <_strtol_l.isra.0+0x4a>
 808511a:	bf00      	nop
 808511c:	08086679 	.word	0x08086679

08085120 <strtol>:
 8085120:	4613      	mov	r3, r2
 8085122:	460a      	mov	r2, r1
 8085124:	4601      	mov	r1, r0
 8085126:	4802      	ldr	r0, [pc, #8]	; (8085130 <strtol+0x10>)
 8085128:	6800      	ldr	r0, [r0, #0]
 808512a:	f7ff bf7f 	b.w	808502c <_strtol_l.isra.0>
 808512e:	bf00      	nop
 8085130:	20000014 	.word	0x20000014

08085134 <rshift>:
 8085134:	6903      	ldr	r3, [r0, #16]
 8085136:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808513a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 808513e:	f100 0414 	add.w	r4, r0, #20
 8085142:	ea4f 1261 	mov.w	r2, r1, asr #5
 8085146:	dd46      	ble.n	80851d6 <rshift+0xa2>
 8085148:	f011 011f 	ands.w	r1, r1, #31
 808514c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8085150:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8085154:	d10c      	bne.n	8085170 <rshift+0x3c>
 8085156:	4629      	mov	r1, r5
 8085158:	f100 0710 	add.w	r7, r0, #16
 808515c:	42b1      	cmp	r1, r6
 808515e:	d335      	bcc.n	80851cc <rshift+0x98>
 8085160:	1a9b      	subs	r3, r3, r2
 8085162:	009b      	lsls	r3, r3, #2
 8085164:	1eea      	subs	r2, r5, #3
 8085166:	4296      	cmp	r6, r2
 8085168:	bf38      	it	cc
 808516a:	2300      	movcc	r3, #0
 808516c:	4423      	add	r3, r4
 808516e:	e015      	b.n	808519c <rshift+0x68>
 8085170:	46a1      	mov	r9, r4
 8085172:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8085176:	f1c1 0820 	rsb	r8, r1, #32
 808517a:	40cf      	lsrs	r7, r1
 808517c:	f105 0e04 	add.w	lr, r5, #4
 8085180:	4576      	cmp	r6, lr
 8085182:	46f4      	mov	ip, lr
 8085184:	d816      	bhi.n	80851b4 <rshift+0x80>
 8085186:	1a9b      	subs	r3, r3, r2
 8085188:	009a      	lsls	r2, r3, #2
 808518a:	3a04      	subs	r2, #4
 808518c:	3501      	adds	r5, #1
 808518e:	42ae      	cmp	r6, r5
 8085190:	bf38      	it	cc
 8085192:	2200      	movcc	r2, #0
 8085194:	18a3      	adds	r3, r4, r2
 8085196:	50a7      	str	r7, [r4, r2]
 8085198:	b107      	cbz	r7, 808519c <rshift+0x68>
 808519a:	3304      	adds	r3, #4
 808519c:	42a3      	cmp	r3, r4
 808519e:	eba3 0204 	sub.w	r2, r3, r4
 80851a2:	bf08      	it	eq
 80851a4:	2300      	moveq	r3, #0
 80851a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80851aa:	6102      	str	r2, [r0, #16]
 80851ac:	bf08      	it	eq
 80851ae:	6143      	streq	r3, [r0, #20]
 80851b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80851b4:	f8dc c000 	ldr.w	ip, [ip]
 80851b8:	fa0c fc08 	lsl.w	ip, ip, r8
 80851bc:	ea4c 0707 	orr.w	r7, ip, r7
 80851c0:	f849 7b04 	str.w	r7, [r9], #4
 80851c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80851c8:	40cf      	lsrs	r7, r1
 80851ca:	e7d9      	b.n	8085180 <rshift+0x4c>
 80851cc:	f851 cb04 	ldr.w	ip, [r1], #4
 80851d0:	f847 cf04 	str.w	ip, [r7, #4]!
 80851d4:	e7c2      	b.n	808515c <rshift+0x28>
 80851d6:	4623      	mov	r3, r4
 80851d8:	e7e0      	b.n	808519c <rshift+0x68>

080851da <__hexdig_fun>:
 80851da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80851de:	2b09      	cmp	r3, #9
 80851e0:	d802      	bhi.n	80851e8 <__hexdig_fun+0xe>
 80851e2:	3820      	subs	r0, #32
 80851e4:	b2c0      	uxtb	r0, r0
 80851e6:	4770      	bx	lr
 80851e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80851ec:	2b05      	cmp	r3, #5
 80851ee:	d801      	bhi.n	80851f4 <__hexdig_fun+0x1a>
 80851f0:	3847      	subs	r0, #71	; 0x47
 80851f2:	e7f7      	b.n	80851e4 <__hexdig_fun+0xa>
 80851f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80851f8:	2b05      	cmp	r3, #5
 80851fa:	d801      	bhi.n	8085200 <__hexdig_fun+0x26>
 80851fc:	3827      	subs	r0, #39	; 0x27
 80851fe:	e7f1      	b.n	80851e4 <__hexdig_fun+0xa>
 8085200:	2000      	movs	r0, #0
 8085202:	4770      	bx	lr

08085204 <__gethex>:
 8085204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085208:	b08b      	sub	sp, #44	; 0x2c
 808520a:	9306      	str	r3, [sp, #24]
 808520c:	4bba      	ldr	r3, [pc, #744]	; (80854f8 <__gethex+0x2f4>)
 808520e:	9002      	str	r0, [sp, #8]
 8085210:	681b      	ldr	r3, [r3, #0]
 8085212:	468b      	mov	fp, r1
 8085214:	4618      	mov	r0, r3
 8085216:	4690      	mov	r8, r2
 8085218:	9303      	str	r3, [sp, #12]
 808521a:	f7ff f85a 	bl	80842d2 <strlen>
 808521e:	4682      	mov	sl, r0
 8085220:	9b03      	ldr	r3, [sp, #12]
 8085222:	f8db 2000 	ldr.w	r2, [fp]
 8085226:	4403      	add	r3, r0
 8085228:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808522c:	9307      	str	r3, [sp, #28]
 808522e:	1c93      	adds	r3, r2, #2
 8085230:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8085234:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8085238:	32fe      	adds	r2, #254	; 0xfe
 808523a:	18d1      	adds	r1, r2, r3
 808523c:	461f      	mov	r7, r3
 808523e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8085242:	9101      	str	r1, [sp, #4]
 8085244:	2830      	cmp	r0, #48	; 0x30
 8085246:	d0f8      	beq.n	808523a <__gethex+0x36>
 8085248:	f7ff ffc7 	bl	80851da <__hexdig_fun>
 808524c:	4604      	mov	r4, r0
 808524e:	2800      	cmp	r0, #0
 8085250:	d13a      	bne.n	80852c8 <__gethex+0xc4>
 8085252:	4652      	mov	r2, sl
 8085254:	4638      	mov	r0, r7
 8085256:	9903      	ldr	r1, [sp, #12]
 8085258:	f7ff f843 	bl	80842e2 <strncmp>
 808525c:	4605      	mov	r5, r0
 808525e:	2800      	cmp	r0, #0
 8085260:	d166      	bne.n	8085330 <__gethex+0x12c>
 8085262:	f817 000a 	ldrb.w	r0, [r7, sl]
 8085266:	eb07 060a 	add.w	r6, r7, sl
 808526a:	f7ff ffb6 	bl	80851da <__hexdig_fun>
 808526e:	2800      	cmp	r0, #0
 8085270:	d060      	beq.n	8085334 <__gethex+0x130>
 8085272:	4633      	mov	r3, r6
 8085274:	7818      	ldrb	r0, [r3, #0]
 8085276:	461f      	mov	r7, r3
 8085278:	2830      	cmp	r0, #48	; 0x30
 808527a:	f103 0301 	add.w	r3, r3, #1
 808527e:	d0f9      	beq.n	8085274 <__gethex+0x70>
 8085280:	f7ff ffab 	bl	80851da <__hexdig_fun>
 8085284:	2301      	movs	r3, #1
 8085286:	fab0 f480 	clz	r4, r0
 808528a:	4635      	mov	r5, r6
 808528c:	0964      	lsrs	r4, r4, #5
 808528e:	9301      	str	r3, [sp, #4]
 8085290:	463a      	mov	r2, r7
 8085292:	4616      	mov	r6, r2
 8085294:	7830      	ldrb	r0, [r6, #0]
 8085296:	3201      	adds	r2, #1
 8085298:	f7ff ff9f 	bl	80851da <__hexdig_fun>
 808529c:	2800      	cmp	r0, #0
 808529e:	d1f8      	bne.n	8085292 <__gethex+0x8e>
 80852a0:	4652      	mov	r2, sl
 80852a2:	4630      	mov	r0, r6
 80852a4:	9903      	ldr	r1, [sp, #12]
 80852a6:	f7ff f81c 	bl	80842e2 <strncmp>
 80852aa:	b980      	cbnz	r0, 80852ce <__gethex+0xca>
 80852ac:	b94d      	cbnz	r5, 80852c2 <__gethex+0xbe>
 80852ae:	eb06 050a 	add.w	r5, r6, sl
 80852b2:	462a      	mov	r2, r5
 80852b4:	4616      	mov	r6, r2
 80852b6:	7830      	ldrb	r0, [r6, #0]
 80852b8:	3201      	adds	r2, #1
 80852ba:	f7ff ff8e 	bl	80851da <__hexdig_fun>
 80852be:	2800      	cmp	r0, #0
 80852c0:	d1f8      	bne.n	80852b4 <__gethex+0xb0>
 80852c2:	1bad      	subs	r5, r5, r6
 80852c4:	00ad      	lsls	r5, r5, #2
 80852c6:	e004      	b.n	80852d2 <__gethex+0xce>
 80852c8:	2400      	movs	r4, #0
 80852ca:	4625      	mov	r5, r4
 80852cc:	e7e0      	b.n	8085290 <__gethex+0x8c>
 80852ce:	2d00      	cmp	r5, #0
 80852d0:	d1f7      	bne.n	80852c2 <__gethex+0xbe>
 80852d2:	7833      	ldrb	r3, [r6, #0]
 80852d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80852d8:	2b50      	cmp	r3, #80	; 0x50
 80852da:	d139      	bne.n	8085350 <__gethex+0x14c>
 80852dc:	7873      	ldrb	r3, [r6, #1]
 80852de:	2b2b      	cmp	r3, #43	; 0x2b
 80852e0:	d02a      	beq.n	8085338 <__gethex+0x134>
 80852e2:	2b2d      	cmp	r3, #45	; 0x2d
 80852e4:	d02c      	beq.n	8085340 <__gethex+0x13c>
 80852e6:	f04f 0900 	mov.w	r9, #0
 80852ea:	1c71      	adds	r1, r6, #1
 80852ec:	7808      	ldrb	r0, [r1, #0]
 80852ee:	f7ff ff74 	bl	80851da <__hexdig_fun>
 80852f2:	1e43      	subs	r3, r0, #1
 80852f4:	b2db      	uxtb	r3, r3
 80852f6:	2b18      	cmp	r3, #24
 80852f8:	d82a      	bhi.n	8085350 <__gethex+0x14c>
 80852fa:	f1a0 0210 	sub.w	r2, r0, #16
 80852fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8085302:	f7ff ff6a 	bl	80851da <__hexdig_fun>
 8085306:	1e43      	subs	r3, r0, #1
 8085308:	b2db      	uxtb	r3, r3
 808530a:	2b18      	cmp	r3, #24
 808530c:	d91b      	bls.n	8085346 <__gethex+0x142>
 808530e:	f1b9 0f00 	cmp.w	r9, #0
 8085312:	d000      	beq.n	8085316 <__gethex+0x112>
 8085314:	4252      	negs	r2, r2
 8085316:	4415      	add	r5, r2
 8085318:	f8cb 1000 	str.w	r1, [fp]
 808531c:	b1d4      	cbz	r4, 8085354 <__gethex+0x150>
 808531e:	9b01      	ldr	r3, [sp, #4]
 8085320:	2b00      	cmp	r3, #0
 8085322:	bf14      	ite	ne
 8085324:	2700      	movne	r7, #0
 8085326:	2706      	moveq	r7, #6
 8085328:	4638      	mov	r0, r7
 808532a:	b00b      	add	sp, #44	; 0x2c
 808532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085330:	463e      	mov	r6, r7
 8085332:	4625      	mov	r5, r4
 8085334:	2401      	movs	r4, #1
 8085336:	e7cc      	b.n	80852d2 <__gethex+0xce>
 8085338:	f04f 0900 	mov.w	r9, #0
 808533c:	1cb1      	adds	r1, r6, #2
 808533e:	e7d5      	b.n	80852ec <__gethex+0xe8>
 8085340:	f04f 0901 	mov.w	r9, #1
 8085344:	e7fa      	b.n	808533c <__gethex+0x138>
 8085346:	230a      	movs	r3, #10
 8085348:	fb03 0202 	mla	r2, r3, r2, r0
 808534c:	3a10      	subs	r2, #16
 808534e:	e7d6      	b.n	80852fe <__gethex+0xfa>
 8085350:	4631      	mov	r1, r6
 8085352:	e7e1      	b.n	8085318 <__gethex+0x114>
 8085354:	4621      	mov	r1, r4
 8085356:	1bf3      	subs	r3, r6, r7
 8085358:	3b01      	subs	r3, #1
 808535a:	2b07      	cmp	r3, #7
 808535c:	dc50      	bgt.n	8085400 <__gethex+0x1fc>
 808535e:	9802      	ldr	r0, [sp, #8]
 8085360:	f000 fa4e 	bl	8085800 <_Balloc>
 8085364:	f04f 0b00 	mov.w	fp, #0
 8085368:	4604      	mov	r4, r0
 808536a:	f100 0914 	add.w	r9, r0, #20
 808536e:	f1ca 0301 	rsb	r3, sl, #1
 8085372:	f8cd 9010 	str.w	r9, [sp, #16]
 8085376:	f8cd b004 	str.w	fp, [sp, #4]
 808537a:	9308      	str	r3, [sp, #32]
 808537c:	42b7      	cmp	r7, r6
 808537e:	d342      	bcc.n	8085406 <__gethex+0x202>
 8085380:	9f04      	ldr	r7, [sp, #16]
 8085382:	9b01      	ldr	r3, [sp, #4]
 8085384:	f847 3b04 	str.w	r3, [r7], #4
 8085388:	eba7 0709 	sub.w	r7, r7, r9
 808538c:	10bf      	asrs	r7, r7, #2
 808538e:	6127      	str	r7, [r4, #16]
 8085390:	4618      	mov	r0, r3
 8085392:	f000 fafc 	bl	808598e <__hi0bits>
 8085396:	017f      	lsls	r7, r7, #5
 8085398:	f8d8 6000 	ldr.w	r6, [r8]
 808539c:	1a3f      	subs	r7, r7, r0
 808539e:	42b7      	cmp	r7, r6
 80853a0:	dd65      	ble.n	808546e <__gethex+0x26a>
 80853a2:	1bbf      	subs	r7, r7, r6
 80853a4:	4639      	mov	r1, r7
 80853a6:	4620      	mov	r0, r4
 80853a8:	f000 fe42 	bl	8086030 <__any_on>
 80853ac:	4682      	mov	sl, r0
 80853ae:	b1a8      	cbz	r0, 80853dc <__gethex+0x1d8>
 80853b0:	f04f 0a01 	mov.w	sl, #1
 80853b4:	1e7b      	subs	r3, r7, #1
 80853b6:	1159      	asrs	r1, r3, #5
 80853b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80853bc:	f003 021f 	and.w	r2, r3, #31
 80853c0:	fa0a f202 	lsl.w	r2, sl, r2
 80853c4:	420a      	tst	r2, r1
 80853c6:	d009      	beq.n	80853dc <__gethex+0x1d8>
 80853c8:	4553      	cmp	r3, sl
 80853ca:	dd05      	ble.n	80853d8 <__gethex+0x1d4>
 80853cc:	4620      	mov	r0, r4
 80853ce:	1eb9      	subs	r1, r7, #2
 80853d0:	f000 fe2e 	bl	8086030 <__any_on>
 80853d4:	2800      	cmp	r0, #0
 80853d6:	d147      	bne.n	8085468 <__gethex+0x264>
 80853d8:	f04f 0a02 	mov.w	sl, #2
 80853dc:	4639      	mov	r1, r7
 80853de:	4620      	mov	r0, r4
 80853e0:	f7ff fea8 	bl	8085134 <rshift>
 80853e4:	443d      	add	r5, r7
 80853e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80853ea:	42ab      	cmp	r3, r5
 80853ec:	da4d      	bge.n	808548a <__gethex+0x286>
 80853ee:	4621      	mov	r1, r4
 80853f0:	9802      	ldr	r0, [sp, #8]
 80853f2:	f000 fa39 	bl	8085868 <_Bfree>
 80853f6:	2300      	movs	r3, #0
 80853f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80853fa:	27a3      	movs	r7, #163	; 0xa3
 80853fc:	6013      	str	r3, [r2, #0]
 80853fe:	e793      	b.n	8085328 <__gethex+0x124>
 8085400:	3101      	adds	r1, #1
 8085402:	105b      	asrs	r3, r3, #1
 8085404:	e7a9      	b.n	808535a <__gethex+0x156>
 8085406:	1e73      	subs	r3, r6, #1
 8085408:	9a07      	ldr	r2, [sp, #28]
 808540a:	9305      	str	r3, [sp, #20]
 808540c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8085410:	4293      	cmp	r3, r2
 8085412:	d019      	beq.n	8085448 <__gethex+0x244>
 8085414:	f1bb 0f20 	cmp.w	fp, #32
 8085418:	d107      	bne.n	808542a <__gethex+0x226>
 808541a:	9b04      	ldr	r3, [sp, #16]
 808541c:	9a01      	ldr	r2, [sp, #4]
 808541e:	f843 2b04 	str.w	r2, [r3], #4
 8085422:	9304      	str	r3, [sp, #16]
 8085424:	2300      	movs	r3, #0
 8085426:	469b      	mov	fp, r3
 8085428:	9301      	str	r3, [sp, #4]
 808542a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808542e:	f7ff fed4 	bl	80851da <__hexdig_fun>
 8085432:	9b01      	ldr	r3, [sp, #4]
 8085434:	f000 000f 	and.w	r0, r0, #15
 8085438:	fa00 f00b 	lsl.w	r0, r0, fp
 808543c:	4303      	orrs	r3, r0
 808543e:	9301      	str	r3, [sp, #4]
 8085440:	f10b 0b04 	add.w	fp, fp, #4
 8085444:	9b05      	ldr	r3, [sp, #20]
 8085446:	e00d      	b.n	8085464 <__gethex+0x260>
 8085448:	9b05      	ldr	r3, [sp, #20]
 808544a:	9a08      	ldr	r2, [sp, #32]
 808544c:	4413      	add	r3, r2
 808544e:	42bb      	cmp	r3, r7
 8085450:	d3e0      	bcc.n	8085414 <__gethex+0x210>
 8085452:	4618      	mov	r0, r3
 8085454:	4652      	mov	r2, sl
 8085456:	9903      	ldr	r1, [sp, #12]
 8085458:	9309      	str	r3, [sp, #36]	; 0x24
 808545a:	f7fe ff42 	bl	80842e2 <strncmp>
 808545e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085460:	2800      	cmp	r0, #0
 8085462:	d1d7      	bne.n	8085414 <__gethex+0x210>
 8085464:	461e      	mov	r6, r3
 8085466:	e789      	b.n	808537c <__gethex+0x178>
 8085468:	f04f 0a03 	mov.w	sl, #3
 808546c:	e7b6      	b.n	80853dc <__gethex+0x1d8>
 808546e:	da09      	bge.n	8085484 <__gethex+0x280>
 8085470:	1bf7      	subs	r7, r6, r7
 8085472:	4621      	mov	r1, r4
 8085474:	463a      	mov	r2, r7
 8085476:	9802      	ldr	r0, [sp, #8]
 8085478:	f000 fbca 	bl	8085c10 <__lshift>
 808547c:	4604      	mov	r4, r0
 808547e:	1bed      	subs	r5, r5, r7
 8085480:	f100 0914 	add.w	r9, r0, #20
 8085484:	f04f 0a00 	mov.w	sl, #0
 8085488:	e7ad      	b.n	80853e6 <__gethex+0x1e2>
 808548a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808548e:	42a8      	cmp	r0, r5
 8085490:	dd6e      	ble.n	8085570 <__gethex+0x36c>
 8085492:	1b45      	subs	r5, r0, r5
 8085494:	42ae      	cmp	r6, r5
 8085496:	dc31      	bgt.n	80854fc <__gethex+0x2f8>
 8085498:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808549c:	2b02      	cmp	r3, #2
 808549e:	d022      	beq.n	80854e6 <__gethex+0x2e2>
 80854a0:	2b03      	cmp	r3, #3
 80854a2:	d024      	beq.n	80854ee <__gethex+0x2ea>
 80854a4:	2b01      	cmp	r3, #1
 80854a6:	d115      	bne.n	80854d4 <__gethex+0x2d0>
 80854a8:	42ae      	cmp	r6, r5
 80854aa:	d113      	bne.n	80854d4 <__gethex+0x2d0>
 80854ac:	2e01      	cmp	r6, #1
 80854ae:	d10b      	bne.n	80854c8 <__gethex+0x2c4>
 80854b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80854b4:	9a06      	ldr	r2, [sp, #24]
 80854b6:	2762      	movs	r7, #98	; 0x62
 80854b8:	6013      	str	r3, [r2, #0]
 80854ba:	2301      	movs	r3, #1
 80854bc:	6123      	str	r3, [r4, #16]
 80854be:	f8c9 3000 	str.w	r3, [r9]
 80854c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80854c4:	601c      	str	r4, [r3, #0]
 80854c6:	e72f      	b.n	8085328 <__gethex+0x124>
 80854c8:	4620      	mov	r0, r4
 80854ca:	1e71      	subs	r1, r6, #1
 80854cc:	f000 fdb0 	bl	8086030 <__any_on>
 80854d0:	2800      	cmp	r0, #0
 80854d2:	d1ed      	bne.n	80854b0 <__gethex+0x2ac>
 80854d4:	4621      	mov	r1, r4
 80854d6:	9802      	ldr	r0, [sp, #8]
 80854d8:	f000 f9c6 	bl	8085868 <_Bfree>
 80854dc:	2300      	movs	r3, #0
 80854de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80854e0:	2750      	movs	r7, #80	; 0x50
 80854e2:	6013      	str	r3, [r2, #0]
 80854e4:	e720      	b.n	8085328 <__gethex+0x124>
 80854e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80854e8:	2b00      	cmp	r3, #0
 80854ea:	d1f3      	bne.n	80854d4 <__gethex+0x2d0>
 80854ec:	e7e0      	b.n	80854b0 <__gethex+0x2ac>
 80854ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80854f0:	2b00      	cmp	r3, #0
 80854f2:	d1dd      	bne.n	80854b0 <__gethex+0x2ac>
 80854f4:	e7ee      	b.n	80854d4 <__gethex+0x2d0>
 80854f6:	bf00      	nop
 80854f8:	0808677c 	.word	0x0808677c
 80854fc:	1e6f      	subs	r7, r5, #1
 80854fe:	f1ba 0f00 	cmp.w	sl, #0
 8085502:	d132      	bne.n	808556a <__gethex+0x366>
 8085504:	b127      	cbz	r7, 8085510 <__gethex+0x30c>
 8085506:	4639      	mov	r1, r7
 8085508:	4620      	mov	r0, r4
 808550a:	f000 fd91 	bl	8086030 <__any_on>
 808550e:	4682      	mov	sl, r0
 8085510:	2101      	movs	r1, #1
 8085512:	117b      	asrs	r3, r7, #5
 8085514:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8085518:	f007 071f 	and.w	r7, r7, #31
 808551c:	fa01 f707 	lsl.w	r7, r1, r7
 8085520:	421f      	tst	r7, r3
 8085522:	f04f 0702 	mov.w	r7, #2
 8085526:	4629      	mov	r1, r5
 8085528:	4620      	mov	r0, r4
 808552a:	bf18      	it	ne
 808552c:	f04a 0a02 	orrne.w	sl, sl, #2
 8085530:	1b76      	subs	r6, r6, r5
 8085532:	f7ff fdff 	bl	8085134 <rshift>
 8085536:	f8d8 5004 	ldr.w	r5, [r8, #4]
 808553a:	f1ba 0f00 	cmp.w	sl, #0
 808553e:	d048      	beq.n	80855d2 <__gethex+0x3ce>
 8085540:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8085544:	2b02      	cmp	r3, #2
 8085546:	d015      	beq.n	8085574 <__gethex+0x370>
 8085548:	2b03      	cmp	r3, #3
 808554a:	d017      	beq.n	808557c <__gethex+0x378>
 808554c:	2b01      	cmp	r3, #1
 808554e:	d109      	bne.n	8085564 <__gethex+0x360>
 8085550:	f01a 0f02 	tst.w	sl, #2
 8085554:	d006      	beq.n	8085564 <__gethex+0x360>
 8085556:	f8d9 0000 	ldr.w	r0, [r9]
 808555a:	ea4a 0a00 	orr.w	sl, sl, r0
 808555e:	f01a 0f01 	tst.w	sl, #1
 8085562:	d10e      	bne.n	8085582 <__gethex+0x37e>
 8085564:	f047 0710 	orr.w	r7, r7, #16
 8085568:	e033      	b.n	80855d2 <__gethex+0x3ce>
 808556a:	f04f 0a01 	mov.w	sl, #1
 808556e:	e7cf      	b.n	8085510 <__gethex+0x30c>
 8085570:	2701      	movs	r7, #1
 8085572:	e7e2      	b.n	808553a <__gethex+0x336>
 8085574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8085576:	f1c3 0301 	rsb	r3, r3, #1
 808557a:	9315      	str	r3, [sp, #84]	; 0x54
 808557c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808557e:	2b00      	cmp	r3, #0
 8085580:	d0f0      	beq.n	8085564 <__gethex+0x360>
 8085582:	f04f 0c00 	mov.w	ip, #0
 8085586:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808558a:	f104 0314 	add.w	r3, r4, #20
 808558e:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8085592:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 8085596:	4618      	mov	r0, r3
 8085598:	f853 2b04 	ldr.w	r2, [r3], #4
 808559c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80855a0:	d01c      	beq.n	80855dc <__gethex+0x3d8>
 80855a2:	3201      	adds	r2, #1
 80855a4:	6002      	str	r2, [r0, #0]
 80855a6:	2f02      	cmp	r7, #2
 80855a8:	f104 0314 	add.w	r3, r4, #20
 80855ac:	d138      	bne.n	8085620 <__gethex+0x41c>
 80855ae:	f8d8 2000 	ldr.w	r2, [r8]
 80855b2:	3a01      	subs	r2, #1
 80855b4:	42b2      	cmp	r2, r6
 80855b6:	d10a      	bne.n	80855ce <__gethex+0x3ca>
 80855b8:	2201      	movs	r2, #1
 80855ba:	1171      	asrs	r1, r6, #5
 80855bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80855c0:	f006 061f 	and.w	r6, r6, #31
 80855c4:	fa02 f606 	lsl.w	r6, r2, r6
 80855c8:	421e      	tst	r6, r3
 80855ca:	bf18      	it	ne
 80855cc:	4617      	movne	r7, r2
 80855ce:	f047 0720 	orr.w	r7, r7, #32
 80855d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80855d4:	601c      	str	r4, [r3, #0]
 80855d6:	9b06      	ldr	r3, [sp, #24]
 80855d8:	601d      	str	r5, [r3, #0]
 80855da:	e6a5      	b.n	8085328 <__gethex+0x124>
 80855dc:	4299      	cmp	r1, r3
 80855de:	f843 cc04 	str.w	ip, [r3, #-4]
 80855e2:	d8d8      	bhi.n	8085596 <__gethex+0x392>
 80855e4:	68a3      	ldr	r3, [r4, #8]
 80855e6:	4599      	cmp	r9, r3
 80855e8:	db12      	blt.n	8085610 <__gethex+0x40c>
 80855ea:	6861      	ldr	r1, [r4, #4]
 80855ec:	9802      	ldr	r0, [sp, #8]
 80855ee:	3101      	adds	r1, #1
 80855f0:	f000 f906 	bl	8085800 <_Balloc>
 80855f4:	4682      	mov	sl, r0
 80855f6:	6922      	ldr	r2, [r4, #16]
 80855f8:	f104 010c 	add.w	r1, r4, #12
 80855fc:	3202      	adds	r2, #2
 80855fe:	0092      	lsls	r2, r2, #2
 8085600:	300c      	adds	r0, #12
 8085602:	f7fe fdf1 	bl	80841e8 <memcpy>
 8085606:	4621      	mov	r1, r4
 8085608:	9802      	ldr	r0, [sp, #8]
 808560a:	f000 f92d 	bl	8085868 <_Bfree>
 808560e:	4654      	mov	r4, sl
 8085610:	6923      	ldr	r3, [r4, #16]
 8085612:	1c5a      	adds	r2, r3, #1
 8085614:	6122      	str	r2, [r4, #16]
 8085616:	2201      	movs	r2, #1
 8085618:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 808561c:	615a      	str	r2, [r3, #20]
 808561e:	e7c2      	b.n	80855a6 <__gethex+0x3a2>
 8085620:	6922      	ldr	r2, [r4, #16]
 8085622:	454a      	cmp	r2, r9
 8085624:	dd0b      	ble.n	808563e <__gethex+0x43a>
 8085626:	2101      	movs	r1, #1
 8085628:	4620      	mov	r0, r4
 808562a:	f7ff fd83 	bl	8085134 <rshift>
 808562e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8085632:	3501      	adds	r5, #1
 8085634:	42ab      	cmp	r3, r5
 8085636:	f6ff aeda 	blt.w	80853ee <__gethex+0x1ea>
 808563a:	2701      	movs	r7, #1
 808563c:	e7c7      	b.n	80855ce <__gethex+0x3ca>
 808563e:	f016 061f 	ands.w	r6, r6, #31
 8085642:	d0fa      	beq.n	808563a <__gethex+0x436>
 8085644:	449b      	add	fp, r3
 8085646:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 808564a:	f000 f9a0 	bl	808598e <__hi0bits>
 808564e:	f1c6 0620 	rsb	r6, r6, #32
 8085652:	42b0      	cmp	r0, r6
 8085654:	dbe7      	blt.n	8085626 <__gethex+0x422>
 8085656:	e7f0      	b.n	808563a <__gethex+0x436>

08085658 <L_shift>:
 8085658:	f1c2 0208 	rsb	r2, r2, #8
 808565c:	0092      	lsls	r2, r2, #2
 808565e:	b570      	push	{r4, r5, r6, lr}
 8085660:	f1c2 0620 	rsb	r6, r2, #32
 8085664:	6843      	ldr	r3, [r0, #4]
 8085666:	6804      	ldr	r4, [r0, #0]
 8085668:	fa03 f506 	lsl.w	r5, r3, r6
 808566c:	432c      	orrs	r4, r5
 808566e:	40d3      	lsrs	r3, r2
 8085670:	6004      	str	r4, [r0, #0]
 8085672:	f840 3f04 	str.w	r3, [r0, #4]!
 8085676:	4288      	cmp	r0, r1
 8085678:	d3f4      	bcc.n	8085664 <L_shift+0xc>
 808567a:	bd70      	pop	{r4, r5, r6, pc}

0808567c <__match>:
 808567c:	b530      	push	{r4, r5, lr}
 808567e:	6803      	ldr	r3, [r0, #0]
 8085680:	3301      	adds	r3, #1
 8085682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8085686:	b914      	cbnz	r4, 808568e <__match+0x12>
 8085688:	6003      	str	r3, [r0, #0]
 808568a:	2001      	movs	r0, #1
 808568c:	bd30      	pop	{r4, r5, pc}
 808568e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8085692:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8085696:	2d19      	cmp	r5, #25
 8085698:	bf98      	it	ls
 808569a:	3220      	addls	r2, #32
 808569c:	42a2      	cmp	r2, r4
 808569e:	d0f0      	beq.n	8085682 <__match+0x6>
 80856a0:	2000      	movs	r0, #0
 80856a2:	e7f3      	b.n	808568c <__match+0x10>

080856a4 <__hexnan>:
 80856a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80856a8:	2500      	movs	r5, #0
 80856aa:	680b      	ldr	r3, [r1, #0]
 80856ac:	4682      	mov	sl, r0
 80856ae:	115e      	asrs	r6, r3, #5
 80856b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80856b4:	f013 031f 	ands.w	r3, r3, #31
 80856b8:	bf18      	it	ne
 80856ba:	3604      	addne	r6, #4
 80856bc:	1f37      	subs	r7, r6, #4
 80856be:	4690      	mov	r8, r2
 80856c0:	46b9      	mov	r9, r7
 80856c2:	463c      	mov	r4, r7
 80856c4:	46ab      	mov	fp, r5
 80856c6:	b087      	sub	sp, #28
 80856c8:	6801      	ldr	r1, [r0, #0]
 80856ca:	9301      	str	r3, [sp, #4]
 80856cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80856d0:	9502      	str	r5, [sp, #8]
 80856d2:	784a      	ldrb	r2, [r1, #1]
 80856d4:	1c4b      	adds	r3, r1, #1
 80856d6:	9303      	str	r3, [sp, #12]
 80856d8:	b342      	cbz	r2, 808572c <__hexnan+0x88>
 80856da:	4610      	mov	r0, r2
 80856dc:	9105      	str	r1, [sp, #20]
 80856de:	9204      	str	r2, [sp, #16]
 80856e0:	f7ff fd7b 	bl	80851da <__hexdig_fun>
 80856e4:	2800      	cmp	r0, #0
 80856e6:	d14f      	bne.n	8085788 <__hexnan+0xe4>
 80856e8:	9a04      	ldr	r2, [sp, #16]
 80856ea:	9905      	ldr	r1, [sp, #20]
 80856ec:	2a20      	cmp	r2, #32
 80856ee:	d818      	bhi.n	8085722 <__hexnan+0x7e>
 80856f0:	9b02      	ldr	r3, [sp, #8]
 80856f2:	459b      	cmp	fp, r3
 80856f4:	dd13      	ble.n	808571e <__hexnan+0x7a>
 80856f6:	454c      	cmp	r4, r9
 80856f8:	d206      	bcs.n	8085708 <__hexnan+0x64>
 80856fa:	2d07      	cmp	r5, #7
 80856fc:	dc04      	bgt.n	8085708 <__hexnan+0x64>
 80856fe:	462a      	mov	r2, r5
 8085700:	4649      	mov	r1, r9
 8085702:	4620      	mov	r0, r4
 8085704:	f7ff ffa8 	bl	8085658 <L_shift>
 8085708:	4544      	cmp	r4, r8
 808570a:	d950      	bls.n	80857ae <__hexnan+0x10a>
 808570c:	2300      	movs	r3, #0
 808570e:	f1a4 0904 	sub.w	r9, r4, #4
 8085712:	f844 3c04 	str.w	r3, [r4, #-4]
 8085716:	461d      	mov	r5, r3
 8085718:	464c      	mov	r4, r9
 808571a:	f8cd b008 	str.w	fp, [sp, #8]
 808571e:	9903      	ldr	r1, [sp, #12]
 8085720:	e7d7      	b.n	80856d2 <__hexnan+0x2e>
 8085722:	2a29      	cmp	r2, #41	; 0x29
 8085724:	d156      	bne.n	80857d4 <__hexnan+0x130>
 8085726:	3102      	adds	r1, #2
 8085728:	f8ca 1000 	str.w	r1, [sl]
 808572c:	f1bb 0f00 	cmp.w	fp, #0
 8085730:	d050      	beq.n	80857d4 <__hexnan+0x130>
 8085732:	454c      	cmp	r4, r9
 8085734:	d206      	bcs.n	8085744 <__hexnan+0xa0>
 8085736:	2d07      	cmp	r5, #7
 8085738:	dc04      	bgt.n	8085744 <__hexnan+0xa0>
 808573a:	462a      	mov	r2, r5
 808573c:	4649      	mov	r1, r9
 808573e:	4620      	mov	r0, r4
 8085740:	f7ff ff8a 	bl	8085658 <L_shift>
 8085744:	4544      	cmp	r4, r8
 8085746:	d934      	bls.n	80857b2 <__hexnan+0x10e>
 8085748:	4623      	mov	r3, r4
 808574a:	f1a8 0204 	sub.w	r2, r8, #4
 808574e:	f853 1b04 	ldr.w	r1, [r3], #4
 8085752:	429f      	cmp	r7, r3
 8085754:	f842 1f04 	str.w	r1, [r2, #4]!
 8085758:	d2f9      	bcs.n	808574e <__hexnan+0xaa>
 808575a:	1b3b      	subs	r3, r7, r4
 808575c:	f023 0303 	bic.w	r3, r3, #3
 8085760:	3304      	adds	r3, #4
 8085762:	3401      	adds	r4, #1
 8085764:	3e03      	subs	r6, #3
 8085766:	42b4      	cmp	r4, r6
 8085768:	bf88      	it	hi
 808576a:	2304      	movhi	r3, #4
 808576c:	2200      	movs	r2, #0
 808576e:	4443      	add	r3, r8
 8085770:	f843 2b04 	str.w	r2, [r3], #4
 8085774:	429f      	cmp	r7, r3
 8085776:	d2fb      	bcs.n	8085770 <__hexnan+0xcc>
 8085778:	683b      	ldr	r3, [r7, #0]
 808577a:	b91b      	cbnz	r3, 8085784 <__hexnan+0xe0>
 808577c:	4547      	cmp	r7, r8
 808577e:	d127      	bne.n	80857d0 <__hexnan+0x12c>
 8085780:	2301      	movs	r3, #1
 8085782:	603b      	str	r3, [r7, #0]
 8085784:	2005      	movs	r0, #5
 8085786:	e026      	b.n	80857d6 <__hexnan+0x132>
 8085788:	3501      	adds	r5, #1
 808578a:	2d08      	cmp	r5, #8
 808578c:	f10b 0b01 	add.w	fp, fp, #1
 8085790:	dd06      	ble.n	80857a0 <__hexnan+0xfc>
 8085792:	4544      	cmp	r4, r8
 8085794:	d9c3      	bls.n	808571e <__hexnan+0x7a>
 8085796:	2300      	movs	r3, #0
 8085798:	2501      	movs	r5, #1
 808579a:	f844 3c04 	str.w	r3, [r4, #-4]
 808579e:	3c04      	subs	r4, #4
 80857a0:	6822      	ldr	r2, [r4, #0]
 80857a2:	f000 000f 	and.w	r0, r0, #15
 80857a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80857aa:	6022      	str	r2, [r4, #0]
 80857ac:	e7b7      	b.n	808571e <__hexnan+0x7a>
 80857ae:	2508      	movs	r5, #8
 80857b0:	e7b5      	b.n	808571e <__hexnan+0x7a>
 80857b2:	9b01      	ldr	r3, [sp, #4]
 80857b4:	2b00      	cmp	r3, #0
 80857b6:	d0df      	beq.n	8085778 <__hexnan+0xd4>
 80857b8:	f04f 32ff 	mov.w	r2, #4294967295
 80857bc:	f1c3 0320 	rsb	r3, r3, #32
 80857c0:	fa22 f303 	lsr.w	r3, r2, r3
 80857c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80857c8:	401a      	ands	r2, r3
 80857ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80857ce:	e7d3      	b.n	8085778 <__hexnan+0xd4>
 80857d0:	3f04      	subs	r7, #4
 80857d2:	e7d1      	b.n	8085778 <__hexnan+0xd4>
 80857d4:	2004      	movs	r0, #4
 80857d6:	b007      	add	sp, #28
 80857d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080857dc <__ascii_mbtowc>:
 80857dc:	b082      	sub	sp, #8
 80857de:	b901      	cbnz	r1, 80857e2 <__ascii_mbtowc+0x6>
 80857e0:	a901      	add	r1, sp, #4
 80857e2:	b142      	cbz	r2, 80857f6 <__ascii_mbtowc+0x1a>
 80857e4:	b14b      	cbz	r3, 80857fa <__ascii_mbtowc+0x1e>
 80857e6:	7813      	ldrb	r3, [r2, #0]
 80857e8:	600b      	str	r3, [r1, #0]
 80857ea:	7812      	ldrb	r2, [r2, #0]
 80857ec:	1e10      	subs	r0, r2, #0
 80857ee:	bf18      	it	ne
 80857f0:	2001      	movne	r0, #1
 80857f2:	b002      	add	sp, #8
 80857f4:	4770      	bx	lr
 80857f6:	4610      	mov	r0, r2
 80857f8:	e7fb      	b.n	80857f2 <__ascii_mbtowc+0x16>
 80857fa:	f06f 0001 	mvn.w	r0, #1
 80857fe:	e7f8      	b.n	80857f2 <__ascii_mbtowc+0x16>

08085800 <_Balloc>:
 8085800:	b570      	push	{r4, r5, r6, lr}
 8085802:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8085804:	4604      	mov	r4, r0
 8085806:	460d      	mov	r5, r1
 8085808:	b93e      	cbnz	r6, 808581a <_Balloc+0x1a>
 808580a:	2010      	movs	r0, #16
 808580c:	f7fc fbc4 	bl	8081f98 <malloc>
 8085810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8085814:	6260      	str	r0, [r4, #36]	; 0x24
 8085816:	6006      	str	r6, [r0, #0]
 8085818:	60c6      	str	r6, [r0, #12]
 808581a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 808581c:	68f3      	ldr	r3, [r6, #12]
 808581e:	b183      	cbz	r3, 8085842 <_Balloc+0x42>
 8085820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8085822:	68db      	ldr	r3, [r3, #12]
 8085824:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8085828:	b9b8      	cbnz	r0, 808585a <_Balloc+0x5a>
 808582a:	2101      	movs	r1, #1
 808582c:	fa01 f605 	lsl.w	r6, r1, r5
 8085830:	1d72      	adds	r2, r6, #5
 8085832:	4620      	mov	r0, r4
 8085834:	0092      	lsls	r2, r2, #2
 8085836:	f000 fc1c 	bl	8086072 <_calloc_r>
 808583a:	b160      	cbz	r0, 8085856 <_Balloc+0x56>
 808583c:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8085840:	e00e      	b.n	8085860 <_Balloc+0x60>
 8085842:	2221      	movs	r2, #33	; 0x21
 8085844:	2104      	movs	r1, #4
 8085846:	4620      	mov	r0, r4
 8085848:	f000 fc13 	bl	8086072 <_calloc_r>
 808584c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808584e:	60f0      	str	r0, [r6, #12]
 8085850:	68db      	ldr	r3, [r3, #12]
 8085852:	2b00      	cmp	r3, #0
 8085854:	d1e4      	bne.n	8085820 <_Balloc+0x20>
 8085856:	2000      	movs	r0, #0
 8085858:	bd70      	pop	{r4, r5, r6, pc}
 808585a:	6802      	ldr	r2, [r0, #0]
 808585c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8085860:	2300      	movs	r3, #0
 8085862:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8085866:	e7f7      	b.n	8085858 <_Balloc+0x58>

08085868 <_Bfree>:
 8085868:	b570      	push	{r4, r5, r6, lr}
 808586a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808586c:	4605      	mov	r5, r0
 808586e:	460c      	mov	r4, r1
 8085870:	b93e      	cbnz	r6, 8085882 <_Bfree+0x1a>
 8085872:	2010      	movs	r0, #16
 8085874:	f7fc fb90 	bl	8081f98 <malloc>
 8085878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808587c:	6268      	str	r0, [r5, #36]	; 0x24
 808587e:	6006      	str	r6, [r0, #0]
 8085880:	60c6      	str	r6, [r0, #12]
 8085882:	b13c      	cbz	r4, 8085894 <_Bfree+0x2c>
 8085884:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8085886:	6862      	ldr	r2, [r4, #4]
 8085888:	68db      	ldr	r3, [r3, #12]
 808588a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808588e:	6021      	str	r1, [r4, #0]
 8085890:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8085894:	bd70      	pop	{r4, r5, r6, pc}

08085896 <__multadd>:
 8085896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808589a:	4698      	mov	r8, r3
 808589c:	460c      	mov	r4, r1
 808589e:	2300      	movs	r3, #0
 80858a0:	690e      	ldr	r6, [r1, #16]
 80858a2:	4607      	mov	r7, r0
 80858a4:	f101 0014 	add.w	r0, r1, #20
 80858a8:	6805      	ldr	r5, [r0, #0]
 80858aa:	3301      	adds	r3, #1
 80858ac:	b2a9      	uxth	r1, r5
 80858ae:	fb02 8101 	mla	r1, r2, r1, r8
 80858b2:	0c2d      	lsrs	r5, r5, #16
 80858b4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80858b8:	fb02 c505 	mla	r5, r2, r5, ip
 80858bc:	b289      	uxth	r1, r1
 80858be:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80858c2:	429e      	cmp	r6, r3
 80858c4:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80858c8:	f840 1b04 	str.w	r1, [r0], #4
 80858cc:	dcec      	bgt.n	80858a8 <__multadd+0x12>
 80858ce:	f1b8 0f00 	cmp.w	r8, #0
 80858d2:	d01b      	beq.n	808590c <__multadd+0x76>
 80858d4:	68a3      	ldr	r3, [r4, #8]
 80858d6:	42b3      	cmp	r3, r6
 80858d8:	dc12      	bgt.n	8085900 <__multadd+0x6a>
 80858da:	6861      	ldr	r1, [r4, #4]
 80858dc:	4638      	mov	r0, r7
 80858de:	3101      	adds	r1, #1
 80858e0:	f7ff ff8e 	bl	8085800 <_Balloc>
 80858e4:	4605      	mov	r5, r0
 80858e6:	6922      	ldr	r2, [r4, #16]
 80858e8:	f104 010c 	add.w	r1, r4, #12
 80858ec:	3202      	adds	r2, #2
 80858ee:	0092      	lsls	r2, r2, #2
 80858f0:	300c      	adds	r0, #12
 80858f2:	f7fe fc79 	bl	80841e8 <memcpy>
 80858f6:	4621      	mov	r1, r4
 80858f8:	4638      	mov	r0, r7
 80858fa:	f7ff ffb5 	bl	8085868 <_Bfree>
 80858fe:	462c      	mov	r4, r5
 8085900:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8085904:	3601      	adds	r6, #1
 8085906:	f8c3 8014 	str.w	r8, [r3, #20]
 808590a:	6126      	str	r6, [r4, #16]
 808590c:	4620      	mov	r0, r4
 808590e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08085912 <__s2b>:
 8085912:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085916:	4615      	mov	r5, r2
 8085918:	2209      	movs	r2, #9
 808591a:	461f      	mov	r7, r3
 808591c:	3308      	adds	r3, #8
 808591e:	460c      	mov	r4, r1
 8085920:	fb93 f3f2 	sdiv	r3, r3, r2
 8085924:	4606      	mov	r6, r0
 8085926:	2201      	movs	r2, #1
 8085928:	2100      	movs	r1, #0
 808592a:	429a      	cmp	r2, r3
 808592c:	db20      	blt.n	8085970 <__s2b+0x5e>
 808592e:	4630      	mov	r0, r6
 8085930:	f7ff ff66 	bl	8085800 <_Balloc>
 8085934:	9b08      	ldr	r3, [sp, #32]
 8085936:	2d09      	cmp	r5, #9
 8085938:	6143      	str	r3, [r0, #20]
 808593a:	f04f 0301 	mov.w	r3, #1
 808593e:	6103      	str	r3, [r0, #16]
 8085940:	dd19      	ble.n	8085976 <__s2b+0x64>
 8085942:	f104 0909 	add.w	r9, r4, #9
 8085946:	46c8      	mov	r8, r9
 8085948:	442c      	add	r4, r5
 808594a:	f818 3b01 	ldrb.w	r3, [r8], #1
 808594e:	4601      	mov	r1, r0
 8085950:	220a      	movs	r2, #10
 8085952:	4630      	mov	r0, r6
 8085954:	3b30      	subs	r3, #48	; 0x30
 8085956:	f7ff ff9e 	bl	8085896 <__multadd>
 808595a:	45a0      	cmp	r8, r4
 808595c:	d1f5      	bne.n	808594a <__s2b+0x38>
 808595e:	f1a5 0408 	sub.w	r4, r5, #8
 8085962:	444c      	add	r4, r9
 8085964:	1b2d      	subs	r5, r5, r4
 8085966:	1963      	adds	r3, r4, r5
 8085968:	42bb      	cmp	r3, r7
 808596a:	db07      	blt.n	808597c <__s2b+0x6a>
 808596c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085970:	0052      	lsls	r2, r2, #1
 8085972:	3101      	adds	r1, #1
 8085974:	e7d9      	b.n	808592a <__s2b+0x18>
 8085976:	2509      	movs	r5, #9
 8085978:	340a      	adds	r4, #10
 808597a:	e7f3      	b.n	8085964 <__s2b+0x52>
 808597c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8085980:	4601      	mov	r1, r0
 8085982:	220a      	movs	r2, #10
 8085984:	4630      	mov	r0, r6
 8085986:	3b30      	subs	r3, #48	; 0x30
 8085988:	f7ff ff85 	bl	8085896 <__multadd>
 808598c:	e7eb      	b.n	8085966 <__s2b+0x54>

0808598e <__hi0bits>:
 808598e:	0c02      	lsrs	r2, r0, #16
 8085990:	0412      	lsls	r2, r2, #16
 8085992:	4603      	mov	r3, r0
 8085994:	b9ca      	cbnz	r2, 80859ca <__hi0bits+0x3c>
 8085996:	0403      	lsls	r3, r0, #16
 8085998:	2010      	movs	r0, #16
 808599a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 808599e:	bf04      	itt	eq
 80859a0:	021b      	lsleq	r3, r3, #8
 80859a2:	3008      	addeq	r0, #8
 80859a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80859a8:	bf04      	itt	eq
 80859aa:	011b      	lsleq	r3, r3, #4
 80859ac:	3004      	addeq	r0, #4
 80859ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80859b2:	bf04      	itt	eq
 80859b4:	009b      	lsleq	r3, r3, #2
 80859b6:	3002      	addeq	r0, #2
 80859b8:	2b00      	cmp	r3, #0
 80859ba:	db05      	blt.n	80859c8 <__hi0bits+0x3a>
 80859bc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80859c0:	f100 0001 	add.w	r0, r0, #1
 80859c4:	bf08      	it	eq
 80859c6:	2020      	moveq	r0, #32
 80859c8:	4770      	bx	lr
 80859ca:	2000      	movs	r0, #0
 80859cc:	e7e5      	b.n	808599a <__hi0bits+0xc>

080859ce <__lo0bits>:
 80859ce:	6803      	ldr	r3, [r0, #0]
 80859d0:	4602      	mov	r2, r0
 80859d2:	f013 0007 	ands.w	r0, r3, #7
 80859d6:	d00b      	beq.n	80859f0 <__lo0bits+0x22>
 80859d8:	07d9      	lsls	r1, r3, #31
 80859da:	d422      	bmi.n	8085a22 <__lo0bits+0x54>
 80859dc:	0798      	lsls	r0, r3, #30
 80859de:	bf49      	itett	mi
 80859e0:	085b      	lsrmi	r3, r3, #1
 80859e2:	089b      	lsrpl	r3, r3, #2
 80859e4:	2001      	movmi	r0, #1
 80859e6:	6013      	strmi	r3, [r2, #0]
 80859e8:	bf5c      	itt	pl
 80859ea:	2002      	movpl	r0, #2
 80859ec:	6013      	strpl	r3, [r2, #0]
 80859ee:	4770      	bx	lr
 80859f0:	b299      	uxth	r1, r3
 80859f2:	b909      	cbnz	r1, 80859f8 <__lo0bits+0x2a>
 80859f4:	2010      	movs	r0, #16
 80859f6:	0c1b      	lsrs	r3, r3, #16
 80859f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80859fc:	bf04      	itt	eq
 80859fe:	0a1b      	lsreq	r3, r3, #8
 8085a00:	3008      	addeq	r0, #8
 8085a02:	0719      	lsls	r1, r3, #28
 8085a04:	bf04      	itt	eq
 8085a06:	091b      	lsreq	r3, r3, #4
 8085a08:	3004      	addeq	r0, #4
 8085a0a:	0799      	lsls	r1, r3, #30
 8085a0c:	bf04      	itt	eq
 8085a0e:	089b      	lsreq	r3, r3, #2
 8085a10:	3002      	addeq	r0, #2
 8085a12:	07d9      	lsls	r1, r3, #31
 8085a14:	d403      	bmi.n	8085a1e <__lo0bits+0x50>
 8085a16:	085b      	lsrs	r3, r3, #1
 8085a18:	f100 0001 	add.w	r0, r0, #1
 8085a1c:	d003      	beq.n	8085a26 <__lo0bits+0x58>
 8085a1e:	6013      	str	r3, [r2, #0]
 8085a20:	4770      	bx	lr
 8085a22:	2000      	movs	r0, #0
 8085a24:	4770      	bx	lr
 8085a26:	2020      	movs	r0, #32
 8085a28:	4770      	bx	lr

08085a2a <__i2b>:
 8085a2a:	b510      	push	{r4, lr}
 8085a2c:	460c      	mov	r4, r1
 8085a2e:	2101      	movs	r1, #1
 8085a30:	f7ff fee6 	bl	8085800 <_Balloc>
 8085a34:	2201      	movs	r2, #1
 8085a36:	6144      	str	r4, [r0, #20]
 8085a38:	6102      	str	r2, [r0, #16]
 8085a3a:	bd10      	pop	{r4, pc}

08085a3c <__multiply>:
 8085a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085a40:	4615      	mov	r5, r2
 8085a42:	690a      	ldr	r2, [r1, #16]
 8085a44:	692b      	ldr	r3, [r5, #16]
 8085a46:	460c      	mov	r4, r1
 8085a48:	429a      	cmp	r2, r3
 8085a4a:	bfbe      	ittt	lt
 8085a4c:	460b      	movlt	r3, r1
 8085a4e:	462c      	movlt	r4, r5
 8085a50:	461d      	movlt	r5, r3
 8085a52:	6927      	ldr	r7, [r4, #16]
 8085a54:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8085a58:	68a3      	ldr	r3, [r4, #8]
 8085a5a:	6861      	ldr	r1, [r4, #4]
 8085a5c:	eb07 0609 	add.w	r6, r7, r9
 8085a60:	42b3      	cmp	r3, r6
 8085a62:	bfb8      	it	lt
 8085a64:	3101      	addlt	r1, #1
 8085a66:	b085      	sub	sp, #20
 8085a68:	f7ff feca 	bl	8085800 <_Balloc>
 8085a6c:	f100 0114 	add.w	r1, r0, #20
 8085a70:	460b      	mov	r3, r1
 8085a72:	2200      	movs	r2, #0
 8085a74:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 8085a78:	4543      	cmp	r3, r8
 8085a7a:	d31d      	bcc.n	8085ab8 <__multiply+0x7c>
 8085a7c:	f104 0314 	add.w	r3, r4, #20
 8085a80:	f105 0214 	add.w	r2, r5, #20
 8085a84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8085a88:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8085a8c:	9302      	str	r3, [sp, #8]
 8085a8e:	1b3b      	subs	r3, r7, r4
 8085a90:	3b15      	subs	r3, #21
 8085a92:	f023 0303 	bic.w	r3, r3, #3
 8085a96:	3304      	adds	r3, #4
 8085a98:	f104 0515 	add.w	r5, r4, #21
 8085a9c:	42af      	cmp	r7, r5
 8085a9e:	bf38      	it	cc
 8085aa0:	2304      	movcc	r3, #4
 8085aa2:	9301      	str	r3, [sp, #4]
 8085aa4:	9b02      	ldr	r3, [sp, #8]
 8085aa6:	9203      	str	r2, [sp, #12]
 8085aa8:	4293      	cmp	r3, r2
 8085aaa:	d808      	bhi.n	8085abe <__multiply+0x82>
 8085aac:	2e00      	cmp	r6, #0
 8085aae:	dc5a      	bgt.n	8085b66 <__multiply+0x12a>
 8085ab0:	6106      	str	r6, [r0, #16]
 8085ab2:	b005      	add	sp, #20
 8085ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085ab8:	f843 2b04 	str.w	r2, [r3], #4
 8085abc:	e7dc      	b.n	8085a78 <__multiply+0x3c>
 8085abe:	f8b2 a000 	ldrh.w	sl, [r2]
 8085ac2:	f1ba 0f00 	cmp.w	sl, #0
 8085ac6:	d024      	beq.n	8085b12 <__multiply+0xd6>
 8085ac8:	4689      	mov	r9, r1
 8085aca:	f04f 0c00 	mov.w	ip, #0
 8085ace:	f104 0e14 	add.w	lr, r4, #20
 8085ad2:	f85e 5b04 	ldr.w	r5, [lr], #4
 8085ad6:	f8d9 b000 	ldr.w	fp, [r9]
 8085ada:	b2ab      	uxth	r3, r5
 8085adc:	fa1f fb8b 	uxth.w	fp, fp
 8085ae0:	fb0a b303 	mla	r3, sl, r3, fp
 8085ae4:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 8085ae8:	f8d9 5000 	ldr.w	r5, [r9]
 8085aec:	4463      	add	r3, ip
 8085aee:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8085af2:	fb0a c50b 	mla	r5, sl, fp, ip
 8085af6:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 8085afa:	b29b      	uxth	r3, r3
 8085afc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8085b00:	4577      	cmp	r7, lr
 8085b02:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8085b06:	f849 3b04 	str.w	r3, [r9], #4
 8085b0a:	d8e2      	bhi.n	8085ad2 <__multiply+0x96>
 8085b0c:	9b01      	ldr	r3, [sp, #4]
 8085b0e:	f841 c003 	str.w	ip, [r1, r3]
 8085b12:	9b03      	ldr	r3, [sp, #12]
 8085b14:	3204      	adds	r2, #4
 8085b16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8085b1a:	f1b9 0f00 	cmp.w	r9, #0
 8085b1e:	d020      	beq.n	8085b62 <__multiply+0x126>
 8085b20:	468e      	mov	lr, r1
 8085b22:	f04f 0a00 	mov.w	sl, #0
 8085b26:	680b      	ldr	r3, [r1, #0]
 8085b28:	f104 0c14 	add.w	ip, r4, #20
 8085b2c:	f8bc 5000 	ldrh.w	r5, [ip]
 8085b30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8085b34:	b29b      	uxth	r3, r3
 8085b36:	fb09 b505 	mla	r5, r9, r5, fp
 8085b3a:	44aa      	add	sl, r5
 8085b3c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8085b40:	f84e 3b04 	str.w	r3, [lr], #4
 8085b44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8085b48:	f8be 5000 	ldrh.w	r5, [lr]
 8085b4c:	0c1b      	lsrs	r3, r3, #16
 8085b4e:	fb09 5303 	mla	r3, r9, r3, r5
 8085b52:	4567      	cmp	r7, ip
 8085b54:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8085b58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8085b5c:	d8e6      	bhi.n	8085b2c <__multiply+0xf0>
 8085b5e:	9d01      	ldr	r5, [sp, #4]
 8085b60:	514b      	str	r3, [r1, r5]
 8085b62:	3104      	adds	r1, #4
 8085b64:	e79e      	b.n	8085aa4 <__multiply+0x68>
 8085b66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8085b6a:	2b00      	cmp	r3, #0
 8085b6c:	d1a0      	bne.n	8085ab0 <__multiply+0x74>
 8085b6e:	3e01      	subs	r6, #1
 8085b70:	e79c      	b.n	8085aac <__multiply+0x70>
	...

08085b74 <__pow5mult>:
 8085b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085b78:	4615      	mov	r5, r2
 8085b7a:	f012 0203 	ands.w	r2, r2, #3
 8085b7e:	4606      	mov	r6, r0
 8085b80:	460f      	mov	r7, r1
 8085b82:	d007      	beq.n	8085b94 <__pow5mult+0x20>
 8085b84:	4c21      	ldr	r4, [pc, #132]	; (8085c0c <__pow5mult+0x98>)
 8085b86:	3a01      	subs	r2, #1
 8085b88:	2300      	movs	r3, #0
 8085b8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8085b8e:	f7ff fe82 	bl	8085896 <__multadd>
 8085b92:	4607      	mov	r7, r0
 8085b94:	10ad      	asrs	r5, r5, #2
 8085b96:	d035      	beq.n	8085c04 <__pow5mult+0x90>
 8085b98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8085b9a:	b93c      	cbnz	r4, 8085bac <__pow5mult+0x38>
 8085b9c:	2010      	movs	r0, #16
 8085b9e:	f7fc f9fb 	bl	8081f98 <malloc>
 8085ba2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8085ba6:	6270      	str	r0, [r6, #36]	; 0x24
 8085ba8:	6004      	str	r4, [r0, #0]
 8085baa:	60c4      	str	r4, [r0, #12]
 8085bac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8085bb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8085bb4:	b94c      	cbnz	r4, 8085bca <__pow5mult+0x56>
 8085bb6:	f240 2171 	movw	r1, #625	; 0x271
 8085bba:	4630      	mov	r0, r6
 8085bbc:	f7ff ff35 	bl	8085a2a <__i2b>
 8085bc0:	2300      	movs	r3, #0
 8085bc2:	4604      	mov	r4, r0
 8085bc4:	f8c8 0008 	str.w	r0, [r8, #8]
 8085bc8:	6003      	str	r3, [r0, #0]
 8085bca:	f04f 0900 	mov.w	r9, #0
 8085bce:	07eb      	lsls	r3, r5, #31
 8085bd0:	d50a      	bpl.n	8085be8 <__pow5mult+0x74>
 8085bd2:	4639      	mov	r1, r7
 8085bd4:	4622      	mov	r2, r4
 8085bd6:	4630      	mov	r0, r6
 8085bd8:	f7ff ff30 	bl	8085a3c <__multiply>
 8085bdc:	4680      	mov	r8, r0
 8085bde:	4639      	mov	r1, r7
 8085be0:	4630      	mov	r0, r6
 8085be2:	f7ff fe41 	bl	8085868 <_Bfree>
 8085be6:	4647      	mov	r7, r8
 8085be8:	106d      	asrs	r5, r5, #1
 8085bea:	d00b      	beq.n	8085c04 <__pow5mult+0x90>
 8085bec:	6820      	ldr	r0, [r4, #0]
 8085bee:	b938      	cbnz	r0, 8085c00 <__pow5mult+0x8c>
 8085bf0:	4622      	mov	r2, r4
 8085bf2:	4621      	mov	r1, r4
 8085bf4:	4630      	mov	r0, r6
 8085bf6:	f7ff ff21 	bl	8085a3c <__multiply>
 8085bfa:	6020      	str	r0, [r4, #0]
 8085bfc:	f8c0 9000 	str.w	r9, [r0]
 8085c00:	4604      	mov	r4, r0
 8085c02:	e7e4      	b.n	8085bce <__pow5mult+0x5a>
 8085c04:	4638      	mov	r0, r7
 8085c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085c0a:	bf00      	nop
 8085c0c:	08086880 	.word	0x08086880

08085c10 <__lshift>:
 8085c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085c14:	460c      	mov	r4, r1
 8085c16:	4607      	mov	r7, r0
 8085c18:	4691      	mov	r9, r2
 8085c1a:	6923      	ldr	r3, [r4, #16]
 8085c1c:	6849      	ldr	r1, [r1, #4]
 8085c1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8085c22:	68a3      	ldr	r3, [r4, #8]
 8085c24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8085c28:	f108 0601 	add.w	r6, r8, #1
 8085c2c:	42b3      	cmp	r3, r6
 8085c2e:	db3f      	blt.n	8085cb0 <__lshift+0xa0>
 8085c30:	4638      	mov	r0, r7
 8085c32:	f7ff fde5 	bl	8085800 <_Balloc>
 8085c36:	2300      	movs	r3, #0
 8085c38:	4605      	mov	r5, r0
 8085c3a:	f100 0114 	add.w	r1, r0, #20
 8085c3e:	f100 0210 	add.w	r2, r0, #16
 8085c42:	4618      	mov	r0, r3
 8085c44:	4553      	cmp	r3, sl
 8085c46:	db36      	blt.n	8085cb6 <__lshift+0xa6>
 8085c48:	6920      	ldr	r0, [r4, #16]
 8085c4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8085c4e:	f104 0314 	add.w	r3, r4, #20
 8085c52:	f019 091f 	ands.w	r9, r9, #31
 8085c56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8085c5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8085c5e:	d02e      	beq.n	8085cbe <__lshift+0xae>
 8085c60:	468a      	mov	sl, r1
 8085c62:	2200      	movs	r2, #0
 8085c64:	f1c9 0e20 	rsb	lr, r9, #32
 8085c68:	6818      	ldr	r0, [r3, #0]
 8085c6a:	fa00 f009 	lsl.w	r0, r0, r9
 8085c6e:	4302      	orrs	r2, r0
 8085c70:	f84a 2b04 	str.w	r2, [sl], #4
 8085c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8085c78:	459c      	cmp	ip, r3
 8085c7a:	fa22 f20e 	lsr.w	r2, r2, lr
 8085c7e:	d8f3      	bhi.n	8085c68 <__lshift+0x58>
 8085c80:	ebac 0304 	sub.w	r3, ip, r4
 8085c84:	3b15      	subs	r3, #21
 8085c86:	f023 0303 	bic.w	r3, r3, #3
 8085c8a:	3304      	adds	r3, #4
 8085c8c:	f104 0015 	add.w	r0, r4, #21
 8085c90:	4560      	cmp	r0, ip
 8085c92:	bf88      	it	hi
 8085c94:	2304      	movhi	r3, #4
 8085c96:	50ca      	str	r2, [r1, r3]
 8085c98:	b10a      	cbz	r2, 8085c9e <__lshift+0x8e>
 8085c9a:	f108 0602 	add.w	r6, r8, #2
 8085c9e:	3e01      	subs	r6, #1
 8085ca0:	4638      	mov	r0, r7
 8085ca2:	4621      	mov	r1, r4
 8085ca4:	612e      	str	r6, [r5, #16]
 8085ca6:	f7ff fddf 	bl	8085868 <_Bfree>
 8085caa:	4628      	mov	r0, r5
 8085cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085cb0:	3101      	adds	r1, #1
 8085cb2:	005b      	lsls	r3, r3, #1
 8085cb4:	e7ba      	b.n	8085c2c <__lshift+0x1c>
 8085cb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8085cba:	3301      	adds	r3, #1
 8085cbc:	e7c2      	b.n	8085c44 <__lshift+0x34>
 8085cbe:	3904      	subs	r1, #4
 8085cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8085cc4:	459c      	cmp	ip, r3
 8085cc6:	f841 2f04 	str.w	r2, [r1, #4]!
 8085cca:	d8f9      	bhi.n	8085cc0 <__lshift+0xb0>
 8085ccc:	e7e7      	b.n	8085c9e <__lshift+0x8e>

08085cce <__mcmp>:
 8085cce:	4603      	mov	r3, r0
 8085cd0:	690a      	ldr	r2, [r1, #16]
 8085cd2:	6900      	ldr	r0, [r0, #16]
 8085cd4:	b530      	push	{r4, r5, lr}
 8085cd6:	1a80      	subs	r0, r0, r2
 8085cd8:	d10d      	bne.n	8085cf6 <__mcmp+0x28>
 8085cda:	3314      	adds	r3, #20
 8085cdc:	3114      	adds	r1, #20
 8085cde:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8085ce2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8085ce6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8085cea:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8085cee:	4295      	cmp	r5, r2
 8085cf0:	d002      	beq.n	8085cf8 <__mcmp+0x2a>
 8085cf2:	d304      	bcc.n	8085cfe <__mcmp+0x30>
 8085cf4:	2001      	movs	r0, #1
 8085cf6:	bd30      	pop	{r4, r5, pc}
 8085cf8:	42a3      	cmp	r3, r4
 8085cfa:	d3f4      	bcc.n	8085ce6 <__mcmp+0x18>
 8085cfc:	e7fb      	b.n	8085cf6 <__mcmp+0x28>
 8085cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8085d02:	e7f8      	b.n	8085cf6 <__mcmp+0x28>

08085d04 <__mdiff>:
 8085d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085d08:	460c      	mov	r4, r1
 8085d0a:	4606      	mov	r6, r0
 8085d0c:	4611      	mov	r1, r2
 8085d0e:	4620      	mov	r0, r4
 8085d10:	4692      	mov	sl, r2
 8085d12:	f7ff ffdc 	bl	8085cce <__mcmp>
 8085d16:	1e05      	subs	r5, r0, #0
 8085d18:	d108      	bne.n	8085d2c <__mdiff+0x28>
 8085d1a:	4629      	mov	r1, r5
 8085d1c:	4630      	mov	r0, r6
 8085d1e:	f7ff fd6f 	bl	8085800 <_Balloc>
 8085d22:	2301      	movs	r3, #1
 8085d24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8085d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085d2c:	bfa4      	itt	ge
 8085d2e:	4653      	movge	r3, sl
 8085d30:	46a2      	movge	sl, r4
 8085d32:	4630      	mov	r0, r6
 8085d34:	f8da 1004 	ldr.w	r1, [sl, #4]
 8085d38:	bfa6      	itte	ge
 8085d3a:	461c      	movge	r4, r3
 8085d3c:	2500      	movge	r5, #0
 8085d3e:	2501      	movlt	r5, #1
 8085d40:	f7ff fd5e 	bl	8085800 <_Balloc>
 8085d44:	f100 0814 	add.w	r8, r0, #20
 8085d48:	f8da 7010 	ldr.w	r7, [sl, #16]
 8085d4c:	60c5      	str	r5, [r0, #12]
 8085d4e:	f10a 0210 	add.w	r2, sl, #16
 8085d52:	f10a 0514 	add.w	r5, sl, #20
 8085d56:	f04f 0c00 	mov.w	ip, #0
 8085d5a:	46c2      	mov	sl, r8
 8085d5c:	6926      	ldr	r6, [r4, #16]
 8085d5e:	f104 0914 	add.w	r9, r4, #20
 8085d62:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8085d66:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8085d6a:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8085d6e:	f859 3b04 	ldr.w	r3, [r9], #4
 8085d72:	fa1f f18b 	uxth.w	r1, fp
 8085d76:	4461      	add	r1, ip
 8085d78:	fa1f fc83 	uxth.w	ip, r3
 8085d7c:	0c1b      	lsrs	r3, r3, #16
 8085d7e:	eba1 010c 	sub.w	r1, r1, ip
 8085d82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8085d86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8085d8a:	b289      	uxth	r1, r1
 8085d8c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8085d90:	454e      	cmp	r6, r9
 8085d92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8085d96:	f84a 3b04 	str.w	r3, [sl], #4
 8085d9a:	d8e6      	bhi.n	8085d6a <__mdiff+0x66>
 8085d9c:	1b33      	subs	r3, r6, r4
 8085d9e:	3b15      	subs	r3, #21
 8085da0:	f023 0303 	bic.w	r3, r3, #3
 8085da4:	3415      	adds	r4, #21
 8085da6:	3304      	adds	r3, #4
 8085da8:	42a6      	cmp	r6, r4
 8085daa:	bf38      	it	cc
 8085dac:	2304      	movcc	r3, #4
 8085dae:	441d      	add	r5, r3
 8085db0:	4443      	add	r3, r8
 8085db2:	461e      	mov	r6, r3
 8085db4:	462c      	mov	r4, r5
 8085db6:	4574      	cmp	r4, lr
 8085db8:	d30e      	bcc.n	8085dd8 <__mdiff+0xd4>
 8085dba:	f10e 0203 	add.w	r2, lr, #3
 8085dbe:	1b52      	subs	r2, r2, r5
 8085dc0:	f022 0203 	bic.w	r2, r2, #3
 8085dc4:	3d03      	subs	r5, #3
 8085dc6:	45ae      	cmp	lr, r5
 8085dc8:	bf38      	it	cc
 8085dca:	2200      	movcc	r2, #0
 8085dcc:	441a      	add	r2, r3
 8085dce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8085dd2:	b18b      	cbz	r3, 8085df8 <__mdiff+0xf4>
 8085dd4:	6107      	str	r7, [r0, #16]
 8085dd6:	e7a7      	b.n	8085d28 <__mdiff+0x24>
 8085dd8:	f854 8b04 	ldr.w	r8, [r4], #4
 8085ddc:	fa1f f288 	uxth.w	r2, r8
 8085de0:	4462      	add	r2, ip
 8085de2:	1411      	asrs	r1, r2, #16
 8085de4:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8085de8:	b292      	uxth	r2, r2
 8085dea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8085dee:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8085df2:	f846 2b04 	str.w	r2, [r6], #4
 8085df6:	e7de      	b.n	8085db6 <__mdiff+0xb2>
 8085df8:	3f01      	subs	r7, #1
 8085dfa:	e7e8      	b.n	8085dce <__mdiff+0xca>

08085dfc <__ulp>:
 8085dfc:	4b11      	ldr	r3, [pc, #68]	; (8085e44 <__ulp+0x48>)
 8085dfe:	400b      	ands	r3, r1
 8085e00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8085e04:	2b00      	cmp	r3, #0
 8085e06:	dd02      	ble.n	8085e0e <__ulp+0x12>
 8085e08:	2000      	movs	r0, #0
 8085e0a:	4619      	mov	r1, r3
 8085e0c:	4770      	bx	lr
 8085e0e:	425b      	negs	r3, r3
 8085e10:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8085e14:	f04f 0000 	mov.w	r0, #0
 8085e18:	f04f 0100 	mov.w	r1, #0
 8085e1c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8085e20:	da04      	bge.n	8085e2c <__ulp+0x30>
 8085e22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8085e26:	fa43 f102 	asr.w	r1, r3, r2
 8085e2a:	4770      	bx	lr
 8085e2c:	f1a2 0314 	sub.w	r3, r2, #20
 8085e30:	2b1e      	cmp	r3, #30
 8085e32:	bfd6      	itet	le
 8085e34:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8085e38:	2301      	movgt	r3, #1
 8085e3a:	fa22 f303 	lsrle.w	r3, r2, r3
 8085e3e:	4618      	mov	r0, r3
 8085e40:	4770      	bx	lr
 8085e42:	bf00      	nop
 8085e44:	7ff00000 	.word	0x7ff00000

08085e48 <__b2d>:
 8085e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085e4c:	6907      	ldr	r7, [r0, #16]
 8085e4e:	f100 0914 	add.w	r9, r0, #20
 8085e52:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8085e56:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8085e5a:	f1a7 0804 	sub.w	r8, r7, #4
 8085e5e:	4630      	mov	r0, r6
 8085e60:	f7ff fd95 	bl	808598e <__hi0bits>
 8085e64:	f1c0 0320 	rsb	r3, r0, #32
 8085e68:	280a      	cmp	r0, #10
 8085e6a:	600b      	str	r3, [r1, #0]
 8085e6c:	491f      	ldr	r1, [pc, #124]	; (8085eec <__b2d+0xa4>)
 8085e6e:	dc17      	bgt.n	8085ea0 <__b2d+0x58>
 8085e70:	45c1      	cmp	r9, r8
 8085e72:	bf28      	it	cs
 8085e74:	2200      	movcs	r2, #0
 8085e76:	f1c0 0c0b 	rsb	ip, r0, #11
 8085e7a:	fa26 f30c 	lsr.w	r3, r6, ip
 8085e7e:	bf38      	it	cc
 8085e80:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8085e84:	ea43 0501 	orr.w	r5, r3, r1
 8085e88:	f100 0315 	add.w	r3, r0, #21
 8085e8c:	fa06 f303 	lsl.w	r3, r6, r3
 8085e90:	fa22 f20c 	lsr.w	r2, r2, ip
 8085e94:	ea43 0402 	orr.w	r4, r3, r2
 8085e98:	4620      	mov	r0, r4
 8085e9a:	4629      	mov	r1, r5
 8085e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085ea0:	45c1      	cmp	r9, r8
 8085ea2:	bf2e      	itee	cs
 8085ea4:	2200      	movcs	r2, #0
 8085ea6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8085eaa:	f1a7 0808 	subcc.w	r8, r7, #8
 8085eae:	f1b0 030b 	subs.w	r3, r0, #11
 8085eb2:	d016      	beq.n	8085ee2 <__b2d+0x9a>
 8085eb4:	f1c3 0720 	rsb	r7, r3, #32
 8085eb8:	fa22 f107 	lsr.w	r1, r2, r7
 8085ebc:	45c8      	cmp	r8, r9
 8085ebe:	fa06 f603 	lsl.w	r6, r6, r3
 8085ec2:	ea46 0601 	orr.w	r6, r6, r1
 8085ec6:	bf94      	ite	ls
 8085ec8:	2100      	movls	r1, #0
 8085eca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8085ece:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8085ed2:	fa02 f003 	lsl.w	r0, r2, r3
 8085ed6:	40f9      	lsrs	r1, r7
 8085ed8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8085edc:	ea40 0401 	orr.w	r4, r0, r1
 8085ee0:	e7da      	b.n	8085e98 <__b2d+0x50>
 8085ee2:	4614      	mov	r4, r2
 8085ee4:	ea46 0501 	orr.w	r5, r6, r1
 8085ee8:	e7d6      	b.n	8085e98 <__b2d+0x50>
 8085eea:	bf00      	nop
 8085eec:	3ff00000 	.word	0x3ff00000

08085ef0 <__d2b>:
 8085ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8085ef4:	461c      	mov	r4, r3
 8085ef6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8085efa:	2101      	movs	r1, #1
 8085efc:	4690      	mov	r8, r2
 8085efe:	f7ff fc7f 	bl	8085800 <_Balloc>
 8085f02:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8085f06:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8085f0a:	4607      	mov	r7, r0
 8085f0c:	bb2c      	cbnz	r4, 8085f5a <__d2b+0x6a>
 8085f0e:	9301      	str	r3, [sp, #4]
 8085f10:	f1b8 0300 	subs.w	r3, r8, #0
 8085f14:	d026      	beq.n	8085f64 <__d2b+0x74>
 8085f16:	4668      	mov	r0, sp
 8085f18:	9300      	str	r3, [sp, #0]
 8085f1a:	f7ff fd58 	bl	80859ce <__lo0bits>
 8085f1e:	9900      	ldr	r1, [sp, #0]
 8085f20:	b1f0      	cbz	r0, 8085f60 <__d2b+0x70>
 8085f22:	9a01      	ldr	r2, [sp, #4]
 8085f24:	f1c0 0320 	rsb	r3, r0, #32
 8085f28:	fa02 f303 	lsl.w	r3, r2, r3
 8085f2c:	430b      	orrs	r3, r1
 8085f2e:	40c2      	lsrs	r2, r0
 8085f30:	617b      	str	r3, [r7, #20]
 8085f32:	9201      	str	r2, [sp, #4]
 8085f34:	9b01      	ldr	r3, [sp, #4]
 8085f36:	2b00      	cmp	r3, #0
 8085f38:	bf14      	ite	ne
 8085f3a:	2102      	movne	r1, #2
 8085f3c:	2101      	moveq	r1, #1
 8085f3e:	61bb      	str	r3, [r7, #24]
 8085f40:	6139      	str	r1, [r7, #16]
 8085f42:	b1c4      	cbz	r4, 8085f76 <__d2b+0x86>
 8085f44:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8085f48:	4404      	add	r4, r0
 8085f4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8085f4e:	6034      	str	r4, [r6, #0]
 8085f50:	6028      	str	r0, [r5, #0]
 8085f52:	4638      	mov	r0, r7
 8085f54:	b002      	add	sp, #8
 8085f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8085f5e:	e7d6      	b.n	8085f0e <__d2b+0x1e>
 8085f60:	6179      	str	r1, [r7, #20]
 8085f62:	e7e7      	b.n	8085f34 <__d2b+0x44>
 8085f64:	a801      	add	r0, sp, #4
 8085f66:	f7ff fd32 	bl	80859ce <__lo0bits>
 8085f6a:	2101      	movs	r1, #1
 8085f6c:	9b01      	ldr	r3, [sp, #4]
 8085f6e:	6139      	str	r1, [r7, #16]
 8085f70:	617b      	str	r3, [r7, #20]
 8085f72:	3020      	adds	r0, #32
 8085f74:	e7e5      	b.n	8085f42 <__d2b+0x52>
 8085f76:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8085f7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8085f7e:	6030      	str	r0, [r6, #0]
 8085f80:	6918      	ldr	r0, [r3, #16]
 8085f82:	f7ff fd04 	bl	808598e <__hi0bits>
 8085f86:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8085f8a:	6029      	str	r1, [r5, #0]
 8085f8c:	e7e1      	b.n	8085f52 <__d2b+0x62>

08085f8e <__ratio>:
 8085f8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085f92:	4688      	mov	r8, r1
 8085f94:	4669      	mov	r1, sp
 8085f96:	4681      	mov	r9, r0
 8085f98:	f7ff ff56 	bl	8085e48 <__b2d>
 8085f9c:	460f      	mov	r7, r1
 8085f9e:	4604      	mov	r4, r0
 8085fa0:	460d      	mov	r5, r1
 8085fa2:	4640      	mov	r0, r8
 8085fa4:	a901      	add	r1, sp, #4
 8085fa6:	f7ff ff4f 	bl	8085e48 <__b2d>
 8085faa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8085fae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8085fb2:	468b      	mov	fp, r1
 8085fb4:	eba3 0c02 	sub.w	ip, r3, r2
 8085fb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8085fbc:	1a9b      	subs	r3, r3, r2
 8085fbe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8085fc2:	2b00      	cmp	r3, #0
 8085fc4:	bfd5      	itete	le
 8085fc6:	460a      	movle	r2, r1
 8085fc8:	462a      	movgt	r2, r5
 8085fca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8085fce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8085fd2:	bfd8      	it	le
 8085fd4:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8085fd8:	465b      	mov	r3, fp
 8085fda:	4602      	mov	r2, r0
 8085fdc:	4639      	mov	r1, r7
 8085fde:	4620      	mov	r0, r4
 8085fe0:	f7fd fe40 	bl	8083c64 <__aeabi_ddiv>
 8085fe4:	b003      	add	sp, #12
 8085fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08085fea <__copybits>:
 8085fea:	3901      	subs	r1, #1
 8085fec:	b570      	push	{r4, r5, r6, lr}
 8085fee:	1149      	asrs	r1, r1, #5
 8085ff0:	6914      	ldr	r4, [r2, #16]
 8085ff2:	3101      	adds	r1, #1
 8085ff4:	f102 0314 	add.w	r3, r2, #20
 8085ff8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8085ffc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8086000:	1f05      	subs	r5, r0, #4
 8086002:	42a3      	cmp	r3, r4
 8086004:	d30c      	bcc.n	8086020 <__copybits+0x36>
 8086006:	1aa3      	subs	r3, r4, r2
 8086008:	3b11      	subs	r3, #17
 808600a:	f023 0303 	bic.w	r3, r3, #3
 808600e:	3211      	adds	r2, #17
 8086010:	42a2      	cmp	r2, r4
 8086012:	bf88      	it	hi
 8086014:	2300      	movhi	r3, #0
 8086016:	4418      	add	r0, r3
 8086018:	2300      	movs	r3, #0
 808601a:	4288      	cmp	r0, r1
 808601c:	d305      	bcc.n	808602a <__copybits+0x40>
 808601e:	bd70      	pop	{r4, r5, r6, pc}
 8086020:	f853 6b04 	ldr.w	r6, [r3], #4
 8086024:	f845 6f04 	str.w	r6, [r5, #4]!
 8086028:	e7eb      	b.n	8086002 <__copybits+0x18>
 808602a:	f840 3b04 	str.w	r3, [r0], #4
 808602e:	e7f4      	b.n	808601a <__copybits+0x30>

08086030 <__any_on>:
 8086030:	f100 0214 	add.w	r2, r0, #20
 8086034:	6900      	ldr	r0, [r0, #16]
 8086036:	114b      	asrs	r3, r1, #5
 8086038:	4298      	cmp	r0, r3
 808603a:	b510      	push	{r4, lr}
 808603c:	db11      	blt.n	8086062 <__any_on+0x32>
 808603e:	dd0a      	ble.n	8086056 <__any_on+0x26>
 8086040:	f011 011f 	ands.w	r1, r1, #31
 8086044:	d007      	beq.n	8086056 <__any_on+0x26>
 8086046:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808604a:	fa24 f001 	lsr.w	r0, r4, r1
 808604e:	fa00 f101 	lsl.w	r1, r0, r1
 8086052:	428c      	cmp	r4, r1
 8086054:	d10b      	bne.n	808606e <__any_on+0x3e>
 8086056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808605a:	4293      	cmp	r3, r2
 808605c:	d803      	bhi.n	8086066 <__any_on+0x36>
 808605e:	2000      	movs	r0, #0
 8086060:	bd10      	pop	{r4, pc}
 8086062:	4603      	mov	r3, r0
 8086064:	e7f7      	b.n	8086056 <__any_on+0x26>
 8086066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808606a:	2900      	cmp	r1, #0
 808606c:	d0f5      	beq.n	808605a <__any_on+0x2a>
 808606e:	2001      	movs	r0, #1
 8086070:	e7f6      	b.n	8086060 <__any_on+0x30>

08086072 <_calloc_r>:
 8086072:	b538      	push	{r3, r4, r5, lr}
 8086074:	fb02 f501 	mul.w	r5, r2, r1
 8086078:	4629      	mov	r1, r5
 808607a:	f7fb ffcd 	bl	8082018 <_malloc_r>
 808607e:	4604      	mov	r4, r0
 8086080:	b118      	cbz	r0, 808608a <_calloc_r+0x18>
 8086082:	462a      	mov	r2, r5
 8086084:	2100      	movs	r1, #0
 8086086:	f7fe f8bd 	bl	8084204 <memset>
 808608a:	4620      	mov	r0, r4
 808608c:	bd38      	pop	{r3, r4, r5, pc}
	...

08086090 <nan>:
 8086090:	2000      	movs	r0, #0
 8086092:	4901      	ldr	r1, [pc, #4]	; (8086098 <nan+0x8>)
 8086094:	4770      	bx	lr
 8086096:	bf00      	nop
 8086098:	7ff80000 	.word	0x7ff80000

0808609c <nanf>:
 808609c:	4800      	ldr	r0, [pc, #0]	; (80860a0 <nanf+0x4>)
 808609e:	4770      	bx	lr
 80860a0:	7fc00000 	.word	0x7fc00000

080860a4 <__ascii_wctomb>:
 80860a4:	4603      	mov	r3, r0
 80860a6:	4608      	mov	r0, r1
 80860a8:	b141      	cbz	r1, 80860bc <__ascii_wctomb+0x18>
 80860aa:	2aff      	cmp	r2, #255	; 0xff
 80860ac:	d904      	bls.n	80860b8 <__ascii_wctomb+0x14>
 80860ae:	228a      	movs	r2, #138	; 0x8a
 80860b0:	f04f 30ff 	mov.w	r0, #4294967295
 80860b4:	601a      	str	r2, [r3, #0]
 80860b6:	4770      	bx	lr
 80860b8:	2001      	movs	r0, #1
 80860ba:	700a      	strb	r2, [r1, #0]
 80860bc:	4770      	bx	lr
	...

080860c0 <__aeabi_fcmpun>:
 80860c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80860c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80860c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80860cc:	d102      	bne.n	80860d4 <__aeabi_fcmpun+0x14>
 80860ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80860d2:	d108      	bne.n	80860e6 <__aeabi_fcmpun+0x26>
 80860d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80860d8:	d102      	bne.n	80860e0 <__aeabi_fcmpun+0x20>
 80860da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80860de:	d102      	bne.n	80860e6 <__aeabi_fcmpun+0x26>
 80860e0:	f04f 0000 	mov.w	r0, #0
 80860e4:	4770      	bx	lr
 80860e6:	f04f 0001 	mov.w	r0, #1
 80860ea:	4770      	bx	lr

080860ec <__aeabi_d2lz>:
 80860ec:	b538      	push	{r3, r4, r5, lr}
 80860ee:	460c      	mov	r4, r1
 80860f0:	4605      	mov	r5, r0
 80860f2:	4621      	mov	r1, r4
 80860f4:	4628      	mov	r0, r5
 80860f6:	2200      	movs	r2, #0
 80860f8:	2300      	movs	r3, #0
 80860fa:	f7fd fefb 	bl	8083ef4 <__aeabi_dcmplt>
 80860fe:	b928      	cbnz	r0, 808610c <__aeabi_d2lz+0x20>
 8086100:	4628      	mov	r0, r5
 8086102:	4621      	mov	r1, r4
 8086104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8086108:	f7fe b818 	b.w	808413c <__aeabi_d2ulz>
 808610c:	4628      	mov	r0, r5
 808610e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8086112:	f7fe f813 	bl	808413c <__aeabi_d2ulz>
 8086116:	4240      	negs	r0, r0
 8086118:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808611c:	bd38      	pop	{r3, r4, r5, pc}
 808611e:	bf00      	nop

08086120 <dynalib_user>:
 8086120:	0041 0808 0081 0808 00a9 0808 00ad 0808     A...............
 8086130:	0000 0000 6553 2074 655a 6f72 4620 6e75     ....Set Zero Fun
 8086140:	7463 6f69 206e 6163 6c6c 6465 6620 6f72     ction called fro
 8086150:	206d 6c63 756f 0064 6552 7473 7261 2074     m cloud.Restart 
 8086160:	7274 6769 6567 6572 0064 6f4c 706f 4420     triggered.Loop D
 8086170:	6c65 7961 7520 6470 7461 6465 7420 3a6f     elay updated to:
 8086180:	0020 7525 7b00 2200 6f4c 706f 6544 616c      .%u.{."LoopDela
 8086190:	2279 003a 0022 7d22 4c00 6f6f 2070 6544     y":."."}.Loop De
 80861a0:	616c 2079 7075 6164 6574 0064 7453 7261     lay updated.Star
 80861b0:	7574 3a70 5220 6e75 696e 676e 5320 7465     tup: Running Set
 80861c0:	7075 4300 6f6c 6475 6552 6573 4674 6e75     up.CloudResetFun
 80861d0:	7463 6f69 006e 6553 4c74 6f6f 4470 6c65     ction.SetLoopDel
 80861e0:	7961 5300 7465 655a 6f72 6800 6f6f 2d6b     ay.SetZero.hook-
 80861f0:	6572 7073 6e6f 6573 732f 6174 7472 7075     response/startup
 8086200:	5200 6265 6f6f 2074 6e69 6974 7461 6465     .Reboot intiated
 8086210:	4400 6265 6775 5200 6d65 746f 2065 6552     .Debug.Remote Re
 8086220:	6573 2074 6e49 7469 6169 6574 0064 6925     set Initiated.%i
 8086230:	2c00 0020 3425 312e 0066 5a22 7265 4f6f     ., .%4.1f."ZeroO
 8086240:	6666 6573 4974 4d6e 226d 003a 6173 6576     ffsetInMm":.save
 8086250:	655a 6f72 4e00 7765 7a20 7265 4f6f 6666     Zero.New zeroOff
 8086260:	6573 2074 7328 7661 6465 7420 206f 6c63     set (saved to cl
 8086270:	756f 2964 203a 2200 5444 3a22 2200 002c     oud): ."DT":.",.
 8086280:	5322 2253 003a 7372 6973 253d 2c64 7120     "SS":.rssi=%d, q
 8086290:	6175 3d6c 6425 2200 734c 6942 7374 3a22     ual=%d."LsBits":
 80862a0:	2200 734c 6d4d 3a22 2200 734c 7641 3a22     ."LsMm":."LsAv":
 80862b0:	2200 734c 6853 7641 3a22 7400 6369 4c6b     ."LsShAv":.tickL
 80862c0:	7665 6c65 3300 6f69 0074 7265 6f72 3a72     evel.3iot.error:
 80862d0:	6320 756f 646c 6e20 746f 7020 7261 6573      could not parse
 80862e0:	6a20 6f73 006e 657a 6f72 664f 7366 7465      json.zeroOffset
 80862f0:	6e49 6d4d 2820 7361 7320 6f74 6572 2064     InMm (as stored 
 8086300:	6e6f 4120 757a 6572 3a29 0020 6553 7474     on Azure): .Sett
 8086310:	6e69 2067 657a 6f72 664f 7366 7465 6e49     ing zeroOffsetIn
 8086320:	6d4d 0000                                   Mm..

08086324 <_ZTV16JsonParserStaticILj256ELj20EE>:
	...
 808632c:	00d9 0808 00ed 0808 3025 7834 0000 0000     ........%04x....

0808633c <_ZTV10JsonBuffer>:
	...
 8086344:	0d79 0808 0d95 0808                         y.......

0808634c <_ZTV10JsonParser>:
	...
 8086354:	0da9 0808 0dcd 0808                         ........

0808635c <_ZTV13JsonReference>:
	...
 8086364:	0d69 0808 0d6b 0808 5954 4550 555f 4b4e     i...k...TYPE_UNK
 8086374:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 8086384:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 8086394:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 80863a4:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 80863b4:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 80863c4:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 80863d4:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 80863e4:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 80863f4:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 8086404:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 8086414:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 8086424:	7830 3025 7832 2500 2c64 6425 4300 5153     0x%02x.%d,%d.CSQ
 8086434:	4100 2b54 5343 0d51 000a 2b0a 7325 203a     .AT+CSQ....+%s: 
 8086444:	0000 0000                                   ....

08086448 <_ZTV30CellularHelperRSSIQualResponse>:
	...
 8086450:	1aa5 0808                                   ....

08086454 <_ZTV32CellularHelperPlusStringResponse>:
	...
 808645c:	1aa5 0808 7061 0070 005a 2b25 3330 3a64     ....app.Z.%+03d:
 808646c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 808647c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 808648c:	0000 0000                                   ....

08086490 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8086498:	2959 0808 295f 0808 299d 0808 296d 0808     Y).._)...)..m)..
 80864a8:	295b 0808                                   [)..

080864ac <_ZTV9IPAddress>:
	...
 80864b4:	2ef1 0808 2ee1 0808 2ee3 0808               ............

080864c0 <_ZTV9USBSerial>:
	...
 80864c8:	2f85 0808 2feb 0808 2fc3 0808 2415 0808     ./.../.../...$..
 80864d8:	2fb5 0808 2f87 0808 2f97 0808 2fe5 0808     ./.../.../.../..
 80864e8:	2fa7 0808 2f81 0808                         ./.../..

080864f0 <_ZTVN5spark13CellularClassE>:
	...
 80864f8:	31b3 0808 31a9 0808 319f 0808 3119 0808     .1...1...1...1..
 8086508:	3193 0808 3187 0808 343f 0808 3447 0808     .1...1..?4..G4..
 8086518:	317b 0808 3173 0808 3169 0808 315f 0808     {1..s1..i1.._1..
 8086528:	3123 0808                                   #1..

0808652c <_ZTV11USARTSerial>:
	...
 8086534:	31ed 0808 3255 0808 3231 0808 2415 0808     .1..U2..12...$..
 8086544:	3201 0808 321d 0808 320f 0808 322b 0808     .2...2...2..+2..
 8086554:	31ef 0808 31f3 0808                         .1...1..

0808655c <_ZTV7TwoWire>:
	...
 8086564:	3309 0808 3353 0808 332b 0808 330b 0808     .3..S3..+3...3..
 8086574:	3333 0808 333b 0808 3343 0808 334b 0808     33..;3..C3..K3..

08086584 <_ZTVN5spark12NetworkClassE>:
	...
 808658c:	33ff 0808 3409 0808 3413 0808 341d 0808     .3...4...4...4..
 808659c:	3427 0808 3433 0808 343f 0808 3447 0808     '4..34..?4..G4..
 80865ac:	344f 0808 345b 0808 3463 0808 346d 0808     O4..[4..c4..m4..
 80865bc:	3479 0808                                   y4..

080865c0 <_ZSt7nothrow>:
 80865c0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80865d0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080865e1 <day_name.4782>:
 80865e1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80865f1:	6972 6153                                    riSat

080865f6 <mon_name.4783>:
 80865f6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8086606:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8086616:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

08086628 <fpi.6203>:
 8086628:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8086638:	0000 0000                                   ....

0808663c <fpinan.6239>:
 808663c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 808664c:	0000 0000                                   ....

08086650 <tinytens>:
 8086650:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8086660:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8086670:	6f43 64ac 0628 1168                         Co.d(.h.

08086678 <_ctype_>:
 8086678:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8086688:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8086698:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80866a8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80866b8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80866c8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80866d8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80866e8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80866f8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 8086778:	2e00 0000                                   ....

0808677c <_C_numeric_locale>:
 808677c:	6779 0808 643d 0808 0078 2000 0043 4f50     yg..=d..x.. C.PO
 808678c:	4953 0058                                   SIX.

08086790 <__mprec_bigtens>:
 8086790:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80867a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80867b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080867b8 <__mprec_tens>:
 80867b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80867c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80867d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80867e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80867f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8086808:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8086818:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8086828:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8086838:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8086848:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8086858:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8086868:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8086878:	9db4 79d9 7843 44ea                         ...yCx.D

08086880 <p05.6127>:
 8086880:	0005 0000 0019 0000 007d 0000               ........}...

0808688c <link_const_variable_data_end>:
 808688c:	08080af5 	.word	0x08080af5
 8086890:	0808209d 	.word	0x0808209d
 8086894:	08082529 	.word	0x08082529
 8086898:	0808277d 	.word	0x0808277d
 808689c:	080827d9 	.word	0x080827d9
 80868a0:	080831bd 	.word	0x080831bd
 80868a4:	080834c1 	.word	0x080834c1
 80868a8:	080835c5 	.word	0x080835c5

080868ac <link_constructors_end>:
 80868ac:	00000000 	.word	0x00000000
