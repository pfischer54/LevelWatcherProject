
c:/Users/P/OneDrive/Development/Particle/projects/LevelWatcherProject/target/2.1.0/electron/LevelWatcherProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000068a0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080868c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001e8  20000000  080868c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000810  200001e8  200001e8  000401e8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08086aac  08086aac  00036aac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08086ad4  08086ad4  00036ad4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014efa2  00000000  00000000  00036ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017ac4  00000000  00000000  00185a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002628  00000000  00000000  0019d53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00005dc8  00000000  00000000  0019fb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002bf2e  00000000  00000000  001a592e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00035a25  00000000  00000000  001d185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b990b  00000000  00000000  00207281  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006de4  00000000  00000000  002c0b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00020da0  00000000  00000000  002c7970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <strftime+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080040:	4809      	ldr	r0, [pc, #36]	; (8080068 <module_user_pre_init+0x28>)
 8080042:	490a      	ldr	r1, [pc, #40]	; (808006c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080044:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080046:	4288      	cmp	r0, r1
 8080048:	d005      	beq.n	8080056 <module_user_pre_init+0x16>
 808004a:	4a09      	ldr	r2, [pc, #36]	; (8080070 <module_user_pre_init+0x30>)
 808004c:	4282      	cmp	r2, r0
 808004e:	d002      	beq.n	8080056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080050:	1a12      	subs	r2, r2, r0
 8080052:	f004 f8cd 	bl	80841f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080056:	4807      	ldr	r0, [pc, #28]	; (8080074 <module_user_pre_init+0x34>)
 8080058:	4a07      	ldr	r2, [pc, #28]	; (8080078 <module_user_pre_init+0x38>)
 808005a:	2100      	movs	r1, #0
 808005c:	1a12      	subs	r2, r2, r0
 808005e:	f004 f8d5 	bl	808420c <memset>
    return &link_heap_start;
}
 8080062:	4806      	ldr	r0, [pc, #24]	; (808007c <module_user_pre_init+0x3c>)
 8080064:	bd08      	pop	{r3, pc}
 8080066:	bf00      	nop
 8080068:	20000000 	.word	0x20000000
 808006c:	080868c4 	.word	0x080868c4
 8080070:	200001e8 	.word	0x200001e8
 8080074:	200001e8 	.word	0x200001e8
 8080078:	200009f8 	.word	0x200009f8
 808007c:	200009f8 	.word	0x200009f8

08080080 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080080:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080082:	f002 fc3b 	bl	80828fc <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080086:	2500      	movs	r5, #0
 8080088:	4e05      	ldr	r6, [pc, #20]	; (80800a0 <module_user_init+0x20>)
 808008a:	4c06      	ldr	r4, [pc, #24]	; (80800a4 <module_user_init+0x24>)
 808008c:	1ba4      	subs	r4, r4, r6
 808008e:	08a4      	lsrs	r4, r4, #2
 8080090:	42a5      	cmp	r5, r4
 8080092:	d100      	bne.n	8080096 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080094:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080096:	f856 3b04 	ldr.w	r3, [r6], #4
 808009a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808009c:	3501      	adds	r5, #1
 808009e:	e7f7      	b.n	8080090 <module_user_init+0x10>
 80800a0:	08086894 	.word	0x08086894
 80800a4:	080868b4 	.word	0x080868b4

080800a8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800a8:	f000 b94e 	b.w	8080348 <setup>

080800ac <module_user_loop>:
}

void module_user_loop() {
 80800ac:	b508      	push	{r3, lr}
    loop();
 80800ae:	f000 f9cb 	bl	8080448 <loop>
    _post_loop();
}
 80800b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800b6:	f002 bbe3 	b.w	8082880 <_post_loop>

080800ba <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ba:	f001 bf71 	b.w	8081fa0 <malloc>

080800be <_Znaj>:
 80800be:	f001 bf6f 	b.w	8081fa0 <malloc>

080800c2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800c2:	f001 bf75 	b.w	8081fb0 <free>

080800c6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800c6:	7800      	ldrb	r0, [r0, #0]
 80800c8:	fab0 f080 	clz	r0, r0
 80800cc:	0940      	lsrs	r0, r0, #5
 80800ce:	4770      	bx	lr

080800d0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d0:	2301      	movs	r3, #1
 80800d2:	7003      	strb	r3, [r0, #0]
 80800d4:	4770      	bx	lr
	...

080800d8 <_ZN16JsonParserStaticILj256ELj20EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80800d8:	b510      	push	{r4, lr}
 80800da:	4604      	mov	r4, r0
 80800dc:	4b02      	ldr	r3, [pc, #8]	; (80800e8 <_ZN16JsonParserStaticILj256ELj20EED1Ev+0x10>)
 80800de:	6003      	str	r3, [r0, #0]
 80800e0:	f000 fe66 	bl	8080db0 <_ZN10JsonParserD1Ev>
 80800e4:	4620      	mov	r0, r4
 80800e6:	bd10      	pop	{r4, pc}
 80800e8:	08086334 	.word	0x08086334

080800ec <_ZN16JsonParserStaticILj256ELj20EED0Ev>:
 80800ec:	b510      	push	{r4, lr}
 80800ee:	4604      	mov	r4, r0
 80800f0:	f7ff fff2 	bl	80800d8 <_ZN16JsonParserStaticILj256ELj20EED1Ev>
 80800f4:	4620      	mov	r0, r4
 80800f6:	f44f 711b 	mov.w	r1, #620	; 0x26c
 80800fa:	f003 faca 	bl	8083692 <_ZdlPvj>
 80800fe:	4620      	mov	r0, r4
 8080100:	bd10      	pop	{r4, pc}

08080102 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080102:	b40e      	push	{r1, r2, r3}
 8080104:	b503      	push	{r0, r1, lr}
 8080106:	ab03      	add	r3, sp, #12
 8080108:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 808010c:	2101      	movs	r1, #1
        va_start(args, format);
 808010e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 8080110:	f002 f9d6 	bl	80824c0 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080114:	b002      	add	sp, #8
 8080116:	f85d eb04 	ldr.w	lr, [sp], #4
 808011a:	b003      	add	sp, #12
 808011c:	4770      	bx	lr
	...

08080120 <_Z7setZero6String>:
//STARTUP(cellular_credentials_set("3iot", "", "", NULL)); //globalM2M SIM starting 8953
STARTUP(cellular_credentials_set("luner", "", "", NULL));
//STARTUP(cellular_credentials_set("globaldata", "", "", NULL));  //globalM2M SIM starting 89234 or 89444

int setZero(String command)
{
 8080120:	b507      	push	{r0, r1, r2, lr}
    Serial.printlnf("Set Zero Function called from cloud");
 8080122:	f002 ff97 	bl	8083054 <_Z16_fetch_usbserialv>
 8080126:	490b      	ldr	r1, [pc, #44]	; (8080154 <_Z7setZero6String+0x34>)
 8080128:	f7ff ffeb 	bl	8080102 <_ZN5Print8printlnfEPKcz>
    zeroOffsetInMm = 0.0; //Reset zero offset to allow re-calculation
 808012c:	2200      	movs	r2, #0
 808012e:	2300      	movs	r3, #0
 8080130:	4909      	ldr	r1, [pc, #36]	; (8080158 <_Z7setZero6String+0x38>)
    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
 8080132:	480a      	ldr	r0, [pc, #40]	; (808015c <_Z7setZero6String+0x3c>)
    zeroOffsetInMm = 0.0; //Reset zero offset to allow re-calculation
 8080134:	e9c1 2300 	strd	r2, r3, [r1]
    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
 8080138:	2118      	movs	r1, #24
 808013a:	9100      	str	r1, [sp, #0]
 808013c:	f001 fabf 	bl	80816be <_ZN14RunningAverage9fillValueEdh>
    zeroingInProgress = true;
 8080140:	2301      	movs	r3, #1
    sample = 1;
    return 0;
}
 8080142:	2000      	movs	r0, #0
    zeroingInProgress = true;
 8080144:	4a06      	ldr	r2, [pc, #24]	; (8080160 <_Z7setZero6String+0x40>)
 8080146:	7013      	strb	r3, [r2, #0]
    sample = 1;
 8080148:	4a06      	ldr	r2, [pc, #24]	; (8080164 <_Z7setZero6String+0x44>)
 808014a:	6013      	str	r3, [r2, #0]
}
 808014c:	b003      	add	sp, #12
 808014e:	f85d fb04 	ldr.w	pc, [sp], #4
 8080152:	bf00      	nop
 8080154:	0808613c 	.word	0x0808613c
 8080158:	200004e8 	.word	0x200004e8
 808015c:	20000208 	.word	0x20000208
 8080160:	200004f0 	.word	0x200004f0
 8080164:	20000008 	.word	0x20000008

08080168 <_Z18cloudResetFunction6String>:
    Particle.publish("Loop Delay updated", loopDelayData, 600, PRIVATE);
    return 0;
}

int cloudResetFunction(String command)
{
 8080168:	b508      	push	{r3, lr}
    Serial.printlnf("Restart triggered");
 808016a:	f002 ff73 	bl	8083054 <_Z16_fetch_usbserialv>
 808016e:	4906      	ldr	r1, [pc, #24]	; (8080188 <_Z18cloudResetFunction6String+0x20>)
 8080170:	f7ff ffc7 	bl	8080102 <_ZN5Print8printlnfEPKcz>
    resetFlag = true;
 8080174:	2201      	movs	r2, #1
 8080176:	4b05      	ldr	r3, [pc, #20]	; (808018c <_Z18cloudResetFunction6String+0x24>)
 8080178:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808017a:	f001 fcfb 	bl	8081b74 <HAL_Timer_Get_Milli_Seconds>
    rebootSync = millis();
 808017e:	4b04      	ldr	r3, [pc, #16]	; (8080190 <_Z18cloudResetFunction6String+0x28>)
 8080180:	6018      	str	r0, [r3, #0]
    return 0;
}
 8080182:	2000      	movs	r0, #0
 8080184:	bd08      	pop	{r3, pc}
 8080186:	bf00      	nop
 8080188:	08086160 	.word	0x08086160
 808018c:	200004a0 	.word	0x200004a0
 8080190:	2000049c 	.word	0x2000049c

08080194 <_Z5blinkm>:
    blinkLong(3);
    blinkShort(3);
}

void blink(unsigned long onTime)
{
 8080194:	b538      	push	{r3, r4, r5, lr}
 8080196:	4604      	mov	r4, r0
    digitalWrite(onboardLed, HIGH);
 8080198:	4d08      	ldr	r5, [pc, #32]	; (80801bc <_Z5blinkm+0x28>)
 808019a:	2101      	movs	r1, #1
 808019c:	8828      	ldrh	r0, [r5, #0]
 808019e:	f003 f9fc 	bl	808359a <digitalWrite>
    // We'll leave it on for 1 second...
    delay(onTime);
 80801a2:	4620      	mov	r0, r4
 80801a4:	f002 faf8 	bl	8082798 <delay>
    // Then we'll turn it off...
    digitalWrite(onboardLed, LOW);
 80801a8:	8828      	ldrh	r0, [r5, #0]
 80801aa:	2100      	movs	r1, #0
 80801ac:	f003 f9f5 	bl	808359a <digitalWrite>
    delay(200);
}
 80801b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(200);
 80801b4:	20c8      	movs	r0, #200	; 0xc8
 80801b6:	f002 baef 	b.w	8082798 <delay>
 80801ba:	bf00      	nop
 80801bc:	20000004 	.word	0x20000004

080801c0 <_Z9blinkLongi>:

void blinkLong(int times)
{
 80801c0:	b538      	push	{r3, r4, r5, lr}
 80801c2:	4605      	mov	r5, r0
    for (int i = 0; i < times; i++)
 80801c4:	2400      	movs	r4, #0
 80801c6:	42ac      	cmp	r4, r5
 80801c8:	da05      	bge.n	80801d6 <_Z9blinkLongi+0x16>
    {
        blink(600);
 80801ca:	f44f 7016 	mov.w	r0, #600	; 0x258
 80801ce:	f7ff ffe1 	bl	8080194 <_Z5blinkm>
    for (int i = 0; i < times; i++)
 80801d2:	3401      	adds	r4, #1
 80801d4:	e7f7      	b.n	80801c6 <_Z9blinkLongi+0x6>
    }
}
 80801d6:	bd38      	pop	{r3, r4, r5, pc}

080801d8 <_Z10blinkShorti>:

void blinkShort(int times)
{
 80801d8:	b538      	push	{r3, r4, r5, lr}
 80801da:	4605      	mov	r5, r0
    for (int i = 0; i < times; i++)
 80801dc:	2400      	movs	r4, #0
 80801de:	42ac      	cmp	r4, r5
 80801e0:	da04      	bge.n	80801ec <_Z10blinkShorti+0x14>
    {
        blink(200);
 80801e2:	20c8      	movs	r0, #200	; 0xc8
 80801e4:	f7ff ffd6 	bl	8080194 <_Z5blinkm>
    for (int i = 0; i < times; i++)
 80801e8:	3401      	adds	r4, #1
 80801ea:	e7f8      	b.n	80801de <_Z10blinkShorti+0x6>
    }
}
 80801ec:	bd38      	pop	{r3, r4, r5, pc}

080801ee <_Z3sosv>:
{
 80801ee:	b508      	push	{r3, lr}
    blinkShort(3);
 80801f0:	2003      	movs	r0, #3
 80801f2:	f7ff fff1 	bl	80801d8 <_Z10blinkShorti>
    blinkLong(3);
 80801f6:	2003      	movs	r0, #3
 80801f8:	f7ff ffe2 	bl	80801c0 <_Z9blinkLongi>
}
 80801fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    blinkShort(3);
 8080200:	2003      	movs	r0, #3
 8080202:	f7ff bfe9 	b.w	80801d8 <_Z10blinkShorti>

08080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080206:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080208:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 808020a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808020c:	b17c      	cbz	r4, 808022e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 808020e:	6863      	ldr	r3, [r4, #4]
 8080210:	3b01      	subs	r3, #1
 8080212:	6063      	str	r3, [r4, #4]
 8080214:	b95b      	cbnz	r3, 808022e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8080216:	6823      	ldr	r3, [r4, #0]
 8080218:	4620      	mov	r0, r4
 808021a:	689b      	ldr	r3, [r3, #8]
 808021c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808021e:	68a3      	ldr	r3, [r4, #8]
 8080220:	3b01      	subs	r3, #1
 8080222:	60a3      	str	r3, [r4, #8]
 8080224:	b91b      	cbnz	r3, 808022e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080226:	6823      	ldr	r3, [r4, #0]
 8080228:	4620      	mov	r0, r4
 808022a:	68db      	ldr	r3, [r3, #12]
 808022c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 808022e:	4628      	mov	r0, r5
 8080230:	bd38      	pop	{r3, r4, r5, pc}
	...

08080234 <_Z12setLoopDelay6String>:
{
 8080234:	b570      	push	{r4, r5, r6, lr}
 8080236:	b09a      	sub	sp, #104	; 0x68
    loopDelay = atol(delay);
 8080238:	6800      	ldr	r0, [r0, #0]
 808023a:	f003 ffc7 	bl	80841cc <atol>
 808023e:	4d38      	ldr	r5, [pc, #224]	; (8080320 <_Z12setLoopDelay6String+0xec>)
    Serial.printlnf("Loop Delay updated to: " + String::format("%u", loopDelay));
 8080240:	4e38      	ldr	r6, [pc, #224]	; (8080324 <_Z12setLoopDelay6String+0xf0>)
    loopDelay = atol(delay);
 8080242:	6028      	str	r0, [r5, #0]
    Serial.printlnf("Loop Delay updated to: " + String::format("%u", loopDelay));
 8080244:	f002 ff06 	bl	8083054 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080248:	4937      	ldr	r1, [pc, #220]	; (8080328 <_Z12setLoopDelay6String+0xf4>)
 808024a:	4604      	mov	r4, r0
 808024c:	a816      	add	r0, sp, #88	; 0x58
 808024e:	f001 ffe1 	bl	8082214 <_ZN6StringC1EPKc>
 8080252:	682a      	ldr	r2, [r5, #0]
 8080254:	4631      	mov	r1, r6
 8080256:	a812      	add	r0, sp, #72	; 0x48
 8080258:	f002 f8b8 	bl	80823cc <_ZN6String6formatEPKcz>
 808025c:	a912      	add	r1, sp, #72	; 0x48
 808025e:	a816      	add	r0, sp, #88	; 0x58
 8080260:	f002 f881 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080264:	6801      	ldr	r1, [r0, #0]
 8080266:	4620      	mov	r0, r4
 8080268:	f7ff ff4b 	bl	8080102 <_ZN5Print8printlnfEPKcz>
 808026c:	a812      	add	r0, sp, #72	; 0x48
 808026e:	f001 ff87 	bl	8082180 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080272:	a816      	add	r0, sp, #88	; 0x58
 8080274:	f001 ff84 	bl	8082180 <_ZN6StringD1Ev>
    loopDelayData = String("{") +
 8080278:	492c      	ldr	r1, [pc, #176]	; (808032c <_Z12setLoopDelay6String+0xf8>)
 808027a:	a802      	add	r0, sp, #8
 808027c:	f001 ffca 	bl	8082214 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8080280:	a902      	add	r1, sp, #8
 8080282:	a80a      	add	r0, sp, #40	; 0x28
 8080284:	f002 f805 	bl	8082292 <_ZN6StringC1ERKS_>
                    String("\"LoopDelay\":") + String("\"") + String::format("%u", loopDelay) +
 8080288:	4929      	ldr	r1, [pc, #164]	; (8080330 <_Z12setLoopDelay6String+0xfc>)
 808028a:	a806      	add	r0, sp, #24
 808028c:	f001 ffc2 	bl	8082214 <_ZN6StringC1EPKc>
 8080290:	a906      	add	r1, sp, #24
 8080292:	a80a      	add	r0, sp, #40	; 0x28
 8080294:	f002 f867 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080298:	4604      	mov	r4, r0
 808029a:	4926      	ldr	r1, [pc, #152]	; (8080334 <_Z12setLoopDelay6String+0x100>)
 808029c:	a80e      	add	r0, sp, #56	; 0x38
 808029e:	f001 ffb9 	bl	8082214 <_ZN6StringC1EPKc>
 80802a2:	a90e      	add	r1, sp, #56	; 0x38
 80802a4:	4620      	mov	r0, r4
 80802a6:	f002 f85e 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80802aa:	4604      	mov	r4, r0
 80802ac:	682a      	ldr	r2, [r5, #0]
 80802ae:	4631      	mov	r1, r6
 80802b0:	a812      	add	r0, sp, #72	; 0x48
 80802b2:	f002 f88b 	bl	80823cc <_ZN6String6formatEPKcz>
 80802b6:	a912      	add	r1, sp, #72	; 0x48
 80802b8:	4620      	mov	r0, r4
 80802ba:	f002 f854 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80802be:	4604      	mov	r4, r0
                    String("\"}");
 80802c0:	491d      	ldr	r1, [pc, #116]	; (8080338 <_Z12setLoopDelay6String+0x104>)
 80802c2:	a816      	add	r0, sp, #88	; 0x58
 80802c4:	f001 ffa6 	bl	8082214 <_ZN6StringC1EPKc>
 80802c8:	a916      	add	r1, sp, #88	; 0x58
 80802ca:	4620      	mov	r0, r4
 80802cc:	f002 f84b 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80802d0:	4c1a      	ldr	r4, [pc, #104]	; (808033c <_Z12setLoopDelay6String+0x108>)
 80802d2:	4601      	mov	r1, r0
 80802d4:	4620      	mov	r0, r4
 80802d6:	f001 ffcd 	bl	8082274 <_ZN6StringaSERKS_>
 80802da:	a816      	add	r0, sp, #88	; 0x58
 80802dc:	f001 ff50 	bl	8082180 <_ZN6StringD1Ev>
                    String("\"LoopDelay\":") + String("\"") + String::format("%u", loopDelay) +
 80802e0:	a812      	add	r0, sp, #72	; 0x48
 80802e2:	f001 ff4d 	bl	8082180 <_ZN6StringD1Ev>
 80802e6:	a80e      	add	r0, sp, #56	; 0x38
 80802e8:	f001 ff4a 	bl	8082180 <_ZN6StringD1Ev>
 80802ec:	a806      	add	r0, sp, #24
 80802ee:	f001 ff47 	bl	8082180 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80802f2:	a80a      	add	r0, sp, #40	; 0x28
 80802f4:	f001 ff44 	bl	8082180 <_ZN6StringD1Ev>
    loopDelayData = String("{") +
 80802f8:	a802      	add	r0, sp, #8
 80802fa:	f001 ff41 	bl	8082180 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80802fe:	4b10      	ldr	r3, [pc, #64]	; (8080340 <_Z12setLoopDelay6String+0x10c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080300:	4910      	ldr	r1, [pc, #64]	; (8080344 <_Z12setLoopDelay6String+0x110>)
 8080302:	781b      	ldrb	r3, [r3, #0]
 8080304:	a816      	add	r0, sp, #88	; 0x58
 8080306:	f88d 3000 	strb.w	r3, [sp]
 808030a:	6822      	ldr	r2, [r4, #0]
 808030c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080310:	f002 fc74 	bl	8082bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080314:	a817      	add	r0, sp, #92	; 0x5c
 8080316:	f7ff ff76 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808031a:	2000      	movs	r0, #0
 808031c:	b01a      	add	sp, #104	; 0x68
 808031e:	bd70      	pop	{r4, r5, r6, pc}
 8080320:	20000000 	.word	0x20000000
 8080324:	0808618a 	.word	0x0808618a
 8080328:	08086172 	.word	0x08086172
 808032c:	0808618d 	.word	0x0808618d
 8080330:	0808618f 	.word	0x0808618f
 8080334:	0808619c 	.word	0x0808619c
 8080338:	0808619e 	.word	0x0808619e
 808033c:	20000220 	.word	0x20000220
 8080340:	200001ec 	.word	0x200001ec
 8080344:	080861a1 	.word	0x080861a1

08080348 <setup>:

void setup()
{
 8080348:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
    //
    Serial.printlnf("Startup: Running Setup");
 808034c:	f002 fe82 	bl	8083054 <_Z16_fetch_usbserialv>
 8080350:	492d      	ldr	r1, [pc, #180]	; (8080408 <setup+0xc0>)
 8080352:	f7ff fed6 	bl	8080102 <_ZN5Print8printlnfEPKcz>
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
 8080356:	2400      	movs	r4, #0
        conn_prop.size = sizeof(conn_prop);
 8080358:	2308      	movs	r3, #8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 808035a:	2601      	movs	r6, #1
        return register_function(call_raw_user_function, (void*)func, funcKey);
 808035c:	4d2b      	ldr	r5, [pc, #172]	; (808040c <setup+0xc4>)
        conn_prop.size = sizeof(conn_prop);
 808035e:	f8ad 3008 	strh.w	r3, [sp, #8]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8080362:	aa02      	add	r2, sp, #8
 8080364:	4623      	mov	r3, r4
 8080366:	f247 5130 	movw	r1, #30000	; 0x7530
 808036a:	4620      	mov	r0, r4
        particle::protocol::connection_properties_t conn_prop = {0};
 808036c:	f8ad 400a 	strh.w	r4, [sp, #10]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
 8080370:	9603      	str	r6, [sp, #12]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
 8080372:	f001 fe05 	bl	8081f80 <spark_set_connection_property>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080376:	4628      	mov	r0, r5
 8080378:	4a25      	ldr	r2, [pc, #148]	; (8080410 <setup+0xc8>)
 808037a:	4926      	ldr	r1, [pc, #152]	; (8080414 <setup+0xcc>)
 808037c:	f002 fb4b 	bl	8082a16 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080380:	4628      	mov	r0, r5
 8080382:	4a25      	ldr	r2, [pc, #148]	; (8080418 <setup+0xd0>)
 8080384:	4925      	ldr	r1, [pc, #148]	; (808041c <setup+0xd4>)
 8080386:	f002 fb46 	bl	8082a16 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808038a:	4628      	mov	r0, r5
 808038c:	4a24      	ldr	r2, [pc, #144]	; (8080420 <setup+0xd8>)
 808038e:	4925      	ldr	r1, [pc, #148]	; (8080424 <setup+0xdc>)
 8080390:	f002 fb41 	bl	8082a16 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 8080394:	4924      	ldr	r1, [pc, #144]	; (8080428 <setup+0xe0>)
 8080396:	4623      	mov	r3, r4
 8080398:	4622      	mov	r2, r4
 808039a:	e9cd 4400 	strd	r4, r4, [sp]
 808039e:	4823      	ldr	r0, [pc, #140]	; (808042c <setup+0xe4>)
 80803a0:	f001 fdde 	bl	8081f60 <spark_subscribe>
    Particle.function("SetZero", setZero);

    // Subscribe to the webhook response event
    Particle.subscribe("hook-response/startup", startupHandler, MY_DEVICES);

    longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);   // Clear out averaging array
 80803a4:	f04f 0800 	mov.w	r8, #0
 80803a8:	f04f 0900 	mov.w	r9, #0
 80803ac:	2318      	movs	r3, #24
 80803ae:	4642      	mov	r2, r8
 80803b0:	9300      	str	r3, [sp, #0]
 80803b2:	481f      	ldr	r0, [pc, #124]	; (8080430 <setup+0xe8>)
 80803b4:	464b      	mov	r3, r9
 80803b6:	f001 f982 	bl	80816be <_ZN14RunningAverage9fillValueEdh>
    shortAveragingArray.fillValue(0.0, SHORT_SAMPLE_SIZE); // Clear out averaging array
 80803ba:	2303      	movs	r3, #3
 80803bc:	4642      	mov	r2, r8
 80803be:	9300      	str	r3, [sp, #0]
 80803c0:	481c      	ldr	r0, [pc, #112]	; (8080434 <setup+0xec>)
 80803c2:	464b      	mov	r3, r9
 80803c4:	f001 f97b 	bl	80816be <_ZN14RunningAverage9fillValueEdh>
    pinMode(onboardLed, OUTPUT);                           //Setup activity led so we can blink it to show we're rolling...
 80803c8:	4b1b      	ldr	r3, [pc, #108]	; (8080438 <setup+0xf0>)
    //   setADCSampleTime(ADC_SampleTime_3Cycles);
    //set ADC gain  ads.setGain(GAIN_ONE);        // 1x gain   +/- 4.096V  1 bit=0.125mV
    //Setup ADC
    ads.setGain(GAIN_TWO); //GAIN_ONE for ...
 80803ca:	4d1c      	ldr	r5, [pc, #112]	; (808043c <setup+0xf4>)
    pinMode(onboardLed, OUTPUT);                           //Setup activity led so we can blink it to show we're rolling...
 80803cc:	8818      	ldrh	r0, [r3, #0]
 80803ce:	4631      	mov	r1, r6
 80803d0:	f003 f8d2 	bl	8083578 <pinMode>
    ads.setGain(GAIN_TWO); //GAIN_ONE for ...
 80803d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80803d8:	4628      	mov	r0, r5
 80803da:	f001 f9da 	bl	8081792 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    ads.begin();
 80803de:	4628      	mov	r0, r5
 80803e0:	f001 f9d0 	bl	8081784 <_ZN16Adafruit_ADS10155beginEv>
 80803e4:	4b16      	ldr	r3, [pc, #88]	; (8080440 <setup+0xf8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80803e6:	4622      	mov	r2, r4
 80803e8:	781b      	ldrb	r3, [r3, #0]
 80803ea:	4916      	ldr	r1, [pc, #88]	; (8080444 <setup+0xfc>)
 80803ec:	f88d 3000 	strb.w	r3, [sp]
 80803f0:	a802      	add	r0, sp, #8
 80803f2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80803f6:	f002 fc01 	bl	8082bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80803fa:	a803      	add	r0, sp, #12
 80803fc:	f7ff ff03 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("startup", NULL, 600, PRIVATE); //TODO:  Specify and send sensor ID so as to retrieve correct offset.
}
 8080400:	b004      	add	sp, #16
 8080402:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8080406:	bf00      	nop
 8080408:	080861b4 	.word	0x080861b4
 808040c:	080829eb 	.word	0x080829eb
 8080410:	080861cb 	.word	0x080861cb
 8080414:	08080169 	.word	0x08080169
 8080418:	080861de 	.word	0x080861de
 808041c:	08080235 	.word	0x08080235
 8080420:	080861eb 	.word	0x080861eb
 8080424:	08080121 	.word	0x08080121
 8080428:	08080be9 	.word	0x08080be9
 808042c:	080861f3 	.word	0x080861f3
 8080430:	20000208 	.word	0x20000208
 8080434:	200004a8 	.word	0x200004a8
 8080438:	20000004 	.word	0x20000004
 808043c:	200001ee 	.word	0x200001ee
 8080440:	200001ec 	.word	0x200001ec
 8080444:	08086201 	.word	0x08086201

08080448 <loop>:
//
// Main loop
//
void loop()
{
 8080448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808044c:	b0f8      	sub	sp, #480	; 0x1e0
 808044e:	f001 fb91 	bl	8081b74 <HAL_Timer_Get_Milli_Seconds>
    if ((millis() >= REBOOT_INTERVAL_IN_MS))
 8080452:	4b27      	ldr	r3, [pc, #156]	; (80804f0 <loop+0xa8>)
 8080454:	4298      	cmp	r0, r3
 8080456:	d911      	bls.n	808047c <loop+0x34>
    {
        //Reboot regularly to freshen up
        // do things here  before reset and then push the button
        sos();
 8080458:	f7ff fec9 	bl	80801ee <_Z3sosv>
 808045c:	4b25      	ldr	r3, [pc, #148]	; (80804f4 <loop+0xac>)
 808045e:	4a26      	ldr	r2, [pc, #152]	; (80804f8 <loop+0xb0>)
 8080460:	781b      	ldrb	r3, [r3, #0]
 8080462:	4926      	ldr	r1, [pc, #152]	; (80804fc <loop+0xb4>)
 8080464:	f88d 3000 	strb.w	r3, [sp]
 8080468:	a86b      	add	r0, sp, #428	; 0x1ac
 808046a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 808046e:	f002 fbc5 	bl	8082bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080472:	a86c      	add	r0, sp, #432	; 0x1b0
 8080474:	f7ff fec7 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Debug", "Reboot intiated", 300, PRIVATE);
        System.reset();
 8080478:	f001 fe10 	bl	808209c <_ZN11SystemClass5resetEv>
    }

    if ((resetFlag) && (millis() - rebootSync >= REBOOT_DELAY_IN_MS))
 808047c:	4b20      	ldr	r3, [pc, #128]	; (8080500 <loop+0xb8>)
 808047e:	781b      	ldrb	r3, [r3, #0]
 8080480:	b1d3      	cbz	r3, 80804b8 <loop+0x70>
 8080482:	f001 fb77 	bl	8081b74 <HAL_Timer_Get_Milli_Seconds>
 8080486:	4b1f      	ldr	r3, [pc, #124]	; (8080504 <loop+0xbc>)
 8080488:	681b      	ldr	r3, [r3, #0]
 808048a:	1ac0      	subs	r0, r0, r3
 808048c:	f643 2397 	movw	r3, #14999	; 0x3a97
 8080490:	4298      	cmp	r0, r3
 8080492:	d911      	bls.n	80804b8 <loop+0x70>
    {
        // do things here  before reset and then push the button
        sos();
 8080494:	f7ff feab 	bl	80801ee <_Z3sosv>
 8080498:	4b16      	ldr	r3, [pc, #88]	; (80804f4 <loop+0xac>)
 808049a:	4a1b      	ldr	r2, [pc, #108]	; (8080508 <loop+0xc0>)
 808049c:	781b      	ldrb	r3, [r3, #0]
 808049e:	4917      	ldr	r1, [pc, #92]	; (80804fc <loop+0xb4>)
 80804a0:	f88d 3000 	strb.w	r3, [sp]
 80804a4:	a86b      	add	r0, sp, #428	; 0x1ac
 80804a6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80804aa:	f002 fba7 	bl	8082bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80804ae:	a86c      	add	r0, sp, #432	; 0x1b0
 80804b0:	f7ff fea9 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("Debug", "Remote Reset Initiated", 300, PRIVATE);
        System.reset();
 80804b4:	f001 fdf2 	bl	808209c <_ZN11SystemClass5resetEv>
    }

    time_t time = Time.now();
 80804b8:	f002 f953 	bl	8082762 <_ZN9TimeClass3nowEv>

    CellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();
 80804bc:	4913      	ldr	r1, [pc, #76]	; (808050c <loop+0xc4>)
    time_t time = Time.now();
 80804be:	4604      	mov	r4, r0
    CellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();
 80804c0:	a86b      	add	r0, sp, #428	; 0x1ac
 80804c2:	f001 faad 	bl	8081a20 <_ZNK19CellularHelperClass11getRSSIQualEv>

    if (!startupCompleted)
 80804c6:	4b12      	ldr	r3, [pc, #72]	; (8080510 <loop+0xc8>)
 80804c8:	781b      	ldrb	r3, [r3, #0]
 80804ca:	bb2b      	cbnz	r3, 8080518 <loop+0xd0>
    {
        blinkShort(4);             // Let know i'm waiting...
 80804cc:	2004      	movs	r0, #4
 80804ce:	f7ff fe83 	bl	80801d8 <_Z10blinkShorti>
        delay(STARTUP_LOOP_DELAY); //Wait a bit to  let syseem run ok
 80804d2:	f242 7010 	movw	r0, #10000	; 0x2710

    // Wait nn seconds
    if (zeroingInProgress)
        delay(ZEROING_LOOP_DELAY); //Use shorter delay when averaging for zero...
    else
        delay(loopDelay); //10 min: 600,000 1 min: 60,000 10 sec: 10,000
 80804d6:	f002 f95f 	bl	8082798 <delay>
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80804da:	4b0e      	ldr	r3, [pc, #56]	; (8080514 <loop+0xcc>)
 80804dc:	a872      	add	r0, sp, #456	; 0x1c8
 80804de:	936b      	str	r3, [sp, #428]	; 0x1ac
 80804e0:	f001 fe4e 	bl	8082180 <_ZN6StringD1Ev>
 80804e4:	a86e      	add	r0, sp, #440	; 0x1b8
 80804e6:	f001 fe4b 	bl	8082180 <_ZN6StringD1Ev>
}
 80804ea:	b078      	add	sp, #480	; 0x1e0
 80804ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80804f0:	481907ff 	.word	0x481907ff
 80804f4:	200001ec 	.word	0x200001ec
 80804f8:	08086209 	.word	0x08086209
 80804fc:	08086219 	.word	0x08086219
 8080500:	200004a0 	.word	0x200004a0
 8080504:	2000049c 	.word	0x2000049c
 8080508:	0808621f 	.word	0x0808621f
 808050c:	200004f1 	.word	0x200004f1
 8080510:	200004c0 	.word	0x200004c0
 8080514:	08086464 	.word	0x08086464
    blinkShort(1); //Signal normal running loop
 8080518:	2001      	movs	r0, #1
 808051a:	f7ff fe5d 	bl	80801d8 <_Z10blinkShorti>
    waterLevelSampleReading = ads.readADC_SingleEnded(0); //FOR NDC setup -- ads.readADC_Differential_0_1() for ...;
 808051e:	2100      	movs	r1, #0
 8080520:	48bb      	ldr	r0, [pc, #748]	; (8080810 <loop+0x3c8>)
 8080522:	f001 f938 	bl	8081796 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8080526:	4abb      	ldr	r2, [pc, #748]	; (8080814 <loop+0x3cc>)
    if (waterLevelSampleReading > 1 and waterLevelSampleReading <= MAX_16_BIT_ANALOGUE_BIT_VALUE)
 8080528:	1e83      	subs	r3, r0, #2
    waterLevelSampleReading = ads.readADC_SingleEnded(0); //FOR NDC setup -- ads.readADC_Differential_0_1() for ...;
 808052a:	6010      	str	r0, [r2, #0]
    if (waterLevelSampleReading > 1 and waterLevelSampleReading <= MAX_16_BIT_ANALOGUE_BIT_VALUE)
 808052c:	f647 5298 	movw	r2, #32152	; 0x7d98
 8080530:	4293      	cmp	r3, r2
 8080532:	d81d      	bhi.n	8080570 <loop+0x128>
        waterLevelInMm = (waterLevelSampleReading - FOUR_MA_OFFSET_IN_BITS) * (SENSOR_FULL_RANGE_IN_MM / (MAX_16_BIT_ANALOGUE_BIT_VALUE - FOUR_MA_OFFSET_IN_BITS)) - zeroOffsetInMm;
 8080534:	f003 fa06 	bl	8083944 <__aeabi_i2d>
 8080538:	a3b1      	add	r3, pc, #708	; (adr r3, 8080800 <loop+0x3b8>)
 808053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808053e:	f003 f8b3 	bl	80836a8 <__aeabi_dsub>
 8080542:	a3b1      	add	r3, pc, #708	; (adr r3, 8080808 <loop+0x3c0>)
 8080544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080548:	f003 fa66 	bl	8083a18 <__aeabi_dmul>
 808054c:	4bb2      	ldr	r3, [pc, #712]	; (8080818 <loop+0x3d0>)
 808054e:	4db3      	ldr	r5, [pc, #716]	; (808081c <loop+0x3d4>)
 8080550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080554:	f003 f8a8 	bl	80836a8 <__aeabi_dsub>
 8080558:	4602      	mov	r2, r0
 808055a:	460b      	mov	r3, r1
        longAveragingArray.addValue(waterLevelInMm);
 808055c:	48b0      	ldr	r0, [pc, #704]	; (8080820 <loop+0x3d8>)
        waterLevelInMm = (waterLevelSampleReading - FOUR_MA_OFFSET_IN_BITS) * (SENSOR_FULL_RANGE_IN_MM / (MAX_16_BIT_ANALOGUE_BIT_VALUE - FOUR_MA_OFFSET_IN_BITS)) - zeroOffsetInMm;
 808055e:	e9c5 2300 	strd	r2, r3, [r5]
        longAveragingArray.addValue(waterLevelInMm);
 8080562:	f001 f86c 	bl	808163e <_ZN14RunningAverage8addValueEd>
        shortAveragingArray.addValue(waterLevelInMm);
 8080566:	e9d5 2300 	ldrd	r2, r3, [r5]
 808056a:	48ae      	ldr	r0, [pc, #696]	; (8080824 <loop+0x3dc>)
 808056c:	f001 f867 	bl	808163e <_ZN14RunningAverage8addValueEd>
    Serial.printlnf(String::format("%i", sample) + ", " + String::format("%u", waterLevelSampleReading) + ", " + String::format("%4.1f", waterLevelInMm) + ", " + String::format("%4.1f", longAveragingArray.getAverage()) + ", " + String::format("%4.1f", shortAveragingArray.getAverage()));
 8080570:	f002 fd70 	bl	8083054 <_Z16_fetch_usbserialv>
 8080574:	4dac      	ldr	r5, [pc, #688]	; (8080828 <loop+0x3e0>)
 8080576:	4606      	mov	r6, r0
 8080578:	682a      	ldr	r2, [r5, #0]
 808057a:	49ac      	ldr	r1, [pc, #688]	; (808082c <loop+0x3e4>)
 808057c:	a853      	add	r0, sp, #332	; 0x14c
 808057e:	f001 ff25 	bl	80823cc <_ZN6String6formatEPKcz>
	StringSumHelper(const String &s) : String(s) {}
 8080582:	a953      	add	r1, sp, #332	; 0x14c
 8080584:	a857      	add	r0, sp, #348	; 0x15c
 8080586:	f001 fe84 	bl	8082292 <_ZN6StringC1ERKS_>
 808058a:	49a9      	ldr	r1, [pc, #676]	; (8080830 <loop+0x3e8>)
 808058c:	a857      	add	r0, sp, #348	; 0x15c
 808058e:	f001 fef6 	bl	808237e <_ZplRK15StringSumHelperPKc>
 8080592:	4607      	mov	r7, r0
 8080594:	4b9f      	ldr	r3, [pc, #636]	; (8080814 <loop+0x3cc>)
 8080596:	49a7      	ldr	r1, [pc, #668]	; (8080834 <loop+0x3ec>)
 8080598:	681a      	ldr	r2, [r3, #0]
 808059a:	a85b      	add	r0, sp, #364	; 0x16c
 808059c:	f001 ff16 	bl	80823cc <_ZN6String6formatEPKcz>
 80805a0:	4638      	mov	r0, r7
 80805a2:	a95b      	add	r1, sp, #364	; 0x16c
 80805a4:	f001 fedf 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80805a8:	49a1      	ldr	r1, [pc, #644]	; (8080830 <loop+0x3e8>)
 80805aa:	f001 fee8 	bl	808237e <_ZplRK15StringSumHelperPKc>
 80805ae:	4607      	mov	r7, r0
 80805b0:	4b9a      	ldr	r3, [pc, #616]	; (808081c <loop+0x3d4>)
 80805b2:	49a1      	ldr	r1, [pc, #644]	; (8080838 <loop+0x3f0>)
 80805b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805b8:	a85f      	add	r0, sp, #380	; 0x17c
 80805ba:	f001 ff07 	bl	80823cc <_ZN6String6formatEPKcz>
 80805be:	4638      	mov	r0, r7
 80805c0:	a95f      	add	r1, sp, #380	; 0x17c
 80805c2:	f001 fed0 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80805c6:	499a      	ldr	r1, [pc, #616]	; (8080830 <loop+0x3e8>)
 80805c8:	f001 fed9 	bl	808237e <_ZplRK15StringSumHelperPKc>
 80805cc:	4607      	mov	r7, r0
 80805ce:	4894      	ldr	r0, [pc, #592]	; (8080820 <loop+0x3d8>)
 80805d0:	f001 f865 	bl	808169e <_ZN14RunningAverage10getAverageEv>
 80805d4:	4602      	mov	r2, r0
 80805d6:	460b      	mov	r3, r1
 80805d8:	a863      	add	r0, sp, #396	; 0x18c
 80805da:	4997      	ldr	r1, [pc, #604]	; (8080838 <loop+0x3f0>)
 80805dc:	f001 fef6 	bl	80823cc <_ZN6String6formatEPKcz>
 80805e0:	4638      	mov	r0, r7
 80805e2:	a963      	add	r1, sp, #396	; 0x18c
 80805e4:	f001 febf 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80805e8:	4991      	ldr	r1, [pc, #580]	; (8080830 <loop+0x3e8>)
 80805ea:	f001 fec8 	bl	808237e <_ZplRK15StringSumHelperPKc>
 80805ee:	4607      	mov	r7, r0
 80805f0:	488c      	ldr	r0, [pc, #560]	; (8080824 <loop+0x3dc>)
 80805f2:	f001 f854 	bl	808169e <_ZN14RunningAverage10getAverageEv>
 80805f6:	4602      	mov	r2, r0
 80805f8:	460b      	mov	r3, r1
 80805fa:	a867      	add	r0, sp, #412	; 0x19c
 80805fc:	498e      	ldr	r1, [pc, #568]	; (8080838 <loop+0x3f0>)
 80805fe:	f001 fee5 	bl	80823cc <_ZN6String6formatEPKcz>
 8080602:	a967      	add	r1, sp, #412	; 0x19c
 8080604:	4638      	mov	r0, r7
 8080606:	f001 feae 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 808060a:	6801      	ldr	r1, [r0, #0]
 808060c:	4630      	mov	r0, r6
 808060e:	f7ff fd78 	bl	8080102 <_ZN5Print8printlnfEPKcz>
 8080612:	a867      	add	r0, sp, #412	; 0x19c
 8080614:	f001 fdb4 	bl	8082180 <_ZN6StringD1Ev>
 8080618:	a863      	add	r0, sp, #396	; 0x18c
 808061a:	f001 fdb1 	bl	8082180 <_ZN6StringD1Ev>
 808061e:	a85f      	add	r0, sp, #380	; 0x17c
 8080620:	f001 fdae 	bl	8082180 <_ZN6StringD1Ev>
 8080624:	a85b      	add	r0, sp, #364	; 0x16c
 8080626:	f001 fdab 	bl	8082180 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808062a:	a857      	add	r0, sp, #348	; 0x15c
 808062c:	f001 fda8 	bl	8082180 <_ZN6StringD1Ev>
 8080630:	a853      	add	r0, sp, #332	; 0x14c
 8080632:	f001 fda5 	bl	8082180 <_ZN6StringD1Ev>
    if (sample == LONG_SAMPLE_SIZE)
 8080636:	f8d5 8000 	ldr.w	r8, [r5]
 808063a:	f1b8 0f18 	cmp.w	r8, #24
 808063e:	f040 808b 	bne.w	8080758 <loop+0x310>
        sample = -1;           //  Hit the buffers no need to count anymore
 8080642:	f04f 33ff 	mov.w	r3, #4294967295
        if (zeroingInProgress) //This is true if a cloud call has been made to set zero
 8080646:	4f7d      	ldr	r7, [pc, #500]	; (808083c <loop+0x3f4>)
        sample = -1;           //  Hit the buffers no need to count anymore
 8080648:	602b      	str	r3, [r5, #0]
        if (zeroingInProgress) //This is true if a cloud call has been made to set zero
 808064a:	783b      	ldrb	r3, [r7, #0]
 808064c:	2b00      	cmp	r3, #0
 808064e:	f000 8083 	beq.w	8080758 <loop+0x310>
            zeroOffsetInMm = longAveragingArray.getAverage();
 8080652:	4873      	ldr	r0, [pc, #460]	; (8080820 <loop+0x3d8>)
 8080654:	f001 f823 	bl	808169e <_ZN14RunningAverage10getAverageEv>
 8080658:	4e6f      	ldr	r6, [pc, #444]	; (8080818 <loop+0x3d0>)
 808065a:	e9c6 0100 	strd	r0, r1, [r6]
            longAveragingArray.clear();
 808065e:	4870      	ldr	r0, [pc, #448]	; (8080820 <loop+0x3d8>)
 8080660:	f000 ffcc 	bl	80815fc <_ZN14RunningAverage5clearEv>
            longAveragingArray.fillValue(0.0, LONG_SAMPLE_SIZE);
 8080664:	2200      	movs	r2, #0
 8080666:	2300      	movs	r3, #0
 8080668:	486d      	ldr	r0, [pc, #436]	; (8080820 <loop+0x3d8>)
 808066a:	f8cd 8000 	str.w	r8, [sp]
 808066e:	f001 f826 	bl	80816be <_ZN14RunningAverage9fillValueEdh>
            shortAveragingArray.clear();
 8080672:	486c      	ldr	r0, [pc, #432]	; (8080824 <loop+0x3dc>)
 8080674:	f000 ffc2 	bl	80815fc <_ZN14RunningAverage5clearEv>
            shortAveragingArray.fillValue(0.0, SHORT_SAMPLE_SIZE);
 8080678:	2303      	movs	r3, #3
 808067a:	2200      	movs	r2, #0
 808067c:	4869      	ldr	r0, [pc, #420]	; (8080824 <loop+0x3dc>)
 808067e:	9300      	str	r3, [sp, #0]
 8080680:	2300      	movs	r3, #0
 8080682:	f001 f81c 	bl	80816be <_ZN14RunningAverage9fillValueEdh>
            zeroData = String("{") +
 8080686:	496e      	ldr	r1, [pc, #440]	; (8080840 <loop+0x3f8>)
 8080688:	a853      	add	r0, sp, #332	; 0x14c
 808068a:	f001 fdc3 	bl	8082214 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 808068e:	a953      	add	r1, sp, #332	; 0x14c
 8080690:	a85b      	add	r0, sp, #364	; 0x16c
 8080692:	f001 fdfe 	bl	8082292 <_ZN6StringC1ERKS_>
                       String("\"ZeroOffsetInMm\":") + String("\"") + String::format("%4.1f", zeroOffsetInMm) +
 8080696:	496b      	ldr	r1, [pc, #428]	; (8080844 <loop+0x3fc>)
 8080698:	a857      	add	r0, sp, #348	; 0x15c
 808069a:	f001 fdbb 	bl	8082214 <_ZN6StringC1EPKc>
 808069e:	a957      	add	r1, sp, #348	; 0x15c
 80806a0:	a85b      	add	r0, sp, #364	; 0x16c
 80806a2:	f001 fe60 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80806a6:	4605      	mov	r5, r0
 80806a8:	4967      	ldr	r1, [pc, #412]	; (8080848 <loop+0x400>)
 80806aa:	a85f      	add	r0, sp, #380	; 0x17c
 80806ac:	f001 fdb2 	bl	8082214 <_ZN6StringC1EPKc>
 80806b0:	4628      	mov	r0, r5
 80806b2:	a95f      	add	r1, sp, #380	; 0x17c
 80806b4:	f001 fe57 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80806b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80806bc:	4605      	mov	r5, r0
 80806be:	495e      	ldr	r1, [pc, #376]	; (8080838 <loop+0x3f0>)
 80806c0:	a863      	add	r0, sp, #396	; 0x18c
 80806c2:	f001 fe83 	bl	80823cc <_ZN6String6formatEPKcz>
 80806c6:	4628      	mov	r0, r5
 80806c8:	a963      	add	r1, sp, #396	; 0x18c
 80806ca:	f001 fe4c 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80806ce:	4605      	mov	r5, r0
                       String("\"}");
 80806d0:	495e      	ldr	r1, [pc, #376]	; (808084c <loop+0x404>)
 80806d2:	a867      	add	r0, sp, #412	; 0x19c
 80806d4:	f001 fd9e 	bl	8082214 <_ZN6StringC1EPKc>
 80806d8:	4628      	mov	r0, r5
 80806da:	a967      	add	r1, sp, #412	; 0x19c
 80806dc:	f001 fe43 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80806e0:	4e5b      	ldr	r6, [pc, #364]	; (8080850 <loop+0x408>)
 80806e2:	4601      	mov	r1, r0
 80806e4:	4630      	mov	r0, r6
 80806e6:	f001 fdc5 	bl	8082274 <_ZN6StringaSERKS_>
 80806ea:	a867      	add	r0, sp, #412	; 0x19c
 80806ec:	f001 fd48 	bl	8082180 <_ZN6StringD1Ev>
                       String("\"ZeroOffsetInMm\":") + String("\"") + String::format("%4.1f", zeroOffsetInMm) +
 80806f0:	a863      	add	r0, sp, #396	; 0x18c
 80806f2:	f001 fd45 	bl	8082180 <_ZN6StringD1Ev>
 80806f6:	a85f      	add	r0, sp, #380	; 0x17c
 80806f8:	f001 fd42 	bl	8082180 <_ZN6StringD1Ev>
 80806fc:	a857      	add	r0, sp, #348	; 0x15c
 80806fe:	f001 fd3f 	bl	8082180 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080702:	a85b      	add	r0, sp, #364	; 0x16c
 8080704:	f001 fd3c 	bl	8082180 <_ZN6StringD1Ev>
            zeroData = String("{") +
 8080708:	a853      	add	r0, sp, #332	; 0x14c
 808070a:	f001 fd39 	bl	8082180 <_ZN6StringD1Ev>
 808070e:	4b51      	ldr	r3, [pc, #324]	; (8080854 <loop+0x40c>)
 8080710:	4951      	ldr	r1, [pc, #324]	; (8080858 <loop+0x410>)
 8080712:	781b      	ldrb	r3, [r3, #0]
 8080714:	a867      	add	r0, sp, #412	; 0x19c
 8080716:	f88d 3000 	strb.w	r3, [sp]
 808071a:	6832      	ldr	r2, [r6, #0]
 808071c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080720:	f002 fa6c 	bl	8082bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080724:	a868      	add	r0, sp, #416	; 0x1a0
 8080726:	f7ff fd6e 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Serial.printlnf("New zeroOffset (saved to cloud): " + zeroData);
 808072a:	f002 fc93 	bl	8083054 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 808072e:	494b      	ldr	r1, [pc, #300]	; (808085c <loop+0x414>)
 8080730:	4605      	mov	r5, r0
 8080732:	a867      	add	r0, sp, #412	; 0x19c
 8080734:	f001 fd6e 	bl	8082214 <_ZN6StringC1EPKc>
 8080738:	4631      	mov	r1, r6
 808073a:	a867      	add	r0, sp, #412	; 0x19c
 808073c:	f001 fe13 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080740:	6801      	ldr	r1, [r0, #0]
 8080742:	4628      	mov	r0, r5
 8080744:	f7ff fcdd 	bl	8080102 <_ZN5Print8printlnfEPKcz>
class StringSumHelper : public String
 8080748:	a867      	add	r0, sp, #412	; 0x19c
 808074a:	f001 fd19 	bl	8082180 <_ZN6StringD1Ev>
            blinkLong(5); // Signal zeroing complete.
 808074e:	2005      	movs	r0, #5
 8080750:	f7ff fd36 	bl	80801c0 <_Z9blinkLongi>
            zeroingInProgress = false;
 8080754:	2300      	movs	r3, #0
 8080756:	703b      	strb	r3, [r7, #0]
    data = String("{") +
 8080758:	4939      	ldr	r1, [pc, #228]	; (8080840 <loop+0x3f8>)
 808075a:	a803      	add	r0, sp, #12
 808075c:	f001 fd5a 	bl	8082214 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8080760:	a903      	add	r1, sp, #12
 8080762:	a80b      	add	r0, sp, #44	; 0x2c
 8080764:	f001 fd95 	bl	8082292 <_ZN6StringC1ERKS_>
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
 8080768:	493d      	ldr	r1, [pc, #244]	; (8080860 <loop+0x418>)
 808076a:	a807      	add	r0, sp, #28
 808076c:	f001 fd52 	bl	8082214 <_ZN6StringC1EPKc>
 8080770:	a907      	add	r1, sp, #28
 8080772:	a80b      	add	r0, sp, #44	; 0x2c
 8080774:	f001 fdf7 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080778:	4605      	mov	r5, r0
 808077a:	4933      	ldr	r1, [pc, #204]	; (8080848 <loop+0x400>)
 808077c:	a80f      	add	r0, sp, #60	; 0x3c
 808077e:	f001 fd49 	bl	8082214 <_ZN6StringC1EPKc>
 8080782:	4628      	mov	r0, r5
 8080784:	a90f      	add	r1, sp, #60	; 0x3c
 8080786:	f001 fdee 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 808078a:	4605      	mov	r5, r0
 808078c:	4b35      	ldr	r3, [pc, #212]	; (8080864 <loop+0x41c>)
 808078e:	4622      	mov	r2, r4
 8080790:	681b      	ldr	r3, [r3, #0]
 8080792:	4935      	ldr	r1, [pc, #212]	; (8080868 <loop+0x420>)
 8080794:	9300      	str	r3, [sp, #0]
 8080796:	a813      	add	r0, sp, #76	; 0x4c
 8080798:	17e3      	asrs	r3, r4, #31
 808079a:	f001 ff83 	bl	80826a4 <_ZN9TimeClass6formatExPKc>
 808079e:	a913      	add	r1, sp, #76	; 0x4c
 80807a0:	4628      	mov	r0, r5
 80807a2:	f001 fde0 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80807a6:	4604      	mov	r4, r0
 80807a8:	4930      	ldr	r1, [pc, #192]	; (808086c <loop+0x424>)
 80807aa:	a817      	add	r0, sp, #92	; 0x5c
 80807ac:	f001 fd32 	bl	8082214 <_ZN6StringC1EPKc>
 80807b0:	4620      	mov	r0, r4
 80807b2:	a917      	add	r1, sp, #92	; 0x5c
 80807b4:	f001 fdd7 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80807b8:	4604      	mov	r4, r0
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
 80807ba:	492d      	ldr	r1, [pc, #180]	; (8080870 <loop+0x428>)
 80807bc:	a81b      	add	r0, sp, #108	; 0x6c
 80807be:	f001 fd29 	bl	8082214 <_ZN6StringC1EPKc>
 80807c2:	4620      	mov	r0, r4
 80807c4:	a91b      	add	r1, sp, #108	; 0x6c
 80807c6:	f001 fdce 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80807ca:	4604      	mov	r4, r0
 80807cc:	491e      	ldr	r1, [pc, #120]	; (8080848 <loop+0x400>)
 80807ce:	a81f      	add	r0, sp, #124	; 0x7c
 80807d0:	f001 fd20 	bl	8082214 <_ZN6StringC1EPKc>
 80807d4:	4620      	mov	r0, r4
 80807d6:	a91f      	add	r1, sp, #124	; 0x7c
 80807d8:	f001 fdc5 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80807dc:	e9dd 2376 	ldrd	r2, r3, [sp, #472]	; 0x1d8
 80807e0:	4604      	mov	r4, r0
 80807e2:	4924      	ldr	r1, [pc, #144]	; (8080874 <loop+0x42c>)
 80807e4:	a823      	add	r0, sp, #140	; 0x8c
 80807e6:	f001 fdf1 	bl	80823cc <_ZN6String6formatEPKcz>
 80807ea:	4620      	mov	r0, r4
 80807ec:	a923      	add	r1, sp, #140	; 0x8c
 80807ee:	f001 fdba 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80807f2:	4604      	mov	r4, r0
 80807f4:	491d      	ldr	r1, [pc, #116]	; (808086c <loop+0x424>)
 80807f6:	a827      	add	r0, sp, #156	; 0x9c
 80807f8:	e03e      	b.n	8080878 <loop+0x430>
 80807fa:	bf00      	nop
 80807fc:	f3af 8000 	nop.w
 8080800:	00000000 	.word	0x00000000
 8080804:	40b91e00 	.word	0x40b91e00
 8080808:	cdc369d9 	.word	0xcdc369d9
 808080c:	3fb3e751 	.word	0x3fb3e751
 8080810:	200001ee 	.word	0x200001ee
 8080814:	200004d0 	.word	0x200004d0
 8080818:	200004e8 	.word	0x200004e8
 808081c:	200004c8 	.word	0x200004c8
 8080820:	20000208 	.word	0x20000208
 8080824:	200004a8 	.word	0x200004a8
 8080828:	20000008 	.word	0x20000008
 808082c:	08086236 	.word	0x08086236
 8080830:	08086239 	.word	0x08086239
 8080834:	0808618a 	.word	0x0808618a
 8080838:	0808623c 	.word	0x0808623c
 808083c:	200004f0 	.word	0x200004f0
 8080840:	0808618d 	.word	0x0808618d
 8080844:	08086242 	.word	0x08086242
 8080848:	0808619c 	.word	0x0808619c
 808084c:	0808619e 	.word	0x0808619e
 8080850:	200004d4 	.word	0x200004d4
 8080854:	200001ec 	.word	0x200001ec
 8080858:	08086254 	.word	0x08086254
 808085c:	0808625d 	.word	0x0808625d
 8080860:	0808627f 	.word	0x0808627f
 8080864:	20000010 	.word	0x20000010
 8080868:	20000508 	.word	0x20000508
 808086c:	08086285 	.word	0x08086285
 8080870:	08086288 	.word	0x08086288
 8080874:	0808628e 	.word	0x0808628e
 8080878:	f001 fccc 	bl	8082214 <_ZN6StringC1EPKc>
 808087c:	4620      	mov	r0, r4
 808087e:	a927      	add	r1, sp, #156	; 0x9c
 8080880:	f001 fd71 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080884:	4604      	mov	r4, r0
           String("\"LsBits\":") + String("\"") + String::format("%u", waterLevelSampleReading) + String("\",") +
 8080886:	4988      	ldr	r1, [pc, #544]	; (8080aa8 <loop+0x660>)
 8080888:	a82b      	add	r0, sp, #172	; 0xac
 808088a:	f001 fcc3 	bl	8082214 <_ZN6StringC1EPKc>
 808088e:	4620      	mov	r0, r4
 8080890:	a92b      	add	r1, sp, #172	; 0xac
 8080892:	f001 fd68 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080896:	4604      	mov	r4, r0
 8080898:	4984      	ldr	r1, [pc, #528]	; (8080aac <loop+0x664>)
 808089a:	a82f      	add	r0, sp, #188	; 0xbc
 808089c:	f001 fcba 	bl	8082214 <_ZN6StringC1EPKc>
 80808a0:	4620      	mov	r0, r4
 80808a2:	a92f      	add	r1, sp, #188	; 0xbc
 80808a4:	f001 fd5f 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80808a8:	4604      	mov	r4, r0
 80808aa:	4b81      	ldr	r3, [pc, #516]	; (8080ab0 <loop+0x668>)
 80808ac:	4981      	ldr	r1, [pc, #516]	; (8080ab4 <loop+0x66c>)
 80808ae:	681a      	ldr	r2, [r3, #0]
 80808b0:	a833      	add	r0, sp, #204	; 0xcc
 80808b2:	f001 fd8b 	bl	80823cc <_ZN6String6formatEPKcz>
 80808b6:	4620      	mov	r0, r4
 80808b8:	a933      	add	r1, sp, #204	; 0xcc
 80808ba:	f001 fd54 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80808be:	4604      	mov	r4, r0
 80808c0:	497d      	ldr	r1, [pc, #500]	; (8080ab8 <loop+0x670>)
 80808c2:	a837      	add	r0, sp, #220	; 0xdc
 80808c4:	f001 fca6 	bl	8082214 <_ZN6StringC1EPKc>
 80808c8:	4620      	mov	r0, r4
 80808ca:	a937      	add	r1, sp, #220	; 0xdc
 80808cc:	f001 fd4b 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80808d0:	4604      	mov	r4, r0
           String("\"LsMm\":") + String("\"") + String::format("%4.1f", waterLevelInMm) + String("\",") +
 80808d2:	497a      	ldr	r1, [pc, #488]	; (8080abc <loop+0x674>)
 80808d4:	a83b      	add	r0, sp, #236	; 0xec
 80808d6:	f001 fc9d 	bl	8082214 <_ZN6StringC1EPKc>
 80808da:	4620      	mov	r0, r4
 80808dc:	a93b      	add	r1, sp, #236	; 0xec
 80808de:	f001 fd42 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80808e2:	4604      	mov	r4, r0
 80808e4:	4971      	ldr	r1, [pc, #452]	; (8080aac <loop+0x664>)
 80808e6:	a83f      	add	r0, sp, #252	; 0xfc
 80808e8:	f001 fc94 	bl	8082214 <_ZN6StringC1EPKc>
 80808ec:	4620      	mov	r0, r4
 80808ee:	a93f      	add	r1, sp, #252	; 0xfc
 80808f0:	f001 fd39 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80808f4:	4604      	mov	r4, r0
 80808f6:	4b72      	ldr	r3, [pc, #456]	; (8080ac0 <loop+0x678>)
 80808f8:	4972      	ldr	r1, [pc, #456]	; (8080ac4 <loop+0x67c>)
 80808fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80808fe:	a843      	add	r0, sp, #268	; 0x10c
 8080900:	f001 fd64 	bl	80823cc <_ZN6String6formatEPKcz>
 8080904:	4620      	mov	r0, r4
 8080906:	a943      	add	r1, sp, #268	; 0x10c
 8080908:	f001 fd2d 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 808090c:	4604      	mov	r4, r0
 808090e:	496a      	ldr	r1, [pc, #424]	; (8080ab8 <loop+0x670>)
 8080910:	a847      	add	r0, sp, #284	; 0x11c
 8080912:	f001 fc7f 	bl	8082214 <_ZN6StringC1EPKc>
 8080916:	4620      	mov	r0, r4
 8080918:	a947      	add	r1, sp, #284	; 0x11c
 808091a:	f001 fd24 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 808091e:	4604      	mov	r4, r0
           String("\"LsAv\":") + String("\"") + String::format("%4.1f", longAveragingArray.getAverage()) + String("\",") +
 8080920:	4969      	ldr	r1, [pc, #420]	; (8080ac8 <loop+0x680>)
 8080922:	a84b      	add	r0, sp, #300	; 0x12c
 8080924:	f001 fc76 	bl	8082214 <_ZN6StringC1EPKc>
 8080928:	4620      	mov	r0, r4
 808092a:	a94b      	add	r1, sp, #300	; 0x12c
 808092c:	f001 fd1b 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080930:	4604      	mov	r4, r0
 8080932:	495e      	ldr	r1, [pc, #376]	; (8080aac <loop+0x664>)
 8080934:	a84f      	add	r0, sp, #316	; 0x13c
 8080936:	f001 fc6d 	bl	8082214 <_ZN6StringC1EPKc>
 808093a:	4620      	mov	r0, r4
 808093c:	a94f      	add	r1, sp, #316	; 0x13c
 808093e:	f001 fd12 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080942:	4604      	mov	r4, r0
 8080944:	4861      	ldr	r0, [pc, #388]	; (8080acc <loop+0x684>)
 8080946:	f000 feaa 	bl	808169e <_ZN14RunningAverage10getAverageEv>
 808094a:	4602      	mov	r2, r0
 808094c:	460b      	mov	r3, r1
 808094e:	a853      	add	r0, sp, #332	; 0x14c
 8080950:	495c      	ldr	r1, [pc, #368]	; (8080ac4 <loop+0x67c>)
 8080952:	f001 fd3b 	bl	80823cc <_ZN6String6formatEPKcz>
 8080956:	4620      	mov	r0, r4
 8080958:	a953      	add	r1, sp, #332	; 0x14c
 808095a:	f001 fd04 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 808095e:	4604      	mov	r4, r0
 8080960:	4955      	ldr	r1, [pc, #340]	; (8080ab8 <loop+0x670>)
 8080962:	a857      	add	r0, sp, #348	; 0x15c
 8080964:	f001 fc56 	bl	8082214 <_ZN6StringC1EPKc>
 8080968:	4620      	mov	r0, r4
 808096a:	a957      	add	r1, sp, #348	; 0x15c
 808096c:	f001 fcfb 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080970:	4604      	mov	r4, r0
           String("\"LsShAv\":") + String("\"") + String::format("%4.1f", shortAveragingArray.getAverage()) +
 8080972:	4957      	ldr	r1, [pc, #348]	; (8080ad0 <loop+0x688>)
 8080974:	a85b      	add	r0, sp, #364	; 0x16c
 8080976:	f001 fc4d 	bl	8082214 <_ZN6StringC1EPKc>
 808097a:	4620      	mov	r0, r4
 808097c:	a95b      	add	r1, sp, #364	; 0x16c
 808097e:	f001 fcf2 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080982:	4604      	mov	r4, r0
 8080984:	4949      	ldr	r1, [pc, #292]	; (8080aac <loop+0x664>)
 8080986:	a85f      	add	r0, sp, #380	; 0x17c
 8080988:	f001 fc44 	bl	8082214 <_ZN6StringC1EPKc>
 808098c:	4620      	mov	r0, r4
 808098e:	a95f      	add	r1, sp, #380	; 0x17c
 8080990:	f001 fce9 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080994:	4604      	mov	r4, r0
 8080996:	484f      	ldr	r0, [pc, #316]	; (8080ad4 <loop+0x68c>)
 8080998:	f000 fe81 	bl	808169e <_ZN14RunningAverage10getAverageEv>
 808099c:	4602      	mov	r2, r0
 808099e:	460b      	mov	r3, r1
 80809a0:	a863      	add	r0, sp, #396	; 0x18c
 80809a2:	4948      	ldr	r1, [pc, #288]	; (8080ac4 <loop+0x67c>)
 80809a4:	f001 fd12 	bl	80823cc <_ZN6String6formatEPKcz>
 80809a8:	4620      	mov	r0, r4
 80809aa:	a963      	add	r1, sp, #396	; 0x18c
 80809ac:	f001 fcdb 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80809b0:	4604      	mov	r4, r0
           String("\"}");
 80809b2:	4949      	ldr	r1, [pc, #292]	; (8080ad8 <loop+0x690>)
 80809b4:	a867      	add	r0, sp, #412	; 0x19c
 80809b6:	f001 fc2d 	bl	8082214 <_ZN6StringC1EPKc>
 80809ba:	4620      	mov	r0, r4
 80809bc:	a967      	add	r1, sp, #412	; 0x19c
 80809be:	f001 fcd2 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 80809c2:	4c46      	ldr	r4, [pc, #280]	; (8080adc <loop+0x694>)
 80809c4:	4601      	mov	r1, r0
 80809c6:	4620      	mov	r0, r4
 80809c8:	f001 fc54 	bl	8082274 <_ZN6StringaSERKS_>
 80809cc:	a867      	add	r0, sp, #412	; 0x19c
 80809ce:	f001 fbd7 	bl	8082180 <_ZN6StringD1Ev>
           String("\"LsShAv\":") + String("\"") + String::format("%4.1f", shortAveragingArray.getAverage()) +
 80809d2:	a863      	add	r0, sp, #396	; 0x18c
 80809d4:	f001 fbd4 	bl	8082180 <_ZN6StringD1Ev>
 80809d8:	a85f      	add	r0, sp, #380	; 0x17c
 80809da:	f001 fbd1 	bl	8082180 <_ZN6StringD1Ev>
 80809de:	a85b      	add	r0, sp, #364	; 0x16c
 80809e0:	f001 fbce 	bl	8082180 <_ZN6StringD1Ev>
           String("\"LsAv\":") + String("\"") + String::format("%4.1f", longAveragingArray.getAverage()) + String("\",") +
 80809e4:	a857      	add	r0, sp, #348	; 0x15c
 80809e6:	f001 fbcb 	bl	8082180 <_ZN6StringD1Ev>
 80809ea:	a853      	add	r0, sp, #332	; 0x14c
 80809ec:	f001 fbc8 	bl	8082180 <_ZN6StringD1Ev>
 80809f0:	a84f      	add	r0, sp, #316	; 0x13c
 80809f2:	f001 fbc5 	bl	8082180 <_ZN6StringD1Ev>
 80809f6:	a84b      	add	r0, sp, #300	; 0x12c
 80809f8:	f001 fbc2 	bl	8082180 <_ZN6StringD1Ev>
           String("\"LsMm\":") + String("\"") + String::format("%4.1f", waterLevelInMm) + String("\",") +
 80809fc:	a847      	add	r0, sp, #284	; 0x11c
 80809fe:	f001 fbbf 	bl	8082180 <_ZN6StringD1Ev>
 8080a02:	a843      	add	r0, sp, #268	; 0x10c
 8080a04:	f001 fbbc 	bl	8082180 <_ZN6StringD1Ev>
 8080a08:	a83f      	add	r0, sp, #252	; 0xfc
 8080a0a:	f001 fbb9 	bl	8082180 <_ZN6StringD1Ev>
 8080a0e:	a83b      	add	r0, sp, #236	; 0xec
 8080a10:	f001 fbb6 	bl	8082180 <_ZN6StringD1Ev>
           String("\"LsBits\":") + String("\"") + String::format("%u", waterLevelSampleReading) + String("\",") +
 8080a14:	a837      	add	r0, sp, #220	; 0xdc
 8080a16:	f001 fbb3 	bl	8082180 <_ZN6StringD1Ev>
 8080a1a:	a833      	add	r0, sp, #204	; 0xcc
 8080a1c:	f001 fbb0 	bl	8082180 <_ZN6StringD1Ev>
 8080a20:	a82f      	add	r0, sp, #188	; 0xbc
 8080a22:	f001 fbad 	bl	8082180 <_ZN6StringD1Ev>
 8080a26:	a82b      	add	r0, sp, #172	; 0xac
 8080a28:	f001 fbaa 	bl	8082180 <_ZN6StringD1Ev>
           String("\"SS\":") + String("\"") + String::format("rssi=%d, qual=%d", rssiQual.rssi, rssiQual.qual) + String("\",") +
 8080a2c:	a827      	add	r0, sp, #156	; 0x9c
 8080a2e:	f001 fba7 	bl	8082180 <_ZN6StringD1Ev>
 8080a32:	a823      	add	r0, sp, #140	; 0x8c
 8080a34:	f001 fba4 	bl	8082180 <_ZN6StringD1Ev>
 8080a38:	a81f      	add	r0, sp, #124	; 0x7c
 8080a3a:	f001 fba1 	bl	8082180 <_ZN6StringD1Ev>
 8080a3e:	a81b      	add	r0, sp, #108	; 0x6c
 8080a40:	f001 fb9e 	bl	8082180 <_ZN6StringD1Ev>
           String("\"DT\":") + String("\"") + Time.format(time, TIME_FORMAT_ISO8601_FULL) + String("\",") +
 8080a44:	a817      	add	r0, sp, #92	; 0x5c
 8080a46:	f001 fb9b 	bl	8082180 <_ZN6StringD1Ev>
 8080a4a:	a813      	add	r0, sp, #76	; 0x4c
 8080a4c:	f001 fb98 	bl	8082180 <_ZN6StringD1Ev>
 8080a50:	a80f      	add	r0, sp, #60	; 0x3c
 8080a52:	f001 fb95 	bl	8082180 <_ZN6StringD1Ev>
 8080a56:	a807      	add	r0, sp, #28
 8080a58:	f001 fb92 	bl	8082180 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080a5c:	a80b      	add	r0, sp, #44	; 0x2c
 8080a5e:	f001 fb8f 	bl	8082180 <_ZN6StringD1Ev>
    data = String("{") +
 8080a62:	a803      	add	r0, sp, #12
 8080a64:	f001 fb8c 	bl	8082180 <_ZN6StringD1Ev>
        spark_cloud_flag_connect();
 8080a68:	f001 fa62 	bl	8081f30 <spark_cloud_flag_connect>
 8080a6c:	4b1c      	ldr	r3, [pc, #112]	; (8080ae0 <loop+0x698>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080a6e:	491d      	ldr	r1, [pc, #116]	; (8080ae4 <loop+0x69c>)
 8080a70:	781b      	ldrb	r3, [r3, #0]
 8080a72:	a867      	add	r0, sp, #412	; 0x19c
 8080a74:	f88d 3000 	strb.w	r3, [sp]
 8080a78:	6822      	ldr	r2, [r4, #0]
 8080a7a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080a7e:	f002 f8bd 	bl	8082bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080a82:	a868      	add	r0, sp, #416	; 0x1a0
 8080a84:	f7ff fbbf 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (sample > 0)
 8080a88:	4a17      	ldr	r2, [pc, #92]	; (8080ae8 <loop+0x6a0>)
 8080a8a:	6813      	ldr	r3, [r2, #0]
 8080a8c:	2b00      	cmp	r3, #0
        ++sample; //Increase sample count if on initial fill
 8080a8e:	bfc4      	itt	gt
 8080a90:	3301      	addgt	r3, #1
 8080a92:	6013      	strgt	r3, [r2, #0]
    if (zeroingInProgress)
 8080a94:	4b15      	ldr	r3, [pc, #84]	; (8080aec <loop+0x6a4>)
 8080a96:	781b      	ldrb	r3, [r3, #0]
 8080a98:	b113      	cbz	r3, 8080aa0 <loop+0x658>
        delay(ZEROING_LOOP_DELAY); //Use shorter delay when averaging for zero...
 8080a9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8080a9e:	e51a      	b.n	80804d6 <loop+0x8e>
        delay(loopDelay); //10 min: 600,000 1 min: 60,000 10 sec: 10,000
 8080aa0:	4b13      	ldr	r3, [pc, #76]	; (8080af0 <loop+0x6a8>)
 8080aa2:	6818      	ldr	r0, [r3, #0]
 8080aa4:	e517      	b.n	80804d6 <loop+0x8e>
 8080aa6:	bf00      	nop
 8080aa8:	0808629f 	.word	0x0808629f
 8080aac:	0808619c 	.word	0x0808619c
 8080ab0:	200004d0 	.word	0x200004d0
 8080ab4:	0808618a 	.word	0x0808618a
 8080ab8:	08086285 	.word	0x08086285
 8080abc:	080862a9 	.word	0x080862a9
 8080ac0:	200004c8 	.word	0x200004c8
 8080ac4:	0808623c 	.word	0x0808623c
 8080ac8:	080862b1 	.word	0x080862b1
 8080acc:	20000208 	.word	0x20000208
 8080ad0:	080862b9 	.word	0x080862b9
 8080ad4:	200004a8 	.word	0x200004a8
 8080ad8:	0808619e 	.word	0x0808619e
 8080adc:	200001f4 	.word	0x200001f4
 8080ae0:	200001ec 	.word	0x200001ec
 8080ae4:	080862c3 	.word	0x080862c3
 8080ae8:	20000008 	.word	0x20000008
 8080aec:	200004f0 	.word	0x200004f0
 8080af0:	20000000 	.word	0x20000000

08080af4 <_GLOBAL__sub_I_rebootSync>:
        val_(val) {
 8080af4:	2201      	movs	r2, #1
 8080af6:	4b2d      	ldr	r3, [pc, #180]	; (8080bac <_GLOBAL__sub_I_rebootSync+0xb8>)
}
 8080af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);   //averaging bucket
 8080afa:	4d2d      	ldr	r5, [pc, #180]	; (8080bb0 <_GLOBAL__sub_I_rebootSync+0xbc>)
 8080afc:	701a      	strb	r2, [r3, #0]
Adafruit_ADS1115 ads;
 8080afe:	2148      	movs	r1, #72	; 0x48
 8080b00:	482c      	ldr	r0, [pc, #176]	; (8080bb4 <_GLOBAL__sub_I_rebootSync+0xc0>)
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);   //averaging bucket
 8080b02:	4c2d      	ldr	r4, [pc, #180]	; (8080bb8 <_GLOBAL__sub_I_rebootSync+0xc4>)
Adafruit_ADS1115 ads;
 8080b04:	f000 fe37 	bl	8081776 <_ZN16Adafruit_ADS1115C1Eh>
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);   //averaging bucket
 8080b08:	4e2c      	ldr	r6, [pc, #176]	; (8080bbc <_GLOBAL__sub_I_rebootSync+0xc8>)
 8080b0a:	2118      	movs	r1, #24
 8080b0c:	4628      	mov	r0, r5
 8080b0e:	f000 fd89 	bl	8081624 <_ZN14RunningAverageC1Eh>
 8080b12:	4628      	mov	r0, r5
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE); //averaging bucket
 8080b14:	4d2a      	ldr	r5, [pc, #168]	; (8080bc0 <_GLOBAL__sub_I_rebootSync+0xcc>)
RunningAverage longAveragingArray(LONG_SAMPLE_SIZE);   //averaging bucket
 8080b16:	4622      	mov	r2, r4
 8080b18:	4631      	mov	r1, r6
 8080b1a:	f002 fdb5 	bl	8083688 <__aeabi_atexit>
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE); //averaging bucket
 8080b1e:	2103      	movs	r1, #3
 8080b20:	4628      	mov	r0, r5
 8080b22:	f000 fd7f 	bl	8081624 <_ZN14RunningAverageC1Eh>
 8080b26:	4631      	mov	r1, r6
String data = String(80);
 8080b28:	4e26      	ldr	r6, [pc, #152]	; (8080bc4 <_GLOBAL__sub_I_rebootSync+0xd0>)
RunningAverage shortAveragingArray(SHORT_SAMPLE_SIZE); //averaging bucket
 8080b2a:	4622      	mov	r2, r4
 8080b2c:	4628      	mov	r0, r5
 8080b2e:	f002 fdab 	bl	8083688 <__aeabi_atexit>
String data = String(80);
 8080b32:	4d25      	ldr	r5, [pc, #148]	; (8080bc8 <_GLOBAL__sub_I_rebootSync+0xd4>)
 8080b34:	220a      	movs	r2, #10
 8080b36:	2150      	movs	r1, #80	; 0x50
 8080b38:	4630      	mov	r0, r6
 8080b3a:	f001 fbce 	bl	80822da <_ZN6StringC1Eih>
 8080b3e:	4630      	mov	r0, r6
String zeroData = String(80);
 8080b40:	4e22      	ldr	r6, [pc, #136]	; (8080bcc <_GLOBAL__sub_I_rebootSync+0xd8>)
String data = String(80);
 8080b42:	4622      	mov	r2, r4
 8080b44:	4629      	mov	r1, r5
 8080b46:	f002 fd9f 	bl	8083688 <__aeabi_atexit>
String zeroData = String(80);
 8080b4a:	220a      	movs	r2, #10
 8080b4c:	2150      	movs	r1, #80	; 0x50
 8080b4e:	4630      	mov	r0, r6
 8080b50:	f001 fbc3 	bl	80822da <_ZN6StringC1Eih>
 8080b54:	4630      	mov	r0, r6
String loopDelayData = String(80);
 8080b56:	4e1e      	ldr	r6, [pc, #120]	; (8080bd0 <_GLOBAL__sub_I_rebootSync+0xdc>)
String zeroData = String(80);
 8080b58:	4622      	mov	r2, r4
 8080b5a:	4629      	mov	r1, r5
 8080b5c:	f002 fd94 	bl	8083688 <__aeabi_atexit>
String loopDelayData = String(80);
 8080b60:	220a      	movs	r2, #10
 8080b62:	2150      	movs	r1, #80	; 0x50
 8080b64:	4630      	mov	r0, r6
 8080b66:	f001 fbb8 	bl	80822da <_ZN6StringC1Eih>
 8080b6a:	4622      	mov	r2, r4
 8080b6c:	4629      	mov	r1, r5
 8080b6e:	4630      	mov	r0, r6
 8080b70:	f002 fd8a 	bl	8083688 <__aeabi_atexit>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 8080b74:	2314      	movs	r3, #20
 8080b76:	4d17      	ldr	r5, [pc, #92]	; (8080bd4 <_GLOBAL__sub_I_rebootSync+0xe0>)
 8080b78:	9300      	str	r3, [sp, #0]
 8080b7a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8080b7e:	f505 7396 	add.w	r3, r5, #300	; 0x12c
 8080b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8080b86:	4628      	mov	r0, r5
 8080b88:	f000 f964 	bl	8080e54 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
 8080b8c:	4b12      	ldr	r3, [pc, #72]	; (8080bd8 <_GLOBAL__sub_I_rebootSync+0xe4>)
JsonParserStatic<256, 20> parser;
 8080b8e:	4622      	mov	r2, r4
 8080b90:	602b      	str	r3, [r5, #0]
 8080b92:	4628      	mov	r0, r5
 8080b94:	4911      	ldr	r1, [pc, #68]	; (8080bdc <_GLOBAL__sub_I_rebootSync+0xe8>)
 8080b96:	f002 fd77 	bl	8083688 <__aeabi_atexit>
STARTUP(cellular_credentials_set("luner", "", "", NULL));
 8080b9a:	4a11      	ldr	r2, [pc, #68]	; (8080be0 <_GLOBAL__sub_I_rebootSync+0xec>)
 8080b9c:	2300      	movs	r3, #0
 8080b9e:	4611      	mov	r1, r2
 8080ba0:	4810      	ldr	r0, [pc, #64]	; (8080be4 <_GLOBAL__sub_I_rebootSync+0xf0>)
}
 8080ba2:	b002      	add	sp, #8
 8080ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
STARTUP(cellular_credentials_set("luner", "", "", NULL));
 8080ba8:	f001 b8b4 	b.w	8081d14 <cellular_credentials_set>
 8080bac:	200001ec 	.word	0x200001ec
 8080bb0:	20000208 	.word	0x20000208
 8080bb4:	200001ee 	.word	0x200001ee
 8080bb8:	200001e8 	.word	0x200001e8
 8080bbc:	080815ed 	.word	0x080815ed
 8080bc0:	200004a8 	.word	0x200004a8
 8080bc4:	200001f4 	.word	0x200001f4
 8080bc8:	08082181 	.word	0x08082181
 8080bcc:	200004d4 	.word	0x200004d4
 8080bd0:	20000220 	.word	0x20000220
 8080bd4:	20000230 	.word	0x20000230
 8080bd8:	08086334 	.word	0x08086334
 8080bdc:	080800d9 	.word	0x080800d9
 8080be0:	08086445 	.word	0x08086445
 8080be4:	080862cd 	.word	0x080862cd

08080be8 <_Z14startupHandlerPKcS0_>:
{
 8080be8:	b530      	push	{r4, r5, lr}
 8080bea:	460c      	mov	r4, r1
 8080bec:	b09b      	sub	sp, #108	; 0x6c
    parser.clear();
 8080bee:	4851      	ldr	r0, [pc, #324]	; (8080d34 <_Z14startupHandlerPKcS0_+0x14c>)
 8080bf0:	f000 f92c 	bl	8080e4c <_ZN10JsonBuffer5clearEv>
	bool addString(const char *data) { return addData(data, strlen(data)); }
 8080bf4:	4620      	mov	r0, r4
 8080bf6:	f003 fb70 	bl	80842da <strlen>
 8080bfa:	4621      	mov	r1, r4
 8080bfc:	4602      	mov	r2, r0
 8080bfe:	484d      	ldr	r0, [pc, #308]	; (8080d34 <_Z14startupHandlerPKcS0_+0x14c>)
 8080c00:	f000 f907 	bl	8080e12 <_ZN10JsonBuffer7addDataEPKcj>
    if (parser.parse())
 8080c04:	484b      	ldr	r0, [pc, #300]	; (8080d34 <_Z14startupHandlerPKcS0_+0x14c>)
 8080c06:	f000 fca3 	bl	8081550 <_ZN10JsonParser5parseEv>
 8080c0a:	4d4b      	ldr	r5, [pc, #300]	; (8080d38 <_Z14startupHandlerPKcS0_+0x150>)
 8080c0c:	2800      	cmp	r0, #0
 8080c0e:	f000 8089 	beq.w	8080d24 <_Z14startupHandlerPKcS0_+0x13c>
        zeroOffsetInMm = parser.getReference().key("zeroOffsetInMm").valueFloat();
 8080c12:	4948      	ldr	r1, [pc, #288]	; (8080d34 <_Z14startupHandlerPKcS0_+0x14c>)
 8080c14:	a812      	add	r0, sp, #72	; 0x48
 8080c16:	f000 f92d 	bl	8080e74 <_ZNK10JsonParser12getReferenceEv>
 8080c1a:	4a48      	ldr	r2, [pc, #288]	; (8080d3c <_Z14startupHandlerPKcS0_+0x154>)
 8080c1c:	a912      	add	r1, sp, #72	; 0x48
 8080c1e:	a816      	add	r0, sp, #88	; 0x58
 8080c20:	f000 fa9c 	bl	808115c <_ZNK13JsonReference3keyEPKc>
 8080c24:	2100      	movs	r1, #0
 8080c26:	a816      	add	r0, sp, #88	; 0x58
 8080c28:	f000 f997 	bl	8080f5a <_ZNK13JsonReference10valueFloatEf>
 8080c2c:	f002 fe9c 	bl	8083968 <__aeabi_f2d>
 8080c30:	e9c5 0100 	strd	r0, r1, [r5]
 8080c34:	a816      	add	r0, sp, #88	; 0x58
 8080c36:	f000 f89b 	bl	8080d70 <_ZN13JsonReferenceD1Ev>
 8080c3a:	a812      	add	r0, sp, #72	; 0x48
 8080c3c:	f000 f898 	bl	8080d70 <_ZN13JsonReferenceD1Ev>
    Serial.printlnf("zeroOffsetInMm (as stored on Azure): " + String::format("%4.1f", zeroOffsetInMm));
 8080c40:	f002 fa08 	bl	8083054 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 8080c44:	493e      	ldr	r1, [pc, #248]	; (8080d40 <_Z14startupHandlerPKcS0_+0x158>)
 8080c46:	4604      	mov	r4, r0
 8080c48:	a816      	add	r0, sp, #88	; 0x58
 8080c4a:	f001 fae3 	bl	8082214 <_ZN6StringC1EPKc>
 8080c4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8080c52:	a812      	add	r0, sp, #72	; 0x48
 8080c54:	493b      	ldr	r1, [pc, #236]	; (8080d44 <_Z14startupHandlerPKcS0_+0x15c>)
 8080c56:	f001 fbb9 	bl	80823cc <_ZN6String6formatEPKcz>
 8080c5a:	a912      	add	r1, sp, #72	; 0x48
 8080c5c:	a816      	add	r0, sp, #88	; 0x58
 8080c5e:	f001 fb82 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080c62:	6801      	ldr	r1, [r0, #0]
 8080c64:	4620      	mov	r0, r4
 8080c66:	f7ff fa4c 	bl	8080102 <_ZN5Print8printlnfEPKcz>
 8080c6a:	a812      	add	r0, sp, #72	; 0x48
 8080c6c:	f001 fa88 	bl	8082180 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080c70:	a816      	add	r0, sp, #88	; 0x58
 8080c72:	f001 fa85 	bl	8082180 <_ZN6StringD1Ev>
    zeroData = String("{") +
 8080c76:	4934      	ldr	r1, [pc, #208]	; (8080d48 <_Z14startupHandlerPKcS0_+0x160>)
 8080c78:	a802      	add	r0, sp, #8
 8080c7a:	f001 facb 	bl	8082214 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8080c7e:	a902      	add	r1, sp, #8
 8080c80:	a80a      	add	r0, sp, #40	; 0x28
 8080c82:	f001 fb06 	bl	8082292 <_ZN6StringC1ERKS_>
               String("\"ZeroOffsetInMm\":") + String("\"") + String::format("%4.1f", zeroOffsetInMm) +
 8080c86:	4931      	ldr	r1, [pc, #196]	; (8080d4c <_Z14startupHandlerPKcS0_+0x164>)
 8080c88:	a806      	add	r0, sp, #24
 8080c8a:	f001 fac3 	bl	8082214 <_ZN6StringC1EPKc>
 8080c8e:	a906      	add	r1, sp, #24
 8080c90:	a80a      	add	r0, sp, #40	; 0x28
 8080c92:	f001 fb68 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080c96:	4604      	mov	r4, r0
 8080c98:	492d      	ldr	r1, [pc, #180]	; (8080d50 <_Z14startupHandlerPKcS0_+0x168>)
 8080c9a:	a80e      	add	r0, sp, #56	; 0x38
 8080c9c:	f001 faba 	bl	8082214 <_ZN6StringC1EPKc>
 8080ca0:	a90e      	add	r1, sp, #56	; 0x38
 8080ca2:	4620      	mov	r0, r4
 8080ca4:	f001 fb5f 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080ca8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8080cac:	4604      	mov	r4, r0
 8080cae:	4925      	ldr	r1, [pc, #148]	; (8080d44 <_Z14startupHandlerPKcS0_+0x15c>)
 8080cb0:	a812      	add	r0, sp, #72	; 0x48
 8080cb2:	f001 fb8b 	bl	80823cc <_ZN6String6formatEPKcz>
 8080cb6:	a912      	add	r1, sp, #72	; 0x48
 8080cb8:	4620      	mov	r0, r4
 8080cba:	f001 fb54 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080cbe:	4604      	mov	r4, r0
               String("\"}");
 8080cc0:	4924      	ldr	r1, [pc, #144]	; (8080d54 <_Z14startupHandlerPKcS0_+0x16c>)
 8080cc2:	a816      	add	r0, sp, #88	; 0x58
 8080cc4:	f001 faa6 	bl	8082214 <_ZN6StringC1EPKc>
 8080cc8:	a916      	add	r1, sp, #88	; 0x58
 8080cca:	4620      	mov	r0, r4
 8080ccc:	f001 fb4b 	bl	8082366 <_ZplRK15StringSumHelperRK6String>
 8080cd0:	4c21      	ldr	r4, [pc, #132]	; (8080d58 <_Z14startupHandlerPKcS0_+0x170>)
 8080cd2:	4601      	mov	r1, r0
 8080cd4:	4620      	mov	r0, r4
 8080cd6:	f001 facd 	bl	8082274 <_ZN6StringaSERKS_>
 8080cda:	a816      	add	r0, sp, #88	; 0x58
 8080cdc:	f001 fa50 	bl	8082180 <_ZN6StringD1Ev>
               String("\"ZeroOffsetInMm\":") + String("\"") + String::format("%4.1f", zeroOffsetInMm) +
 8080ce0:	a812      	add	r0, sp, #72	; 0x48
 8080ce2:	f001 fa4d 	bl	8082180 <_ZN6StringD1Ev>
 8080ce6:	a80e      	add	r0, sp, #56	; 0x38
 8080ce8:	f001 fa4a 	bl	8082180 <_ZN6StringD1Ev>
 8080cec:	a806      	add	r0, sp, #24
 8080cee:	f001 fa47 	bl	8082180 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8080cf2:	a80a      	add	r0, sp, #40	; 0x28
 8080cf4:	f001 fa44 	bl	8082180 <_ZN6StringD1Ev>
    zeroData = String("{") +
 8080cf8:	a802      	add	r0, sp, #8
 8080cfa:	f001 fa41 	bl	8082180 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8080cfe:	4b17      	ldr	r3, [pc, #92]	; (8080d5c <_Z14startupHandlerPKcS0_+0x174>)
 8080d00:	4917      	ldr	r1, [pc, #92]	; (8080d60 <_Z14startupHandlerPKcS0_+0x178>)
 8080d02:	781b      	ldrb	r3, [r3, #0]
 8080d04:	a816      	add	r0, sp, #88	; 0x58
 8080d06:	f88d 3000 	strb.w	r3, [sp]
 8080d0a:	6822      	ldr	r2, [r4, #0]
 8080d0c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8080d10:	f001 ff74 	bl	8082bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080d14:	a817      	add	r0, sp, #92	; 0x5c
 8080d16:	f7ff fa76 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    startupCompleted = true; //We can now run loop
 8080d1a:	2201      	movs	r2, #1
 8080d1c:	4b11      	ldr	r3, [pc, #68]	; (8080d64 <_Z14startupHandlerPKcS0_+0x17c>)
 8080d1e:	701a      	strb	r2, [r3, #0]
}
 8080d20:	b01b      	add	sp, #108	; 0x6c
 8080d22:	bd30      	pop	{r4, r5, pc}
        Serial.printlnf("error", "could not parse json");
 8080d24:	f002 f996 	bl	8083054 <_Z16_fetch_usbserialv>
 8080d28:	4a0f      	ldr	r2, [pc, #60]	; (8080d68 <_Z14startupHandlerPKcS0_+0x180>)
 8080d2a:	4910      	ldr	r1, [pc, #64]	; (8080d6c <_Z14startupHandlerPKcS0_+0x184>)
 8080d2c:	f7ff f9e9 	bl	8080102 <_ZN5Print8printlnfEPKcz>
 8080d30:	e786      	b.n	8080c40 <_Z14startupHandlerPKcS0_+0x58>
 8080d32:	bf00      	nop
 8080d34:	20000230 	.word	0x20000230
 8080d38:	200004e8 	.word	0x200004e8
 8080d3c:	0808631c 	.word	0x0808631c
 8080d40:	080862ee 	.word	0x080862ee
 8080d44:	0808623c 	.word	0x0808623c
 8080d48:	0808618d 	.word	0x0808618d
 8080d4c:	08086242 	.word	0x08086242
 8080d50:	0808619c 	.word	0x0808619c
 8080d54:	0808619e 	.word	0x0808619e
 8080d58:	200004d4 	.word	0x200004d4
 8080d5c:	200001ec 	.word	0x200001ec
 8080d60:	08086314 	.word	0x08086314
 8080d64:	200004c0 	.word	0x200004c0
 8080d68:	080862d3 	.word	0x080862d3
 8080d6c:	080862e8 	.word	0x080862e8

08080d70 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
 8080d70:	4770      	bx	lr

08080d72 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
 8080d72:	b510      	push	{r4, lr}
 8080d74:	4604      	mov	r4, r0
}
 8080d76:	210c      	movs	r1, #12
 8080d78:	f002 fc8b 	bl	8083692 <_ZdlPvj>
 8080d7c:	4620      	mov	r0, r4
 8080d7e:	bd10      	pop	{r4, pc}

08080d80 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
 8080d80:	b510      	push	{r4, lr}
 8080d82:	4b05      	ldr	r3, [pc, #20]	; (8080d98 <_ZN10JsonBufferD1Ev+0x18>)
 8080d84:	4604      	mov	r4, r0
 8080d86:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 8080d88:	7c03      	ldrb	r3, [r0, #16]
 8080d8a:	b91b      	cbnz	r3, 8080d94 <_ZN10JsonBufferD1Ev+0x14>
 8080d8c:	6840      	ldr	r0, [r0, #4]
 8080d8e:	b108      	cbz	r0, 8080d94 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 8080d90:	f001 f90e 	bl	8081fb0 <free>
}
 8080d94:	4620      	mov	r0, r4
 8080d96:	bd10      	pop	{r4, pc}
 8080d98:	0808634c 	.word	0x0808634c

08080d9c <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 8080d9c:	b510      	push	{r4, lr}
 8080d9e:	4604      	mov	r4, r0
}
 8080da0:	f7ff ffee 	bl	8080d80 <_ZN10JsonBufferD1Ev>
 8080da4:	4620      	mov	r0, r4
 8080da6:	2114      	movs	r1, #20
 8080da8:	f002 fc73 	bl	8083692 <_ZdlPvj>
 8080dac:	4620      	mov	r0, r4
 8080dae:	bd10      	pop	{r4, pc}

08080db0 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
 8080db0:	b510      	push	{r4, lr}
 8080db2:	4b07      	ldr	r3, [pc, #28]	; (8080dd0 <_ZN10JsonParserD1Ev+0x20>)
 8080db4:	4604      	mov	r4, r0
 8080db6:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 8080db8:	7c03      	ldrb	r3, [r0, #16]
 8080dba:	b91b      	cbnz	r3, 8080dc4 <_ZN10JsonParserD1Ev+0x14>
 8080dbc:	6940      	ldr	r0, [r0, #20]
 8080dbe:	b108      	cbz	r0, 8080dc4 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 8080dc0:	f001 f8f6 	bl	8081fb0 <free>
JsonParser::~JsonParser() {
 8080dc4:	4620      	mov	r0, r4
 8080dc6:	f7ff ffdb 	bl	8080d80 <_ZN10JsonBufferD1Ev>
}
 8080dca:	4620      	mov	r0, r4
 8080dcc:	bd10      	pop	{r4, pc}
 8080dce:	bf00      	nop
 8080dd0:	0808635c 	.word	0x0808635c

08080dd4 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 8080dd4:	b510      	push	{r4, lr}
 8080dd6:	4604      	mov	r4, r0
}
 8080dd8:	f7ff ffea 	bl	8080db0 <_ZN10JsonParserD1Ev>
 8080ddc:	4620      	mov	r0, r4
 8080dde:	212c      	movs	r1, #44	; 0x2c
 8080de0:	f002 fc57 	bl	8083692 <_ZdlPvj>
 8080de4:	4620      	mov	r0, r4
 8080de6:	bd10      	pop	{r4, pc}

08080de8 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
 8080de8:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 8080dea:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
 8080dec:	4604      	mov	r4, r0
 8080dee:	460d      	mov	r5, r1
	if (!staticBuffers) {
 8080df0:	b10b      	cbz	r3, 8080df6 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
 8080df2:	2000      	movs	r0, #0
}
 8080df4:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
 8080df6:	6840      	ldr	r0, [r0, #4]
 8080df8:	b138      	cbz	r0, 8080e0a <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
 8080dfa:	f001 f8e1 	bl	8081fc0 <realloc>
		if (newBuffer) {
 8080dfe:	2800      	cmp	r0, #0
 8080e00:	d0f7      	beq.n	8080df2 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
 8080e02:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
 8080e06:	2001      	movs	r0, #1
 8080e08:	e7f4      	b.n	8080df4 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
 8080e0a:	4608      	mov	r0, r1
 8080e0c:	f001 f8c8 	bl	8081fa0 <malloc>
 8080e10:	e7f5      	b.n	8080dfe <_ZN10JsonBuffer8allocateEj+0x16>

08080e12 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 8080e12:	b570      	push	{r4, r5, r6, lr}
 8080e14:	68c3      	ldr	r3, [r0, #12]
 8080e16:	460e      	mov	r6, r1
 8080e18:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
 8080e1a:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 8080e1c:	4604      	mov	r4, r0
 8080e1e:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
 8080e20:	b173      	cbz	r3, 8080e40 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 8080e22:	6883      	ldr	r3, [r0, #8]
 8080e24:	428b      	cmp	r3, r1
 8080e26:	d30b      	bcc.n	8080e40 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
 8080e28:	6860      	ldr	r0, [r4, #4]
 8080e2a:	68e3      	ldr	r3, [r4, #12]
 8080e2c:	462a      	mov	r2, r5
 8080e2e:	4631      	mov	r1, r6
 8080e30:	4418      	add	r0, r3
 8080e32:	f003 f9dd 	bl	80841f0 <memcpy>
	return true;
 8080e36:	2001      	movs	r0, #1
	offset += dataLen;
 8080e38:	68e2      	ldr	r2, [r4, #12]
 8080e3a:	442a      	add	r2, r5
 8080e3c:	60e2      	str	r2, [r4, #12]
}
 8080e3e:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
 8080e40:	4620      	mov	r0, r4
 8080e42:	f7ff ffd1 	bl	8080de8 <_ZN10JsonBuffer8allocateEj>
 8080e46:	2800      	cmp	r0, #0
 8080e48:	d1ee      	bne.n	8080e28 <_ZN10JsonBuffer7addDataEPKcj+0x16>
 8080e4a:	e7f8      	b.n	8080e3e <_ZN10JsonBuffer7addDataEPKcj+0x2c>

08080e4c <_ZN10JsonBuffer5clearEv>:
	offset = 0;
 8080e4c:	2300      	movs	r3, #0
 8080e4e:	60c3      	str	r3, [r0, #12]
}
 8080e50:	4770      	bx	lr
	...

08080e54 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 8080e54:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8080e58:	2200      	movs	r2, #0
 8080e5a:	60c2      	str	r2, [r0, #12]
 8080e5c:	2201      	movs	r2, #1
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 8080e5e:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 8080e60:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 8080e62:	6143      	str	r3, [r0, #20]
 8080e64:	4a02      	ldr	r2, [pc, #8]	; (8080e70 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 8080e66:	9b02      	ldr	r3, [sp, #8]
 8080e68:	6002      	str	r2, [r0, #0]
 8080e6a:	61c3      	str	r3, [r0, #28]
}
 8080e6c:	bd10      	pop	{r4, pc}
 8080e6e:	bf00      	nop
 8080e70:	0808635c 	.word	0x0808635c

08080e74 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
 8080e74:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
 8080e78:	429a      	cmp	r2, r3
 8080e7a:	4b04      	ldr	r3, [pc, #16]	; (8080e8c <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 8080e7c:	bf38      	it	cc
 8080e7e:	6082      	strcc	r2, [r0, #8]
 8080e80:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 8080e84:	bf24      	itt	cs
 8080e86:	2300      	movcs	r3, #0
 8080e88:	6083      	strcs	r3, [r0, #8]
}
 8080e8a:	4770      	bx	lr
 8080e8c:	0808636c 	.word	0x0808636c

08080e90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 8080e90:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 8080e92:	6813      	ldr	r3, [r2, #0]
 8080e94:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 8080e96:	6813      	ldr	r3, [r2, #0]
 8080e98:	f103 0410 	add.w	r4, r3, #16
 8080e9c:	6014      	str	r4, [r2, #0]
 8080e9e:	6986      	ldr	r6, [r0, #24]
 8080ea0:	42b4      	cmp	r4, r6
 8080ea2:	d20a      	bcs.n	8080eba <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 8080ea4:	699b      	ldr	r3, [r3, #24]
 8080ea6:	688c      	ldr	r4, [r1, #8]
 8080ea8:	42a3      	cmp	r3, r4
 8080eaa:	da01      	bge.n	8080eb0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 8080eac:	42ab      	cmp	r3, r5
 8080eae:	ddf2      	ble.n	8080e96 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
 8080eb0:	42a3      	cmp	r3, r4
 8080eb2:	bfcc      	ite	gt
 8080eb4:	2000      	movgt	r0, #0
 8080eb6:	2001      	movle	r0, #1
 8080eb8:	e000      	b.n	8080ebc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
 8080eba:	2000      	movs	r0, #0
}
 8080ebc:	bd70      	pop	{r4, r5, r6, pc}

08080ebe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 8080ebe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8080ec2:	4605      	mov	r5, r0
 8080ec4:	4617      	mov	r7, r2
	size_t index = 0;
 8080ec6:	2600      	movs	r6, #0
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 8080ec8:	4698      	mov	r8, r3
 8080eca:	9c08      	ldr	r4, [sp, #32]
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 8080ecc:	f101 0310 	add.w	r3, r1, #16
 8080ed0:	9301      	str	r3, [sp, #4]
	while(token < tokensEnd && token->end < container->end) {
 8080ed2:	9801      	ldr	r0, [sp, #4]
 8080ed4:	69ab      	ldr	r3, [r5, #24]
 8080ed6:	4283      	cmp	r3, r0
 8080ed8:	d91b      	bls.n	8080f12 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
 8080eda:	6882      	ldr	r2, [r0, #8]
 8080edc:	688b      	ldr	r3, [r1, #8]
 8080ede:	429a      	cmp	r2, r3
 8080ee0:	da17      	bge.n	8080f12 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
 8080ee2:	42a6      	cmp	r6, r4
 8080ee4:	d10b      	bne.n	8080efe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
 8080ee6:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
 8080ee8:	aa01      	add	r2, sp, #4
 8080eea:	4628      	mov	r0, r5
 8080eec:	f7ff ffd0 	bl	8080e90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 8080ef0:	b128      	cbz	r0, 8080efe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
 8080ef2:	9b01      	ldr	r3, [sp, #4]
 8080ef4:	f8c8 3000 	str.w	r3, [r8]
}
 8080ef8:	b002      	add	sp, #8
 8080efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
 8080efe:	aa01      	add	r2, sp, #4
 8080f00:	4628      	mov	r0, r5
 8080f02:	f7ff ffc5 	bl	8080e90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 8080f06:	4628      	mov	r0, r5
 8080f08:	aa01      	add	r2, sp, #4
		index++;
 8080f0a:	3601      	adds	r6, #1
		skipObject(container, token);
 8080f0c:	f7ff ffc0 	bl	8080e90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
 8080f10:	e7df      	b.n	8080ed2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
 8080f12:	2000      	movs	r0, #0
 8080f14:	e7f0      	b.n	8080ef8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

08080f16 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 8080f16:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 8080f18:	2400      	movs	r4, #0
 8080f1a:	3b01      	subs	r3, #1
 8080f1c:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 8080f20:	1bf6      	subs	r6, r6, r7
 8080f22:	42a6      	cmp	r6, r4
 8080f24:	dd08      	ble.n	8080f38 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
 8080f26:	42a3      	cmp	r3, r4
 8080f28:	dd06      	ble.n	8080f38 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
 8080f2a:	6845      	ldr	r5, [r0, #4]
 8080f2c:	443d      	add	r5, r7
 8080f2e:	5d2d      	ldrb	r5, [r5, r4]
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 8080f30:	3401      	adds	r4, #1
		dst[ii] = buffer[token->start + ii];
 8080f32:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 8080f36:	e7f1      	b.n	8080f1c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
 8080f38:	2300      	movs	r3, #0
 8080f3a:	7013      	strb	r3, [r2, #0]
}
 8080f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080f3e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
 8080f3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8080f40:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
 8080f42:	2310      	movs	r3, #16
 8080f44:	466a      	mov	r2, sp
 8080f46:	f7ff ffe6 	bl	8080f16 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
 8080f4a:	2100      	movs	r1, #0
 8080f4c:	4668      	mov	r0, sp
 8080f4e:	f004 f81f 	bl	8084f90 <strtof>
 8080f52:	6020      	str	r0, [r4, #0]
}
 8080f54:	2001      	movs	r0, #1
 8080f56:	b004      	add	sp, #16
 8080f58:	bd10      	pop	{r4, pc}

08080f5a <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
 8080f5a:	b507      	push	{r0, r1, r2, lr}
 8080f5c:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
 8080f5e:	6881      	ldr	r1, [r0, #8]
 8080f60:	b119      	cbz	r1, 8080f6a <_ZNK13JsonReference10valueFloatEf+0x10>
 8080f62:	6840      	ldr	r0, [r0, #4]
 8080f64:	aa01      	add	r2, sp, #4
 8080f66:	f7ff ffea 	bl	8080f3e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
 8080f6a:	9801      	ldr	r0, [sp, #4]
 8080f6c:	b003      	add	sp, #12
 8080f6e:	f85d fb04 	ldr.w	pc, [sp], #4

08080f72 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
 8080f72:	b510      	push	{r4, lr}
 8080f74:	4604      	mov	r4, r0
	if (str) {
 8080f76:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
 8080f78:	460b      	mov	r3, r1
	if (str) {
 8080f7a:	b128      	cbz	r0, 8080f88 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
 8080f7c:	f001 f9e6 	bl	808234c <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
 8080f80:	68e3      	ldr	r3, [r4, #12]
 8080f82:	3301      	adds	r3, #1
 8080f84:	60e3      	str	r3, [r4, #12]
	}
}
 8080f86:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
 8080f88:	6860      	ldr	r0, [r4, #4]
 8080f8a:	2800      	cmp	r0, #0
 8080f8c:	d0f8      	beq.n	8080f80 <_ZN16JsonParserString6appendEc+0xe>
 8080f8e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8080f92:	3a01      	subs	r2, #1
 8080f94:	428a      	cmp	r2, r1
			buf[length] = ch;
 8080f96:	bf88      	it	hi
 8080f98:	5443      	strbhi	r3, [r0, r1]
 8080f9a:	e7f1      	b.n	8080f80 <_ZN16JsonParserString6appendEc+0xe>

08080f9c <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
	if (unicode <= 0x007f) {
 8080f9c:	287f      	cmp	r0, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 8080f9e:	b570      	push	{r4, r5, r6, lr}
 8080fa0:	460c      	mov	r4, r1
 8080fa2:	b2c1      	uxtb	r1, r0
	if (unicode <= 0x007f) {
 8080fa4:	d804      	bhi.n	8080fb0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x14>
		str.append((char)value);
 8080fa6:	4620      	mov	r0, r4
}
 8080fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		str.append((char)value);
 8080fac:	f7ff bfe1 	b.w	8080f72 <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
 8080fb0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8080fb4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8080fb8:	f340 1687 	sbfx	r6, r0, #6, #8
 8080fbc:	f041 0580 	orr.w	r5, r1, #128	; 0x80
 8080fc0:	d207      	bcs.n	8080fd2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
 8080fc2:	f066 013f 	orn	r1, r6, #63	; 0x3f
		str.append((char)value);
 8080fc6:	b2c9      	uxtb	r1, r1
		str.append((char)value);
 8080fc8:	4620      	mov	r0, r4
 8080fca:	f7ff ffd2 	bl	8080f72 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
 8080fce:	4629      	mov	r1, r5
 8080fd0:	e7e9      	b.n	8080fa6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xa>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
 8080fd2:	0b03      	lsrs	r3, r0, #12
		str.append((char)value);
 8080fd4:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
 8080fd8:	4620      	mov	r0, r4
 8080fda:	f7ff ffca 	bl	8080f72 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
 8080fde:	f006 013f 	and.w	r1, r6, #63	; 0x3f
		str.append((char)value);
 8080fe2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8080fe6:	e7ef      	b.n	8080fc8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2c>

08080fe8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 8080fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
 8080fec:	2400      	movs	r4, #0
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 8080fee:	4680      	mov	r8, r0
 8080ff0:	460f      	mov	r7, r1
 8080ff2:	4615      	mov	r5, r2
			escape = false;
 8080ff4:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
 8080ff6:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 8080ff8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80810c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
	for(int ii = token->start; ii < token->end; ii++) {
 8080ffc:	68b8      	ldr	r0, [r7, #8]
 8080ffe:	42b0      	cmp	r0, r6
 8081000:	dd5a      	ble.n	80810b8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
 8081002:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8081006:	5d99      	ldrb	r1, [r3, r6]
 8081008:	199a      	adds	r2, r3, r6
 808100a:	2c00      	cmp	r4, #0
 808100c:	d04b      	beq.n	80810a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
 808100e:	2975      	cmp	r1, #117	; 0x75
 8081010:	d805      	bhi.n	808101e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 8081012:	296d      	cmp	r1, #109	; 0x6d
 8081014:	d807      	bhi.n	8081026 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 8081016:	2962      	cmp	r1, #98	; 0x62
 8081018:	d01e      	beq.n	8081058 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
 808101a:	2966      	cmp	r1, #102	; 0x66
 808101c:	d01e      	beq.n	808105c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
 808101e:	4628      	mov	r0, r5
 8081020:	f7ff ffa7 	bl	8080f72 <_ZN16JsonParserString6appendEc>
				break;
 8081024:	e03d      	b.n	80810a2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 8081026:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
 808102a:	2c07      	cmp	r4, #7
 808102c:	d8f7      	bhi.n	808101e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 808102e:	f20f 0c08 	addw	ip, pc, #8
 8081032:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 8081036:	bf00      	nop
 8081038:	08081061 	.word	0x08081061
 808103c:	0808101f 	.word	0x0808101f
 8081040:	0808101f 	.word	0x0808101f
 8081044:	0808101f 	.word	0x0808101f
 8081048:	08081065 	.word	0x08081065
 808104c:	0808101f 	.word	0x0808101f
 8081050:	08081069 	.word	0x08081069
 8081054:	0808106d 	.word	0x0808106d
				str.append('\b');
 8081058:	2108      	movs	r1, #8
 808105a:	e7e0      	b.n	808101e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
 808105c:	210c      	movs	r1, #12
 808105e:	e7de      	b.n	808101e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
 8081060:	210a      	movs	r1, #10
 8081062:	e7dc      	b.n	808101e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
 8081064:	210d      	movs	r1, #13
 8081066:	e7da      	b.n	808101e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
 8081068:	2109      	movs	r1, #9
 808106a:	e7d8      	b.n	808101e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
 808106c:	1d31      	adds	r1, r6, #4
 808106e:	4288      	cmp	r0, r1
 8081070:	dd17      	ble.n	80810a2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 8081072:	a902      	add	r1, sp, #8
 8081074:	4608      	mov	r0, r1
 8081076:	3304      	adds	r3, #4
 8081078:	4433      	add	r3, r6
						tmp[jj] = buffer[ii + jj + 1];
 808107a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
					for(size_t jj = 0; jj < 4; jj++) {
 808107e:	429a      	cmp	r2, r3
						tmp[jj] = buffer[ii + jj + 1];
 8081080:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
 8081084:	d1f9      	bne.n	808107a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 8081086:	4651      	mov	r1, sl
 8081088:	aa01      	add	r2, sp, #4
					tmp[4] = 0;
 808108a:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 808108e:	f000 ffa7 	bl	8081fe0 <sscanf>
 8081092:	2801      	cmp	r0, #1
 8081094:	d105      	bne.n	80810a2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
 8081096:	4629      	mov	r1, r5
 8081098:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 808109c:	f7ff ff7e 	bl	8080f9c <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 80810a0:	3605      	adds	r6, #5
			escape = false;
 80810a2:	2400      	movs	r4, #0
 80810a4:	e004      	b.n	80810b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
 80810a6:	295c      	cmp	r1, #92	; 0x5c
 80810a8:	d004      	beq.n	80810b4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
 80810aa:	4628      	mov	r0, r5
 80810ac:	f7ff ff61 	bl	8080f72 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
 80810b0:	3601      	adds	r6, #1
 80810b2:	e7a3      	b.n	8080ffc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
 80810b4:	2401      	movs	r4, #1
 80810b6:	e7fb      	b.n	80810b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
 80810b8:	2001      	movs	r0, #1
 80810ba:	b004      	add	sp, #16
 80810bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80810c0:	0808633c 	.word	0x0808633c

080810c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80810c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80810c6:	460c      	mov	r4, r1
 80810c8:	4615      	mov	r5, r2
 80810ca:	4606      	mov	r6, r0
	result = "";
 80810cc:	490b      	ldr	r1, [pc, #44]	; (80810fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80810ce:	4610      	mov	r0, r2
 80810d0:	f001 f8f2 	bl	80822b8 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80810d4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80810d8:	1ac9      	subs	r1, r1, r3
 80810da:	4628      	mov	r0, r5
 80810dc:	3101      	adds	r1, #1
 80810de:	f001 f86d 	bl	80821bc <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80810e2:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
 80810e4:	466a      	mov	r2, sp
 80810e6:	4621      	mov	r1, r4
 80810e8:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80810ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80810ee:	9500      	str	r5, [sp, #0]
 80810f0:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
 80810f2:	f7ff ff79 	bl	8080fe8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80810f6:	b004      	add	sp, #16
 80810f8:	bd70      	pop	{r4, r5, r6, pc}
 80810fa:	bf00      	nop
 80810fc:	08086445 	.word	0x08086445

08081100 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 8081100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081104:	b089      	sub	sp, #36	; 0x24
 8081106:	4605      	mov	r5, r0
 8081108:	4688      	mov	r8, r1
	String keyName;
 808110a:	a804      	add	r0, sp, #16
 808110c:	4912      	ldr	r1, [pc, #72]	; (8081158 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 808110e:	4616      	mov	r6, r2
 8081110:	4699      	mov	r9, r3
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 8081112:	2700      	movs	r7, #0
	String keyName;
 8081114:	f001 f87e 	bl	8082214 <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 8081118:	464b      	mov	r3, r9
 808111a:	4641      	mov	r1, r8
 808111c:	4628      	mov	r0, r5
 808111e:	9700      	str	r7, [sp, #0]
 8081120:	aa03      	add	r2, sp, #12
 8081122:	f7ff fecc 	bl	8080ebe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 8081126:	4604      	mov	r4, r0
 8081128:	b170      	cbz	r0, 8081148 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
 808112a:	4628      	mov	r0, r5
 808112c:	9903      	ldr	r1, [sp, #12]
 808112e:	aa04      	add	r2, sp, #16
 8081130:	f7ff ffc8 	bl	80810c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 8081134:	4604      	mov	r4, r0
 8081136:	b908      	cbnz	r0, 808113c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 8081138:	3701      	adds	r7, #1
 808113a:	e7ed      	b.n	8081118 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808113c:	4631      	mov	r1, r6
 808113e:	a804      	add	r0, sp, #16
 8081140:	f001 f931 	bl	80823a6 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
 8081144:	2800      	cmp	r0, #0
 8081146:	d0f7      	beq.n	8081138 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
 8081148:	a804      	add	r0, sp, #16
 808114a:	f001 f819 	bl	8082180 <_ZN6StringD1Ev>
}
 808114e:	4620      	mov	r0, r4
 8081150:	b009      	add	sp, #36	; 0x24
 8081152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081156:	bf00      	nop
 8081158:	08086445 	.word	0x08086445

0808115c <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
 808115c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808115e:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 8081160:	6889      	ldr	r1, [r1, #8]
JsonReference JsonReference::key(const char *name) const {
 8081162:	4604      	mov	r4, r0
 8081164:	4e09      	ldr	r6, [pc, #36]	; (808118c <_ZNK13JsonReference3keyEPKc+0x30>)
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 8081166:	b161      	cbz	r1, 8081182 <_ZNK13JsonReference3keyEPKc+0x26>
 8081168:	6868      	ldr	r0, [r5, #4]
 808116a:	ab01      	add	r3, sp, #4
 808116c:	f7ff ffc8 	bl	8081100 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 8081170:	b138      	cbz	r0, 8081182 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
 8081172:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 8081174:	e9c4 6300 	strd	r6, r3, [r4]
 8081178:	9b01      	ldr	r3, [sp, #4]
}
 808117a:	4620      	mov	r0, r4
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 808117c:	60a3      	str	r3, [r4, #8]
}
 808117e:	b002      	add	sp, #8
 8081180:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
 8081182:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 8081184:	e9c4 6300 	strd	r6, r3, [r4]
 8081188:	2300      	movs	r3, #0
 808118a:	e7f6      	b.n	808117a <_ZNK13JsonReference3keyEPKc+0x1e>
 808118c:	0808636c 	.word	0x0808636c

08081190 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 8081190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081194:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
 8081198:	f04f 35ff 	mov.w	r5, #4294967295
		jsmntok_t *tokens, unsigned int num_tokens) {
 808119c:	4604      	mov	r4, r0
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 808119e:	6840      	ldr	r0, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80811a0:	f8d4 e000 	ldr.w	lr, [r4]
 80811a4:	4596      	cmp	lr, r2
 80811a6:	f080 81be 	bcs.w	8081526 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
 80811aa:	f811 800e 	ldrb.w	r8, [r1, lr]
 80811ae:	f1b8 0f00 	cmp.w	r8, #0
 80811b2:	f000 81b8 	beq.w	8081526 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80811b6:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80811ba:	f000 809b 	beq.w	80812f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x164>
 80811be:	d833      	bhi.n	8081228 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x98>
 80811c0:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80811c4:	f000 80ad 	beq.w	8081322 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x192>
 80811c8:	d810      	bhi.n	80811ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5c>
 80811ca:	f1a8 0809 	sub.w	r8, r8, #9
 80811ce:	fa5f f888 	uxtb.w	r8, r8
 80811d2:	f1b8 0f17 	cmp.w	r8, #23
 80811d6:	d80d      	bhi.n	80811f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
 80811d8:	4fc0      	ldr	r7, [pc, #768]	; (80814dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>)
 80811da:	fa0c f808 	lsl.w	r8, ip, r8
 80811de:	ea18 0f07 	tst.w	r8, r7
 80811e2:	d007      	beq.n	80811f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80811e4:	6827      	ldr	r7, [r4, #0]
 80811e6:	3701      	adds	r7, #1
 80811e8:	6027      	str	r7, [r4, #0]
 80811ea:	e7d9      	b.n	80811a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10>
		switch (c) {
 80811ec:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80811f0:	f000 8136 	beq.w	8081460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d0>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80811f4:	f8d4 8000 	ldr.w	r8, [r4]
 80811f8:	4542      	cmp	r2, r8
 80811fa:	d90e      	bls.n	808121a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80811fc:	f811 7008 	ldrb.w	r7, [r1, r8]
 8081200:	b15f      	cbz	r7, 808121a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		switch (js[parser->pos]) {
 8081202:	2f3a      	cmp	r7, #58	; 0x3a
 8081204:	f200 816e 	bhi.w	80814e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
 8081208:	2f1f      	cmp	r7, #31
 808120a:	f200 8152 	bhi.w	80814b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x322>
 808120e:	2f0a      	cmp	r7, #10
 8081210:	f200 8161 	bhi.w	80814d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x346>
 8081214:	2f08      	cmp	r7, #8
 8081216:	f240 8157 	bls.w	80814c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
	if (tokens == NULL) {
 808121a:	2b00      	cmp	r3, #0
 808121c:	f040 8167 	bne.w	80814ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
		parser->pos--;
 8081220:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
 8081224:	6027      	str	r7, [r4, #0]
 8081226:	e0ab      	b.n	8081380 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
 8081228:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 808122c:	d03a      	beq.n	80812a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 808122e:	d80a      	bhi.n	8081246 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb6>
 8081230:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 8081234:	d036      	beq.n	80812a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 8081236:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 808123a:	d1db      	bne.n	80811f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 808123c:	2b00      	cmp	r3, #0
 808123e:	d0d1      	beq.n	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8081240:	f04f 0b02 	mov.w	fp, #2
 8081244:	e006      	b.n	8081254 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc4>
		switch (c) {
 8081246:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 808124a:	d1d3      	bne.n	80811f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				if (tokens == NULL)
 808124c:	2b00      	cmp	r3, #0
 808124e:	d0c9      	beq.n	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8081250:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 8081254:	6867      	ldr	r7, [r4, #4]
 8081256:	f107 38ff 	add.w	r8, r7, #4294967295
 808125a:	eb03 1907 	add.w	r9, r3, r7, lsl #4
 808125e:	f1b8 0f00 	cmp.w	r8, #0
 8081262:	db4f      	blt.n	8081304 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x174>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 8081264:	f859 7c0c 	ldr.w	r7, [r9, #-12]
 8081268:	f1a9 0a10 	sub.w	sl, r9, #16
 808126c:	3701      	adds	r7, #1
 808126e:	d045      	beq.n	80812fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
 8081270:	f859 7c08 	ldr.w	r7, [r9, #-8]
 8081274:	1c7e      	adds	r6, r7, #1
 8081276:	d141      	bne.n	80812fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
						if (token->type != type) {
 8081278:	f89a 9000 	ldrb.w	r9, [sl]
 808127c:	45d9      	cmp	r9, fp
 808127e:	d145      	bne.n	808130c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 8081280:	60a7      	str	r7, [r4, #8]
						token->end = parser->pos + 1;
 8081282:	f10e 0701 	add.w	r7, lr, #1
 8081286:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 808128a:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 808128e:	f8de 7004 	ldr.w	r7, [lr, #4]
 8081292:	3701      	adds	r7, #1
 8081294:	d03d      	beq.n	8081312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
 8081296:	f8de 7008 	ldr.w	r7, [lr, #8]
 808129a:	3701      	adds	r7, #1
 808129c:	d139      	bne.n	8081312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
 808129e:	f8c4 8008 	str.w	r8, [r4, #8]
								break;
 80812a2:	e79f      	b.n	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				count++;
 80812a4:	3001      	adds	r0, #1
				if (tokens == NULL) {
 80812a6:	2b00      	cmp	r3, #0
 80812a8:	d09c      	beq.n	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	if (parser->toknext >= num_tokens) {
 80812aa:	6867      	ldr	r7, [r4, #4]
 80812ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80812ae:	42be      	cmp	r6, r7
 80812b0:	d94e      	bls.n	8081350 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c0>
	tok->size = 0;
 80812b2:	2600      	movs	r6, #0
	tok = &tokens[parser->toknext++];
 80812b4:	f107 0e01 	add.w	lr, r7, #1
 80812b8:	f8c4 e004 	str.w	lr, [r4, #4]
 80812bc:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
 80812c0:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
 80812c4:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
 80812c8:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
 80812cc:	68a7      	ldr	r7, [r4, #8]
 80812ce:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80812d0:	bf1f      	itttt	ne
 80812d2:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80812d6:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80812da:	3701      	addne	r7, #1
 80812dc:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80812e0:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80812e4:	bf0c      	ite	eq
 80812e6:	2701      	moveq	r7, #1
 80812e8:	2702      	movne	r7, #2
 80812ea:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
 80812ee:	6827      	ldr	r7, [r4, #0]
 80812f0:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
 80812f4:	6867      	ldr	r7, [r4, #4]
 80812f6:	3f01      	subs	r7, #1
 80812f8:	60a7      	str	r7, [r4, #8]
				break;
 80812fa:	e773      	b.n	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80812fc:	46d1      	mov	r9, sl
 80812fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8081302:	e7ac      	b.n	808125e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xce>
				if (i == -1) return JSMN_ERROR_INVAL;
 8081304:	f1b8 3fff 	cmp.w	r8, #4294967295
 8081308:	f47f af6c 	bne.w	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
							return JSMN_ERROR_INVAL;
 808130c:	f06f 0001 	mvn.w	r0, #1
 8081310:	e020      	b.n	8081354 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				for (; i >= 0; i--) {
 8081312:	f108 38ff 	add.w	r8, r8, #4294967295
 8081316:	f1b8 3fff 	cmp.w	r8, #4294967295
 808131a:	f1ae 0e10 	sub.w	lr, lr, #16
 808131e:	d1b6      	bne.n	808128e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfe>
 8081320:	e760      	b.n	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	parser->pos++;
 8081322:	f10e 0901 	add.w	r9, lr, #1
 8081326:	f8c4 9000 	str.w	r9, [r4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 808132a:	f8d4 8000 	ldr.w	r8, [r4]
 808132e:	4542      	cmp	r2, r8
 8081330:	f240 8091 	bls.w	8081456 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
 8081334:	f811 7008 	ldrb.w	r7, [r1, r8]
 8081338:	2f00      	cmp	r7, #0
 808133a:	f000 808c 	beq.w	8081456 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
		if (c == '\"') {
 808133e:	2f22      	cmp	r7, #34	; 0x22
 8081340:	d12e      	bne.n	80813a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
			if (tokens == NULL) {
 8081342:	b1eb      	cbz	r3, 8081380 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
 8081344:	6867      	ldr	r7, [r4, #4]
 8081346:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8081348:	42be      	cmp	r6, r7
 808134a:	d805      	bhi.n	8081358 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
 808134c:	f8c4 e000 	str.w	lr, [r4]
					return JSMN_ERROR_NOMEM;
 8081350:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return count;
}
 8081354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok->size = 0;
 8081358:	2600      	movs	r6, #0
	token->type = type;
 808135a:	f04f 0a03 	mov.w	sl, #3
	tok = &tokens[parser->toknext++];
 808135e:	f107 0e01 	add.w	lr, r7, #1
 8081362:	ea4f 1807 	mov.w	r8, r7, lsl #4
 8081366:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 808136a:	f8c4 e004 	str.w	lr, [r4, #4]
	tok->start = tok->end = -1;
 808136e:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 8081372:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 8081374:	f8d4 e000 	ldr.w	lr, [r4]
	token->type = type;
 8081378:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
 808137c:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
 8081380:	68a7      	ldr	r7, [r4, #8]
				count++;
 8081382:	3001      	adds	r0, #1
				if (parser->toksuper != -1 && tokens != NULL)
 8081384:	1c7e      	adds	r6, r7, #1
 8081386:	f43f af2d 	beq.w	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 808138a:	2b00      	cmp	r3, #0
 808138c:	f43f af2a 	beq.w	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					tokens[parser->toksuper].size++;
 8081390:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 8081394:	f8de 700c 	ldr.w	r7, [lr, #12]
 8081398:	3701      	adds	r7, #1
 808139a:	f8ce 700c 	str.w	r7, [lr, #12]
 808139e:	e721      	b.n	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
		if (c == '\\' && parser->pos + 1 < len) {
 80813a0:	2f5c      	cmp	r7, #92	; 0x5c
 80813a2:	d111      	bne.n	80813c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80813a4:	f108 0701 	add.w	r7, r8, #1
 80813a8:	42ba      	cmp	r2, r7
 80813aa:	d90d      	bls.n	80813c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos++;
 80813ac:	6027      	str	r7, [r4, #0]
			switch (js[parser->pos]) {
 80813ae:	5dcf      	ldrb	r7, [r1, r7]
 80813b0:	2f75      	cmp	r7, #117	; 0x75
 80813b2:	d82b      	bhi.n	808140c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80813b4:	2f6d      	cmp	r7, #109	; 0x6d
 80813b6:	d80b      	bhi.n	80813d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>
 80813b8:	2f66      	cmp	r7, #102	; 0x66
 80813ba:	d827      	bhi.n	808140c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80813bc:	2f5b      	cmp	r7, #91	; 0x5b
 80813be:	d81d      	bhi.n	80813fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x26c>
 80813c0:	2f22      	cmp	r7, #34	; 0x22
 80813c2:	d001      	beq.n	80813c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80813c4:	2f2f      	cmp	r7, #47	; 0x2f
 80813c6:	d121      	bne.n	808140c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80813c8:	6827      	ldr	r7, [r4, #0]
 80813ca:	3701      	adds	r7, #1
 80813cc:	6027      	str	r7, [r4, #0]
 80813ce:	e7ac      	b.n	808132a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x19a>
 80813d0:	3f6e      	subs	r7, #110	; 0x6e
 80813d2:	2f07      	cmp	r7, #7
 80813d4:	d81a      	bhi.n	808140c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80813d6:	a601      	add	r6, pc, #4	; (adr r6, 80813dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24c>)
 80813d8:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
 80813dc:	080813c9 	.word	0x080813c9
 80813e0:	0808140d 	.word	0x0808140d
 80813e4:	0808140d 	.word	0x0808140d
 80813e8:	0808140d 	.word	0x0808140d
 80813ec:	080813c9 	.word	0x080813c9
 80813f0:	0808140d 	.word	0x0808140d
 80813f4:	080813c9 	.word	0x080813c9
 80813f8:	08081413 	.word	0x08081413
 80813fc:	f240 4641 	movw	r6, #1089	; 0x441
 8081400:	3f5c      	subs	r7, #92	; 0x5c
 8081402:	b2ff      	uxtb	r7, r7
 8081404:	fa0c f707 	lsl.w	r7, ip, r7
 8081408:	4237      	tst	r7, r6
 808140a:	d1dd      	bne.n	80813c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos = start;
 808140c:	f8c4 e000 	str.w	lr, [r4]
				if (r < 0) return r;
 8081410:	e77c      	b.n	808130c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
					parser->pos++;
 8081412:	f04f 0a04 	mov.w	sl, #4
 8081416:	f108 0702 	add.w	r7, r8, #2
 808141a:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 808141c:	f8d4 8000 	ldr.w	r8, [r4]
 8081420:	4542      	cmp	r2, r8
 8081422:	d803      	bhi.n	808142c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
					parser->pos--;
 8081424:	6827      	ldr	r7, [r4, #0]
 8081426:	3f01      	subs	r7, #1
 8081428:	6027      	str	r7, [r4, #0]
					break;
 808142a:	e7cd      	b.n	80813c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 808142c:	f811 7008 	ldrb.w	r7, [r1, r8]
 8081430:	2f00      	cmp	r7, #0
 8081432:	d0f7      	beq.n	8081424 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 8081434:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 8081438:	f1bb 0f09 	cmp.w	fp, #9
 808143c:	d904      	bls.n	8081448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b8>
 808143e:	f027 0720 	bic.w	r7, r7, #32
 8081442:	3f41      	subs	r7, #65	; 0x41
 8081444:	2f05      	cmp	r7, #5
 8081446:	d8e1      	bhi.n	808140c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
						parser->pos++;
 8081448:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 808144c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
 8081450:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8081452:	d1e3      	bne.n	808141c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x28c>
 8081454:	e7e6      	b.n	8081424 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
	parser->pos = start;
 8081456:	f8c4 e000 	str.w	lr, [r4]
				return JSMN_ERROR_PART;
 808145a:	f06f 0002 	mvn.w	r0, #2
 808145e:	e779      	b.n	8081354 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				if (tokens != NULL && parser->toksuper != -1 &&
 8081460:	2b00      	cmp	r3, #0
 8081462:	f43f aebf 	beq.w	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 8081466:	68a7      	ldr	r7, [r4, #8]
 8081468:	1c7e      	adds	r6, r7, #1
 808146a:	f43f aebb 	beq.w	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 808146e:	013f      	lsls	r7, r7, #4
 8081470:	5ddf      	ldrb	r7, [r3, r7]
 8081472:	3f01      	subs	r7, #1
 8081474:	2f01      	cmp	r7, #1
 8081476:	f67f aeb5 	bls.w	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					for (i = parser->toknext - 1; i >= 0; i--) {
 808147a:	6867      	ldr	r7, [r4, #4]
 808147c:	f107 38ff 	add.w	r8, r7, #4294967295
 8081480:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 8081484:	f1b8 0f00 	cmp.w	r8, #0
 8081488:	f6ff aeac 	blt.w	80811e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 808148c:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
 8081490:	3f01      	subs	r7, #1
 8081492:	2f01      	cmp	r7, #1
 8081494:	d808      	bhi.n	80814a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 8081496:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 808149a:	3701      	adds	r7, #1
 808149c:	d004      	beq.n	80814a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
 808149e:	f85e 7c08 	ldr.w	r7, [lr, #-8]
 80814a2:	3701      	adds	r7, #1
 80814a4:	f43f aefb 	beq.w	808129e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10e>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80814a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80814ac:	f1ae 0e10 	sub.w	lr, lr, #16
 80814b0:	e7e8      	b.n	8081484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f4>
 80814b2:	f1a7 0920 	sub.w	r9, r7, #32
 80814b6:	4e0a      	ldr	r6, [pc, #40]	; (80814e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
 80814b8:	fa5f f989 	uxtb.w	r9, r9
 80814bc:	fa0c f909 	lsl.w	r9, ip, r9
 80814c0:	ea19 0f06 	tst.w	r9, r6
 80814c4:	f47f aea9 	bne.w	808121a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80814c8:	3f20      	subs	r7, #32
 80814ca:	2f5e      	cmp	r7, #94	; 0x5e
 80814cc:	d89e      	bhi.n	808140c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80814ce:	f108 0701 	add.w	r7, r8, #1
 80814d2:	6027      	str	r7, [r4, #0]
 80814d4:	e68e      	b.n	80811f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
		switch (js[parser->pos]) {
 80814d6:	2f0d      	cmp	r7, #13
 80814d8:	d1f6      	bne.n	80814c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
 80814da:	e69e      	b.n	808121a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80814dc:	00800013 	.word	0x00800013
 80814e0:	04001001 	.word	0x04001001
 80814e4:	f007 09df 	and.w	r9, r7, #223	; 0xdf
 80814e8:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 80814ec:	e7f4      	b.n	80814d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
	if (parser->toknext >= num_tokens) {
 80814ee:	6867      	ldr	r7, [r4, #4]
 80814f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80814f2:	42be      	cmp	r6, r7
 80814f4:	f67f af2a 	bls.w	808134c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1bc>
	tok->size = 0;
 80814f8:	2600      	movs	r6, #0
	token->type = type;
 80814fa:	f04f 0a04 	mov.w	sl, #4
	tok = &tokens[parser->toknext++];
 80814fe:	f107 0801 	add.w	r8, r7, #1
 8081502:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8081506:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 808150a:	f8c4 8004 	str.w	r8, [r4, #4]
	tok->start = tok->end = -1;
 808150e:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 8081512:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8081514:	f8d4 8000 	ldr.w	r8, [r4]
	token->type = type;
 8081518:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
 808151c:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
 8081520:	6827      	ldr	r7, [r4, #0]
 8081522:	3f01      	subs	r7, #1
 8081524:	e67e      	b.n	8081224 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x94>
	if (tokens != NULL) {
 8081526:	2b00      	cmp	r3, #0
 8081528:	f43f af14 	beq.w	8081354 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
		for (i = parser->toknext - 1; i >= 0; i--) {
 808152c:	6862      	ldr	r2, [r4, #4]
 808152e:	1e51      	subs	r1, r2, #1
 8081530:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8081534:	2900      	cmp	r1, #0
 8081536:	f6ff af0d 	blt.w	8081354 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 808153a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 808153e:	3201      	adds	r2, #1
 8081540:	d003      	beq.n	808154a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ba>
 8081542:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8081546:	3201      	adds	r2, #1
 8081548:	d087      	beq.n	808145a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		for (i = parser->toknext - 1; i >= 0; i--) {
 808154a:	3901      	subs	r1, #1
 808154c:	3b10      	subs	r3, #16
 808154e:	e7f1      	b.n	8081534 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a4>

08081550 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
 8081550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (tokens) {
 8081552:	6943      	ldr	r3, [r0, #20]
bool JsonParser::parse() {
 8081554:	4604      	mov	r4, r0
 8081556:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
 808155a:	b1c3      	cbz	r3, 808158e <_ZN10JsonParser5parseEv+0x3e>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 808155c:	2200      	movs	r2, #0
	parser->toknext = 0;
 808155e:	e9c0 2208 	strd	r2, r2, [r0, #32]
	parser->toksuper = -1;
 8081562:	f04f 32ff 	mov.w	r2, #4294967295
 8081566:	6282      	str	r2, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 8081568:	69c2      	ldr	r2, [r0, #28]
 808156a:	9200      	str	r2, [sp, #0]
 808156c:	68c2      	ldr	r2, [r0, #12]
 808156e:	6841      	ldr	r1, [r0, #4]
 8081570:	4630      	mov	r0, r6
 8081572:	f7ff fe0d 	bl	8081190 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 8081576:	1c43      	adds	r3, r0, #1
 8081578:	d12e      	bne.n	80815d8 <_ZN10JsonParser5parseEv+0x88>
			if (staticBuffers) {
 808157a:	7c25      	ldrb	r5, [r4, #16]
 808157c:	b115      	cbz	r5, 8081584 <_ZN10JsonParser5parseEv+0x34>
				return false;
 808157e:	2000      	movs	r0, #0
}
 8081580:	b003      	add	sp, #12
 8081582:	bdf0      	pop	{r4, r5, r6, r7, pc}
			free(tokens);
 8081584:	6960      	ldr	r0, [r4, #20]
 8081586:	f000 fd13 	bl	8081fb0 <free>
			tokens = 0;
 808158a:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 808158c:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
 808158e:	2500      	movs	r5, #0
	parser->toksuper = -1;
 8081590:	f04f 37ff 	mov.w	r7, #4294967295
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 8081594:	462b      	mov	r3, r5
 8081596:	4630      	mov	r0, r6
	parser->toknext = 0;
 8081598:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 808159c:	68e2      	ldr	r2, [r4, #12]
 808159e:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80815a0:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80815a2:	9500      	str	r5, [sp, #0]
 80815a4:	f7ff fdf4 	bl	8081190 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80815a8:	2800      	cmp	r0, #0
 80815aa:	dbe8      	blt.n	808157e <_ZN10JsonParser5parseEv+0x2e>
	maxTokens = (size_t) result;
 80815ac:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80815ae:	d01b      	beq.n	80815e8 <_ZN10JsonParser5parseEv+0x98>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80815b0:	0100      	lsls	r0, r0, #4
 80815b2:	f000 fcf5 	bl	8081fa0 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80815b6:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80815b8:	4603      	mov	r3, r0
 80815ba:	6160      	str	r0, [r4, #20]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80815bc:	9200      	str	r2, [sp, #0]
 80815be:	4630      	mov	r0, r6
	parser->toknext = 0;
 80815c0:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80815c4:	68e2      	ldr	r2, [r4, #12]
 80815c6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80815c8:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80815ca:	f7ff fde1 	bl	8081190 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		tokensEnd = &tokens[result];
 80815ce:	6963      	ldr	r3, [r4, #20]
 80815d0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		tokensEnd = tokens;
 80815d4:	61a3      	str	r3, [r4, #24]
 80815d6:	e005      	b.n	80815e4 <_ZN10JsonParser5parseEv+0x94>
		if (result < 0) {
 80815d8:	2800      	cmp	r0, #0
 80815da:	dbd0      	blt.n	808157e <_ZN10JsonParser5parseEv+0x2e>
			tokensEnd = &tokens[result];
 80815dc:	6963      	ldr	r3, [r4, #20]
 80815de:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80815e2:	61a0      	str	r0, [r4, #24]
	return true;
 80815e4:	2001      	movs	r0, #1
 80815e6:	e7cb      	b.n	8081580 <_ZN10JsonParser5parseEv+0x30>
		tokensEnd = tokens;
 80815e8:	6963      	ldr	r3, [r4, #20]
 80815ea:	e7f3      	b.n	80815d4 <_ZN10JsonParser5parseEv+0x84>

080815ec <_ZN14RunningAverageD1Ev>:
    _ar = (double*) malloc(_size * sizeof(double));
    if (_ar == NULL) _size = 0;
    clear();
}

RunningAverage::~RunningAverage()
 80815ec:	b510      	push	{r4, lr}
 80815ee:	4604      	mov	r4, r0
{
    if (_ar != NULL) free(_ar);
 80815f0:	6900      	ldr	r0, [r0, #16]
 80815f2:	b108      	cbz	r0, 80815f8 <_ZN14RunningAverageD1Ev+0xc>
 80815f4:	f000 fcdc 	bl	8081fb0 <free>
}
 80815f8:	4620      	mov	r0, r4
 80815fa:	bd10      	pop	{r4, pc}

080815fc <_ZN14RunningAverage5clearEv>:

// resets all counters
void RunningAverage::clear()
{
 80815fc:	b530      	push	{r4, r5, lr}
    _cnt = 0;
    _idx = 0;
    _sum = 0.0;
 80815fe:	2400      	movs	r4, #0
 8081600:	2500      	movs	r5, #0
    _cnt = 0;
 8081602:	2300      	movs	r3, #0
    _sum = 0.0;
 8081604:	e9c0 4502 	strd	r4, r5, [r0, #8]
    _cnt = 0;
 8081608:	7043      	strb	r3, [r0, #1]
    _idx = 0;
 808160a:	7083      	strb	r3, [r0, #2]
    for (uint8_t i = 0; i< _size; i++)
 808160c:	7802      	ldrb	r2, [r0, #0]
 808160e:	b2d9      	uxtb	r1, r3
 8081610:	428a      	cmp	r2, r1
 8081612:	d906      	bls.n	8081622 <_ZN14RunningAverage5clearEv+0x26>
    {
        _ar[i] = 0.0; // keeps addValue simple
 8081614:	6902      	ldr	r2, [r0, #16]
 8081616:	3301      	adds	r3, #1
 8081618:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 808161c:	e9c2 4500 	strd	r4, r5, [r2]
    for (uint8_t i = 0; i< _size; i++)
 8081620:	e7f4      	b.n	808160c <_ZN14RunningAverage5clearEv+0x10>
    }
}
 8081622:	bd30      	pop	{r4, r5, pc}

08081624 <_ZN14RunningAverageC1Eh>:
RunningAverage::RunningAverage(uint8_t size)
 8081624:	b510      	push	{r4, lr}
 8081626:	4604      	mov	r4, r0
    _size = size;
 8081628:	7001      	strb	r1, [r0, #0]
    _ar = (double*) malloc(_size * sizeof(double));
 808162a:	00c8      	lsls	r0, r1, #3
 808162c:	f000 fcb8 	bl	8081fa0 <malloc>
 8081630:	6120      	str	r0, [r4, #16]
    if (_ar == NULL) _size = 0;
 8081632:	b900      	cbnz	r0, 8081636 <_ZN14RunningAverageC1Eh+0x12>
 8081634:	7020      	strb	r0, [r4, #0]
    clear();
 8081636:	4620      	mov	r0, r4
 8081638:	f7ff ffe0 	bl	80815fc <_ZN14RunningAverage5clearEv>
}
 808163c:	bd10      	pop	{r4, pc}

0808163e <_ZN14RunningAverage8addValueEd>:

// adds a new value to the data-set
void RunningAverage::addValue(double value)
{
 808163e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_ar == NULL) return;
 8081640:	6905      	ldr	r5, [r0, #16]
{
 8081642:	4604      	mov	r4, r0
 8081644:	4616      	mov	r6, r2
 8081646:	461f      	mov	r7, r3
    if (_ar == NULL) return;
 8081648:	b345      	cbz	r5, 808169c <_ZN14RunningAverage8addValueEd+0x5e>
    _sum -= _ar[_idx];
 808164a:	7883      	ldrb	r3, [r0, #2]
 808164c:	f100 0108 	add.w	r1, r0, #8
 8081650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8081654:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8081658:	e9d5 2300 	ldrd	r2, r3, [r5]
 808165c:	f002 f824 	bl	80836a8 <__aeabi_dsub>
 8081660:	e9c4 0102 	strd	r0, r1, [r4, #8]
    _ar[_idx] = value;
 8081664:	e9c5 6700 	strd	r6, r7, [r5]
    _sum += _ar[_idx];
 8081668:	78a5      	ldrb	r5, [r4, #2]
 808166a:	6923      	ldr	r3, [r4, #16]
 808166c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8081670:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8081674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081678:	f002 f818 	bl	80836ac <__adddf3>
    _idx++;
 808167c:	3501      	adds	r5, #1
    if (_idx == _size) _idx = 0;  // faster than %
 808167e:	7822      	ldrb	r2, [r4, #0]
    _idx++;
 8081680:	b2ed      	uxtb	r5, r5
    if (_idx == _size) _idx = 0;  // faster than %
 8081682:	4295      	cmp	r5, r2
 8081684:	bf08      	it	eq
 8081686:	2300      	moveq	r3, #0
    _idx++;
 8081688:	70a5      	strb	r5, [r4, #2]
    if (_idx == _size) _idx = 0;  // faster than %
 808168a:	bf08      	it	eq
 808168c:	70a3      	strbeq	r3, [r4, #2]
    if (_cnt < _size) _cnt++;
 808168e:	7863      	ldrb	r3, [r4, #1]
    _sum += _ar[_idx];
 8081690:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if (_cnt < _size) _cnt++;
 8081694:	429a      	cmp	r2, r3
 8081696:	bf84      	itt	hi
 8081698:	3301      	addhi	r3, #1
 808169a:	7063      	strbhi	r3, [r4, #1]
}
 808169c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808169e <_ZN14RunningAverage10getAverageEv>:

// returns the average of the data-set added sofar
double RunningAverage::getAverage()
{
 808169e:	b510      	push	{r4, lr}
 80816a0:	4604      	mov	r4, r0
    if (_cnt == 0) return 0;
 80816a2:	7840      	ldrb	r0, [r0, #1]
 80816a4:	b140      	cbz	r0, 80816b8 <_ZN14RunningAverage10getAverageEv+0x1a>
    return _sum / _cnt;
 80816a6:	f002 f94d 	bl	8083944 <__aeabi_i2d>
 80816aa:	4602      	mov	r2, r0
 80816ac:	460b      	mov	r3, r1
 80816ae:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80816b2:	f002 fadb 	bl	8083c6c <__aeabi_ddiv>
}
 80816b6:	bd10      	pop	{r4, pc}
    if (_cnt == 0) return 0;
 80816b8:	2000      	movs	r0, #0
 80816ba:	2100      	movs	r1, #0
 80816bc:	e7fb      	b.n	80816b6 <_ZN14RunningAverage10getAverageEv+0x18>

080816be <_ZN14RunningAverage9fillValueEdh>:

// fill the average with a value
// the param number determines how often value is added (weight)
// number should preferably be between 1 and size
void RunningAverage::fillValue(double value, uint8_t number)
{
 80816be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80816c2:	4605      	mov	r5, r0
 80816c4:	4616      	mov	r6, r2
 80816c6:	461f      	mov	r7, r3
 80816c8:	f89d 8018 	ldrb.w	r8, [sp, #24]
    clear(); // TODO conditional?  if (clr) clear();
 80816cc:	2400      	movs	r4, #0
 80816ce:	f7ff ff95 	bl	80815fc <_ZN14RunningAverage5clearEv>

    for (uint8_t i = 0; i < number; i++)
 80816d2:	4544      	cmp	r4, r8
 80816d4:	d006      	beq.n	80816e4 <_ZN14RunningAverage9fillValueEdh+0x26>
    {
        addValue(value);
 80816d6:	4632      	mov	r2, r6
 80816d8:	463b      	mov	r3, r7
 80816da:	4628      	mov	r0, r5
 80816dc:	f7ff ffaf 	bl	808163e <_ZN14RunningAverage8addValueEd>
    for (uint8_t i = 0; i < number; i++)
 80816e0:	3401      	adds	r4, #1
 80816e2:	e7f6      	b.n	80816d2 <_ZN14RunningAverage9fillValueEdh+0x14>
    }
}
 80816e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080816e8 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 80816e8:	b510      	push	{r4, lr}
 80816ea:	4604      	mov	r4, r0
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
 80816ec:	f001 ffa4 	bl	8083638 <_Z19__fetch_global_Wirev>
 80816f0:	6803      	ldr	r3, [r0, #0]
 80816f2:	4621      	mov	r1, r4
  #else
  Wire.send(x);
  #endif
}
 80816f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 80816f8:	689b      	ldr	r3, [r3, #8]
 80816fa:	4718      	bx	r3

080816fc <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 80816fc:	b508      	push	{r3, lr}
  return Wire.read();
 80816fe:	f001 ff9b 	bl	8083638 <_Z19__fetch_global_Wirev>
 8081702:	6803      	ldr	r3, [r0, #0]
 8081704:	695b      	ldr	r3, [r3, #20]
 8081706:	4798      	blx	r3
}
 8081708:	b2c0      	uxtb	r0, r0
 808170a:	bd08      	pop	{r3, pc}

0808170c <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 808170c:	b570      	push	{r4, r5, r6, lr}
 808170e:	4606      	mov	r6, r0
 8081710:	460d      	mov	r5, r1
 8081712:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8081714:	f001 ff90 	bl	8083638 <_Z19__fetch_global_Wirev>
 8081718:	4631      	mov	r1, r6
 808171a:	f001 fe69 	bl	80833f0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 808171e:	4628      	mov	r0, r5
 8081720:	f7ff ffe2 	bl	80816e8 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8081724:	0a20      	lsrs	r0, r4, #8
 8081726:	f7ff ffdf 	bl	80816e8 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 808172a:	b2e0      	uxtb	r0, r4
 808172c:	f7ff ffdc 	bl	80816e8 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8081730:	f001 ff82 	bl	8083638 <_Z19__fetch_global_Wirev>
}
 8081734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 8081738:	f001 be62 	b.w	8083400 <_ZN7TwoWire15endTransmissionEv>

0808173c <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 808173c:	b510      	push	{r4, lr}
 808173e:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8081740:	f001 ff7a 	bl	8083638 <_Z19__fetch_global_Wirev>
 8081744:	4621      	mov	r1, r4
 8081746:	f001 fe53 	bl	80833f0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 808174a:	2000      	movs	r0, #0
 808174c:	f7ff ffcc 	bl	80816e8 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8081750:	f001 ff72 	bl	8083638 <_Z19__fetch_global_Wirev>
 8081754:	f001 fe54 	bl	8083400 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8081758:	f001 ff6e 	bl	8083638 <_Z19__fetch_global_Wirev>
 808175c:	4621      	mov	r1, r4
 808175e:	2202      	movs	r2, #2
 8081760:	f001 fe43 	bl	80833ea <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 8081764:	f7ff ffca 	bl	80816fc <_ZL7i2creadv>
 8081768:	4604      	mov	r4, r0
 808176a:	f7ff ffc7 	bl	80816fc <_ZL7i2creadv>
 808176e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8081772:	b280      	uxth	r0, r0
 8081774:	bd10      	pop	{r4, pc}

08081776 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8081776:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8081778:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 808177a:	2102      	movs	r1, #2
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 808177c:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 808177e:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8081780:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8081782:	4770      	bx	lr

08081784 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8081784:	b508      	push	{r3, lr}
  Wire.begin();
 8081786:	f001 ff57 	bl	8083638 <_Z19__fetch_global_Wirev>
}
 808178a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 808178e:	f001 bdfd 	b.w	808338c <_ZN7TwoWire5beginEv>

08081792 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8081792:	8081      	strh	r1, [r0, #4]
}
 8081794:	4770      	bx	lr

08081796 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8081796:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8081798:	b510      	push	{r4, lr}
 808179a:	4604      	mov	r4, r0
  if (channel > 3)
 808179c:	d822      	bhi.n	80817e4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 808179e:	2902      	cmp	r1, #2
  config |= m_gain;
 80817a0:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 80817a2:	d019      	beq.n	80817d8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 80817a4:	2903      	cmp	r1, #3
 80817a6:	d01a      	beq.n	80817de <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 80817a8:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 80817aa:	bf14      	ite	ne
 80817ac:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 80817b0:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80817b4:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 80817b8:	2101      	movs	r1, #1
 80817ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80817be:	7820      	ldrb	r0, [r4, #0]
 80817c0:	f7ff ffa4 	bl	808170c <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 80817c4:	7860      	ldrb	r0, [r4, #1]
 80817c6:	f000 ffe7 	bl	8082798 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 80817ca:	7820      	ldrb	r0, [r4, #0]
 80817cc:	f7ff ffb6 	bl	808173c <_ZL12readRegisterhh.isra.0>
 80817d0:	78a3      	ldrb	r3, [r4, #2]
 80817d2:	4118      	asrs	r0, r3
 80817d4:	b280      	uxth	r0, r0
}
 80817d6:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 80817d8:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 80817dc:	e7ea      	b.n	80817b4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80817de:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 80817e2:	e7e7      	b.n	80817b4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 80817e4:	2000      	movs	r0, #0
 80817e6:	e7f6      	b.n	80817d6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>

080817e8 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 80817e8:	b430      	push	{r4, r5}
 80817ea:	4605      	mov	r5, r0
 80817ec:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 80817ee:	681b      	ldr	r3, [r3, #0]
 80817f0:	681c      	ldr	r4, [r3, #0]
 80817f2:	4613      	mov	r3, r2
 80817f4:	46a4      	mov	ip, r4
 80817f6:	460a      	mov	r2, r1
 80817f8:	4629      	mov	r1, r5
}
 80817fa:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 80817fc:	4760      	bx	ip

080817fe <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80817fe:	b40e      	push	{r1, r2, r3}
 8081800:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081802:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8081804:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8081806:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8081808:	b08d      	sub	sp, #52	; 0x34
 808180a:	aa0f      	add	r2, sp, #60	; 0x3c
 808180c:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8081810:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081814:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8081818:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808181a:	201e      	movs	r0, #30
 808181c:	aa04      	add	r2, sp, #16
 808181e:	f000 fac1 	bl	8081da4 <log_message_v>
}
 8081822:	b00d      	add	sp, #52	; 0x34
 8081824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081828:	b003      	add	sp, #12
 808182a:	4770      	bx	lr

0808182c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 808182c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081830:	460c      	mov	r4, r1
 8081832:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 8081834:	494d      	ldr	r1, [pc, #308]	; (808196c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8081836:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8081838:	4616      	mov	r6, r2
 808183a:	461d      	mov	r5, r3
	String typeStr;
 808183c:	f000 fcea 	bl	8082214 <_ZN6StringC1EPKc>
	switch(type) {
 8081840:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8081844:	d064      	beq.n	8081910 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 8081846:	dc1f      	bgt.n	8081888 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8081848:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 808184c:	d05c      	beq.n	8081908 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 808184e:	dc13      	bgt.n	8081878 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8081850:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8081854:	d056      	beq.n	8081904 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 8081856:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 808185a:	d055      	beq.n	8081908 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 808185c:	b35c      	cbz	r4, 80818b6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 808185e:	4622      	mov	r2, r4
 8081860:	a808      	add	r0, sp, #32
 8081862:	4943      	ldr	r1, [pc, #268]	; (8081970 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8081864:	f000 fdb2 	bl	80823cc <_ZN6String6formatEPKcz>
 8081868:	a908      	add	r1, sp, #32
 808186a:	a804      	add	r0, sp, #16
 808186c:	f000 fd1c 	bl	80822a8 <_ZN6StringaSEOS_>
 8081870:	a808      	add	r0, sp, #32
 8081872:	f000 fc85 	bl	8082180 <_ZN6StringD1Ev>
		break;
 8081876:	e022      	b.n	80818be <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 8081878:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 808187c:	d046      	beq.n	808190c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 808187e:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8081882:	d1ec      	bne.n	808185e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 8081884:	493b      	ldr	r1, [pc, #236]	; (8081974 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 8081886:	e017      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8081888:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 808188c:	d046      	beq.n	808191c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 808188e:	dc0a      	bgt.n	80818a6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8081890:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8081894:	d03e      	beq.n	8081914 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 8081896:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 808189a:	d03d      	beq.n	8081918 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 808189c:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 80818a0:	d1dd      	bne.n	808185e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 80818a2:	4935      	ldr	r1, [pc, #212]	; (8081978 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 80818a4:	e008      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 80818a6:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 80818aa:	d037      	beq.n	808191c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 80818ac:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 80818b0:	d1d5      	bne.n	808185e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 80818b2:	4932      	ldr	r1, [pc, #200]	; (808197c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 80818b4:	e000      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 80818b6:	4932      	ldr	r1, [pc, #200]	; (8081980 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 80818b8:	a804      	add	r0, sp, #16
 80818ba:	f000 fcfd 	bl	80822b8 <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 80818be:	462b      	mov	r3, r5
 80818c0:	9a04      	ldr	r2, [sp, #16]
 80818c2:	4930      	ldr	r1, [pc, #192]	; (8081984 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 80818c4:	4830      	ldr	r0, [pc, #192]	; (8081988 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80818c6:	f7ff ff9a 	bl	80817fe <_ZNK5spark6Logger4infoEPKcz>
	String out;
 80818ca:	4928      	ldr	r1, [pc, #160]	; (808196c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80818cc:	a808      	add	r0, sp, #32
 80818ce:	f000 fca1 	bl	8082214 <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 80818d2:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 80818d4:	4f2d      	ldr	r7, [pc, #180]	; (808198c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80818d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80819ac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 80818da:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80819b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 80818de:	42ac      	cmp	r4, r5
 80818e0:	da35      	bge.n	808194e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 80818e2:	5d31      	ldrb	r1, [r6, r4]
 80818e4:	290a      	cmp	r1, #10
 80818e6:	d11b      	bne.n	8081920 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 80818e8:	4649      	mov	r1, r9
 80818ea:	a808      	add	r0, sp, #32
 80818ec:	f000 fd1f 	bl	808232e <_ZN6String6concatEPKc>
			Log.info(out);
 80818f0:	9908      	ldr	r1, [sp, #32]
 80818f2:	4825      	ldr	r0, [pc, #148]	; (8081988 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80818f4:	f7ff ff83 	bl	80817fe <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 80818f8:	491c      	ldr	r1, [pc, #112]	; (808196c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80818fa:	a808      	add	r0, sp, #32
 80818fc:	f000 fcdc 	bl	80822b8 <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 8081900:	3401      	adds	r4, #1
 8081902:	e7ec      	b.n	80818de <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 8081904:	4922      	ldr	r1, [pc, #136]	; (8081990 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8081906:	e7d7      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 8081908:	4922      	ldr	r1, [pc, #136]	; (8081994 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 808190a:	e7d5      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 808190c:	4922      	ldr	r1, [pc, #136]	; (8081998 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 808190e:	e7d3      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 8081910:	4922      	ldr	r1, [pc, #136]	; (808199c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8081912:	e7d1      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 8081914:	4922      	ldr	r1, [pc, #136]	; (80819a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8081916:	e7cf      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 8081918:	4922      	ldr	r1, [pc, #136]	; (80819a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 808191a:	e7cd      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 808191c:	4922      	ldr	r1, [pc, #136]	; (80819a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 808191e:	e7cb      	b.n	80818b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 8081920:	290d      	cmp	r1, #13
 8081922:	d104      	bne.n	808192e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 8081924:	4641      	mov	r1, r8
			out.concat(hex);
 8081926:	a808      	add	r0, sp, #32
 8081928:	f000 fd01 	bl	808232e <_ZN6String6concatEPKc>
 808192c:	e7e8      	b.n	8081900 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 808192e:	f1a1 0320 	sub.w	r3, r1, #32
 8081932:	2b5e      	cmp	r3, #94	; 0x5e
 8081934:	d907      	bls.n	8081946 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8081936:	460b      	mov	r3, r1
 8081938:	463a      	mov	r2, r7
 808193a:	210a      	movs	r1, #10
 808193c:	a801      	add	r0, sp, #4
 808193e:	f000 fb57 	bl	8081ff0 <snprintf>
			out.concat(hex);
 8081942:	a901      	add	r1, sp, #4
 8081944:	e7ef      	b.n	8081926 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 8081946:	a808      	add	r0, sp, #32
 8081948:	f000 fd00 	bl	808234c <_ZN6String6concatEc>
 808194c:	e7d8      	b.n	8081900 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 808194e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8081950:	b11b      	cbz	r3, 808195a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 8081952:	9908      	ldr	r1, [sp, #32]
 8081954:	480c      	ldr	r0, [pc, #48]	; (8081988 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8081956:	f7ff ff52 	bl	80817fe <_ZNK5spark6Logger4infoEPKcz>
	String out;
 808195a:	a808      	add	r0, sp, #32
 808195c:	f000 fc10 	bl	8082180 <_ZN6StringD1Ev>
	String typeStr;
 8081960:	a804      	add	r0, sp, #16
 8081962:	f000 fc0d 	bl	8082180 <_ZN6StringD1Ev>
}
 8081966:	b00d      	add	sp, #52	; 0x34
 8081968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808196c:	08086445 	.word	0x08086445
 8081970:	080863fb 	.word	0x080863fb
 8081974:	080863a1 	.word	0x080863a1
 8081978:	080863c0 	.word	0x080863c0
 808197c:	080863ee 	.word	0x080863ee
 8081980:	08086374 	.word	0x08086374
 8081984:	08086405 	.word	0x08086405
 8081988:	20000504 	.word	0x20000504
 808198c:	0808642c 	.word	0x0808642c
 8081990:	08086381 	.word	0x08086381
 8081994:	08086389 	.word	0x08086389
 8081998:	08086394 	.word	0x08086394
 808199c:	080863b0 	.word	0x080863b0
 80819a0:	080863ca 	.word	0x080863ca
 80819a4:	080863d8 	.word	0x080863d8
 80819a8:	080863e4 	.word	0x080863e4
 80819ac:	08086429 	.word	0x08086429
 80819b0:	08086426 	.word	0x08086426

080819b4 <_ZN30CellularHelperRSSIQualResponse11postProcessEv>:
void CellularHelperRSSIQualResponse::postProcess() {
 80819b4:	b510      	push	{r4, lr}
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
 80819b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80819ba:	f100 022c 	add.w	r2, r0, #44	; 0x2c
void CellularHelperRSSIQualResponse::postProcess() {
 80819be:	4604      	mov	r4, r0
	if (sscanf(string.c_str(), "%d,%d", &rssi, &qual) == 2) {
 80819c0:	4909      	ldr	r1, [pc, #36]	; (80819e8 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x34>)
 80819c2:	69c0      	ldr	r0, [r0, #28]
 80819c4:	f000 fb0c 	bl	8081fe0 <sscanf>
 80819c8:	2802      	cmp	r0, #2
 80819ca:	d10a      	bne.n	80819e2 <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2e>
		if (rssi < 99) {
 80819cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80819ce:	2b62      	cmp	r3, #98	; 0x62
			rssi = 0;
 80819d0:	bfce      	itee	gt
 80819d2:	2300      	movgt	r3, #0
			rssi = -113 + (rssi * 2);
 80819d4:	005b      	lslle	r3, r3, #1
 80819d6:	3b71      	suble	r3, #113	; 0x71
 80819d8:	62e3      	str	r3, [r4, #44]	; 0x2c
		resp = RESP_OK;
 80819da:	f06f 0301 	mvn.w	r3, #1
		resp = RESP_ERROR;
 80819de:	6063      	str	r3, [r4, #4]
}
 80819e0:	bd10      	pop	{r4, pc}
		resp = RESP_ERROR;
 80819e2:	f06f 0302 	mvn.w	r3, #2
 80819e6:	e7fa      	b.n	80819de <_ZN30CellularHelperRSSIQualResponse11postProcessEv+0x2a>
 80819e8:	08086433 	.word	0x08086433

080819ec <_ZN32CellularHelperPlusStringResponseC1Ev>:
 80819ec:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 80819ee:	f06f 0302 	mvn.w	r3, #2
 80819f2:	6043      	str	r3, [r0, #4]
 80819f4:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80819f6:	4604      	mov	r4, r0
 80819f8:	4d07      	ldr	r5, [pc, #28]	; (8081a18 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 80819fa:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80819fc:	4b07      	ldr	r3, [pc, #28]	; (8081a1c <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 80819fe:	4629      	mov	r1, r5
 8081a00:	f840 3b0c 	str.w	r3, [r0], #12
 8081a04:	f000 fc06 	bl	8082214 <_ZN6StringC1EPKc>
 8081a08:	4629      	mov	r1, r5
 8081a0a:	f104 001c 	add.w	r0, r4, #28
 8081a0e:	f000 fc01 	bl	8082214 <_ZN6StringC1EPKc>
 8081a12:	4620      	mov	r0, r4
 8081a14:	bd38      	pop	{r3, r4, r5, pc}
 8081a16:	bf00      	nop
 8081a18:	08086445 	.word	0x08086445
 8081a1c:	08086464 	.word	0x08086464

08081a20 <_ZNK19CellularHelperClass11getRSSIQualEv>:
CellularHelperRSSIQualResponse CellularHelperClass::getRSSIQual() const {
 8081a20:	b510      	push	{r4, lr}
 8081a22:	4604      	mov	r4, r0
 * Note that for 2G, qual is not available and 99 is always returned.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperRSSIQualResponse : public CellularHelperPlusStringResponse {
 8081a24:	f7ff ffe2 	bl	80819ec <_ZN32CellularHelperPlusStringResponseC1Ev>
 8081a28:	4b0c      	ldr	r3, [pc, #48]	; (8081a5c <_ZNK19CellularHelperClass11getRSSIQualEv+0x3c>)
	resp.command = "CSQ";
 8081a2a:	490d      	ldr	r1, [pc, #52]	; (8081a60 <_ZNK19CellularHelperClass11getRSSIQualEv+0x40>)
 8081a2c:	6023      	str	r3, [r4, #0]
 8081a2e:	2300      	movs	r3, #0
 8081a30:	f104 000c 	add.w	r0, r4, #12
 8081a34:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8081a38:	f000 fc3e 	bl	80822b8 <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8081a3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8081a40:	4621      	mov	r1, r4
 8081a42:	4b08      	ldr	r3, [pc, #32]	; (8081a64 <_ZNK19CellularHelperClass11getRSSIQualEv+0x44>)
 8081a44:	4808      	ldr	r0, [pc, #32]	; (8081a68 <_ZNK19CellularHelperClass11getRSSIQualEv+0x48>)
 8081a46:	f000 f975 	bl	8081d34 <cellular_command>
	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CSQ\r\n");
 8081a4a:	6060      	str	r0, [r4, #4]
	if (resp.resp == RESP_OK) {
 8081a4c:	3002      	adds	r0, #2
 8081a4e:	d102      	bne.n	8081a56 <_ZNK19CellularHelperClass11getRSSIQualEv+0x36>
		resp.postProcess();
 8081a50:	4620      	mov	r0, r4
 8081a52:	f7ff ffaf 	bl	80819b4 <_ZN30CellularHelperRSSIQualResponse11postProcessEv>
}
 8081a56:	4620      	mov	r0, r4
 8081a58:	bd10      	pop	{r4, pc}
 8081a5a:	bf00      	nop
 8081a5c:	08086458 	.word	0x08086458
 8081a60:	08086439 	.word	0x08086439
 8081a64:	0808643d 	.word	0x0808643d
 8081a68:	080817e9 	.word	0x080817e9

08081a6c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8081a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081a70:	460c      	mov	r4, r1
 8081a72:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 8081a74:	1c59      	adds	r1, r3, #1
 8081a76:	68a3      	ldr	r3, [r4, #8]
 8081a78:	4620      	mov	r0, r4
 8081a7a:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8081a7c:	4617      	mov	r7, r2
 8081a7e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 8081a82:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 8081a84:	f000 fb9a 	bl	80821bc <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8081a88:	42b5      	cmp	r5, r6
 8081a8a:	da0c      	bge.n	8081aa6 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8081a8c:	5d79      	ldrb	r1, [r7, r5]
 8081a8e:	f1b8 0f00 	cmp.w	r8, #0
 8081a92:	d003      	beq.n	8081a9c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 8081a94:	290d      	cmp	r1, #13
 8081a96:	d004      	beq.n	8081aa2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 8081a98:	290a      	cmp	r1, #10
 8081a9a:	d002      	beq.n	8081aa2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 8081a9c:	4620      	mov	r0, r4
 8081a9e:	f000 fc55 	bl	808234c <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 8081aa2:	3501      	adds	r5, #1
 8081aa4:	e7f0      	b.n	8081a88 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 8081aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08081aac <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8081aac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8081aae:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8081ab2:	4606      	mov	r6, r0
 8081ab4:	460d      	mov	r5, r1
 8081ab6:	4617      	mov	r7, r2
 8081ab8:	461c      	mov	r4, r3
 8081aba:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 8081abc:	f1bc 0f00 	cmp.w	ip, #0
 8081ac0:	d001      	beq.n	8081ac6 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 8081ac2:	f7ff feb3 	bl	808182c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 8081ac6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8081aca:	d12a      	bne.n	8081b22 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 8081acc:	1c60      	adds	r0, r4, #1
 8081ace:	f000 fa67 	bl	8081fa0 <malloc>
		if (copy) {
 8081ad2:	4605      	mov	r5, r0
 8081ad4:	b328      	cbz	r0, 8081b22 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8081ad6:	4622      	mov	r2, r4
 8081ad8:	4639      	mov	r1, r7
 8081ada:	f002 fc18 	bl	808430e <strncpy>
			copy[len] = 0;
 8081ade:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8081ae0:	2120      	movs	r1, #32
			copy[len] = 0;
 8081ae2:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8081ae4:	4a11      	ldr	r2, [pc, #68]	; (8081b2c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 8081ae6:	68f3      	ldr	r3, [r6, #12]
 8081ae8:	a802      	add	r0, sp, #8
 8081aea:	f000 fa81 	bl	8081ff0 <snprintf>
			char *start = strstr(copy, searchFor);
 8081aee:	4628      	mov	r0, r5
 8081af0:	a902      	add	r1, sp, #8
 8081af2:	f002 fc1f 	bl	8084334 <strstr>
			if (start) {
 8081af6:	4604      	mov	r4, r0
 8081af8:	b180      	cbz	r0, 8081b1c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 8081afa:	a802      	add	r0, sp, #8
 8081afc:	f002 fbed 	bl	80842da <strlen>
 8081b00:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 8081b02:	210d      	movs	r1, #13
 8081b04:	4620      	mov	r0, r4
 8081b06:	f002 fbad 	bl	8084264 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 8081b0a:	2301      	movs	r3, #1
 8081b0c:	4622      	mov	r2, r4
 8081b0e:	9300      	str	r3, [sp, #0]
 8081b10:	f106 011c 	add.w	r1, r6, #28
 8081b14:	1b03      	subs	r3, r0, r4
 8081b16:	4806      	ldr	r0, [pc, #24]	; (8081b30 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8081b18:	f7ff ffa8 	bl	8081a6c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 8081b1c:	4628      	mov	r0, r5
 8081b1e:	f000 fa47 	bl	8081fb0 <free>
}
 8081b22:	f04f 30ff 	mov.w	r0, #4294967295
 8081b26:	b00b      	add	sp, #44	; 0x2c
 8081b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081b2a:	bf00      	nop
 8081b2c:	08086446 	.word	0x08086446
 8081b30:	200004f1 	.word	0x200004f1

08081b34 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081b34:	b508      	push	{r3, lr}
 8081b36:	4b02      	ldr	r3, [pc, #8]	; (8081b40 <HAL_Pin_Mode+0xc>)
 8081b38:	681b      	ldr	r3, [r3, #0]
 8081b3a:	689b      	ldr	r3, [r3, #8]
 8081b3c:	9301      	str	r3, [sp, #4]
 8081b3e:	bd08      	pop	{r3, pc}
 8081b40:	080401b0 	.word	0x080401b0

08081b44 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081b44:	b508      	push	{r3, lr}
 8081b46:	4b02      	ldr	r3, [pc, #8]	; (8081b50 <HAL_Get_Pin_Mode+0xc>)
 8081b48:	681b      	ldr	r3, [r3, #0]
 8081b4a:	68db      	ldr	r3, [r3, #12]
 8081b4c:	9301      	str	r3, [sp, #4]
 8081b4e:	bd08      	pop	{r3, pc}
 8081b50:	080401b0 	.word	0x080401b0

08081b54 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081b54:	b508      	push	{r3, lr}
 8081b56:	4b02      	ldr	r3, [pc, #8]	; (8081b60 <HAL_GPIO_Write+0xc>)
 8081b58:	681b      	ldr	r3, [r3, #0]
 8081b5a:	691b      	ldr	r3, [r3, #16]
 8081b5c:	9301      	str	r3, [sp, #4]
 8081b5e:	bd08      	pop	{r3, pc}
 8081b60:	080401b0 	.word	0x080401b0

08081b64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081b64:	b508      	push	{r3, lr}
 8081b66:	4b02      	ldr	r3, [pc, #8]	; (8081b70 <HAL_RNG_GetRandomNumber+0xc>)
 8081b68:	681b      	ldr	r3, [r3, #0]
 8081b6a:	685b      	ldr	r3, [r3, #4]
 8081b6c:	9301      	str	r3, [sp, #4]
 8081b6e:	bd08      	pop	{r3, pc}
 8081b70:	0804019c 	.word	0x0804019c

08081b74 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081b74:	b508      	push	{r3, lr}
 8081b76:	4b02      	ldr	r3, [pc, #8]	; (8081b80 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081b78:	681b      	ldr	r3, [r3, #0]
 8081b7a:	695b      	ldr	r3, [r3, #20]
 8081b7c:	9301      	str	r3, [sp, #4]
 8081b7e:	bd08      	pop	{r3, pc}
 8081b80:	0804019c 	.word	0x0804019c

08081b84 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8081b84:	b508      	push	{r3, lr}
 8081b86:	4b02      	ldr	r3, [pc, #8]	; (8081b90 <hal_rtc_time_is_valid+0xc>)
 8081b88:	681b      	ldr	r3, [r3, #0]
 8081b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081b8c:	9301      	str	r3, [sp, #4]
 8081b8e:	bd08      	pop	{r3, pc}
 8081b90:	0804019c 	.word	0x0804019c

08081b94 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8081b94:	b508      	push	{r3, lr}
 8081b96:	4b02      	ldr	r3, [pc, #8]	; (8081ba0 <hal_rtc_get_time+0xc>)
 8081b98:	681b      	ldr	r3, [r3, #0]
 8081b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081b9c:	9301      	str	r3, [sp, #4]
 8081b9e:	bd08      	pop	{r3, pc}
 8081ba0:	0804019c 	.word	0x0804019c

08081ba4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081ba4:	b508      	push	{r3, lr}
 8081ba6:	4b02      	ldr	r3, [pc, #8]	; (8081bb0 <os_mutex_recursive_create+0xc>)
 8081ba8:	681b      	ldr	r3, [r3, #0]
 8081baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081bac:	9301      	str	r3, [sp, #4]
 8081bae:	bd08      	pop	{r3, pc}
 8081bb0:	080401d0 	.word	0x080401d0

08081bb4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081bb4:	b508      	push	{r3, lr}
 8081bb6:	4b02      	ldr	r3, [pc, #8]	; (8081bc0 <os_mutex_recursive_destroy+0xc>)
 8081bb8:	681b      	ldr	r3, [r3, #0]
 8081bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081bbc:	9301      	str	r3, [sp, #4]
 8081bbe:	bd08      	pop	{r3, pc}
 8081bc0:	080401d0 	.word	0x080401d0

08081bc4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8081bc4:	b508      	push	{r3, lr}
 8081bc6:	4b02      	ldr	r3, [pc, #8]	; (8081bd0 <hal_usart_init+0xc>)
 8081bc8:	681b      	ldr	r3, [r3, #0]
 8081bca:	699b      	ldr	r3, [r3, #24]
 8081bcc:	9301      	str	r3, [sp, #4]
 8081bce:	bd08      	pop	{r3, pc}
 8081bd0:	080401c4 	.word	0x080401c4

08081bd4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8081bd4:	b508      	push	{r3, lr}
 8081bd6:	4b02      	ldr	r3, [pc, #8]	; (8081be0 <hal_usart_write+0xc>)
 8081bd8:	681b      	ldr	r3, [r3, #0]
 8081bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081bdc:	9301      	str	r3, [sp, #4]
 8081bde:	bd08      	pop	{r3, pc}
 8081be0:	080401c4 	.word	0x080401c4

08081be4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8081be4:	b508      	push	{r3, lr}
 8081be6:	4b02      	ldr	r3, [pc, #8]	; (8081bf0 <hal_usart_available+0xc>)
 8081be8:	681b      	ldr	r3, [r3, #0]
 8081bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081bec:	9301      	str	r3, [sp, #4]
 8081bee:	bd08      	pop	{r3, pc}
 8081bf0:	080401c4 	.word	0x080401c4

08081bf4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8081bf4:	b508      	push	{r3, lr}
 8081bf6:	4b02      	ldr	r3, [pc, #8]	; (8081c00 <hal_usart_read+0xc>)
 8081bf8:	681b      	ldr	r3, [r3, #0]
 8081bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081bfc:	9301      	str	r3, [sp, #4]
 8081bfe:	bd08      	pop	{r3, pc}
 8081c00:	080401c4 	.word	0x080401c4

08081c04 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8081c04:	b508      	push	{r3, lr}
 8081c06:	4b02      	ldr	r3, [pc, #8]	; (8081c10 <hal_usart_peek+0xc>)
 8081c08:	681b      	ldr	r3, [r3, #0]
 8081c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081c0c:	9301      	str	r3, [sp, #4]
 8081c0e:	bd08      	pop	{r3, pc}
 8081c10:	080401c4 	.word	0x080401c4

08081c14 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8081c14:	b508      	push	{r3, lr}
 8081c16:	4b02      	ldr	r3, [pc, #8]	; (8081c20 <hal_usart_flush+0xc>)
 8081c18:	681b      	ldr	r3, [r3, #0]
 8081c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081c1c:	9301      	str	r3, [sp, #4]
 8081c1e:	bd08      	pop	{r3, pc}
 8081c20:	080401c4 	.word	0x080401c4

08081c24 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8081c24:	b508      	push	{r3, lr}
 8081c26:	4b02      	ldr	r3, [pc, #8]	; (8081c30 <hal_usart_is_enabled+0xc>)
 8081c28:	681b      	ldr	r3, [r3, #0]
 8081c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081c2c:	9301      	str	r3, [sp, #4]
 8081c2e:	bd08      	pop	{r3, pc}
 8081c30:	080401c4 	.word	0x080401c4

08081c34 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8081c34:	b508      	push	{r3, lr}
 8081c36:	4b02      	ldr	r3, [pc, #8]	; (8081c40 <hal_usart_available_data_for_write+0xc>)
 8081c38:	681b      	ldr	r3, [r3, #0]
 8081c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081c3c:	9301      	str	r3, [sp, #4]
 8081c3e:	bd08      	pop	{r3, pc}
 8081c40:	080401c4 	.word	0x080401c4

08081c44 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8081c44:	b508      	push	{r3, lr}
 8081c46:	4b02      	ldr	r3, [pc, #8]	; (8081c50 <hal_i2c_begin+0xc>)
 8081c48:	681b      	ldr	r3, [r3, #0]
 8081c4a:	68db      	ldr	r3, [r3, #12]
 8081c4c:	9301      	str	r3, [sp, #4]
 8081c4e:	bd08      	pop	{r3, pc}
 8081c50:	080401ac 	.word	0x080401ac

08081c54 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8081c54:	b508      	push	{r3, lr}
 8081c56:	4b02      	ldr	r3, [pc, #8]	; (8081c60 <hal_i2c_begin_transmission+0xc>)
 8081c58:	681b      	ldr	r3, [r3, #0]
 8081c5a:	699b      	ldr	r3, [r3, #24]
 8081c5c:	9301      	str	r3, [sp, #4]
 8081c5e:	bd08      	pop	{r3, pc}
 8081c60:	080401ac 	.word	0x080401ac

08081c64 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8081c64:	b508      	push	{r3, lr}
 8081c66:	4b02      	ldr	r3, [pc, #8]	; (8081c70 <hal_i2c_end_transmission+0xc>)
 8081c68:	681b      	ldr	r3, [r3, #0]
 8081c6a:	69db      	ldr	r3, [r3, #28]
 8081c6c:	9301      	str	r3, [sp, #4]
 8081c6e:	bd08      	pop	{r3, pc}
 8081c70:	080401ac 	.word	0x080401ac

08081c74 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8081c74:	b508      	push	{r3, lr}
 8081c76:	4b02      	ldr	r3, [pc, #8]	; (8081c80 <hal_i2c_write+0xc>)
 8081c78:	681b      	ldr	r3, [r3, #0]
 8081c7a:	6a1b      	ldr	r3, [r3, #32]
 8081c7c:	9301      	str	r3, [sp, #4]
 8081c7e:	bd08      	pop	{r3, pc}
 8081c80:	080401ac 	.word	0x080401ac

08081c84 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8081c84:	b508      	push	{r3, lr}
 8081c86:	4b02      	ldr	r3, [pc, #8]	; (8081c90 <hal_i2c_available+0xc>)
 8081c88:	681b      	ldr	r3, [r3, #0]
 8081c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081c8c:	9301      	str	r3, [sp, #4]
 8081c8e:	bd08      	pop	{r3, pc}
 8081c90:	080401ac 	.word	0x080401ac

08081c94 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8081c94:	b508      	push	{r3, lr}
 8081c96:	4b02      	ldr	r3, [pc, #8]	; (8081ca0 <hal_i2c_read+0xc>)
 8081c98:	681b      	ldr	r3, [r3, #0]
 8081c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081c9c:	9301      	str	r3, [sp, #4]
 8081c9e:	bd08      	pop	{r3, pc}
 8081ca0:	080401ac 	.word	0x080401ac

08081ca4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8081ca4:	b508      	push	{r3, lr}
 8081ca6:	4b02      	ldr	r3, [pc, #8]	; (8081cb0 <hal_i2c_peek+0xc>)
 8081ca8:	681b      	ldr	r3, [r3, #0]
 8081caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081cac:	9301      	str	r3, [sp, #4]
 8081cae:	bd08      	pop	{r3, pc}
 8081cb0:	080401ac 	.word	0x080401ac

08081cb4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8081cb4:	b508      	push	{r3, lr}
 8081cb6:	4b02      	ldr	r3, [pc, #8]	; (8081cc0 <hal_i2c_flush+0xc>)
 8081cb8:	681b      	ldr	r3, [r3, #0]
 8081cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081cbc:	9301      	str	r3, [sp, #4]
 8081cbe:	bd08      	pop	{r3, pc}
 8081cc0:	080401ac 	.word	0x080401ac

08081cc4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8081cc4:	b508      	push	{r3, lr}
 8081cc6:	4b02      	ldr	r3, [pc, #8]	; (8081cd0 <hal_i2c_is_enabled+0xc>)
 8081cc8:	681b      	ldr	r3, [r3, #0]
 8081cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081ccc:	9301      	str	r3, [sp, #4]
 8081cce:	bd08      	pop	{r3, pc}
 8081cd0:	080401ac 	.word	0x080401ac

08081cd4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8081cd4:	b508      	push	{r3, lr}
 8081cd6:	4b02      	ldr	r3, [pc, #8]	; (8081ce0 <hal_i2c_init+0xc>)
 8081cd8:	681b      	ldr	r3, [r3, #0]
 8081cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081cdc:	9301      	str	r3, [sp, #4]
 8081cde:	bd08      	pop	{r3, pc}
 8081ce0:	080401ac 	.word	0x080401ac

08081ce4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081ce4:	b508      	push	{r3, lr}
 8081ce6:	4b02      	ldr	r3, [pc, #8]	; (8081cf0 <hal_i2c_request_ex+0xc>)
 8081ce8:	681b      	ldr	r3, [r3, #0]
 8081cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081cec:	9301      	str	r3, [sp, #4]
 8081cee:	bd08      	pop	{r3, pc}
 8081cf0:	080401ac 	.word	0x080401ac

08081cf4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081cf4:	b508      	push	{r3, lr}
 8081cf6:	4b02      	ldr	r3, [pc, #8]	; (8081d00 <hal_spi_init+0xc>)
 8081cf8:	681b      	ldr	r3, [r3, #0]
 8081cfa:	69db      	ldr	r3, [r3, #28]
 8081cfc:	9301      	str	r3, [sp, #4]
 8081cfe:	bd08      	pop	{r3, pc}
 8081d00:	080401b4 	.word	0x080401b4

08081d04 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8081d04:	b508      	push	{r3, lr}
 8081d06:	4b02      	ldr	r3, [pc, #8]	; (8081d10 <hal_spi_is_enabled+0xc>)
 8081d08:	681b      	ldr	r3, [r3, #0]
 8081d0a:	6a1b      	ldr	r3, [r3, #32]
 8081d0c:	9301      	str	r3, [sp, #4]
 8081d0e:	bd08      	pop	{r3, pc}
 8081d10:	080401b4 	.word	0x080401b4

08081d14 <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 8081d14:	b508      	push	{r3, lr}
 8081d16:	4b02      	ldr	r3, [pc, #8]	; (8081d20 <cellular_credentials_set+0xc>)
 8081d18:	681b      	ldr	r3, [r3, #0]
 8081d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081d1c:	9301      	str	r3, [sp, #4]
 8081d1e:	bd08      	pop	{r3, pc}
 8081d20:	08060020 	.word	0x08060020

08081d24 <inet_gethostbyname>:
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081d24:	b508      	push	{r3, lr}
 8081d26:	4b02      	ldr	r3, [pc, #8]	; (8081d30 <inet_gethostbyname+0xc>)
 8081d28:	681b      	ldr	r3, [r3, #0]
 8081d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081d2c:	9301      	str	r3, [sp, #4]
 8081d2e:	bd08      	pop	{r3, pc}
 8081d30:	08060020 	.word	0x08060020

08081d34 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081d34:	b508      	push	{r3, lr}
 8081d36:	4b02      	ldr	r3, [pc, #8]	; (8081d40 <cellular_command+0xc>)
 8081d38:	681b      	ldr	r3, [r3, #0]
 8081d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081d3c:	9301      	str	r3, [sp, #4]
 8081d3e:	bd08      	pop	{r3, pc}
 8081d40:	08060020 	.word	0x08060020

08081d44 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081d44:	b508      	push	{r3, lr}
 8081d46:	4b02      	ldr	r3, [pc, #8]	; (8081d50 <HAL_USB_USART_Init+0xc>)
 8081d48:	681b      	ldr	r3, [r3, #0]
 8081d4a:	681b      	ldr	r3, [r3, #0]
 8081d4c:	9301      	str	r3, [sp, #4]
 8081d4e:	bd08      	pop	{r3, pc}
 8081d50:	0806001c 	.word	0x0806001c

08081d54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081d54:	b508      	push	{r3, lr}
 8081d56:	4b02      	ldr	r3, [pc, #8]	; (8081d60 <HAL_USB_USART_Available_Data+0xc>)
 8081d58:	681b      	ldr	r3, [r3, #0]
 8081d5a:	691b      	ldr	r3, [r3, #16]
 8081d5c:	9301      	str	r3, [sp, #4]
 8081d5e:	bd08      	pop	{r3, pc}
 8081d60:	0806001c 	.word	0x0806001c

08081d64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081d64:	b508      	push	{r3, lr}
 8081d66:	4b02      	ldr	r3, [pc, #8]	; (8081d70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081d68:	681b      	ldr	r3, [r3, #0]
 8081d6a:	695b      	ldr	r3, [r3, #20]
 8081d6c:	9301      	str	r3, [sp, #4]
 8081d6e:	bd08      	pop	{r3, pc}
 8081d70:	0806001c 	.word	0x0806001c

08081d74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081d74:	b508      	push	{r3, lr}
 8081d76:	4b02      	ldr	r3, [pc, #8]	; (8081d80 <HAL_USB_USART_Receive_Data+0xc>)
 8081d78:	681b      	ldr	r3, [r3, #0]
 8081d7a:	699b      	ldr	r3, [r3, #24]
 8081d7c:	9301      	str	r3, [sp, #4]
 8081d7e:	bd08      	pop	{r3, pc}
 8081d80:	0806001c 	.word	0x0806001c

08081d84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081d84:	b508      	push	{r3, lr}
 8081d86:	4b02      	ldr	r3, [pc, #8]	; (8081d90 <HAL_USB_USART_Send_Data+0xc>)
 8081d88:	681b      	ldr	r3, [r3, #0]
 8081d8a:	69db      	ldr	r3, [r3, #28]
 8081d8c:	9301      	str	r3, [sp, #4]
 8081d8e:	bd08      	pop	{r3, pc}
 8081d90:	0806001c 	.word	0x0806001c

08081d94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081d94:	b508      	push	{r3, lr}
 8081d96:	4b02      	ldr	r3, [pc, #8]	; (8081da0 <HAL_USB_USART_Flush_Data+0xc>)
 8081d98:	681b      	ldr	r3, [r3, #0]
 8081d9a:	6a1b      	ldr	r3, [r3, #32]
 8081d9c:	9301      	str	r3, [sp, #4]
 8081d9e:	bd08      	pop	{r3, pc}
 8081da0:	0806001c 	.word	0x0806001c

08081da4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081da4:	b508      	push	{r3, lr}
 8081da6:	4b02      	ldr	r3, [pc, #8]	; (8081db0 <log_message_v+0xc>)
 8081da8:	681b      	ldr	r3, [r3, #0]
 8081daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081dac:	9301      	str	r3, [sp, #4]
 8081dae:	bd08      	pop	{r3, pc}
 8081db0:	080201a0 	.word	0x080201a0

08081db4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081db4:	b508      	push	{r3, lr}
 8081db6:	4b02      	ldr	r3, [pc, #8]	; (8081dc0 <system_mode+0xc>)
 8081db8:	681b      	ldr	r3, [r3, #0]
 8081dba:	681b      	ldr	r3, [r3, #0]
 8081dbc:	9301      	str	r3, [sp, #4]
 8081dbe:	bd08      	pop	{r3, pc}
 8081dc0:	080401a4 	.word	0x080401a4

08081dc4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081dc4:	b508      	push	{r3, lr}
 8081dc6:	4b02      	ldr	r3, [pc, #8]	; (8081dd0 <set_system_mode+0xc>)
 8081dc8:	681b      	ldr	r3, [r3, #0]
 8081dca:	685b      	ldr	r3, [r3, #4]
 8081dcc:	9301      	str	r3, [sp, #4]
 8081dce:	bd08      	pop	{r3, pc}
 8081dd0:	080401a4 	.word	0x080401a4

08081dd4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081dd4:	b508      	push	{r3, lr}
 8081dd6:	4b02      	ldr	r3, [pc, #8]	; (8081de0 <system_delay_ms+0xc>)
 8081dd8:	681b      	ldr	r3, [r3, #0]
 8081dda:	695b      	ldr	r3, [r3, #20]
 8081ddc:	9301      	str	r3, [sp, #4]
 8081dde:	bd08      	pop	{r3, pc}
 8081de0:	080401a4 	.word	0x080401a4

08081de4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081de4:	b508      	push	{r3, lr}
 8081de6:	4b02      	ldr	r3, [pc, #8]	; (8081df0 <application_thread_current+0xc>)
 8081de8:	681b      	ldr	r3, [r3, #0]
 8081dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081dec:	9301      	str	r3, [sp, #4]
 8081dee:	bd08      	pop	{r3, pc}
 8081df0:	080401a4 	.word	0x080401a4

08081df4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081df4:	b508      	push	{r3, lr}
 8081df6:	4b02      	ldr	r3, [pc, #8]	; (8081e00 <application_thread_invoke+0xc>)
 8081df8:	681b      	ldr	r3, [r3, #0]
 8081dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081dfc:	9301      	str	r3, [sp, #4]
 8081dfe:	bd08      	pop	{r3, pc}
 8081e00:	080401a4 	.word	0x080401a4

08081e04 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081e04:	b508      	push	{r3, lr}
 8081e06:	4b02      	ldr	r3, [pc, #8]	; (8081e10 <system_thread_get_state+0xc>)
 8081e08:	681b      	ldr	r3, [r3, #0]
 8081e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081e0c:	9301      	str	r3, [sp, #4]
 8081e0e:	bd08      	pop	{r3, pc}
 8081e10:	080401a4 	.word	0x080401a4

08081e14 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081e14:	b508      	push	{r3, lr}
 8081e16:	4b03      	ldr	r3, [pc, #12]	; (8081e24 <system_ctrl_set_app_request_handler+0x10>)
 8081e18:	681b      	ldr	r3, [r3, #0]
 8081e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081e1e:	9301      	str	r3, [sp, #4]
 8081e20:	bd08      	pop	{r3, pc}
 8081e22:	0000      	.short	0x0000
 8081e24:	080401a4 	.word	0x080401a4

08081e28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081e28:	b508      	push	{r3, lr}
 8081e2a:	4b03      	ldr	r3, [pc, #12]	; (8081e38 <system_ctrl_set_result+0x10>)
 8081e2c:	681b      	ldr	r3, [r3, #0]
 8081e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081e32:	9301      	str	r3, [sp, #4]
 8081e34:	bd08      	pop	{r3, pc}
 8081e36:	0000      	.short	0x0000
 8081e38:	080401a4 	.word	0x080401a4

08081e3c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8081e3c:	b508      	push	{r3, lr}
 8081e3e:	4b03      	ldr	r3, [pc, #12]	; (8081e4c <system_reset+0x10>)
 8081e40:	681b      	ldr	r3, [r3, #0]
 8081e42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8081e46:	9301      	str	r3, [sp, #4]
 8081e48:	bd08      	pop	{r3, pc}
 8081e4a:	0000      	.short	0x0000
 8081e4c:	080401a4 	.word	0x080401a4

08081e50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081e50:	b508      	push	{r3, lr}
 8081e52:	4b02      	ldr	r3, [pc, #8]	; (8081e5c <network_connect+0xc>)
 8081e54:	681b      	ldr	r3, [r3, #0]
 8081e56:	685b      	ldr	r3, [r3, #4]
 8081e58:	9301      	str	r3, [sp, #4]
 8081e5a:	bd08      	pop	{r3, pc}
 8081e5c:	080401c8 	.word	0x080401c8

08081e60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081e60:	b508      	push	{r3, lr}
 8081e62:	4b02      	ldr	r3, [pc, #8]	; (8081e6c <network_connecting+0xc>)
 8081e64:	681b      	ldr	r3, [r3, #0]
 8081e66:	689b      	ldr	r3, [r3, #8]
 8081e68:	9301      	str	r3, [sp, #4]
 8081e6a:	bd08      	pop	{r3, pc}
 8081e6c:	080401c8 	.word	0x080401c8

08081e70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081e70:	b508      	push	{r3, lr}
 8081e72:	4b02      	ldr	r3, [pc, #8]	; (8081e7c <network_disconnect+0xc>)
 8081e74:	681b      	ldr	r3, [r3, #0]
 8081e76:	68db      	ldr	r3, [r3, #12]
 8081e78:	9301      	str	r3, [sp, #4]
 8081e7a:	bd08      	pop	{r3, pc}
 8081e7c:	080401c8 	.word	0x080401c8

08081e80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081e80:	b508      	push	{r3, lr}
 8081e82:	4b02      	ldr	r3, [pc, #8]	; (8081e8c <network_ready+0xc>)
 8081e84:	681b      	ldr	r3, [r3, #0]
 8081e86:	691b      	ldr	r3, [r3, #16]
 8081e88:	9301      	str	r3, [sp, #4]
 8081e8a:	bd08      	pop	{r3, pc}
 8081e8c:	080401c8 	.word	0x080401c8

08081e90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081e90:	b508      	push	{r3, lr}
 8081e92:	4b02      	ldr	r3, [pc, #8]	; (8081e9c <network_on+0xc>)
 8081e94:	681b      	ldr	r3, [r3, #0]
 8081e96:	695b      	ldr	r3, [r3, #20]
 8081e98:	9301      	str	r3, [sp, #4]
 8081e9a:	bd08      	pop	{r3, pc}
 8081e9c:	080401c8 	.word	0x080401c8

08081ea0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081ea0:	b508      	push	{r3, lr}
 8081ea2:	4b02      	ldr	r3, [pc, #8]	; (8081eac <network_off+0xc>)
 8081ea4:	681b      	ldr	r3, [r3, #0]
 8081ea6:	699b      	ldr	r3, [r3, #24]
 8081ea8:	9301      	str	r3, [sp, #4]
 8081eaa:	bd08      	pop	{r3, pc}
 8081eac:	080401c8 	.word	0x080401c8

08081eb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081eb0:	b508      	push	{r3, lr}
 8081eb2:	4b02      	ldr	r3, [pc, #8]	; (8081ebc <network_listen+0xc>)
 8081eb4:	681b      	ldr	r3, [r3, #0]
 8081eb6:	69db      	ldr	r3, [r3, #28]
 8081eb8:	9301      	str	r3, [sp, #4]
 8081eba:	bd08      	pop	{r3, pc}
 8081ebc:	080401c8 	.word	0x080401c8

08081ec0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081ec0:	b508      	push	{r3, lr}
 8081ec2:	4b02      	ldr	r3, [pc, #8]	; (8081ecc <network_listening+0xc>)
 8081ec4:	681b      	ldr	r3, [r3, #0]
 8081ec6:	6a1b      	ldr	r3, [r3, #32]
 8081ec8:	9301      	str	r3, [sp, #4]
 8081eca:	bd08      	pop	{r3, pc}
 8081ecc:	080401c8 	.word	0x080401c8

08081ed0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081ed0:	b508      	push	{r3, lr}
 8081ed2:	4b02      	ldr	r3, [pc, #8]	; (8081edc <network_set_listen_timeout+0xc>)
 8081ed4:	681b      	ldr	r3, [r3, #0]
 8081ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ed8:	9301      	str	r3, [sp, #4]
 8081eda:	bd08      	pop	{r3, pc}
 8081edc:	080401c8 	.word	0x080401c8

08081ee0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081ee0:	b508      	push	{r3, lr}
 8081ee2:	4b02      	ldr	r3, [pc, #8]	; (8081eec <network_get_listen_timeout+0xc>)
 8081ee4:	681b      	ldr	r3, [r3, #0]
 8081ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081ee8:	9301      	str	r3, [sp, #4]
 8081eea:	bd08      	pop	{r3, pc}
 8081eec:	080401c8 	.word	0x080401c8

08081ef0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 8081ef0:	b508      	push	{r3, lr}
 8081ef2:	4b02      	ldr	r3, [pc, #8]	; (8081efc <network_is_on+0xc>)
 8081ef4:	681b      	ldr	r3, [r3, #0]
 8081ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081ef8:	9301      	str	r3, [sp, #4]
 8081efa:	bd08      	pop	{r3, pc}
 8081efc:	080401c8 	.word	0x080401c8

08081f00 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 8081f00:	b508      	push	{r3, lr}
 8081f02:	4b02      	ldr	r3, [pc, #8]	; (8081f0c <network_is_off+0xc>)
 8081f04:	681b      	ldr	r3, [r3, #0]
 8081f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081f08:	9301      	str	r3, [sp, #4]
 8081f0a:	bd08      	pop	{r3, pc}
 8081f0c:	080401c8 	.word	0x080401c8

08081f10 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081f10:	b508      	push	{r3, lr}
 8081f12:	4b02      	ldr	r3, [pc, #8]	; (8081f1c <spark_function+0xc>)
 8081f14:	681b      	ldr	r3, [r3, #0]
 8081f16:	685b      	ldr	r3, [r3, #4]
 8081f18:	9301      	str	r3, [sp, #4]
 8081f1a:	bd08      	pop	{r3, pc}
 8081f1c:	080401cc 	.word	0x080401cc

08081f20 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081f20:	b508      	push	{r3, lr}
 8081f22:	4b02      	ldr	r3, [pc, #8]	; (8081f2c <spark_process+0xc>)
 8081f24:	681b      	ldr	r3, [r3, #0]
 8081f26:	689b      	ldr	r3, [r3, #8]
 8081f28:	9301      	str	r3, [sp, #4]
 8081f2a:	bd08      	pop	{r3, pc}
 8081f2c:	080401cc 	.word	0x080401cc

08081f30 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081f30:	b508      	push	{r3, lr}
 8081f32:	4b02      	ldr	r3, [pc, #8]	; (8081f3c <spark_cloud_flag_connect+0xc>)
 8081f34:	681b      	ldr	r3, [r3, #0]
 8081f36:	68db      	ldr	r3, [r3, #12]
 8081f38:	9301      	str	r3, [sp, #4]
 8081f3a:	bd08      	pop	{r3, pc}
 8081f3c:	080401cc 	.word	0x080401cc

08081f40 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081f40:	b508      	push	{r3, lr}
 8081f42:	4b02      	ldr	r3, [pc, #8]	; (8081f4c <spark_cloud_flag_connected+0xc>)
 8081f44:	681b      	ldr	r3, [r3, #0]
 8081f46:	695b      	ldr	r3, [r3, #20]
 8081f48:	9301      	str	r3, [sp, #4]
 8081f4a:	bd08      	pop	{r3, pc}
 8081f4c:	080401cc 	.word	0x080401cc

08081f50 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081f50:	b508      	push	{r3, lr}
 8081f52:	4b02      	ldr	r3, [pc, #8]	; (8081f5c <spark_send_event+0xc>)
 8081f54:	681b      	ldr	r3, [r3, #0]
 8081f56:	6a1b      	ldr	r3, [r3, #32]
 8081f58:	9301      	str	r3, [sp, #4]
 8081f5a:	bd08      	pop	{r3, pc}
 8081f5c:	080401cc 	.word	0x080401cc

08081f60 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081f60:	b508      	push	{r3, lr}
 8081f62:	4b02      	ldr	r3, [pc, #8]	; (8081f6c <spark_subscribe+0xc>)
 8081f64:	681b      	ldr	r3, [r3, #0]
 8081f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081f68:	9301      	str	r3, [sp, #4]
 8081f6a:	bd08      	pop	{r3, pc}
 8081f6c:	080401cc 	.word	0x080401cc

08081f70 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081f70:	b508      	push	{r3, lr}
 8081f72:	4b02      	ldr	r3, [pc, #8]	; (8081f7c <spark_sync_time_pending+0xc>)
 8081f74:	681b      	ldr	r3, [r3, #0]
 8081f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081f78:	9301      	str	r3, [sp, #4]
 8081f7a:	bd08      	pop	{r3, pc}
 8081f7c:	080401cc 	.word	0x080401cc

08081f80 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 8081f80:	b508      	push	{r3, lr}
 8081f82:	4b02      	ldr	r3, [pc, #8]	; (8081f8c <spark_set_connection_property+0xc>)
 8081f84:	681b      	ldr	r3, [r3, #0]
 8081f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081f88:	9301      	str	r3, [sp, #4]
 8081f8a:	bd08      	pop	{r3, pc}
 8081f8c:	080401cc 	.word	0x080401cc

08081f90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081f90:	b508      	push	{r3, lr}
 8081f92:	4b02      	ldr	r3, [pc, #8]	; (8081f9c <spark_set_random_seed_from_cloud_handler+0xc>)
 8081f94:	681b      	ldr	r3, [r3, #0]
 8081f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081f98:	9301      	str	r3, [sp, #4]
 8081f9a:	bd08      	pop	{r3, pc}
 8081f9c:	080401cc 	.word	0x080401cc

08081fa0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081fa0:	b508      	push	{r3, lr}
 8081fa2:	4b02      	ldr	r3, [pc, #8]	; (8081fac <malloc+0xc>)
 8081fa4:	681b      	ldr	r3, [r3, #0]
 8081fa6:	681b      	ldr	r3, [r3, #0]
 8081fa8:	9301      	str	r3, [sp, #4]
 8081faa:	bd08      	pop	{r3, pc}
 8081fac:	080401a0 	.word	0x080401a0

08081fb0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081fb0:	b508      	push	{r3, lr}
 8081fb2:	4b02      	ldr	r3, [pc, #8]	; (8081fbc <free+0xc>)
 8081fb4:	681b      	ldr	r3, [r3, #0]
 8081fb6:	685b      	ldr	r3, [r3, #4]
 8081fb8:	9301      	str	r3, [sp, #4]
 8081fba:	bd08      	pop	{r3, pc}
 8081fbc:	080401a0 	.word	0x080401a0

08081fc0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081fc0:	b508      	push	{r3, lr}
 8081fc2:	4b02      	ldr	r3, [pc, #8]	; (8081fcc <realloc+0xc>)
 8081fc4:	681b      	ldr	r3, [r3, #0]
 8081fc6:	689b      	ldr	r3, [r3, #8]
 8081fc8:	9301      	str	r3, [sp, #4]
 8081fca:	bd08      	pop	{r3, pc}
 8081fcc:	080401a0 	.word	0x080401a0

08081fd0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081fd0:	b508      	push	{r3, lr}
 8081fd2:	4b02      	ldr	r3, [pc, #8]	; (8081fdc <siprintf+0xc>)
 8081fd4:	681b      	ldr	r3, [r3, #0]
 8081fd6:	691b      	ldr	r3, [r3, #16]
 8081fd8:	9301      	str	r3, [sp, #4]
 8081fda:	bd08      	pop	{r3, pc}
 8081fdc:	080401a0 	.word	0x080401a0

08081fe0 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 8081fe0:	b508      	push	{r3, lr}
 8081fe2:	4b02      	ldr	r3, [pc, #8]	; (8081fec <sscanf+0xc>)
 8081fe4:	681b      	ldr	r3, [r3, #0]
 8081fe6:	695b      	ldr	r3, [r3, #20]
 8081fe8:	9301      	str	r3, [sp, #4]
 8081fea:	bd08      	pop	{r3, pc}
 8081fec:	080401a0 	.word	0x080401a0

08081ff0 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081ff0:	b508      	push	{r3, lr}
 8081ff2:	4b02      	ldr	r3, [pc, #8]	; (8081ffc <snprintf+0xc>)
 8081ff4:	681b      	ldr	r3, [r3, #0]
 8081ff6:	69db      	ldr	r3, [r3, #28]
 8081ff8:	9301      	str	r3, [sp, #4]
 8081ffa:	bd08      	pop	{r3, pc}
 8081ffc:	080401a0 	.word	0x080401a0

08082000 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8082000:	b508      	push	{r3, lr}
 8082002:	4b02      	ldr	r3, [pc, #8]	; (808200c <vsnprintf+0xc>)
 8082004:	681b      	ldr	r3, [r3, #0]
 8082006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082008:	9301      	str	r3, [sp, #4]
 808200a:	bd08      	pop	{r3, pc}
 808200c:	080401a0 	.word	0x080401a0

08082010 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8082010:	b508      	push	{r3, lr}
 8082012:	4b02      	ldr	r3, [pc, #8]	; (808201c <abort+0xc>)
 8082014:	681b      	ldr	r3, [r3, #0]
 8082016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082018:	9301      	str	r3, [sp, #4]
 808201a:	bd08      	pop	{r3, pc}
 808201c:	080401a0 	.word	0x080401a0

08082020 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8082020:	b508      	push	{r3, lr}
 8082022:	4b02      	ldr	r3, [pc, #8]	; (808202c <_malloc_r+0xc>)
 8082024:	681b      	ldr	r3, [r3, #0]
 8082026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082028:	9301      	str	r3, [sp, #4]
 808202a:	bd08      	pop	{r3, pc}
 808202c:	080401a0 	.word	0x080401a0

08082030 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8082030:	b508      	push	{r3, lr}
 8082032:	4b02      	ldr	r3, [pc, #8]	; (808203c <newlib_impure_ptr_callback+0xc>)
 8082034:	681b      	ldr	r3, [r3, #0]
 8082036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082038:	9301      	str	r3, [sp, #4]
 808203a:	bd08      	pop	{r3, pc}
 808203c:	080401a0 	.word	0x080401a0

08082040 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8082040:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8082042:	2600      	movs	r6, #0
 8082044:	4604      	mov	r4, r0
 8082046:	460d      	mov	r5, r1
 8082048:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 808204c:	f7ff fdaa 	bl	8081ba4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8082050:	4628      	mov	r0, r5
    _spi = spi;
 8082052:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8082054:	f7ff fe4e 	bl	8081cf4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8082058:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808205a:	6066      	str	r6, [r4, #4]
}
 808205c:	bd70      	pop	{r4, r5, r6, pc}

0808205e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808205e:	b510      	push	{r4, lr}
 8082060:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8082062:	6800      	ldr	r0, [r0, #0]
 8082064:	b118      	cbz	r0, 808206e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8082066:	f7ff ffa3 	bl	8081fb0 <free>
            wakeupSource_ = nullptr;
 808206a:	2300      	movs	r3, #0
 808206c:	6023      	str	r3, [r4, #0]
        }
    }
 808206e:	bd10      	pop	{r4, pc}

08082070 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8082070:	b510      	push	{r4, lr}
 8082072:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 8082074:	f7ff fff3 	bl	808205e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 8082078:	4620      	mov	r0, r4
 808207a:	bd10      	pop	{r4, pc}

0808207c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 808207c:	b507      	push	{r0, r1, r2, lr}
 808207e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082080:	2100      	movs	r1, #0
{
 8082082:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082084:	9100      	str	r1, [sp, #0]
 8082086:	2001      	movs	r0, #1
 8082088:	218c      	movs	r1, #140	; 0x8c
 808208a:	f7ff fed7 	bl	8081e3c <system_reset>
}
 808208e:	b003      	add	sp, #12
 8082090:	f85d fb04 	ldr.w	pc, [sp], #4

08082094 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8082094:	4601      	mov	r1, r0
    reset(0, flags);
 8082096:	2000      	movs	r0, #0
 8082098:	f7ff bff0 	b.w	808207c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

0808209c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 808209c:	2000      	movs	r0, #0
 808209e:	f7ff bff9 	b.w	8082094 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

080820a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80820a4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80820a6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80820a8:	b510      	push	{r4, lr}
 80820aa:	4b08      	ldr	r3, [pc, #32]	; (80820cc <_GLOBAL__sub_I_System+0x28>)
 80820ac:	4c08      	ldr	r4, [pc, #32]	; (80820d0 <_GLOBAL__sub_I_System+0x2c>)
 80820ae:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80820b0:	4b08      	ldr	r3, [pc, #32]	; (80820d4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80820b2:	6020      	str	r0, [r4, #0]
 80820b4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80820b6:	71a0      	strb	r0, [r4, #6]
 80820b8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80820ba:	f7ff fe83 	bl	8081dc4 <set_system_mode>
SystemClass System;
 80820be:	4620      	mov	r0, r4
 80820c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80820c4:	4a04      	ldr	r2, [pc, #16]	; (80820d8 <_GLOBAL__sub_I_System+0x34>)
 80820c6:	4905      	ldr	r1, [pc, #20]	; (80820dc <_GLOBAL__sub_I_System+0x38>)
 80820c8:	f001 bade 	b.w	8083688 <__aeabi_atexit>
 80820cc:	20000500 	.word	0x20000500
 80820d0:	200004f4 	.word	0x200004f4
 80820d4:	ffff0000 	.word	0xffff0000
 80820d8:	200001e8 	.word	0x200001e8
 80820dc:	08082071 	.word	0x08082071

080820e0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80820e0:	b510      	push	{r4, lr}
 80820e2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80820e4:	f002 f8f9 	bl	80842da <strlen>
 80820e8:	1e43      	subs	r3, r0, #1
 80820ea:	4620      	mov	r0, r4
 80820ec:	4423      	add	r3, r4
	while(i<j){
 80820ee:	4283      	cmp	r3, r0
 80820f0:	d906      	bls.n	8082100 <_Z11str_reversePc+0x20>
		c = *i;
 80820f2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80820f4:	7819      	ldrb	r1, [r3, #0]
 80820f6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80820fa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80820fe:	e7f6      	b.n	80820ee <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 8082100:	bd10      	pop	{r4, pc}

08082102 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8082102:	b570      	push	{r4, r5, r6, lr}
 8082104:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8082106:	1e91      	subs	r1, r2, #2
 8082108:	2922      	cmp	r1, #34	; 0x22
 808210a:	d822      	bhi.n	8082152 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 808210c:	4625      	mov	r5, r4

	div_t result;
	while(a){
 808210e:	b168      	cbz	r0, 808212c <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8082110:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8082114:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8082118:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808211a:	2809      	cmp	r0, #9
                *ptr += '0';
 808211c:	bf94      	ite	ls
 808211e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8082120:	3157      	addhi	r1, #87	; 0x57
 8082122:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 8082124:	4630      	mov	r0, r6
 8082126:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 808212a:	e7f0      	b.n	808210e <ultoa+0xc>
 808212c:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 808212e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 8082130:	4423      	add	r3, r4
 8082132:	4293      	cmp	r3, r2
 8082134:	d902      	bls.n	808213c <ultoa+0x3a>
            *ptr++ = '0';
 8082136:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 808213a:	e7fa      	b.n	8082132 <ultoa+0x30>
 808213c:	1b5a      	subs	r2, r3, r5
 808213e:	42ab      	cmp	r3, r5
 8082140:	bf38      	it	cc
 8082142:	2200      	movcc	r2, #0

	*ptr = '\0';
 8082144:	2300      	movs	r3, #0
	str_reverse(buffer);
 8082146:	4620      	mov	r0, r4
	*ptr = '\0';
 8082148:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 808214a:	f7ff ffc9 	bl	80820e0 <_Z11str_reversePc>
	return buffer;
 808214e:	4620      	mov	r0, r4
}
 8082150:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 8082152:	2000      	movs	r0, #0
 8082154:	e7fc      	b.n	8082150 <ultoa+0x4e>

08082156 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8082156:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8082158:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808215a:	460c      	mov	r4, r1
 808215c:	4615      	mov	r5, r2
	if(a<0){
 808215e:	da0d      	bge.n	808217c <itoa+0x26>
		*buffer = '-';
 8082160:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8082162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8082166:	bf0c      	ite	eq
 8082168:	4618      	moveq	r0, r3
 808216a:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808216c:	2301      	movs	r3, #1
		*buffer = '-';
 808216e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 8082170:	462a      	mov	r2, r5
 8082172:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 8082174:	f7ff ffc5 	bl	8082102 <ultoa>
	}
	return buffer;
}
 8082178:	4620      	mov	r0, r4
 808217a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 808217c:	2301      	movs	r3, #1
 808217e:	e7f9      	b.n	8082174 <itoa+0x1e>

08082180 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082180:	b510      	push	{r4, lr}
 8082182:	4604      	mov	r4, r0
{
	free(buffer);
 8082184:	6800      	ldr	r0, [r0, #0]
 8082186:	f7ff ff13 	bl	8081fb0 <free>
}
 808218a:	4620      	mov	r0, r4
 808218c:	bd10      	pop	{r4, pc}

0808218e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808218e:	b510      	push	{r4, lr}
 8082190:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082192:	6800      	ldr	r0, [r0, #0]
 8082194:	b108      	cbz	r0, 808219a <_ZN6String10invalidateEv+0xc>
 8082196:	f7ff ff0b 	bl	8081fb0 <free>
	buffer = NULL;
 808219a:	2300      	movs	r3, #0
	capacity = len = 0;
 808219c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80821a0:	6023      	str	r3, [r4, #0]
}
 80821a2:	bd10      	pop	{r4, pc}

080821a4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80821a4:	b538      	push	{r3, r4, r5, lr}
 80821a6:	4604      	mov	r4, r0
 80821a8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80821aa:	6800      	ldr	r0, [r0, #0]
 80821ac:	3101      	adds	r1, #1
 80821ae:	f7ff ff07 	bl	8081fc0 <realloc>
	if (newbuffer) {
 80821b2:	b110      	cbz	r0, 80821ba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80821b4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80821b8:	2001      	movs	r0, #1
	}
	return 0;
}
 80821ba:	bd38      	pop	{r3, r4, r5, pc}

080821bc <_ZN6String7reserveEj>:
{
 80821bc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80821be:	6803      	ldr	r3, [r0, #0]
{
 80821c0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80821c2:	b123      	cbz	r3, 80821ce <_ZN6String7reserveEj+0x12>
 80821c4:	6843      	ldr	r3, [r0, #4]
 80821c6:	428b      	cmp	r3, r1
 80821c8:	d301      	bcc.n	80821ce <_ZN6String7reserveEj+0x12>
 80821ca:	2001      	movs	r0, #1
}
 80821cc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80821ce:	4620      	mov	r0, r4
 80821d0:	f7ff ffe8 	bl	80821a4 <_ZN6String12changeBufferEj>
 80821d4:	2800      	cmp	r0, #0
 80821d6:	d0f9      	beq.n	80821cc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80821d8:	68a3      	ldr	r3, [r4, #8]
 80821da:	2b00      	cmp	r3, #0
 80821dc:	d1f5      	bne.n	80821ca <_ZN6String7reserveEj+0xe>
 80821de:	6822      	ldr	r2, [r4, #0]
 80821e0:	7013      	strb	r3, [r2, #0]
 80821e2:	e7f2      	b.n	80821ca <_ZN6String7reserveEj+0xe>

080821e4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80821e4:	b570      	push	{r4, r5, r6, lr}
 80821e6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80821e8:	4611      	mov	r1, r2
{
 80821ea:	4604      	mov	r4, r0
 80821ec:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80821ee:	f7ff ffe5 	bl	80821bc <_ZN6String7reserveEj>
 80821f2:	b920      	cbnz	r0, 80821fe <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80821f4:	4620      	mov	r0, r4
 80821f6:	f7ff ffca 	bl	808218e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80821fa:	4620      	mov	r0, r4
 80821fc:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80821fe:	462a      	mov	r2, r5
 8082200:	4631      	mov	r1, r6
 8082202:	6820      	ldr	r0, [r4, #0]
	len = length;
 8082204:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082206:	f001 fff3 	bl	80841f0 <memcpy>
	buffer[len] = 0;
 808220a:	2100      	movs	r1, #0
 808220c:	6822      	ldr	r2, [r4, #0]
 808220e:	68a3      	ldr	r3, [r4, #8]
 8082210:	54d1      	strb	r1, [r2, r3]
	return *this;
 8082212:	e7f2      	b.n	80821fa <_ZN6String4copyEPKcj+0x16>

08082214 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8082214:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8082216:	2300      	movs	r3, #0
String::String(const char *cstr)
 8082218:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808221a:	460d      	mov	r5, r1
	capacity = 0;
 808221c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082220:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082222:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8082224:	b139      	cbz	r1, 8082236 <_ZN6StringC1EPKc+0x22>
 8082226:	4608      	mov	r0, r1
 8082228:	f002 f857 	bl	80842da <strlen>
 808222c:	4629      	mov	r1, r5
 808222e:	4602      	mov	r2, r0
 8082230:	4620      	mov	r0, r4
 8082232:	f7ff ffd7 	bl	80821e4 <_ZN6String4copyEPKcj>
}
 8082236:	4620      	mov	r0, r4
 8082238:	bd38      	pop	{r3, r4, r5, pc}

0808223a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808223a:	b538      	push	{r3, r4, r5, lr}
 808223c:	4605      	mov	r5, r0
	if (buffer) {
 808223e:	6800      	ldr	r0, [r0, #0]
{
 8082240:	460c      	mov	r4, r1
	if (buffer) {
 8082242:	b168      	cbz	r0, 8082260 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8082244:	686a      	ldr	r2, [r5, #4]
 8082246:	688b      	ldr	r3, [r1, #8]
 8082248:	429a      	cmp	r2, r3
 808224a:	d307      	bcc.n	808225c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 808224c:	6809      	ldr	r1, [r1, #0]
 808224e:	f002 f820 	bl	8084292 <strcpy>
			len = rhs.len;
 8082252:	68a3      	ldr	r3, [r4, #8]
 8082254:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8082256:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8082258:	60a3      	str	r3, [r4, #8]
}
 808225a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 808225c:	f7ff fea8 	bl	8081fb0 <free>
	buffer = rhs.buffer;
 8082260:	6823      	ldr	r3, [r4, #0]
 8082262:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8082264:	6863      	ldr	r3, [r4, #4]
 8082266:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8082268:	68a3      	ldr	r3, [r4, #8]
 808226a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808226c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 808226e:	e9c4 3300 	strd	r3, r3, [r4]
 8082272:	e7f1      	b.n	8082258 <_ZN6String4moveERS_+0x1e>

08082274 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082274:	4288      	cmp	r0, r1
{
 8082276:	b510      	push	{r4, lr}
 8082278:	460b      	mov	r3, r1
 808227a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808227c:	d004      	beq.n	8082288 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808227e:	6809      	ldr	r1, [r1, #0]
 8082280:	b121      	cbz	r1, 808228c <_ZN6StringaSERKS_+0x18>
 8082282:	689a      	ldr	r2, [r3, #8]
 8082284:	f7ff ffae 	bl	80821e4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8082288:	4620      	mov	r0, r4
 808228a:	bd10      	pop	{r4, pc}
	else invalidate();
 808228c:	f7ff ff7f 	bl	808218e <_ZN6String10invalidateEv>
 8082290:	e7fa      	b.n	8082288 <_ZN6StringaSERKS_+0x14>

08082292 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8082292:	2300      	movs	r3, #0
String::String(const String &value)
 8082294:	b510      	push	{r4, lr}
 8082296:	4604      	mov	r4, r0
	capacity = 0;
 8082298:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808229c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808229e:	7303      	strb	r3, [r0, #12]
	*this = value;
 80822a0:	f7ff ffe8 	bl	8082274 <_ZN6StringaSERKS_>
}
 80822a4:	4620      	mov	r0, r4
 80822a6:	bd10      	pop	{r4, pc}

080822a8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80822a8:	4288      	cmp	r0, r1
{
 80822aa:	b510      	push	{r4, lr}
 80822ac:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80822ae:	d001      	beq.n	80822b4 <_ZN6StringaSEOS_+0xc>
 80822b0:	f7ff ffc3 	bl	808223a <_ZN6String4moveERS_>
	return *this;
}
 80822b4:	4620      	mov	r0, r4
 80822b6:	bd10      	pop	{r4, pc}

080822b8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80822b8:	b538      	push	{r3, r4, r5, lr}
 80822ba:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80822bc:	460c      	mov	r4, r1
 80822be:	b149      	cbz	r1, 80822d4 <_ZN6StringaSEPKc+0x1c>
 80822c0:	4608      	mov	r0, r1
 80822c2:	f002 f80a 	bl	80842da <strlen>
 80822c6:	4621      	mov	r1, r4
 80822c8:	4602      	mov	r2, r0
 80822ca:	4628      	mov	r0, r5
 80822cc:	f7ff ff8a 	bl	80821e4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80822d0:	4628      	mov	r0, r5
 80822d2:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80822d4:	f7ff ff5b 	bl	808218e <_ZN6String10invalidateEv>
 80822d8:	e7fa      	b.n	80822d0 <_ZN6StringaSEPKc+0x18>

080822da <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80822da:	b510      	push	{r4, lr}
	buffer = NULL;
 80822dc:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80822de:	4604      	mov	r4, r0
 80822e0:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80822e2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80822e6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80822e8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80822ea:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80822ec:	a901      	add	r1, sp, #4
 80822ee:	f7ff ff32 	bl	8082156 <itoa>
	*this = buf;
 80822f2:	4620      	mov	r0, r4
 80822f4:	a901      	add	r1, sp, #4
 80822f6:	f7ff ffdf 	bl	80822b8 <_ZN6StringaSEPKc>
}
 80822fa:	4620      	mov	r0, r4
 80822fc:	b00a      	add	sp, #40	; 0x28
 80822fe:	bd10      	pop	{r4, pc}

08082300 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8082300:	b570      	push	{r4, r5, r6, lr}
 8082302:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8082304:	460e      	mov	r6, r1
 8082306:	b909      	cbnz	r1, 808230c <_ZN6String6concatEPKcj+0xc>
 8082308:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808230a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808230c:	b16a      	cbz	r2, 808232a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808230e:	6884      	ldr	r4, [r0, #8]
 8082310:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8082312:	4621      	mov	r1, r4
 8082314:	f7ff ff52 	bl	80821bc <_ZN6String7reserveEj>
 8082318:	2800      	cmp	r0, #0
 808231a:	d0f5      	beq.n	8082308 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808231c:	6828      	ldr	r0, [r5, #0]
 808231e:	68ab      	ldr	r3, [r5, #8]
 8082320:	4631      	mov	r1, r6
 8082322:	4418      	add	r0, r3
 8082324:	f001 ffb5 	bl	8084292 <strcpy>
	len = newlen;
 8082328:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 808232a:	2001      	movs	r0, #1
 808232c:	e7ed      	b.n	808230a <_ZN6String6concatEPKcj+0xa>

0808232e <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 808232e:	b538      	push	{r3, r4, r5, lr}
 8082330:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8082332:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8082334:	4608      	mov	r0, r1
	if (!cstr) return 0;
 8082336:	b141      	cbz	r1, 808234a <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8082338:	f001 ffcf 	bl	80842da <strlen>
 808233c:	4621      	mov	r1, r4
 808233e:	4602      	mov	r2, r0
 8082340:	4628      	mov	r0, r5
}
 8082342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 8082346:	f7ff bfdb 	b.w	8082300 <_ZN6String6concatEPKcj>
}
 808234a:	bd38      	pop	{r3, r4, r5, pc}

0808234c <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808234c:	2300      	movs	r3, #0
{
 808234e:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 8082350:	2201      	movs	r2, #1
	buf[0] = c;
 8082352:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 8082356:	a901      	add	r1, sp, #4
	buf[1] = 0;
 8082358:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808235c:	f7ff ffd0 	bl	8082300 <_ZN6String6concatEPKcj>
}
 8082360:	b003      	add	sp, #12
 8082362:	f85d fb04 	ldr.w	pc, [sp], #4

08082366 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8082366:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8082368:	688a      	ldr	r2, [r1, #8]
 808236a:	6809      	ldr	r1, [r1, #0]
{
 808236c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808236e:	f7ff ffc7 	bl	8082300 <_ZN6String6concatEPKcj>
 8082372:	b910      	cbnz	r0, 808237a <_ZplRK15StringSumHelperRK6String+0x14>
 8082374:	4620      	mov	r0, r4
 8082376:	f7ff ff0a 	bl	808218e <_ZN6String10invalidateEv>
	return a;
}
 808237a:	4620      	mov	r0, r4
 808237c:	bd10      	pop	{r4, pc}

0808237e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808237e:	b538      	push	{r3, r4, r5, lr}
 8082380:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8082382:	460d      	mov	r5, r1
 8082384:	b921      	cbnz	r1, 8082390 <_ZplRK15StringSumHelperPKc+0x12>
 8082386:	4620      	mov	r0, r4
 8082388:	f7ff ff01 	bl	808218e <_ZN6String10invalidateEv>
	return a;
}
 808238c:	4620      	mov	r0, r4
 808238e:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8082390:	4608      	mov	r0, r1
 8082392:	f001 ffa2 	bl	80842da <strlen>
 8082396:	4629      	mov	r1, r5
 8082398:	4602      	mov	r2, r0
 808239a:	4620      	mov	r0, r4
 808239c:	f7ff ffb0 	bl	8082300 <_ZN6String6concatEPKcj>
 80823a0:	2800      	cmp	r0, #0
 80823a2:	d0f0      	beq.n	8082386 <_ZplRK15StringSumHelperPKc+0x8>
 80823a4:	e7f2      	b.n	808238c <_ZplRK15StringSumHelperPKc+0xe>

080823a6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80823a6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80823a8:	6882      	ldr	r2, [r0, #8]
 80823aa:	b93a      	cbnz	r2, 80823bc <_ZNK6String6equalsEPKc+0x16>
 80823ac:	b121      	cbz	r1, 80823b8 <_ZNK6String6equalsEPKc+0x12>
 80823ae:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80823b0:	fab0 f080 	clz	r0, r0
 80823b4:	0940      	lsrs	r0, r0, #5
 80823b6:	e000      	b.n	80823ba <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80823b8:	2001      	movs	r0, #1
}
 80823ba:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80823bc:	6800      	ldr	r0, [r0, #0]
 80823be:	b909      	cbnz	r1, 80823c4 <_ZNK6String6equalsEPKc+0x1e>
 80823c0:	7800      	ldrb	r0, [r0, #0]
 80823c2:	e7f5      	b.n	80823b0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80823c4:	f001 ff5b 	bl	808427e <strcmp>
 80823c8:	e7f2      	b.n	80823b0 <_ZNK6String6equalsEPKc+0xa>
	...

080823cc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80823cc:	b40e      	push	{r1, r2, r3}
 80823ce:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80823d0:	ad09      	add	r5, sp, #36	; 0x24
 80823d2:	f855 7b04 	ldr.w	r7, [r5], #4
 80823d6:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80823d8:	462b      	mov	r3, r5
 80823da:	463a      	mov	r2, r7
 80823dc:	2105      	movs	r1, #5
 80823de:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80823e0:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80823e2:	f7ff fe0d 	bl	8082000 <vsnprintf>
 80823e6:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80823e8:	490b      	ldr	r1, [pc, #44]	; (8082418 <_ZN6String6formatEPKcz+0x4c>)
 80823ea:	4620      	mov	r0, r4
 80823ec:	f7ff ff12 	bl	8082214 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 80823f0:	4631      	mov	r1, r6
 80823f2:	4620      	mov	r0, r4
 80823f4:	f7ff fee2 	bl	80821bc <_ZN6String7reserveEj>
    if (result.buffer) {
 80823f8:	6820      	ldr	r0, [r4, #0]
 80823fa:	b130      	cbz	r0, 808240a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80823fc:	462b      	mov	r3, r5
 80823fe:	463a      	mov	r2, r7
 8082400:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 8082402:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8082404:	f7ff fdfc 	bl	8082000 <vsnprintf>
        va_end(marker);
        result.len = n;
 8082408:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 808240a:	4620      	mov	r0, r4
 808240c:	b004      	add	sp, #16
 808240e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8082412:	b003      	add	sp, #12
 8082414:	4770      	bx	lr
 8082416:	bf00      	nop
 8082418:	08086445 	.word	0x08086445

0808241c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808241e:	4606      	mov	r6, r0
 8082420:	460d      	mov	r5, r1
  size_t n = 0;
 8082422:	2400      	movs	r4, #0
 8082424:	188f      	adds	r7, r1, r2
  while (size--) {
 8082426:	42bd      	cmp	r5, r7
 8082428:	d00c      	beq.n	8082444 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808242a:	6833      	ldr	r3, [r6, #0]
 808242c:	4630      	mov	r0, r6
 808242e:	689b      	ldr	r3, [r3, #8]
 8082430:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082434:	4798      	blx	r3
     if (chunk>=0)
 8082436:	1e03      	subs	r3, r0, #0
 8082438:	db01      	blt.n	808243e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808243a:	441c      	add	r4, r3
  while (size--) {
 808243c:	e7f3      	b.n	8082426 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808243e:	2c00      	cmp	r4, #0
 8082440:	bf08      	it	eq
 8082442:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8082444:	4620      	mov	r0, r4
 8082446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082448 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082448:	b570      	push	{r4, r5, r6, lr}
 808244a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808244c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808244e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8082450:	b149      	cbz	r1, 8082466 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082452:	f001 ff42 	bl	80842da <strlen>
 8082456:	682b      	ldr	r3, [r5, #0]
 8082458:	4602      	mov	r2, r0
 808245a:	4621      	mov	r1, r4
 808245c:	4628      	mov	r0, r5
    }
 808245e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8082462:	68db      	ldr	r3, [r3, #12]
 8082464:	4718      	bx	r3
    }
 8082466:	bd70      	pop	{r4, r5, r6, pc}

08082468 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082468:	6803      	ldr	r3, [r0, #0]
 808246a:	689b      	ldr	r3, [r3, #8]
 808246c:	4718      	bx	r3

0808246e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808246e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082470:	210d      	movs	r1, #13
{
 8082472:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082474:	f7ff fff8 	bl	8082468 <_ZN5Print5printEc>
  n += print('\n');
 8082478:	210a      	movs	r1, #10
  size_t n = print('\r');
 808247a:	4604      	mov	r4, r0
  n += print('\n');
 808247c:	4628      	mov	r0, r5
 808247e:	f7ff fff3 	bl	8082468 <_ZN5Print5printEc>
  return n;
}
 8082482:	4420      	add	r0, r4
 8082484:	bd38      	pop	{r3, r4, r5, pc}

08082486 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082486:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082488:	2a01      	cmp	r2, #1
 808248a:	bf98      	it	ls
 808248c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808248e:	b530      	push	{r4, r5, lr}
 8082490:	b08b      	sub	sp, #44	; 0x2c
 8082492:	460c      	mov	r4, r1
  *str = '\0';
 8082494:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8082498:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808249a:	4625      	mov	r5, r4
 808249c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80824a0:	fb04 5312 	mls	r3, r4, r2, r5
 80824a4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80824a6:	2b09      	cmp	r3, #9
 80824a8:	bf94      	ite	ls
 80824aa:	3330      	addls	r3, #48	; 0x30
 80824ac:	3337      	addhi	r3, #55	; 0x37
 80824ae:	b2db      	uxtb	r3, r3
  } while(n);
 80824b0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80824b2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80824b6:	d9f0      	bls.n	808249a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80824b8:	f7ff ffc6 	bl	8082448 <_ZN5Print5writeEPKc>
}
 80824bc:	b00b      	add	sp, #44	; 0x2c
 80824be:	bd30      	pop	{r4, r5, pc}

080824c0 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80824c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80824c4:	b086      	sub	sp, #24
 80824c6:	af00      	add	r7, sp, #0
 80824c8:	4605      	mov	r5, r0
 80824ca:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80824cc:	1d38      	adds	r0, r7, #4
 80824ce:	2114      	movs	r1, #20
{
 80824d0:	4614      	mov	r4, r2
    va_copy(args2, args);
 80824d2:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80824d4:	f7ff fd94 	bl	8082000 <vsnprintf>

    if (n<bufsize)
 80824d8:	2813      	cmp	r0, #19
 80824da:	d80e      	bhi.n	80824fa <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80824dc:	4628      	mov	r0, r5
 80824de:	1d39      	adds	r1, r7, #4
 80824e0:	f7ff ffb2 	bl	8082448 <_ZN5Print5writeEPKc>
 80824e4:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80824e6:	b11e      	cbz	r6, 80824f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80824e8:	4628      	mov	r0, r5
 80824ea:	f7ff ffc0 	bl	808246e <_ZN5Print7printlnEv>
 80824ee:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80824f0:	4620      	mov	r0, r4
 80824f2:	3718      	adds	r7, #24
 80824f4:	46bd      	mov	sp, r7
 80824f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80824fa:	f100 0308 	add.w	r3, r0, #8
 80824fe:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 8082502:	46e8      	mov	r8, sp
        char bigger[n+1];
 8082504:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8082508:	4622      	mov	r2, r4
 808250a:	1c41      	adds	r1, r0, #1
 808250c:	683b      	ldr	r3, [r7, #0]
 808250e:	4668      	mov	r0, sp
 8082510:	f7ff fd76 	bl	8082000 <vsnprintf>
  return write(str);
 8082514:	4669      	mov	r1, sp
 8082516:	4628      	mov	r0, r5
 8082518:	f7ff ff96 	bl	8082448 <_ZN5Print5writeEPKc>
 808251c:	4604      	mov	r4, r0
 808251e:	46c5      	mov	sp, r8
 8082520:	e7e1      	b.n	80824e6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

08082522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 8082522:	680b      	ldr	r3, [r1, #0]
 8082524:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 8082526:	b113      	cbz	r3, 808252e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8082528:	685a      	ldr	r2, [r3, #4]
 808252a:	3201      	adds	r2, #1
 808252c:	605a      	str	r2, [r3, #4]
      }
 808252e:	4770      	bx	lr

08082530 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082530:	4b01      	ldr	r3, [pc, #4]	; (8082538 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082532:	4a02      	ldr	r2, [pc, #8]	; (808253c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082534:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8082536:	4770      	bx	lr
 8082538:	20000504 	.word	0x20000504
 808253c:	08086468 	.word	0x08086468

08082540 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8082540:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082542:	2000      	movs	r0, #0
 8082544:	f7ff fd14 	bl	8081f70 <spark_sync_time_pending>
 8082548:	b128      	cbz	r0, 8082556 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808254a:	f7ff fcf9 	bl	8081f40 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808254e:	f080 0001 	eor.w	r0, r0, #1
 8082552:	b2c0      	uxtb	r0, r0
    }
 8082554:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082556:	2001      	movs	r0, #1
 8082558:	e7fc      	b.n	8082554 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

0808255c <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808255c:	b530      	push	{r4, r5, lr}
 808255e:	4604      	mov	r4, r0
    t += time_zone_cache;
 8082560:	4818      	ldr	r0, [pc, #96]	; (80825c4 <_ZN9TimeClass7timeStrEx+0x68>)
{
 8082562:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8082564:	e9d0 1000 	ldrd	r1, r0, [r0]
 8082568:	1852      	adds	r2, r2, r1
 808256a:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 808256e:	4816      	ldr	r0, [pc, #88]	; (80825c8 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8082570:	2500      	movs	r5, #0
    t += dst_current_cache;
 8082572:	e9d0 1000 	ldrd	r1, r0, [r0]
 8082576:	1852      	adds	r2, r2, r1
 8082578:	eb40 0303 	adc.w	r3, r0, r3
 808257c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8082580:	2224      	movs	r2, #36	; 0x24
 8082582:	2100      	movs	r1, #0
 8082584:	eb0d 0002 	add.w	r0, sp, r2
 8082588:	f001 fe40 	bl	808420c <memset>
    localtime_r(&t, &calendar_time);
 808258c:	a909      	add	r1, sp, #36	; 0x24
 808258e:	4668      	mov	r0, sp
 8082590:	f7fd fd46 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8082594:	2216      	movs	r2, #22
 8082596:	4629      	mov	r1, r5
 8082598:	a803      	add	r0, sp, #12
 808259a:	9502      	str	r5, [sp, #8]
 808259c:	f001 fe36 	bl	808420c <memset>
    asctime_r(&calendar_time, ascstr);
 80825a0:	a902      	add	r1, sp, #8
 80825a2:	a809      	add	r0, sp, #36	; 0x24
 80825a4:	f001 fdec 	bl	8084180 <asctime_r>
    int len = strlen(ascstr);
 80825a8:	a802      	add	r0, sp, #8
 80825aa:	f001 fe96 	bl	80842da <strlen>
    ascstr[len-1] = 0; // remove final newline
 80825ae:	ab12      	add	r3, sp, #72	; 0x48
 80825b0:	4418      	add	r0, r3
 80825b2:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80825b6:	a902      	add	r1, sp, #8
 80825b8:	4620      	mov	r0, r4
 80825ba:	f7ff fe2b 	bl	8082214 <_ZN6StringC1EPKc>
}
 80825be:	4620      	mov	r0, r4
 80825c0:	b013      	add	sp, #76	; 0x4c
 80825c2:	bd30      	pop	{r4, r5, pc}
 80825c4:	20000518 	.word	0x20000518
 80825c8:	20000510 	.word	0x20000510

080825cc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80825cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80825d0:	b0a5      	sub	sp, #148	; 0x94
 80825d2:	4607      	mov	r7, r0
 80825d4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80825d6:	a814      	add	r0, sp, #80	; 0x50
{
 80825d8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80825da:	223f      	movs	r2, #63	; 0x3f
{
 80825dc:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80825de:	f001 fe96 	bl	808430e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80825e2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80825e4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80825e6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80825ea:	f001 fe76 	bl	80842da <strlen>
 80825ee:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80825f0:	bb5d      	cbnz	r5, 808264a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80825f2:	492a      	ldr	r1, [pc, #168]	; (808269c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80825f4:	a803      	add	r0, sp, #12
 80825f6:	f001 fe4c 	bl	8084292 <strcpy>
{
 80825fa:	2500      	movs	r5, #0
 80825fc:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80825fe:	f104 3bff 	add.w	fp, r4, #4294967295
 8082602:	45ab      	cmp	fp, r5
 8082604:	d936      	bls.n	8082674 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8082606:	46b1      	mov	r9, r6
 8082608:	f819 3b01 	ldrb.w	r3, [r9], #1
 808260c:	f105 0a01 	add.w	sl, r5, #1
 8082610:	2b25      	cmp	r3, #37	; 0x25
 8082612:	d117      	bne.n	8082644 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 8082614:	7873      	ldrb	r3, [r6, #1]
 8082616:	2b7a      	cmp	r3, #122	; 0x7a
 8082618:	d114      	bne.n	8082644 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 808261a:	a803      	add	r0, sp, #12
 808261c:	f001 fe5d 	bl	80842da <strlen>
 8082620:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8082622:	ab14      	add	r3, sp, #80	; 0x50
 8082624:	1828      	adds	r0, r5, r0
 8082626:	4418      	add	r0, r3
 8082628:	ebab 0205 	sub.w	r2, fp, r5
 808262c:	1cb1      	adds	r1, r6, #2
 808262e:	f001 fddf 	bl	80841f0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8082632:	4622      	mov	r2, r4
 8082634:	a903      	add	r1, sp, #12
 8082636:	4630      	mov	r0, r6
 8082638:	f001 fdda 	bl	80841f0 <memcpy>
            len = strlen(format_str);
 808263c:	a814      	add	r0, sp, #80	; 0x50
 808263e:	f001 fe4c 	bl	80842da <strlen>
 8082642:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 8082644:	464e      	mov	r6, r9
 8082646:	4655      	mov	r5, sl
 8082648:	e7d9      	b.n	80825fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808264a:	213c      	movs	r1, #60	; 0x3c
 808264c:	fb95 f3f1 	sdiv	r3, r5, r1
 8082650:	2b00      	cmp	r3, #0
 8082652:	bfb8      	it	lt
 8082654:	425b      	neglt	r3, r3
 8082656:	fbb3 f2f1 	udiv	r2, r3, r1
 808265a:	fb01 3312 	mls	r3, r1, r2, r3
 808265e:	9300      	str	r3, [sp, #0]
 8082660:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8082664:	2110      	movs	r1, #16
 8082666:	fb95 f3f3 	sdiv	r3, r5, r3
 808266a:	4a0d      	ldr	r2, [pc, #52]	; (80826a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 808266c:	a803      	add	r0, sp, #12
 808266e:	f7ff fcbf 	bl	8081ff0 <snprintf>
 8082672:	e7c2      	b.n	80825fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8082674:	2100      	movs	r1, #0
 8082676:	222e      	movs	r2, #46	; 0x2e
 8082678:	a808      	add	r0, sp, #32
 808267a:	9107      	str	r1, [sp, #28]
 808267c:	f001 fdc6 	bl	808420c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8082680:	4643      	mov	r3, r8
 8082682:	aa14      	add	r2, sp, #80	; 0x50
 8082684:	2132      	movs	r1, #50	; 0x32
 8082686:	a807      	add	r0, sp, #28
 8082688:	f7fd fcd2 	bl	8080030 <strftime>
    return String(buf);
 808268c:	4638      	mov	r0, r7
 808268e:	a907      	add	r1, sp, #28
 8082690:	f7ff fdc0 	bl	8082214 <_ZN6StringC1EPKc>
}
 8082694:	4638      	mov	r0, r7
 8082696:	b025      	add	sp, #148	; 0x94
 8082698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808269c:	0808646c 	.word	0x0808646c
 80826a0:	0808646e 	.word	0x0808646e

080826a4 <_ZN9TimeClass6formatExPKc>:
{
 80826a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80826a6:	b08d      	sub	sp, #52	; 0x34
 80826a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80826aa:	4604      	mov	r4, r0
 80826ac:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80826b0:	b915      	cbnz	r5, 80826b8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80826b2:	4b19      	ldr	r3, [pc, #100]	; (8082718 <_ZN9TimeClass6formatExPKc+0x74>)
 80826b4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80826b6:	b12d      	cbz	r5, 80826c4 <_ZN9TimeClass6formatExPKc+0x20>
 80826b8:	4b18      	ldr	r3, [pc, #96]	; (808271c <_ZN9TimeClass6formatExPKc+0x78>)
 80826ba:	4628      	mov	r0, r5
 80826bc:	6819      	ldr	r1, [r3, #0]
 80826be:	f001 fdde 	bl	808427e <strcmp>
 80826c2:	b938      	cbnz	r0, 80826d4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80826c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80826c8:	4620      	mov	r0, r4
 80826ca:	f7ff ff47 	bl	808255c <_ZN9TimeClass7timeStrEx>
}
 80826ce:	4620      	mov	r0, r4
 80826d0:	b00d      	add	sp, #52	; 0x34
 80826d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80826d4:	9900      	ldr	r1, [sp, #0]
 80826d6:	4e12      	ldr	r6, [pc, #72]	; (8082720 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80826d8:	4f12      	ldr	r7, [pc, #72]	; (8082724 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80826da:	e9d6 3200 	ldrd	r3, r2, [r6]
 80826de:	185b      	adds	r3, r3, r1
 80826e0:	9901      	ldr	r1, [sp, #4]
 80826e2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80826e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80826ea:	181b      	adds	r3, r3, r0
 80826ec:	eb41 0202 	adc.w	r2, r1, r2
 80826f0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80826f4:	2100      	movs	r1, #0
 80826f6:	2224      	movs	r2, #36	; 0x24
 80826f8:	a803      	add	r0, sp, #12
 80826fa:	f001 fd87 	bl	808420c <memset>
    localtime_r(&t, &calendar_time);
 80826fe:	a903      	add	r1, sp, #12
 8082700:	4668      	mov	r0, sp
 8082702:	f7fd fc8d 	bl	8080020 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8082706:	6832      	ldr	r2, [r6, #0]
 8082708:	683b      	ldr	r3, [r7, #0]
 808270a:	4620      	mov	r0, r4
 808270c:	4413      	add	r3, r2
 808270e:	a903      	add	r1, sp, #12
 8082710:	462a      	mov	r2, r5
 8082712:	f7ff ff5b 	bl	80825cc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8082716:	e7da      	b.n	80826ce <_ZN9TimeClass6formatExPKc+0x2a>
 8082718:	2000050c 	.word	0x2000050c
 808271c:	2000000c 	.word	0x2000000c
 8082720:	20000518 	.word	0x20000518
 8082724:	20000510 	.word	0x20000510

08082728 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8082728:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 808272a:	2000      	movs	r0, #0
 808272c:	f7ff fa2a 	bl	8081b84 <hal_rtc_time_is_valid>
    if (rtcstate)
 8082730:	4604      	mov	r4, r0
 8082732:	b9a0      	cbnz	r0, 808275e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082734:	f7ff fb3e 	bl	8081db4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082738:	2801      	cmp	r0, #1
 808273a:	d110      	bne.n	808275e <_ZN9TimeClass7isValidEv+0x36>
 808273c:	4620      	mov	r0, r4
 808273e:	f7ff fb61 	bl	8081e04 <system_thread_get_state>
 8082742:	b960      	cbnz	r0, 808275e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8082744:	f7ff fefc 	bl	8082540 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082748:	b910      	cbnz	r0, 8082750 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 808274a:	f7ff fbe9 	bl	8081f20 <spark_process>
        while (_while() && !_condition()) {
 808274e:	e7f9      	b.n	8082744 <_ZN9TimeClass7isValidEv+0x1c>
 8082750:	f7ff fef6 	bl	8082540 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8082754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8082758:	2000      	movs	r0, #0
 808275a:	f7ff ba13 	b.w	8081b84 <hal_rtc_time_is_valid>
}
 808275e:	4620      	mov	r0, r4
 8082760:	bd10      	pop	{r4, pc}

08082762 <_ZN9TimeClass3nowEv>:
{
 8082762:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8082764:	f7ff ffe0 	bl	8082728 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8082768:	2210      	movs	r2, #16
 808276a:	2100      	movs	r1, #0
 808276c:	4668      	mov	r0, sp
 808276e:	f001 fd4d 	bl	808420c <memset>
    hal_rtc_get_time(&tv, nullptr);
 8082772:	2100      	movs	r1, #0
 8082774:	4668      	mov	r0, sp
 8082776:	f7ff fa0d 	bl	8081b94 <hal_rtc_get_time>
}
 808277a:	9800      	ldr	r0, [sp, #0]
 808277c:	b005      	add	sp, #20
 808277e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082784 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082784:	4b02      	ldr	r3, [pc, #8]	; (8082790 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082786:	681a      	ldr	r2, [r3, #0]
 8082788:	4b02      	ldr	r3, [pc, #8]	; (8082794 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808278a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 808278c:	4770      	bx	lr
 808278e:	bf00      	nop
 8082790:	2000000c 	.word	0x2000000c
 8082794:	2000050c 	.word	0x2000050c

08082798 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082798:	2100      	movs	r1, #0
 808279a:	f7ff bb1b 	b.w	8081dd4 <system_delay_ms>

0808279e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808279e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80827a0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80827a2:	4604      	mov	r4, r0
      if (_M_manager)
 80827a4:	b113      	cbz	r3, 80827ac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80827a6:	2203      	movs	r2, #3
 80827a8:	4601      	mov	r1, r0
 80827aa:	4798      	blx	r3
    }
 80827ac:	4620      	mov	r0, r4
 80827ae:	bd10      	pop	{r4, pc}

080827b0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80827b0:	b510      	push	{r4, lr}
 80827b2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80827b4:	f7ff fff3 	bl	808279e <_ZNSt14_Function_baseD1Ev>
 80827b8:	4620      	mov	r0, r4
 80827ba:	bd10      	pop	{r4, pc}

080827bc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80827bc:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80827be:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80827c0:	460b      	mov	r3, r1
 80827c2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80827c4:	c803      	ldmia	r0, {r0, r1}
 80827c6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80827ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80827ce:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80827d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80827d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80827da:	b002      	add	sp, #8
 80827dc:	bd10      	pop	{r4, pc}
	...

080827e0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80827e0:	2300      	movs	r3, #0
 80827e2:	4803      	ldr	r0, [pc, #12]	; (80827f0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80827e4:	4a03      	ldr	r2, [pc, #12]	; (80827f4 <_GLOBAL__sub_I_RGB+0x14>)
 80827e6:	4904      	ldr	r1, [pc, #16]	; (80827f8 <_GLOBAL__sub_I_RGB+0x18>)
 80827e8:	6083      	str	r3, [r0, #8]
 80827ea:	f000 bf4d 	b.w	8083688 <__aeabi_atexit>
 80827ee:	bf00      	nop
 80827f0:	20000520 	.word	0x20000520
 80827f4:	200001e8 	.word	0x200001e8
 80827f8:	080827b1 	.word	0x080827b1

080827fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80827fc:	4b01      	ldr	r3, [pc, #4]	; (8082804 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80827fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8082800:	4770      	bx	lr
 8082802:	bf00      	nop
 8082804:	20000014 	.word	0x20000014

08082808 <serialEventRun>:
{
 8082808:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808280a:	4b17      	ldr	r3, [pc, #92]	; (8082868 <serialEventRun+0x60>)
 808280c:	b143      	cbz	r3, 8082820 <serialEventRun+0x18>
 808280e:	f000 fc21 	bl	8083054 <_Z16_fetch_usbserialv>
 8082812:	6803      	ldr	r3, [r0, #0]
 8082814:	691b      	ldr	r3, [r3, #16]
 8082816:	4798      	blx	r3
 8082818:	2800      	cmp	r0, #0
 808281a:	dd01      	ble.n	8082820 <serialEventRun+0x18>
        serialEvent();
 808281c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8082820:	4b12      	ldr	r3, [pc, #72]	; (808286c <serialEventRun+0x64>)
 8082822:	b143      	cbz	r3, 8082836 <serialEventRun+0x2e>
 8082824:	f000 fd38 	bl	8083298 <_Z22__fetch_global_Serial1v>
 8082828:	6803      	ldr	r3, [r0, #0]
 808282a:	691b      	ldr	r3, [r3, #16]
 808282c:	4798      	blx	r3
 808282e:	2800      	cmp	r0, #0
 8082830:	dd01      	ble.n	8082836 <serialEventRun+0x2e>
        serialEvent1();
 8082832:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8082836:	4b0e      	ldr	r3, [pc, #56]	; (8082870 <serialEventRun+0x68>)
 8082838:	b10b      	cbz	r3, 808283e <serialEventRun+0x36>
 808283a:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 808283e:	4b0d      	ldr	r3, [pc, #52]	; (8082874 <serialEventRun+0x6c>)
 8082840:	b10b      	cbz	r3, 8082846 <serialEventRun+0x3e>
 8082842:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8082846:	4b0c      	ldr	r3, [pc, #48]	; (8082878 <serialEventRun+0x70>)
 8082848:	b10b      	cbz	r3, 808284e <serialEventRun+0x46>
 808284a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808284e:	4b0b      	ldr	r3, [pc, #44]	; (808287c <serialEventRun+0x74>)
 8082850:	b143      	cbz	r3, 8082864 <serialEventRun+0x5c>
 8082852:	f000 fc3d 	bl	80830d0 <_Z17_fetch_usbserial1v>
 8082856:	6803      	ldr	r3, [r0, #0]
 8082858:	691b      	ldr	r3, [r3, #16]
 808285a:	4798      	blx	r3
 808285c:	2800      	cmp	r0, #0
 808285e:	dd01      	ble.n	8082864 <serialEventRun+0x5c>
        usbSerialEvent1();
 8082860:	f3af 8000 	nop.w
}
 8082864:	bd08      	pop	{r3, pc}
 8082866:	bf00      	nop
	...

08082880 <_post_loop>:
{
 8082880:	b508      	push	{r3, lr}
	serialEventRun();
 8082882:	f7ff ffc1 	bl	8082808 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082886:	f7ff f975 	bl	8081b74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808288a:	4b01      	ldr	r3, [pc, #4]	; (8082890 <_post_loop+0x10>)
 808288c:	6018      	str	r0, [r3, #0]
}
 808288e:	bd08      	pop	{r3, pc}
 8082890:	200009d4 	.word	0x200009d4

08082894 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082894:	4802      	ldr	r0, [pc, #8]	; (80828a0 <_Z33system_initialize_user_backup_ramv+0xc>)
 8082896:	4a03      	ldr	r2, [pc, #12]	; (80828a4 <_Z33system_initialize_user_backup_ramv+0x10>)
 8082898:	4903      	ldr	r1, [pc, #12]	; (80828a8 <_Z33system_initialize_user_backup_ramv+0x14>)
 808289a:	1a12      	subs	r2, r2, r0
 808289c:	f001 bca8 	b.w	80841f0 <memcpy>
 80828a0:	40024000 	.word	0x40024000
 80828a4:	40024004 	.word	0x40024004
 80828a8:	080868c0 	.word	0x080868c0

080828ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80828ac:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80828ae:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80828b0:	461a      	mov	r2, r3
 80828b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80828b6:	9300      	str	r3, [sp, #0]
 80828b8:	f7ff fab6 	bl	8081e28 <system_ctrl_set_result>
}
 80828bc:	b003      	add	sp, #12
 80828be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080828c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80828c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80828c6:	8843      	ldrh	r3, [r0, #2]
 80828c8:	2b0a      	cmp	r3, #10
 80828ca:	d008      	beq.n	80828de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80828cc:	2b50      	cmp	r3, #80	; 0x50
 80828ce:	d10b      	bne.n	80828e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80828d0:	4b09      	ldr	r3, [pc, #36]	; (80828f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80828d2:	681b      	ldr	r3, [r3, #0]
 80828d4:	b14b      	cbz	r3, 80828ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80828d6:	b003      	add	sp, #12
 80828d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80828dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80828de:	f7ff ffe5 	bl	80828ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80828e2:	b003      	add	sp, #12
 80828e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80828e8:	2300      	movs	r3, #0
 80828ea:	461a      	mov	r2, r3
 80828ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80828f0:	9300      	str	r3, [sp, #0]
 80828f2:	f7ff fa99 	bl	8081e28 <system_ctrl_set_result>
}
 80828f6:	e7f4      	b.n	80828e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80828f8:	20000534 	.word	0x20000534

080828fc <module_user_init_hook>:
{
 80828fc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80828fe:	4c12      	ldr	r4, [pc, #72]	; (8082948 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8082900:	2100      	movs	r1, #0
 8082902:	4812      	ldr	r0, [pc, #72]	; (808294c <module_user_init_hook+0x50>)
 8082904:	f7ff fb94 	bl	8082030 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8082908:	4d11      	ldr	r5, [pc, #68]	; (8082950 <module_user_init_hook+0x54>)
 808290a:	6823      	ldr	r3, [r4, #0]
 808290c:	42ab      	cmp	r3, r5
 808290e:	bf0c      	ite	eq
 8082910:	2201      	moveq	r2, #1
 8082912:	2200      	movne	r2, #0
 8082914:	4b0f      	ldr	r3, [pc, #60]	; (8082954 <module_user_init_hook+0x58>)
 8082916:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8082918:	d002      	beq.n	8082920 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 808291a:	f7ff ffbb 	bl	8082894 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808291e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8082920:	f7ff f920 	bl	8081b64 <HAL_RNG_GetRandomNumber>
 8082924:	4604      	mov	r4, r0
    srand(seed);
 8082926:	f001 fc79 	bl	808421c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808292a:	4b0b      	ldr	r3, [pc, #44]	; (8082958 <module_user_init_hook+0x5c>)
 808292c:	b113      	cbz	r3, 8082934 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 808292e:	4620      	mov	r0, r4
 8082930:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8082934:	2100      	movs	r1, #0
 8082936:	4808      	ldr	r0, [pc, #32]	; (8082958 <module_user_init_hook+0x5c>)
 8082938:	f7ff fb2a 	bl	8081f90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808293c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8082940:	2100      	movs	r1, #0
 8082942:	4806      	ldr	r0, [pc, #24]	; (808295c <module_user_init_hook+0x60>)
 8082944:	f7ff ba66 	b.w	8081e14 <system_ctrl_set_app_request_handler>
 8082948:	40024000 	.word	0x40024000
 808294c:	080827fd 	.word	0x080827fd
 8082950:	9a271c1e 	.word	0x9a271c1e
 8082954:	20000530 	.word	0x20000530
 8082958:	00000000 	.word	0x00000000
 808295c:	080828c5 	.word	0x080828c5

08082960 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082960:	4770      	bx	lr

08082962 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8082962:	2000      	movs	r0, #0
 8082964:	4770      	bx	lr

08082966 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082966:	b510      	push	{r4, lr}
 8082968:	4604      	mov	r4, r0
 808296a:	2110      	movs	r1, #16
 808296c:	f000 fe91 	bl	8083692 <_ZdlPvj>
 8082970:	4620      	mov	r0, r4
 8082972:	bd10      	pop	{r4, pc}

08082974 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8082974:	b508      	push	{r3, lr}
      { delete this; }
 8082976:	f7ff fff6 	bl	8082966 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808297a:	bd08      	pop	{r3, pc}

0808297c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808297c:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808297e:	b530      	push	{r4, r5, lr}
        type_(type) {
 8082980:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8082984:	6002      	str	r2, [r0, #0]
 8082986:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8082988:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808298a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 808298c:	680c      	ldr	r4, [r1, #0]
 808298e:	8085      	strh	r5, [r0, #4]
 8082990:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8082992:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8082994:	bd30      	pop	{r4, r5, pc}

08082996 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8082996:	b510      	push	{r4, lr}
 8082998:	4604      	mov	r4, r0
    free((void*)msg_);
 808299a:	6800      	ldr	r0, [r0, #0]
 808299c:	f7ff fb08 	bl	8081fb0 <free>
}
 80829a0:	4620      	mov	r0, r4
 80829a2:	bd10      	pop	{r4, pc}

080829a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80829a4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80829a6:	68c4      	ldr	r4, [r0, #12]
 80829a8:	b1f4      	cbz	r4, 80829e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80829aa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80829ac:	2b02      	cmp	r3, #2
 80829ae:	d103      	bne.n	80829b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80829b0:	f104 000c 	add.w	r0, r4, #12
 80829b4:	f7ff ffef 	bl	8082996 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80829b8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80829ba:	b135      	cbz	r5, 80829ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80829bc:	4628      	mov	r0, r5
 80829be:	f7ff feee 	bl	808279e <_ZNSt14_Function_baseD1Ev>
 80829c2:	2110      	movs	r1, #16
 80829c4:	4628      	mov	r0, r5
 80829c6:	f000 fe64 	bl	8083692 <_ZdlPvj>
 80829ca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80829cc:	b135      	cbz	r5, 80829dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80829ce:	4628      	mov	r0, r5
 80829d0:	f7ff fee5 	bl	808279e <_ZNSt14_Function_baseD1Ev>
 80829d4:	2110      	movs	r1, #16
 80829d6:	4628      	mov	r0, r5
 80829d8:	f000 fe5b 	bl	8083692 <_ZdlPvj>
 80829dc:	4620      	mov	r0, r4
 80829de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80829e2:	2114      	movs	r1, #20
 80829e4:	f000 be55 	b.w	8083692 <_ZdlPvj>
 80829e8:	bd38      	pop	{r3, r4, r5, pc}

080829ea <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80829ea:	b510      	push	{r4, lr}
 80829ec:	b088      	sub	sp, #32
 80829ee:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80829f0:	4668      	mov	r0, sp
 80829f2:	f7ff fc0f 	bl	8082214 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80829f6:	4669      	mov	r1, sp
 80829f8:	a804      	add	r0, sp, #16
 80829fa:	f7ff fc4a 	bl	8082292 <_ZN6StringC1ERKS_>
 80829fe:	a804      	add	r0, sp, #16
 8082a00:	47a0      	blx	r4
 8082a02:	4604      	mov	r4, r0
 8082a04:	a804      	add	r0, sp, #16
 8082a06:	f7ff fbbb 	bl	8082180 <_ZN6StringD1Ev>
    String p(param);
 8082a0a:	4668      	mov	r0, sp
 8082a0c:	f7ff fbb8 	bl	8082180 <_ZN6StringD1Ev>
}
 8082a10:	4620      	mov	r0, r4
 8082a12:	b008      	add	sp, #32
 8082a14:	bd10      	pop	{r4, pc}

08082a16 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082a16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8082a18:	2300      	movs	r3, #0
         size = sizeof(*this);
 8082a1a:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8082a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8082a20:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082a22:	4669      	mov	r1, sp
 8082a24:	461a      	mov	r2, r3
 8082a26:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8082a28:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8082a2c:	f8ad 4000 	strh.w	r4, [sp]
 8082a30:	f7ff fa6e 	bl	8081f10 <spark_function>
}
 8082a34:	b004      	add	sp, #16
 8082a36:	bd10      	pop	{r4, pc}

08082a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082a3a:	460e      	mov	r6, r1
 8082a3c:	4604      	mov	r4, r0
 8082a3e:	f856 3b04 	ldr.w	r3, [r6], #4
 8082a42:	460d      	mov	r5, r1
 8082a44:	a801      	add	r0, sp, #4
 8082a46:	4631      	mov	r1, r6
 8082a48:	9300      	str	r3, [sp, #0]
 8082a4a:	f7ff fd6a 	bl	8082522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082a4e:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082a50:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082a52:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8082a54:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8082a56:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8082a58:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8082a5a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082a5c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8082a5e:	f7fd fbd2 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082a62:	4630      	mov	r0, r6
 8082a64:	f7fd fbcf 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8082a68:	4628      	mov	r0, r5
 8082a6a:	2108      	movs	r1, #8
 8082a6c:	f000 fe11 	bl	8083692 <_ZdlPvj>
        return p;
    }
 8082a70:	4620      	mov	r0, r4
 8082a72:	b002      	add	sp, #8
 8082a74:	bd70      	pop	{r4, r5, r6, pc}

08082a76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082a76:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8082a78:	b510      	push	{r4, lr}
      if (_M_empty())
 8082a7a:	b90a      	cbnz	r2, 8082a80 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082a7c:	f000 fe0d 	bl	808369a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082a80:	68c3      	ldr	r3, [r0, #12]
    }
 8082a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082a86:	4718      	bx	r3

08082a88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082a88:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8082a8a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8082a8c:	f100 0110 	add.w	r1, r0, #16
 8082a90:	f7ff fff1 	bl	8082a76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8082a94:	bd08      	pop	{r3, pc}

08082a96 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8082a96:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8082a98:	b510      	push	{r4, lr}
      if (_M_empty())
 8082a9a:	b90a      	cbnz	r2, 8082aa0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082a9c:	f000 fdfd 	bl	808369a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082aa0:	68c3      	ldr	r3, [r0, #12]
    }
 8082aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082aa6:	4718      	bx	r3

08082aa8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082aa8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8082aaa:	6800      	ldr	r0, [r0, #0]
 8082aac:	f100 0110 	add.w	r1, r0, #16
 8082ab0:	f7ff fff1 	bl	8082a96 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8082ab4:	bd08      	pop	{r3, pc}
	...

08082ab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8082ab8:	b538      	push	{r3, r4, r5, lr}
 8082aba:	2300      	movs	r3, #0
 8082abc:	4604      	mov	r4, r0
 8082abe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082ac0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8082ac2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082ac4:	f7fd faf9 	bl	80800ba <_Znwj>
 8082ac8:	b128      	cbz	r0, 8082ad6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8082aca:	2301      	movs	r3, #1
 8082acc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8082ad0:	4b02      	ldr	r3, [pc, #8]	; (8082adc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082ad2:	60c5      	str	r5, [r0, #12]
 8082ad4:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082ad6:	6020      	str	r0, [r4, #0]
	}
 8082ad8:	4620      	mov	r0, r4
 8082ada:	bd38      	pop	{r3, r4, r5, pc}
 8082adc:	080864a0 	.word	0x080864a0

08082ae0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8082ae0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082ae2:	2300      	movs	r3, #0
 8082ae4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082ae6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082ae8:	4604      	mov	r4, r0
 8082aea:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082aec:	b12b      	cbz	r3, 8082afa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082aee:	2202      	movs	r2, #2
 8082af0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082af2:	68eb      	ldr	r3, [r5, #12]
 8082af4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082af6:	68ab      	ldr	r3, [r5, #8]
 8082af8:	60a3      	str	r3, [r4, #8]
    }
 8082afa:	4620      	mov	r0, r4
 8082afc:	bd38      	pop	{r3, r4, r5, pc}
	...

08082b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8082b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082b02:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8082b04:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8082b06:	4668      	mov	r0, sp
 8082b08:	f7ff ff38 	bl	808297c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8082b0c:	f04f 0302 	mov.w	r3, #2
 8082b10:	e8d4 2f4f 	ldrexb	r2, [r4]
 8082b14:	2a00      	cmp	r2, #0
 8082b16:	d103      	bne.n	8082b20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8082b18:	e8c4 3f41 	strexb	r1, r3, [r4]
 8082b1c:	2900      	cmp	r1, #0
 8082b1e:	d1f7      	bne.n	8082b10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8082b20:	d125      	bne.n	8082b6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8082b22:	f104 050c 	add.w	r5, r4, #12
 8082b26:	4669      	mov	r1, sp
 8082b28:	4628      	mov	r0, r5
 8082b2a:	f7ff ff27 	bl	808297c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8082b2e:	2301      	movs	r3, #1
 8082b30:	f3bf 8f5b 	dmb	ish
 8082b34:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8082b36:	2000      	movs	r0, #0
 8082b38:	f3bf 8f5b 	dmb	ish
 8082b3c:	f104 0308 	add.w	r3, r4, #8
 8082b40:	e853 6f00 	ldrex	r6, [r3]
 8082b44:	e843 0200 	strex	r2, r0, [r3]
 8082b48:	2a00      	cmp	r2, #0
 8082b4a:	d1f9      	bne.n	8082b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8082b4c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082b50:	b16e      	cbz	r6, 8082b6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8082b52:	f7ff f947 	bl	8081de4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8082b56:	b178      	cbz	r0, 8082b78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082b58:	4629      	mov	r1, r5
 8082b5a:	4630      	mov	r0, r6
 8082b5c:	f7ff ff8b 	bl	8082a76 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8082b60:	4630      	mov	r0, r6
 8082b62:	f7ff fe1c 	bl	808279e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8082b66:	2110      	movs	r1, #16
 8082b68:	4630      	mov	r0, r6
 8082b6a:	f000 fd92 	bl	8083692 <_ZdlPvj>
        p_->setError(std::move(error));
 8082b6e:	4668      	mov	r0, sp
 8082b70:	f7ff ff11 	bl	8082996 <_ZN8particle5ErrorD1Ev>
    }
 8082b74:	b009      	add	sp, #36	; 0x24
 8082b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082b78:	4631      	mov	r1, r6
 8082b7a:	a802      	add	r0, sp, #8
 8082b7c:	f7ff ffb0 	bl	8082ae0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8082b80:	68e0      	ldr	r0, [r4, #12]
 8082b82:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082b86:	b108      	cbz	r0, 8082b8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8082b88:	f001 fb8c 	bl	80842a4 <strdup>
        type_(type) {
 8082b8c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082b8e:	2010      	movs	r0, #16
 8082b90:	f8ad 501c 	strh.w	r5, [sp, #28]
 8082b94:	f7fd fa91 	bl	80800ba <_Znwj>
 8082b98:	4605      	mov	r5, r0
 8082b9a:	b1e8      	cbz	r0, 8082bd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8082b9c:	2700      	movs	r7, #0
 8082b9e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082ba0:	2018      	movs	r0, #24
 8082ba2:	f7fd fa8a 	bl	80800ba <_Znwj>
 8082ba6:	4604      	mov	r4, r0
 8082ba8:	b188      	cbz	r0, 8082bce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8082baa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082bac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082bae:	a802      	add	r0, sp, #8
 8082bb0:	f7ff fe04 	bl	80827bc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082bb4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082bb6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082bb8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082bba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082bbc:	9204      	str	r2, [sp, #16]
 8082bbe:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082bc0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8082bc2:	60e3      	str	r3, [r4, #12]
 8082bc4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8082bc8:	9205      	str	r2, [sp, #20]
 8082bca:	f7ff fed7 	bl	808297c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8082bce:	4b08      	ldr	r3, [pc, #32]	; (8082bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082bd0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082bd2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082bd4:	4b07      	ldr	r3, [pc, #28]	; (8082bf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8082bd6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8082bd8:	a806      	add	r0, sp, #24
 8082bda:	f7ff fedc 	bl	8082996 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082bde:	a802      	add	r0, sp, #8
 8082be0:	f7ff fddd 	bl	808279e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082be4:	2200      	movs	r2, #0
 8082be6:	4629      	mov	r1, r5
 8082be8:	4803      	ldr	r0, [pc, #12]	; (8082bf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8082bea:	f7ff f903 	bl	8081df4 <application_thread_invoke>
 8082bee:	e7b7      	b.n	8082b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8082bf0:	08082a89 	.word	0x08082a89
 8082bf4:	08082d21 	.word	0x08082d21
 8082bf8:	080832e9 	.word	0x080832e9

08082bfc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082c00:	b08a      	sub	sp, #40	; 0x28
 8082c02:	4605      	mov	r5, r0
 8082c04:	460c      	mov	r4, r1
 8082c06:	4617      	mov	r7, r2
 8082c08:	4698      	mov	r8, r3
 8082c0a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082c0e:	f7ff f997 	bl	8081f40 <spark_cloud_flag_connected>
 8082c12:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8082c14:	4682      	mov	sl, r0
 8082c16:	bb38      	cbnz	r0, 8082c68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8082c18:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8082c1c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082c1e:	a905      	add	r1, sp, #20
 8082c20:	4630      	mov	r0, r6
 8082c22:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082c26:	f7ff fea9 	bl	808297c <_ZN8particle5ErrorC1EOS0_>
 8082c2a:	2014      	movs	r0, #20
 8082c2c:	f7fd fa45 	bl	80800ba <_Znwj>
 8082c30:	4604      	mov	r4, r0
 8082c32:	b148      	cbz	r0, 8082c48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082c34:	2302      	movs	r3, #2
 8082c36:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082c38:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082c3a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082c3e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8082c40:	4631      	mov	r1, r6
 8082c42:	300c      	adds	r0, #12
 8082c44:	f7ff fe9a 	bl	808297c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082c48:	4628      	mov	r0, r5
	: __shared_count(__p)
 8082c4a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082c4c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8082c50:	f7ff ff32 	bl	8082ab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082c54:	4630      	mov	r0, r6
 8082c56:	f7ff fe9e 	bl	8082996 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8082c5a:	a805      	add	r0, sp, #20
 8082c5c:	f7ff fe9b 	bl	8082996 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 8082c60:	4628      	mov	r0, r5
 8082c62:	b00a      	add	sp, #40	; 0x28
 8082c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082c68:	230c      	movs	r3, #12
 8082c6a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082c6e:	2014      	movs	r0, #20
 8082c70:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8082c74:	9307      	str	r3, [sp, #28]
 8082c76:	f7fd fa20 	bl	80800ba <_Znwj>
 8082c7a:	4601      	mov	r1, r0
 8082c7c:	b128      	cbz	r0, 8082c8a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082c7e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8082c82:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082c86:	f880 a001 	strb.w	sl, [r0, #1]
 8082c8a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082c8c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8082c8e:	f7ff ff13 	bl	8082ab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8082c92:	4b22      	ldr	r3, [pc, #136]	; (8082d1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082c94:	2008      	movs	r0, #8
 8082c96:	9308      	str	r3, [sp, #32]
 8082c98:	f7fd fa0f 	bl	80800ba <_Znwj>
 8082c9c:	4682      	mov	sl, r0
 8082c9e:	b128      	cbz	r0, 8082cac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082ca0:	9b03      	ldr	r3, [sp, #12]
 8082ca2:	a904      	add	r1, sp, #16
 8082ca4:	f840 3b04 	str.w	r3, [r0], #4
 8082ca8:	f7ff fc3b 	bl	8082522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082cac:	4642      	mov	r2, r8
 8082cae:	4639      	mov	r1, r7
 8082cb0:	4620      	mov	r0, r4
 8082cb2:	9600      	str	r6, [sp, #0]
 8082cb4:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8082cb8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082cbc:	f7ff f948 	bl	8081f50 <spark_send_event>
 8082cc0:	b9b8      	cbnz	r0, 8082cf2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8082cc2:	9b03      	ldr	r3, [sp, #12]
 8082cc4:	785b      	ldrb	r3, [r3, #1]
 8082cc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082cca:	b993      	cbnz	r3, 8082cf2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8082ccc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8082cd0:	a905      	add	r1, sp, #20
 8082cd2:	a803      	add	r0, sp, #12
 8082cd4:	9205      	str	r2, [sp, #20]
 8082cd6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082cda:	f7ff ff11 	bl	8082b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082cde:	a805      	add	r0, sp, #20
 8082ce0:	f7ff fe59 	bl	8082996 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082ce4:	a805      	add	r0, sp, #20
 8082ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082ce8:	f7ff fea6 	bl	8082a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8082cec:	a806      	add	r0, sp, #24
 8082cee:	f7fd fa8a 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082cf2:	9b03      	ldr	r3, [sp, #12]
 8082cf4:	a904      	add	r1, sp, #16
 8082cf6:	a806      	add	r0, sp, #24
 8082cf8:	9305      	str	r3, [sp, #20]
 8082cfa:	f7ff fc12 	bl	8082522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082cfe:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082d00:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082d02:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 8082d04:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8082d06:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8082d08:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8082d0a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8082d0c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8082d0e:	f7fd fa7a 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082d12:	a804      	add	r0, sp, #16
 8082d14:	f7fd fa77 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8082d18:	e7a2      	b.n	8082c60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8082d1a:	bf00      	nop
 8082d1c:	08082de5 	.word	0x08082de5

08082d20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8082d20:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082d24:	4605      	mov	r5, r0
	  switch (__op)
 8082d26:	d007      	beq.n	8082d38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8082d28:	2a03      	cmp	r2, #3
 8082d2a:	d018      	beq.n	8082d5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8082d2c:	2a01      	cmp	r2, #1
 8082d2e:	d101      	bne.n	8082d34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8082d30:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082d32:	6003      	str	r3, [r0, #0]
	}
 8082d34:	2000      	movs	r0, #0
 8082d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082d38:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8082d3a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082d3c:	f7fd f9bd 	bl	80800ba <_Znwj>
 8082d40:	4604      	mov	r4, r0
 8082d42:	b150      	cbz	r0, 8082d5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082d44:	4631      	mov	r1, r6
 8082d46:	f7ff fecb 	bl	8082ae0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8082d4a:	6930      	ldr	r0, [r6, #16]
 8082d4c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082d50:	b108      	cbz	r0, 8082d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8082d52:	f001 faa7 	bl	80842a4 <strdup>
        type_(type) {
 8082d56:	6120      	str	r0, [r4, #16]
 8082d58:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8082d5a:	602c      	str	r4, [r5, #0]
	}
 8082d5c:	e7ea      	b.n	8082d34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082d5e:	6804      	ldr	r4, [r0, #0]
 8082d60:	2c00      	cmp	r4, #0
 8082d62:	d0e7      	beq.n	8082d34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8082d64:	f104 0010 	add.w	r0, r4, #16
 8082d68:	f7ff fe15 	bl	8082996 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082d6c:	4620      	mov	r0, r4
 8082d6e:	f7ff fd16 	bl	808279e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082d72:	2118      	movs	r1, #24
 8082d74:	4620      	mov	r0, r4
 8082d76:	f000 fc8c 	bl	8083692 <_ZdlPvj>
 8082d7a:	e7db      	b.n	8082d34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08082d7c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8082d7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082d7e:	2300      	movs	r3, #0
 8082d80:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082d82:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082d84:	4604      	mov	r4, r0
 8082d86:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082d88:	b12b      	cbz	r3, 8082d96 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082d8a:	2202      	movs	r2, #2
 8082d8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082d8e:	68eb      	ldr	r3, [r5, #12]
 8082d90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082d92:	68ab      	ldr	r3, [r5, #8]
 8082d94:	60a3      	str	r3, [r4, #8]
    }
 8082d96:	4620      	mov	r0, r4
 8082d98:	bd38      	pop	{r3, r4, r5, pc}

08082d9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8082d9a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082d9c:	b570      	push	{r4, r5, r6, lr}
 8082d9e:	4604      	mov	r4, r0
	  switch (__op)
 8082da0:	d007      	beq.n	8082db2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8082da2:	2a03      	cmp	r2, #3
 8082da4:	d012      	beq.n	8082dcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8082da6:	2a01      	cmp	r2, #1
 8082da8:	d101      	bne.n	8082dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8082daa:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082dac:	6003      	str	r3, [r0, #0]
	}
 8082dae:	2000      	movs	r0, #0
 8082db0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082db2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8082db4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082db6:	f7fd f980 	bl	80800ba <_Znwj>
 8082dba:	4605      	mov	r5, r0
 8082dbc:	b120      	cbz	r0, 8082dc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8082dbe:	4631      	mov	r1, r6
 8082dc0:	f7ff ffdc 	bl	8082d7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082dc4:	7c33      	ldrb	r3, [r6, #16]
 8082dc6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8082dc8:	6025      	str	r5, [r4, #0]
	}
 8082dca:	e7f0      	b.n	8082dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082dcc:	6804      	ldr	r4, [r0, #0]
 8082dce:	2c00      	cmp	r4, #0
 8082dd0:	d0ed      	beq.n	8082dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8082dd2:	4620      	mov	r0, r4
 8082dd4:	f7ff fce3 	bl	808279e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082dd8:	2114      	movs	r1, #20
 8082dda:	4620      	mov	r0, r4
 8082ddc:	f000 fc59 	bl	8083692 <_ZdlPvj>
 8082de0:	e7e5      	b.n	8082dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08082de4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082de6:	4604      	mov	r4, r0
 8082de8:	b089      	sub	sp, #36	; 0x24
 8082dea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082dec:	a801      	add	r0, sp, #4
 8082dee:	4611      	mov	r1, r2
 8082df0:	f7ff fe22 	bl	8082a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082df4:	b1a4      	cbz	r4, 8082e20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 8082df6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082df8:	b11d      	cbz	r5, 8082e02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8082dfa:	4628      	mov	r0, r5
 8082dfc:	f001 fa52 	bl	80842a4 <strdup>
 8082e00:	4605      	mov	r5, r0
 8082e02:	a801      	add	r0, sp, #4
 8082e04:	a903      	add	r1, sp, #12
        type_(type) {
 8082e06:	9503      	str	r5, [sp, #12]
 8082e08:	f8ad 4010 	strh.w	r4, [sp, #16]
 8082e0c:	f7ff fe78 	bl	8082b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082e10:	a803      	add	r0, sp, #12
 8082e12:	f7ff fdc0 	bl	8082996 <_ZN8particle5ErrorD1Ev>
 8082e16:	a802      	add	r0, sp, #8
 8082e18:	f7fd f9f5 	bl	8080206 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082e1c:	b009      	add	sp, #36	; 0x24
 8082e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8082e20:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8082e22:	9d01      	ldr	r5, [sp, #4]
 8082e24:	e8d5 2f4f 	ldrexb	r2, [r5]
 8082e28:	2a00      	cmp	r2, #0
 8082e2a:	d103      	bne.n	8082e34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8082e2c:	e8c5 3f41 	strexb	r1, r3, [r5]
 8082e30:	2900      	cmp	r1, #0
 8082e32:	d1f7      	bne.n	8082e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8082e34:	d1ef      	bne.n	8082e16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8082e36:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8082e38:	f3bf 8f5b 	dmb	ish
 8082e3c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8082e3e:	f3bf 8f5b 	dmb	ish
 8082e42:	1d2b      	adds	r3, r5, #4
 8082e44:	e853 6f00 	ldrex	r6, [r3]
 8082e48:	e843 4200 	strex	r2, r4, [r3]
 8082e4c:	2a00      	cmp	r2, #0
 8082e4e:	d1f9      	bne.n	8082e44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8082e50:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082e54:	2e00      	cmp	r6, #0
 8082e56:	d0de      	beq.n	8082e16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8082e58:	4620      	mov	r0, r4
 8082e5a:	f7fe ffc3 	bl	8081de4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8082e5e:	4607      	mov	r7, r0
 8082e60:	b160      	cbz	r0, 8082e7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082e62:	4630      	mov	r0, r6
 8082e64:	f105 010c 	add.w	r1, r5, #12
 8082e68:	f7ff fe15 	bl	8082a96 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8082e6c:	4630      	mov	r0, r6
 8082e6e:	f7ff fc96 	bl	808279e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8082e72:	2110      	movs	r1, #16
 8082e74:	4630      	mov	r0, r6
 8082e76:	f000 fc0c 	bl	8083692 <_ZdlPvj>
 8082e7a:	e7cc      	b.n	8082e16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082e7c:	4631      	mov	r1, r6
 8082e7e:	a803      	add	r0, sp, #12
 8082e80:	f7ff ff7c 	bl	8082d7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082e84:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082e86:	2010      	movs	r0, #16
 8082e88:	f88d 301c 	strb.w	r3, [sp, #28]
 8082e8c:	f7fd f915 	bl	80800ba <_Znwj>
 8082e90:	4605      	mov	r5, r0
 8082e92:	b1d0      	cbz	r0, 8082eca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8082e94:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082e96:	2014      	movs	r0, #20
 8082e98:	f7fd f90f 	bl	80800ba <_Znwj>
 8082e9c:	4604      	mov	r4, r0
 8082e9e:	b178      	cbz	r0, 8082ec0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8082ea0:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082ea2:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082ea4:	a803      	add	r0, sp, #12
 8082ea6:	f7ff fc89 	bl	80827bc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082eaa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082eac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082eae:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082eb0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8082eb2:	9205      	str	r2, [sp, #20]
 8082eb4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082eb6:	60e3      	str	r3, [r4, #12]
 8082eb8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8082ebc:	9206      	str	r2, [sp, #24]
 8082ebe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8082ec0:	4b06      	ldr	r3, [pc, #24]	; (8082edc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082ec2:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082ec4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082ec6:	4b06      	ldr	r3, [pc, #24]	; (8082ee0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8082ec8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8082eca:	a803      	add	r0, sp, #12
 8082ecc:	f7ff fc67 	bl	808279e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082ed0:	2200      	movs	r2, #0
 8082ed2:	4629      	mov	r1, r5
 8082ed4:	4803      	ldr	r0, [pc, #12]	; (8082ee4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8082ed6:	f7fe ff8d 	bl	8081df4 <application_thread_invoke>
 8082eda:	e7c7      	b.n	8082e6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8082edc:	08082aa9 	.word	0x08082aa9
 8082ee0:	08082d9b 	.word	0x08082d9b
 8082ee4:	080832e9 	.word	0x080832e9

08082ee8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082ee8:	4770      	bx	lr

08082eea <_ZN9IPAddressD0Ev>:
 8082eea:	b510      	push	{r4, lr}
 8082eec:	4604      	mov	r4, r0
 8082eee:	2108      	movs	r1, #8
 8082ef0:	f000 fbcf 	bl	8083692 <_ZdlPvj>
 8082ef4:	4620      	mov	r0, r4
 8082ef6:	bd10      	pop	{r4, pc}

08082ef8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082efa:	460e      	mov	r6, r1
 8082efc:	2400      	movs	r4, #0
 8082efe:	f100 0708 	add.w	r7, r0, #8
 8082f02:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8082f04:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082f08:	220a      	movs	r2, #10
 8082f0a:	4630      	mov	r0, r6
 8082f0c:	f7ff fabb 	bl	8082486 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082f10:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082f12:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082f14:	d101      	bne.n	8082f1a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082f16:	4620      	mov	r0, r4
 8082f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082f1a:	2c00      	cmp	r4, #0
 8082f1c:	d0f2      	beq.n	8082f04 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082f1e:	212e      	movs	r1, #46	; 0x2e
 8082f20:	4630      	mov	r0, r6
 8082f22:	f7ff faa1 	bl	8082468 <_ZN5Print5printEc>
 8082f26:	4404      	add	r4, r0
 8082f28:	e7ec      	b.n	8082f04 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08082f2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082f2c:	4a02      	ldr	r2, [pc, #8]	; (8082f38 <_ZN9IPAddressC1Ev+0xc>)
 8082f2e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082f30:	2200      	movs	r2, #0
 8082f32:	6042      	str	r2, [r0, #4]
}
 8082f34:	4770      	bx	lr
 8082f36:	bf00      	nop
 8082f38:	080864bc 	.word	0x080864bc

08082f3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8082f3c:	4a02      	ldr	r2, [pc, #8]	; (8082f48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082f3e:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8082f40:	680a      	ldr	r2, [r1, #0]
 8082f42:	6042      	str	r2, [r0, #4]
}
 8082f44:	4770      	bx	lr
 8082f46:	bf00      	nop
 8082f48:	080864bc 	.word	0x080864bc

08082f4c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8082f4c:	4a01      	ldr	r2, [pc, #4]	; (8082f54 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8082f4e:	e9c0 2100 	strd	r2, r1, [r0]
}
 8082f52:	4770      	bx	lr
 8082f54:	080864bc 	.word	0x080864bc

08082f58 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8082f58:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082f5a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082f5e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8082f62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082f66:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8082f6a:	6044      	str	r4, [r0, #4]
}
 8082f6c:	bd10      	pop	{r4, pc}
	...

08082f70 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082f72:	4d04      	ldr	r5, [pc, #16]	; (8082f84 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082f74:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082f76:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082f7a:	9500      	str	r5, [sp, #0]
 8082f7c:	f7ff ffec 	bl	8082f58 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082f80:	b003      	add	sp, #12
 8082f82:	bd30      	pop	{r4, r5, pc}
 8082f84:	080864bc 	.word	0x080864bc

08082f88 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082f88:	7441      	strb	r1, [r0, #17]
}
 8082f8a:	4770      	bx	lr

08082f8c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8082f8c:	4770      	bx	lr

08082f8e <_ZN9USBSerial4readEv>:
{
 8082f8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8082f90:	2100      	movs	r1, #0
 8082f92:	7c00      	ldrb	r0, [r0, #16]
 8082f94:	f7fe feee 	bl	8081d74 <HAL_USB_USART_Receive_Data>
}
 8082f98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082f9c:	bd08      	pop	{r3, pc}

08082f9e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8082f9e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8082fa0:	2101      	movs	r1, #1
 8082fa2:	7c00      	ldrb	r0, [r0, #16]
 8082fa4:	f7fe fee6 	bl	8081d74 <HAL_USB_USART_Receive_Data>
}
 8082fa8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8082fac:	bd08      	pop	{r3, pc}

08082fae <_ZN9USBSerial17availableForWriteEv>:
{
 8082fae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8082fb0:	7c00      	ldrb	r0, [r0, #16]
 8082fb2:	f7fe fed7 	bl	8081d64 <HAL_USB_USART_Available_Data_For_Write>
}
 8082fb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082fba:	bd08      	pop	{r3, pc}

08082fbc <_ZN9USBSerial9availableEv>:
{
 8082fbc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8082fbe:	7c00      	ldrb	r0, [r0, #16]
 8082fc0:	f7fe fec8 	bl	8081d54 <HAL_USB_USART_Available_Data>
}
 8082fc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082fc8:	bd08      	pop	{r3, pc}

08082fca <_ZN9USBSerial5writeEh>:
{
 8082fca:	b538      	push	{r3, r4, r5, lr}
 8082fcc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082fce:	7c00      	ldrb	r0, [r0, #16]
{
 8082fd0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8082fd2:	f7fe fec7 	bl	8081d64 <HAL_USB_USART_Available_Data_For_Write>
 8082fd6:	2800      	cmp	r0, #0
 8082fd8:	dc01      	bgt.n	8082fde <_ZN9USBSerial5writeEh+0x14>
 8082fda:	7c60      	ldrb	r0, [r4, #17]
 8082fdc:	b128      	cbz	r0, 8082fea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8082fde:	4629      	mov	r1, r5
 8082fe0:	7c20      	ldrb	r0, [r4, #16]
 8082fe2:	f7fe fecf 	bl	8081d84 <HAL_USB_USART_Send_Data>
 8082fe6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8082fea:	bd38      	pop	{r3, r4, r5, pc}

08082fec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8082fec:	7c00      	ldrb	r0, [r0, #16]
 8082fee:	f7fe bed1 	b.w	8081d94 <HAL_USB_USART_Flush_Data>

08082ff2 <_ZN9USBSerialD0Ev>:
 8082ff2:	b510      	push	{r4, lr}
 8082ff4:	4604      	mov	r4, r0
 8082ff6:	2114      	movs	r1, #20
 8082ff8:	f000 fb4b 	bl	8083692 <_ZdlPvj>
 8082ffc:	4620      	mov	r0, r4
 8082ffe:	bd10      	pop	{r4, pc}

08083000 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083000:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8083002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083006:	4604      	mov	r4, r0
 8083008:	4608      	mov	r0, r1
 808300a:	2100      	movs	r1, #0
 808300c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8083010:	4b04      	ldr	r3, [pc, #16]	; (8083024 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8083012:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083014:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8083016:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8083018:	4611      	mov	r1, r2
  _blocking = true;
 808301a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 808301c:	f7fe fe92 	bl	8081d44 <HAL_USB_USART_Init>
}
 8083020:	4620      	mov	r0, r4
 8083022:	bd10      	pop	{r4, pc}
 8083024:	080864d0 	.word	0x080864d0

08083028 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8083028:	b510      	push	{r4, lr}
 808302a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808302c:	2214      	movs	r2, #20
 808302e:	2100      	movs	r1, #0
 8083030:	f001 f8ec 	bl	808420c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083034:	4b05      	ldr	r3, [pc, #20]	; (808304c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083036:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8083038:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808303a:	4b05      	ldr	r3, [pc, #20]	; (8083050 <_Z19acquireSerialBufferv+0x28>)
 808303c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808303e:	f240 1301 	movw	r3, #257	; 0x101
 8083042:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083044:	2381      	movs	r3, #129	; 0x81
 8083046:	8223      	strh	r3, [r4, #16]
}
 8083048:	bd10      	pop	{r4, pc}
 808304a:	bf00      	nop
 808304c:	20000568 	.word	0x20000568
 8083050:	20000669 	.word	0x20000669

08083054 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8083054:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083056:	4d0f      	ldr	r5, [pc, #60]	; (8083094 <_Z16_fetch_usbserialv+0x40>)
{
 8083058:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808305a:	a801      	add	r0, sp, #4
 808305c:	f7ff ffe4 	bl	8083028 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083060:	7829      	ldrb	r1, [r5, #0]
 8083062:	f3bf 8f5b 	dmb	ish
 8083066:	f011 0401 	ands.w	r4, r1, #1
 808306a:	d110      	bne.n	808308e <_Z16_fetch_usbserialv+0x3a>
 808306c:	4628      	mov	r0, r5
 808306e:	f7fd f82a 	bl	80800c6 <__cxa_guard_acquire>
 8083072:	b160      	cbz	r0, 808308e <_Z16_fetch_usbserialv+0x3a>
 8083074:	4621      	mov	r1, r4
 8083076:	aa01      	add	r2, sp, #4
 8083078:	4807      	ldr	r0, [pc, #28]	; (8083098 <_Z16_fetch_usbserialv+0x44>)
 808307a:	f7ff ffc1 	bl	8083000 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808307e:	4628      	mov	r0, r5
 8083080:	f7fd f826 	bl	80800d0 <__cxa_guard_release>
 8083084:	4a05      	ldr	r2, [pc, #20]	; (808309c <_Z16_fetch_usbserialv+0x48>)
 8083086:	4906      	ldr	r1, [pc, #24]	; (80830a0 <_Z16_fetch_usbserialv+0x4c>)
 8083088:	4803      	ldr	r0, [pc, #12]	; (8083098 <_Z16_fetch_usbserialv+0x44>)
 808308a:	f000 fafd 	bl	8083688 <__aeabi_atexit>
	return _usbserial;
}
 808308e:	4802      	ldr	r0, [pc, #8]	; (8083098 <_Z16_fetch_usbserialv+0x44>)
 8083090:	b007      	add	sp, #28
 8083092:	bd30      	pop	{r4, r5, pc}
 8083094:	20000538 	.word	0x20000538
 8083098:	20000540 	.word	0x20000540
 808309c:	200001e8 	.word	0x200001e8
 80830a0:	08082f8d 	.word	0x08082f8d

080830a4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80830a4:	b510      	push	{r4, lr}
 80830a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80830a8:	2214      	movs	r2, #20
 80830aa:	2100      	movs	r1, #0
 80830ac:	f001 f8ae 	bl	808420c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80830b0:	4b05      	ldr	r3, [pc, #20]	; (80830c8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80830b2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80830b4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80830b6:	4b05      	ldr	r3, [pc, #20]	; (80830cc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80830b8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80830ba:	f240 1301 	movw	r3, #257	; 0x101
 80830be:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80830c0:	2381      	movs	r3, #129	; 0x81
 80830c2:	8223      	strh	r3, [r4, #16]
}
 80830c4:	bd10      	pop	{r4, pc}
 80830c6:	bf00      	nop
 80830c8:	200006ea 	.word	0x200006ea
 80830cc:	200007eb 	.word	0x200007eb

080830d0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80830d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80830d2:	4c0f      	ldr	r4, [pc, #60]	; (8083110 <_Z17_fetch_usbserial1v+0x40>)
{
 80830d4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80830d6:	a801      	add	r0, sp, #4
 80830d8:	f7ff ffe4 	bl	80830a4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80830dc:	7823      	ldrb	r3, [r4, #0]
 80830de:	f3bf 8f5b 	dmb	ish
 80830e2:	07db      	lsls	r3, r3, #31
 80830e4:	d410      	bmi.n	8083108 <_Z17_fetch_usbserial1v+0x38>
 80830e6:	4620      	mov	r0, r4
 80830e8:	f7fc ffed 	bl	80800c6 <__cxa_guard_acquire>
 80830ec:	b160      	cbz	r0, 8083108 <_Z17_fetch_usbserial1v+0x38>
 80830ee:	2101      	movs	r1, #1
 80830f0:	aa01      	add	r2, sp, #4
 80830f2:	4808      	ldr	r0, [pc, #32]	; (8083114 <_Z17_fetch_usbserial1v+0x44>)
 80830f4:	f7ff ff84 	bl	8083000 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80830f8:	4620      	mov	r0, r4
 80830fa:	f7fc ffe9 	bl	80800d0 <__cxa_guard_release>
 80830fe:	4a06      	ldr	r2, [pc, #24]	; (8083118 <_Z17_fetch_usbserial1v+0x48>)
 8083100:	4906      	ldr	r1, [pc, #24]	; (808311c <_Z17_fetch_usbserial1v+0x4c>)
 8083102:	4804      	ldr	r0, [pc, #16]	; (8083114 <_Z17_fetch_usbserial1v+0x44>)
 8083104:	f000 fac0 	bl	8083688 <__aeabi_atexit>
  return _usbserial1;
}
 8083108:	4802      	ldr	r0, [pc, #8]	; (8083114 <_Z17_fetch_usbserial1v+0x44>)
 808310a:	b006      	add	sp, #24
 808310c:	bd10      	pop	{r4, pc}
 808310e:	bf00      	nop
 8083110:	2000053c 	.word	0x2000053c
 8083114:	20000554 	.word	0x20000554
 8083118:	200001e8 	.word	0x200001e8
 808311c:	08082f8d 	.word	0x08082f8d

08083120 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8083120:	2200      	movs	r2, #0
 8083122:	6840      	ldr	r0, [r0, #4]
 8083124:	4611      	mov	r1, r2
 8083126:	f7fe beab 	b.w	8081e80 <network_ready>

0808312a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808312a:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808312c:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808312e:	b085      	sub	sp, #20
 8083130:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083132:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8083134:	460f      	mov	r7, r1
 8083136:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8083138:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808313a:	f001 f8ce 	bl	80842da <strlen>
 808313e:	687b      	ldr	r3, [r7, #4]
 8083140:	b281      	uxth	r1, r0
 8083142:	9600      	str	r6, [sp, #0]
 8083144:	4628      	mov	r0, r5
 8083146:	aa03      	add	r2, sp, #12
 8083148:	f7fe fdec 	bl	8081d24 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808314c:	b130      	cbz	r0, 808315c <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808314e:	4631      	mov	r1, r6
 8083150:	4620      	mov	r0, r4
 8083152:	f7ff fefb 	bl	8082f4c <_ZN9IPAddressC1Em>
    }
 8083156:	4620      	mov	r0, r4
 8083158:	b005      	add	sp, #20
 808315a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808315c:	4620      	mov	r0, r4
 808315e:	a903      	add	r1, sp, #12
 8083160:	f7ff feec 	bl	8082f3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8083164:	e7f7      	b.n	8083156 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08083166 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8083166:	2200      	movs	r2, #0
 8083168:	6840      	ldr	r0, [r0, #4]
 808316a:	4611      	mov	r1, r2
 808316c:	f7fe bea8 	b.w	8081ec0 <network_listening>

08083170 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8083170:	2200      	movs	r2, #0
 8083172:	6840      	ldr	r0, [r0, #4]
 8083174:	4611      	mov	r1, r2
 8083176:	f7fe beb3 	b.w	8081ee0 <network_get_listen_timeout>

0808317a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808317a:	2200      	movs	r2, #0
 808317c:	6840      	ldr	r0, [r0, #4]
 808317e:	f7fe bea7 	b.w	8081ed0 <network_set_listen_timeout>

08083182 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8083182:	2200      	movs	r2, #0
 8083184:	6840      	ldr	r0, [r0, #4]
 8083186:	f081 0101 	eor.w	r1, r1, #1
 808318a:	f7fe be91 	b.w	8081eb0 <network_listen>

0808318e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 808318e:	2300      	movs	r3, #0
 8083190:	6840      	ldr	r0, [r0, #4]
 8083192:	461a      	mov	r2, r3
 8083194:	4619      	mov	r1, r3
 8083196:	f7fe be83 	b.w	8081ea0 <network_off>

0808319a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808319a:	2300      	movs	r3, #0
 808319c:	6840      	ldr	r0, [r0, #4]
 808319e:	461a      	mov	r2, r3
 80831a0:	4619      	mov	r1, r3
 80831a2:	f7fe be75 	b.w	8081e90 <network_on>

080831a6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80831a6:	2200      	movs	r2, #0
 80831a8:	6840      	ldr	r0, [r0, #4]
 80831aa:	4611      	mov	r1, r2
 80831ac:	f7fe be58 	b.w	8081e60 <network_connecting>

080831b0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80831b0:	2200      	movs	r2, #0
 80831b2:	2102      	movs	r1, #2
 80831b4:	6840      	ldr	r0, [r0, #4]
 80831b6:	f7fe be5b 	b.w	8081e70 <network_disconnect>

080831ba <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80831ba:	2300      	movs	r3, #0
 80831bc:	6840      	ldr	r0, [r0, #4]
 80831be:	461a      	mov	r2, r3
 80831c0:	f7fe be46 	b.w	8081e50 <network_connect>

080831c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80831c4:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80831c6:	2428      	movs	r4, #40	; 0x28
 80831c8:	4b07      	ldr	r3, [pc, #28]	; (80831e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80831ca:	4622      	mov	r2, r4
 80831cc:	4618      	mov	r0, r3
 80831ce:	2100      	movs	r1, #0
 80831d0:	f001 f81c 	bl	808420c <memset>
        cid = -1;
 80831d4:	f04f 32ff 	mov.w	r2, #4294967295
 80831d8:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80831da:	2204      	movs	r2, #4
 80831dc:	4b03      	ldr	r3, [pc, #12]	; (80831ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80831de:	8004      	strh	r4, [r0, #0]
 80831e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80831e2:	4a03      	ldr	r2, [pc, #12]	; (80831f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 80831e4:	601a      	str	r2, [r3, #0]
 80831e6:	bd10      	pop	{r4, pc}
 80831e8:	20000874 	.word	0x20000874
 80831ec:	2000086c 	.word	0x2000086c
 80831f0:	08086500 	.word	0x08086500

080831f4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80831f4:	4770      	bx	lr

080831f6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80831f6:	7441      	strb	r1, [r0, #17]
}
 80831f8:	4770      	bx	lr

080831fa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80831fa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80831fc:	7c00      	ldrb	r0, [r0, #16]
 80831fe:	f7fe fd19 	bl	8081c34 <hal_usart_available_data_for_write>
}
 8083202:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083206:	bd08      	pop	{r3, pc}

08083208 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8083208:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808320a:	7c00      	ldrb	r0, [r0, #16]
 808320c:	f7fe fcea 	bl	8081be4 <hal_usart_available>
}
 8083210:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083214:	bd08      	pop	{r3, pc}

08083216 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8083216:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 8083218:	7c00      	ldrb	r0, [r0, #16]
 808321a:	f7fe fcf3 	bl	8081c04 <hal_usart_peek>
}
 808321e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083222:	bd08      	pop	{r3, pc}

08083224 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8083224:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 8083226:	7c00      	ldrb	r0, [r0, #16]
 8083228:	f7fe fce4 	bl	8081bf4 <hal_usart_read>
}
 808322c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083230:	bd08      	pop	{r3, pc}

08083232 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8083232:	7c00      	ldrb	r0, [r0, #16]
 8083234:	f7fe bcee 	b.w	8081c14 <hal_usart_flush>

08083238 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083238:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808323a:	7c46      	ldrb	r6, [r0, #17]
{
 808323c:	4604      	mov	r4, r0
 808323e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083240:	b12e      	cbz	r6, 808324e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8083242:	4629      	mov	r1, r5
 8083244:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8083246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808324a:	f7fe bcc3 	b.w	8081bd4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808324e:	7c00      	ldrb	r0, [r0, #16]
 8083250:	f7fe fcf0 	bl	8081c34 <hal_usart_available_data_for_write>
 8083254:	2800      	cmp	r0, #0
 8083256:	dcf4      	bgt.n	8083242 <_ZN11USARTSerial5writeEh+0xa>
}
 8083258:	4630      	mov	r0, r6
 808325a:	bd70      	pop	{r4, r5, r6, pc}

0808325c <_ZN11USARTSerialD0Ev>:
 808325c:	b510      	push	{r4, lr}
 808325e:	4604      	mov	r4, r0
 8083260:	2114      	movs	r1, #20
 8083262:	f000 fa16 	bl	8083692 <_ZdlPvj>
 8083266:	4620      	mov	r0, r4
 8083268:	bd10      	pop	{r4, pc}
	...

0808326c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 808326c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8083270:	b510      	push	{r4, lr}
 8083272:	4604      	mov	r4, r0
 8083274:	4608      	mov	r0, r1
 8083276:	4611      	mov	r1, r2
 8083278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808327c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8083280:	4a04      	ldr	r2, [pc, #16]	; (8083294 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8083282:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8083284:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8083286:	2201      	movs	r2, #1
 8083288:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808328a:	461a      	mov	r2, r3
 808328c:	f7fe fc9a 	bl	8081bc4 <hal_usart_init>
}
 8083290:	4620      	mov	r0, r4
 8083292:	bd10      	pop	{r4, pc}
 8083294:	0808653c 	.word	0x0808653c

08083298 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083298:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808329a:	4d0d      	ldr	r5, [pc, #52]	; (80832d0 <_Z22__fetch_global_Serial1v+0x38>)
 808329c:	7829      	ldrb	r1, [r5, #0]
 808329e:	f3bf 8f5b 	dmb	ish
 80832a2:	f011 0401 	ands.w	r4, r1, #1
 80832a6:	d111      	bne.n	80832cc <_Z22__fetch_global_Serial1v+0x34>
 80832a8:	4628      	mov	r0, r5
 80832aa:	f7fc ff0c 	bl	80800c6 <__cxa_guard_acquire>
 80832ae:	b168      	cbz	r0, 80832cc <_Z22__fetch_global_Serial1v+0x34>
 80832b0:	4621      	mov	r1, r4
 80832b2:	4a08      	ldr	r2, [pc, #32]	; (80832d4 <_Z22__fetch_global_Serial1v+0x3c>)
 80832b4:	4b08      	ldr	r3, [pc, #32]	; (80832d8 <_Z22__fetch_global_Serial1v+0x40>)
 80832b6:	4809      	ldr	r0, [pc, #36]	; (80832dc <_Z22__fetch_global_Serial1v+0x44>)
 80832b8:	f7ff ffd8 	bl	808326c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80832bc:	4628      	mov	r0, r5
 80832be:	f7fc ff07 	bl	80800d0 <__cxa_guard_release>
 80832c2:	4a07      	ldr	r2, [pc, #28]	; (80832e0 <_Z22__fetch_global_Serial1v+0x48>)
 80832c4:	4907      	ldr	r1, [pc, #28]	; (80832e4 <_Z22__fetch_global_Serial1v+0x4c>)
 80832c6:	4805      	ldr	r0, [pc, #20]	; (80832dc <_Z22__fetch_global_Serial1v+0x44>)
 80832c8:	f000 f9de 	bl	8083688 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80832cc:	4803      	ldr	r0, [pc, #12]	; (80832dc <_Z22__fetch_global_Serial1v+0x44>)
 80832ce:	bd38      	pop	{r3, r4, r5, pc}
 80832d0:	2000089c 	.word	0x2000089c
 80832d4:	200008a0 	.word	0x200008a0
 80832d8:	20000924 	.word	0x20000924
 80832dc:	200009a8 	.word	0x200009a8
 80832e0:	200001e8 	.word	0x200001e8
 80832e4:	080831f5 	.word	0x080831f5

080832e8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80832e8:	b510      	push	{r4, lr}
      if (_M_empty())
 80832ea:	6883      	ldr	r3, [r0, #8]
 80832ec:	4604      	mov	r4, r0
 80832ee:	b90b      	cbnz	r3, 80832f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80832f0:	f000 f9d3 	bl	808369a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80832f4:	68c3      	ldr	r3, [r0, #12]
 80832f6:	4798      	blx	r3
      if (_M_manager)
 80832f8:	68a3      	ldr	r3, [r4, #8]
 80832fa:	b11b      	cbz	r3, 8083304 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80832fc:	2203      	movs	r2, #3
 80832fe:	4621      	mov	r1, r4
 8083300:	4620      	mov	r0, r4
 8083302:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8083304:	4620      	mov	r0, r4
}
 8083306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808330a:	2110      	movs	r1, #16
 808330c:	f000 b9c1 	b.w	8083692 <_ZdlPvj>

08083310 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8083310:	4770      	bx	lr

08083312 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8083312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083314:	4606      	mov	r6, r0
 8083316:	4615      	mov	r5, r2
 8083318:	460c      	mov	r4, r1
 808331a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808331c:	42bc      	cmp	r4, r7
 808331e:	d006      	beq.n	808332e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8083320:	6833      	ldr	r3, [r6, #0]
 8083322:	4630      	mov	r0, r6
 8083324:	689b      	ldr	r3, [r3, #8]
 8083326:	f814 1b01 	ldrb.w	r1, [r4], #1
 808332a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808332c:	e7f6      	b.n	808331c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808332e:	4628      	mov	r0, r5
 8083330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083332 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8083332:	2200      	movs	r2, #0
 8083334:	7c00      	ldrb	r0, [r0, #16]
 8083336:	f7fe bc9d 	b.w	8081c74 <hal_i2c_write>

0808333a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808333a:	2100      	movs	r1, #0
 808333c:	7c00      	ldrb	r0, [r0, #16]
 808333e:	f7fe bca1 	b.w	8081c84 <hal_i2c_available>

08083342 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 8083342:	2100      	movs	r1, #0
 8083344:	7c00      	ldrb	r0, [r0, #16]
 8083346:	f7fe bca5 	b.w	8081c94 <hal_i2c_read>

0808334a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808334a:	2100      	movs	r1, #0
 808334c:	7c00      	ldrb	r0, [r0, #16]
 808334e:	f7fe bca9 	b.w	8081ca4 <hal_i2c_peek>

08083352 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 8083352:	2100      	movs	r1, #0
 8083354:	7c00      	ldrb	r0, [r0, #16]
 8083356:	f7fe bcad 	b.w	8081cb4 <hal_i2c_flush>

0808335a <_ZN7TwoWireD0Ev>:
 808335a:	b510      	push	{r4, lr}
 808335c:	4604      	mov	r4, r0
 808335e:	2114      	movs	r1, #20
 8083360:	f000 f997 	bl	8083692 <_ZdlPvj>
 8083364:	4620      	mov	r0, r4
 8083366:	bd10      	pop	{r4, pc}

08083368 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8083368:	b510      	push	{r4, lr}
 808336a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808336e:	4604      	mov	r4, r0
 8083370:	4608      	mov	r0, r1
 8083372:	2100      	movs	r1, #0
 8083374:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8083378:	4b03      	ldr	r3, [pc, #12]	; (8083388 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808337a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808337c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808337e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8083380:	f7fe fca8 	bl	8081cd4 <hal_i2c_init>
}
 8083384:	4620      	mov	r0, r4
 8083386:	bd10      	pop	{r4, pc}
 8083388:	0808656c 	.word	0x0808656c

0808338c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808338c:	2300      	movs	r3, #0
 808338e:	7c00      	ldrb	r0, [r0, #16]
 8083390:	461a      	mov	r2, r3
 8083392:	4619      	mov	r1, r3
 8083394:	f7fe bc56 	b.w	8081c44 <hal_i2c_begin>

08083398 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8083398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808339a:	2200      	movs	r2, #0
 808339c:	2314      	movs	r3, #20
 808339e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80833a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80833a6:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80833a8:	7c00      	ldrb	r0, [r0, #16]
 80833aa:	f88d 3008 	strb.w	r3, [sp, #8]
 80833ae:	684b      	ldr	r3, [r1, #4]
 80833b0:	9303      	str	r3, [sp, #12]
 80833b2:	68cb      	ldr	r3, [r1, #12]
 80833b4:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80833b6:	7a0b      	ldrb	r3, [r1, #8]
 80833b8:	a901      	add	r1, sp, #4
 80833ba:	9305      	str	r3, [sp, #20]
 80833bc:	f7fe fc92 	bl	8081ce4 <hal_i2c_request_ex>
}
 80833c0:	b007      	add	sp, #28
 80833c2:	f85d fb04 	ldr.w	pc, [sp], #4

080833c6 <_ZN7TwoWire11requestFromEhjh>:
{
 80833c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80833c8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80833ca:	f88d 1000 	strb.w	r1, [sp]
 80833ce:	f04f 0164 	mov.w	r1, #100	; 0x64
 80833d2:	bf18      	it	ne
 80833d4:	2301      	movne	r3, #1
 80833d6:	9103      	str	r1, [sp, #12]
 80833d8:	4669      	mov	r1, sp
    size_ = size;
 80833da:	9201      	str	r2, [sp, #4]
 80833dc:	f88d 3008 	strb.w	r3, [sp, #8]
 80833e0:	f7ff ffda 	bl	8083398 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80833e4:	b005      	add	sp, #20
 80833e6:	f85d fb04 	ldr.w	pc, [sp], #4

080833ea <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80833ea:	2301      	movs	r3, #1
 80833ec:	f7ff bfeb 	b.w	80833c6 <_ZN7TwoWire11requestFromEhjh>

080833f0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80833f0:	2200      	movs	r2, #0
 80833f2:	7c00      	ldrb	r0, [r0, #16]
 80833f4:	f7fe bc2e 	b.w	8081c54 <hal_i2c_begin_transmission>

080833f8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80833f8:	2200      	movs	r2, #0
 80833fa:	7c00      	ldrb	r0, [r0, #16]
 80833fc:	f7fe bc32 	b.w	8081c64 <hal_i2c_end_transmission>

08083400 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 8083400:	2101      	movs	r1, #1
 8083402:	f7ff bff9 	b.w	80833f8 <_ZN7TwoWire15endTransmissionEh>

08083406 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8083406:	2300      	movs	r3, #0
 8083408:	6840      	ldr	r0, [r0, #4]
 808340a:	461a      	mov	r2, r3
 808340c:	f7fe bd20 	b.w	8081e50 <network_connect>

08083410 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8083410:	2200      	movs	r2, #0
 8083412:	2102      	movs	r1, #2
 8083414:	6840      	ldr	r0, [r0, #4]
 8083416:	f7fe bd2b 	b.w	8081e70 <network_disconnect>

0808341a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808341a:	2200      	movs	r2, #0
 808341c:	6840      	ldr	r0, [r0, #4]
 808341e:	4611      	mov	r1, r2
 8083420:	f7fe bd1e 	b.w	8081e60 <network_connecting>

08083424 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8083424:	2200      	movs	r2, #0
 8083426:	6840      	ldr	r0, [r0, #4]
 8083428:	4611      	mov	r1, r2
 808342a:	f7fe bd29 	b.w	8081e80 <network_ready>

0808342e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808342e:	2300      	movs	r3, #0
 8083430:	6840      	ldr	r0, [r0, #4]
 8083432:	461a      	mov	r2, r3
 8083434:	4619      	mov	r1, r3
 8083436:	f7fe bd2b 	b.w	8081e90 <network_on>

0808343a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808343a:	2300      	movs	r3, #0
 808343c:	6840      	ldr	r0, [r0, #4]
 808343e:	461a      	mov	r2, r3
 8083440:	4619      	mov	r1, r3
 8083442:	f7fe bd2d 	b.w	8081ea0 <network_off>

08083446 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 8083446:	2100      	movs	r1, #0
 8083448:	6840      	ldr	r0, [r0, #4]
 808344a:	f7fe bd51 	b.w	8081ef0 <network_is_on>

0808344e <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 808344e:	2100      	movs	r1, #0
 8083450:	6840      	ldr	r0, [r0, #4]
 8083452:	f7fe bd55 	b.w	8081f00 <network_is_off>

08083456 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8083456:	2200      	movs	r2, #0
 8083458:	6840      	ldr	r0, [r0, #4]
 808345a:	f081 0101 	eor.w	r1, r1, #1
 808345e:	f7fe bd27 	b.w	8081eb0 <network_listen>

08083462 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8083462:	2200      	movs	r2, #0
 8083464:	6840      	ldr	r0, [r0, #4]
 8083466:	f7fe bd33 	b.w	8081ed0 <network_set_listen_timeout>

0808346a <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808346a:	2200      	movs	r2, #0
 808346c:	6840      	ldr	r0, [r0, #4]
 808346e:	4611      	mov	r1, r2
 8083470:	f7fe bd36 	b.w	8081ee0 <network_get_listen_timeout>

08083474 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8083474:	2200      	movs	r2, #0
 8083476:	6840      	ldr	r0, [r0, #4]
 8083478:	4611      	mov	r1, r2
 808347a:	f7fe bd21 	b.w	8081ec0 <network_listening>
	...

08083480 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8083480:	b570      	push	{r4, r5, r6, lr}
 8083482:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8083484:	2600      	movs	r6, #0
 8083486:	b086      	sub	sp, #24
 8083488:	4604      	mov	r4, r0
    IPAddress addr;
 808348a:	a804      	add	r0, sp, #16
 808348c:	f7ff fd4e 	bl	8082f2c <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083490:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8083492:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8083494:	f000 ff21 	bl	80842da <strlen>
 8083498:	4b0a      	ldr	r3, [pc, #40]	; (80834c4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808349a:	9600      	str	r6, [sp, #0]
 808349c:	b281      	uxth	r1, r0
 808349e:	685b      	ldr	r3, [r3, #4]
 80834a0:	4628      	mov	r0, r5
 80834a2:	aa03      	add	r2, sp, #12
 80834a4:	f7fe fc3e 	bl	8081d24 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80834a8:	b130      	cbz	r0, 80834b8 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80834aa:	4631      	mov	r1, r6
 80834ac:	4620      	mov	r0, r4
 80834ae:	f7ff fd4d 	bl	8082f4c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80834b2:	4620      	mov	r0, r4
 80834b4:	b006      	add	sp, #24
 80834b6:	bd70      	pop	{r4, r5, r6, pc}
 80834b8:	4620      	mov	r0, r4
 80834ba:	a903      	add	r1, sp, #12
 80834bc:	f7ff fd3e 	bl	8082f3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80834c0:	e7f7      	b.n	80834b2 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 80834c2:	bf00      	nop
 80834c4:	2000086c 	.word	0x2000086c

080834c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80834c8:	4b02      	ldr	r3, [pc, #8]	; (80834d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80834ca:	4a03      	ldr	r2, [pc, #12]	; (80834d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80834cc:	601a      	str	r2, [r3, #0]
 80834ce:	2200      	movs	r2, #0
 80834d0:	605a      	str	r2, [r3, #4]

} // spark
 80834d2:	4770      	bx	lr
 80834d4:	200009bc 	.word	0x200009bc
 80834d8:	08086594 	.word	0x08086594

080834dc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80834dc:	b510      	push	{r4, lr}
 80834de:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80834e0:	6880      	ldr	r0, [r0, #8]
 80834e2:	b108      	cbz	r0, 80834e8 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80834e4:	f7fe fb66 	bl	8081bb4 <os_mutex_recursive_destroy>
 80834e8:	4620      	mov	r0, r4
 80834ea:	bd10      	pop	{r4, pc}

080834ec <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80834ec:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80834ee:	b570      	push	{r4, r5, r6, lr}
 80834f0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80834f2:	d901      	bls.n	80834f8 <pinAvailable+0xc>
    return false;
 80834f4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80834f6:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80834f8:	f1a0 030d 	sub.w	r3, r0, #13
 80834fc:	2b02      	cmp	r3, #2
 80834fe:	d90b      	bls.n	8083518 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8083500:	2801      	cmp	r0, #1
 8083502:	d826      	bhi.n	8083552 <pinAvailable+0x66>
 8083504:	f000 f898 	bl	8083638 <_Z19__fetch_global_Wirev>
 8083508:	2100      	movs	r1, #0
 808350a:	7c00      	ldrb	r0, [r0, #16]
 808350c:	f7fe fbda 	bl	8081cc4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8083510:	f080 0001 	eor.w	r0, r0, #1
 8083514:	b2c0      	uxtb	r0, r0
 8083516:	e7ee      	b.n	80834f6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8083518:	4e13      	ldr	r6, [pc, #76]	; (8083568 <pinAvailable+0x7c>)
 808351a:	7831      	ldrb	r1, [r6, #0]
 808351c:	f3bf 8f5b 	dmb	ish
 8083520:	f011 0501 	ands.w	r5, r1, #1
 8083524:	d10f      	bne.n	8083546 <pinAvailable+0x5a>
 8083526:	4630      	mov	r0, r6
 8083528:	f7fc fdcd 	bl	80800c6 <__cxa_guard_acquire>
 808352c:	b158      	cbz	r0, 8083546 <pinAvailable+0x5a>
 808352e:	4629      	mov	r1, r5
 8083530:	480e      	ldr	r0, [pc, #56]	; (808356c <pinAvailable+0x80>)
 8083532:	f7fe fd85 	bl	8082040 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8083536:	4630      	mov	r0, r6
 8083538:	f7fc fdca 	bl	80800d0 <__cxa_guard_release>
 808353c:	4a0c      	ldr	r2, [pc, #48]	; (8083570 <pinAvailable+0x84>)
 808353e:	490d      	ldr	r1, [pc, #52]	; (8083574 <pinAvailable+0x88>)
 8083540:	480a      	ldr	r0, [pc, #40]	; (808356c <pinAvailable+0x80>)
 8083542:	f000 f8a1 	bl	8083688 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8083546:	4b09      	ldr	r3, [pc, #36]	; (808356c <pinAvailable+0x80>)
 8083548:	7818      	ldrb	r0, [r3, #0]
 808354a:	f7fe fbdb 	bl	8081d04 <hal_spi_is_enabled>
 808354e:	2800      	cmp	r0, #0
 8083550:	d1d0      	bne.n	80834f4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8083552:	3c12      	subs	r4, #18
 8083554:	2c01      	cmp	r4, #1
 8083556:	d805      	bhi.n	8083564 <pinAvailable+0x78>
 8083558:	f7ff fe9e 	bl	8083298 <_Z22__fetch_global_Serial1v>
 808355c:	7c00      	ldrb	r0, [r0, #16]
 808355e:	f7fe fb61 	bl	8081c24 <hal_usart_is_enabled>
 8083562:	e7d5      	b.n	8083510 <pinAvailable+0x24>
  return true; // 'pin' is available
 8083564:	2001      	movs	r0, #1
 8083566:	e7c6      	b.n	80834f6 <pinAvailable+0xa>
 8083568:	200009c4 	.word	0x200009c4
 808356c:	200009c8 	.word	0x200009c8
 8083570:	200001e8 	.word	0x200001e8
 8083574:	080834dd 	.word	0x080834dd

08083578 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083578:	282e      	cmp	r0, #46	; 0x2e
{
 808357a:	b538      	push	{r3, r4, r5, lr}
 808357c:	4604      	mov	r4, r0
 808357e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083580:	d80a      	bhi.n	8083598 <pinMode+0x20>
 8083582:	29ff      	cmp	r1, #255	; 0xff
 8083584:	d008      	beq.n	8083598 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8083586:	f7ff ffb1 	bl	80834ec <pinAvailable>
 808358a:	b128      	cbz	r0, 8083598 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808358c:	4629      	mov	r1, r5
 808358e:	4620      	mov	r0, r4
}
 8083590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8083594:	f7fe bace 	b.w	8081b34 <HAL_Pin_Mode>
}
 8083598:	bd38      	pop	{r3, r4, r5, pc}

0808359a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808359a:	b538      	push	{r3, r4, r5, lr}
 808359c:	4604      	mov	r4, r0
 808359e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80835a0:	f7fe fad0 	bl	8081b44 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80835a4:	28ff      	cmp	r0, #255	; 0xff
 80835a6:	d010      	beq.n	80835ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80835a8:	2806      	cmp	r0, #6
 80835aa:	d804      	bhi.n	80835b6 <digitalWrite+0x1c>
 80835ac:	234d      	movs	r3, #77	; 0x4d
 80835ae:	fa23 f000 	lsr.w	r0, r3, r0
 80835b2:	07c3      	lsls	r3, r0, #31
 80835b4:	d409      	bmi.n	80835ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80835b6:	4620      	mov	r0, r4
 80835b8:	f7ff ff98 	bl	80834ec <pinAvailable>
 80835bc:	b128      	cbz	r0, 80835ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80835be:	4629      	mov	r1, r5
 80835c0:	4620      	mov	r0, r4
}
 80835c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80835c6:	f7fe bac5 	b.w	8081b54 <HAL_GPIO_Write>
}
 80835ca:	bd38      	pop	{r3, r4, r5, pc}

080835cc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80835cc:	2300      	movs	r3, #0
 80835ce:	b513      	push	{r0, r1, r4, lr}
 80835d0:	4c07      	ldr	r4, [pc, #28]	; (80835f0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80835d2:	461a      	mov	r2, r3
 80835d4:	4619      	mov	r1, r3
 80835d6:	4620      	mov	r0, r4
 80835d8:	9300      	str	r3, [sp, #0]
 80835da:	f7ff fcc9 	bl	8082f70 <_ZN9IPAddressC1Ehhhh>
 80835de:	4620      	mov	r0, r4
 80835e0:	4a04      	ldr	r2, [pc, #16]	; (80835f4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80835e2:	4905      	ldr	r1, [pc, #20]	; (80835f8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80835e4:	b002      	add	sp, #8
 80835e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80835ea:	f000 b84d 	b.w	8083688 <__aeabi_atexit>
 80835ee:	bf00      	nop
 80835f0:	200009d8 	.word	0x200009d8
 80835f4:	200001e8 	.word	0x200001e8
 80835f8:	08082ee9 	.word	0x08082ee9

080835fc <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80835fc:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 80835fe:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8083600:	2520      	movs	r5, #32
 8083602:	8043      	strh	r3, [r0, #2]
 8083604:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083606:	4e08      	ldr	r6, [pc, #32]	; (8083628 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8083608:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808360a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808360c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808360e:	6085      	str	r5, [r0, #8]
 8083610:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083612:	4628      	mov	r0, r5
 8083614:	f000 f83f 	bl	8083696 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083618:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808361a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808361c:	4628      	mov	r0, r5
 808361e:	f000 f83a 	bl	8083696 <_ZnajRKSt9nothrow_t>
	};
 8083622:	60e0      	str	r0, [r4, #12]

	return config;
}
 8083624:	4620      	mov	r0, r4
 8083626:	bd70      	pop	{r4, r5, r6, pc}
 8083628:	080865c8 	.word	0x080865c8

0808362c <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808362c:	b510      	push	{r4, lr}
 808362e:	4604      	mov	r4, r0
	return defaultWireConfig();
 8083630:	f7ff ffe4 	bl	80835fc <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8083634:	4620      	mov	r0, r4
 8083636:	bd10      	pop	{r4, pc}

08083638 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8083638:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808363a:	4d0f      	ldr	r5, [pc, #60]	; (8083678 <_Z19__fetch_global_Wirev+0x40>)
{
 808363c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808363e:	7829      	ldrb	r1, [r5, #0]
 8083640:	f3bf 8f5b 	dmb	ish
 8083644:	f011 0401 	ands.w	r4, r1, #1
 8083648:	d113      	bne.n	8083672 <_Z19__fetch_global_Wirev+0x3a>
 808364a:	4628      	mov	r0, r5
 808364c:	f7fc fd3b 	bl	80800c6 <__cxa_guard_acquire>
 8083650:	b178      	cbz	r0, 8083672 <_Z19__fetch_global_Wirev+0x3a>
 8083652:	a801      	add	r0, sp, #4
 8083654:	f7ff ffea 	bl	808362c <_Z17acquireWireBufferv>
 8083658:	4621      	mov	r1, r4
 808365a:	aa01      	add	r2, sp, #4
 808365c:	4807      	ldr	r0, [pc, #28]	; (808367c <_Z19__fetch_global_Wirev+0x44>)
 808365e:	f7ff fe83 	bl	8083368 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8083662:	4628      	mov	r0, r5
 8083664:	f7fc fd34 	bl	80800d0 <__cxa_guard_release>
 8083668:	4a05      	ldr	r2, [pc, #20]	; (8083680 <_Z19__fetch_global_Wirev+0x48>)
 808366a:	4906      	ldr	r1, [pc, #24]	; (8083684 <_Z19__fetch_global_Wirev+0x4c>)
 808366c:	4803      	ldr	r0, [pc, #12]	; (808367c <_Z19__fetch_global_Wirev+0x44>)
 808366e:	f000 f80b 	bl	8083688 <__aeabi_atexit>
	return wire;
}
 8083672:	4802      	ldr	r0, [pc, #8]	; (808367c <_Z19__fetch_global_Wirev+0x44>)
 8083674:	b007      	add	sp, #28
 8083676:	bd30      	pop	{r4, r5, pc}
 8083678:	200009e0 	.word	0x200009e0
 808367c:	200009e4 	.word	0x200009e4
 8083680:	200001e8 	.word	0x200001e8
 8083684:	08083311 	.word	0x08083311

08083688 <__aeabi_atexit>:
 8083688:	460b      	mov	r3, r1
 808368a:	4601      	mov	r1, r0
 808368c:	4618      	mov	r0, r3
 808368e:	f000 bda1 	b.w	80841d4 <__cxa_atexit>

08083692 <_ZdlPvj>:
 8083692:	f7fc bd16 	b.w	80800c2 <_ZdlPv>

08083696 <_ZnajRKSt9nothrow_t>:
 8083696:	f7fc bd12 	b.w	80800be <_Znaj>

0808369a <_ZSt25__throw_bad_function_callv>:
 808369a:	b508      	push	{r3, lr}
 808369c:	f7fe fcb8 	bl	8082010 <abort>

080836a0 <__aeabi_drsub>:
 80836a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80836a4:	e002      	b.n	80836ac <__adddf3>
 80836a6:	bf00      	nop

080836a8 <__aeabi_dsub>:
 80836a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080836ac <__adddf3>:
 80836ac:	b530      	push	{r4, r5, lr}
 80836ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80836b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80836b6:	ea94 0f05 	teq	r4, r5
 80836ba:	bf08      	it	eq
 80836bc:	ea90 0f02 	teqeq	r0, r2
 80836c0:	bf1f      	itttt	ne
 80836c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80836c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80836ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80836ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80836d2:	f000 80e2 	beq.w	808389a <__adddf3+0x1ee>
 80836d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80836da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80836de:	bfb8      	it	lt
 80836e0:	426d      	neglt	r5, r5
 80836e2:	dd0c      	ble.n	80836fe <__adddf3+0x52>
 80836e4:	442c      	add	r4, r5
 80836e6:	ea80 0202 	eor.w	r2, r0, r2
 80836ea:	ea81 0303 	eor.w	r3, r1, r3
 80836ee:	ea82 0000 	eor.w	r0, r2, r0
 80836f2:	ea83 0101 	eor.w	r1, r3, r1
 80836f6:	ea80 0202 	eor.w	r2, r0, r2
 80836fa:	ea81 0303 	eor.w	r3, r1, r3
 80836fe:	2d36      	cmp	r5, #54	; 0x36
 8083700:	bf88      	it	hi
 8083702:	bd30      	pophi	{r4, r5, pc}
 8083704:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808370c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083710:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083714:	d002      	beq.n	808371c <__adddf3+0x70>
 8083716:	4240      	negs	r0, r0
 8083718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808371c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083720:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083724:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083728:	d002      	beq.n	8083730 <__adddf3+0x84>
 808372a:	4252      	negs	r2, r2
 808372c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083730:	ea94 0f05 	teq	r4, r5
 8083734:	f000 80a7 	beq.w	8083886 <__adddf3+0x1da>
 8083738:	f1a4 0401 	sub.w	r4, r4, #1
 808373c:	f1d5 0e20 	rsbs	lr, r5, #32
 8083740:	db0d      	blt.n	808375e <__adddf3+0xb2>
 8083742:	fa02 fc0e 	lsl.w	ip, r2, lr
 8083746:	fa22 f205 	lsr.w	r2, r2, r5
 808374a:	1880      	adds	r0, r0, r2
 808374c:	f141 0100 	adc.w	r1, r1, #0
 8083750:	fa03 f20e 	lsl.w	r2, r3, lr
 8083754:	1880      	adds	r0, r0, r2
 8083756:	fa43 f305 	asr.w	r3, r3, r5
 808375a:	4159      	adcs	r1, r3
 808375c:	e00e      	b.n	808377c <__adddf3+0xd0>
 808375e:	f1a5 0520 	sub.w	r5, r5, #32
 8083762:	f10e 0e20 	add.w	lr, lr, #32
 8083766:	2a01      	cmp	r2, #1
 8083768:	fa03 fc0e 	lsl.w	ip, r3, lr
 808376c:	bf28      	it	cs
 808376e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083772:	fa43 f305 	asr.w	r3, r3, r5
 8083776:	18c0      	adds	r0, r0, r3
 8083778:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808377c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083780:	d507      	bpl.n	8083792 <__adddf3+0xe6>
 8083782:	f04f 0e00 	mov.w	lr, #0
 8083786:	f1dc 0c00 	rsbs	ip, ip, #0
 808378a:	eb7e 0000 	sbcs.w	r0, lr, r0
 808378e:	eb6e 0101 	sbc.w	r1, lr, r1
 8083792:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083796:	d31b      	bcc.n	80837d0 <__adddf3+0x124>
 8083798:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808379c:	d30c      	bcc.n	80837b8 <__adddf3+0x10c>
 808379e:	0849      	lsrs	r1, r1, #1
 80837a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80837a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80837a8:	f104 0401 	add.w	r4, r4, #1
 80837ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80837b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80837b4:	f080 809a 	bcs.w	80838ec <__adddf3+0x240>
 80837b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80837bc:	bf08      	it	eq
 80837be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80837c2:	f150 0000 	adcs.w	r0, r0, #0
 80837c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80837ca:	ea41 0105 	orr.w	r1, r1, r5
 80837ce:	bd30      	pop	{r4, r5, pc}
 80837d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80837d4:	4140      	adcs	r0, r0
 80837d6:	eb41 0101 	adc.w	r1, r1, r1
 80837da:	3c01      	subs	r4, #1
 80837dc:	bf28      	it	cs
 80837de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80837e2:	d2e9      	bcs.n	80837b8 <__adddf3+0x10c>
 80837e4:	f091 0f00 	teq	r1, #0
 80837e8:	bf04      	itt	eq
 80837ea:	4601      	moveq	r1, r0
 80837ec:	2000      	moveq	r0, #0
 80837ee:	fab1 f381 	clz	r3, r1
 80837f2:	bf08      	it	eq
 80837f4:	3320      	addeq	r3, #32
 80837f6:	f1a3 030b 	sub.w	r3, r3, #11
 80837fa:	f1b3 0220 	subs.w	r2, r3, #32
 80837fe:	da0c      	bge.n	808381a <__adddf3+0x16e>
 8083800:	320c      	adds	r2, #12
 8083802:	dd08      	ble.n	8083816 <__adddf3+0x16a>
 8083804:	f102 0c14 	add.w	ip, r2, #20
 8083808:	f1c2 020c 	rsb	r2, r2, #12
 808380c:	fa01 f00c 	lsl.w	r0, r1, ip
 8083810:	fa21 f102 	lsr.w	r1, r1, r2
 8083814:	e00c      	b.n	8083830 <__adddf3+0x184>
 8083816:	f102 0214 	add.w	r2, r2, #20
 808381a:	bfd8      	it	le
 808381c:	f1c2 0c20 	rsble	ip, r2, #32
 8083820:	fa01 f102 	lsl.w	r1, r1, r2
 8083824:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083828:	bfdc      	itt	le
 808382a:	ea41 010c 	orrle.w	r1, r1, ip
 808382e:	4090      	lslle	r0, r2
 8083830:	1ae4      	subs	r4, r4, r3
 8083832:	bfa2      	ittt	ge
 8083834:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083838:	4329      	orrge	r1, r5
 808383a:	bd30      	popge	{r4, r5, pc}
 808383c:	ea6f 0404 	mvn.w	r4, r4
 8083840:	3c1f      	subs	r4, #31
 8083842:	da1c      	bge.n	808387e <__adddf3+0x1d2>
 8083844:	340c      	adds	r4, #12
 8083846:	dc0e      	bgt.n	8083866 <__adddf3+0x1ba>
 8083848:	f104 0414 	add.w	r4, r4, #20
 808384c:	f1c4 0220 	rsb	r2, r4, #32
 8083850:	fa20 f004 	lsr.w	r0, r0, r4
 8083854:	fa01 f302 	lsl.w	r3, r1, r2
 8083858:	ea40 0003 	orr.w	r0, r0, r3
 808385c:	fa21 f304 	lsr.w	r3, r1, r4
 8083860:	ea45 0103 	orr.w	r1, r5, r3
 8083864:	bd30      	pop	{r4, r5, pc}
 8083866:	f1c4 040c 	rsb	r4, r4, #12
 808386a:	f1c4 0220 	rsb	r2, r4, #32
 808386e:	fa20 f002 	lsr.w	r0, r0, r2
 8083872:	fa01 f304 	lsl.w	r3, r1, r4
 8083876:	ea40 0003 	orr.w	r0, r0, r3
 808387a:	4629      	mov	r1, r5
 808387c:	bd30      	pop	{r4, r5, pc}
 808387e:	fa21 f004 	lsr.w	r0, r1, r4
 8083882:	4629      	mov	r1, r5
 8083884:	bd30      	pop	{r4, r5, pc}
 8083886:	f094 0f00 	teq	r4, #0
 808388a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808388e:	bf06      	itte	eq
 8083890:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083894:	3401      	addeq	r4, #1
 8083896:	3d01      	subne	r5, #1
 8083898:	e74e      	b.n	8083738 <__adddf3+0x8c>
 808389a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808389e:	bf18      	it	ne
 80838a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80838a4:	d029      	beq.n	80838fa <__adddf3+0x24e>
 80838a6:	ea94 0f05 	teq	r4, r5
 80838aa:	bf08      	it	eq
 80838ac:	ea90 0f02 	teqeq	r0, r2
 80838b0:	d005      	beq.n	80838be <__adddf3+0x212>
 80838b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80838b6:	bf04      	itt	eq
 80838b8:	4619      	moveq	r1, r3
 80838ba:	4610      	moveq	r0, r2
 80838bc:	bd30      	pop	{r4, r5, pc}
 80838be:	ea91 0f03 	teq	r1, r3
 80838c2:	bf1e      	ittt	ne
 80838c4:	2100      	movne	r1, #0
 80838c6:	2000      	movne	r0, #0
 80838c8:	bd30      	popne	{r4, r5, pc}
 80838ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80838ce:	d105      	bne.n	80838dc <__adddf3+0x230>
 80838d0:	0040      	lsls	r0, r0, #1
 80838d2:	4149      	adcs	r1, r1
 80838d4:	bf28      	it	cs
 80838d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80838da:	bd30      	pop	{r4, r5, pc}
 80838dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80838e0:	bf3c      	itt	cc
 80838e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80838e6:	bd30      	popcc	{r4, r5, pc}
 80838e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80838ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80838f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80838f4:	f04f 0000 	mov.w	r0, #0
 80838f8:	bd30      	pop	{r4, r5, pc}
 80838fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80838fe:	bf1a      	itte	ne
 8083900:	4619      	movne	r1, r3
 8083902:	4610      	movne	r0, r2
 8083904:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083908:	bf1c      	itt	ne
 808390a:	460b      	movne	r3, r1
 808390c:	4602      	movne	r2, r0
 808390e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083912:	bf06      	itte	eq
 8083914:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083918:	ea91 0f03 	teqeq	r1, r3
 808391c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083920:	bd30      	pop	{r4, r5, pc}
 8083922:	bf00      	nop

08083924 <__aeabi_ui2d>:
 8083924:	f090 0f00 	teq	r0, #0
 8083928:	bf04      	itt	eq
 808392a:	2100      	moveq	r1, #0
 808392c:	4770      	bxeq	lr
 808392e:	b530      	push	{r4, r5, lr}
 8083930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083934:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083938:	f04f 0500 	mov.w	r5, #0
 808393c:	f04f 0100 	mov.w	r1, #0
 8083940:	e750      	b.n	80837e4 <__adddf3+0x138>
 8083942:	bf00      	nop

08083944 <__aeabi_i2d>:
 8083944:	f090 0f00 	teq	r0, #0
 8083948:	bf04      	itt	eq
 808394a:	2100      	moveq	r1, #0
 808394c:	4770      	bxeq	lr
 808394e:	b530      	push	{r4, r5, lr}
 8083950:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083954:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083958:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808395c:	bf48      	it	mi
 808395e:	4240      	negmi	r0, r0
 8083960:	f04f 0100 	mov.w	r1, #0
 8083964:	e73e      	b.n	80837e4 <__adddf3+0x138>
 8083966:	bf00      	nop

08083968 <__aeabi_f2d>:
 8083968:	0042      	lsls	r2, r0, #1
 808396a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808396e:	ea4f 0131 	mov.w	r1, r1, rrx
 8083972:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083976:	bf1f      	itttt	ne
 8083978:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808397c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083980:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083984:	4770      	bxne	lr
 8083986:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808398a:	bf08      	it	eq
 808398c:	4770      	bxeq	lr
 808398e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8083992:	bf04      	itt	eq
 8083994:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8083998:	4770      	bxeq	lr
 808399a:	b530      	push	{r4, r5, lr}
 808399c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80839a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80839a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80839a8:	e71c      	b.n	80837e4 <__adddf3+0x138>
 80839aa:	bf00      	nop

080839ac <__aeabi_ul2d>:
 80839ac:	ea50 0201 	orrs.w	r2, r0, r1
 80839b0:	bf08      	it	eq
 80839b2:	4770      	bxeq	lr
 80839b4:	b530      	push	{r4, r5, lr}
 80839b6:	f04f 0500 	mov.w	r5, #0
 80839ba:	e00a      	b.n	80839d2 <__aeabi_l2d+0x16>

080839bc <__aeabi_l2d>:
 80839bc:	ea50 0201 	orrs.w	r2, r0, r1
 80839c0:	bf08      	it	eq
 80839c2:	4770      	bxeq	lr
 80839c4:	b530      	push	{r4, r5, lr}
 80839c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80839ca:	d502      	bpl.n	80839d2 <__aeabi_l2d+0x16>
 80839cc:	4240      	negs	r0, r0
 80839ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80839d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80839d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80839da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80839de:	f43f aed8 	beq.w	8083792 <__adddf3+0xe6>
 80839e2:	f04f 0203 	mov.w	r2, #3
 80839e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80839ea:	bf18      	it	ne
 80839ec:	3203      	addne	r2, #3
 80839ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80839f2:	bf18      	it	ne
 80839f4:	3203      	addne	r2, #3
 80839f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80839fa:	f1c2 0320 	rsb	r3, r2, #32
 80839fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8083a02:	fa20 f002 	lsr.w	r0, r0, r2
 8083a06:	fa01 fe03 	lsl.w	lr, r1, r3
 8083a0a:	ea40 000e 	orr.w	r0, r0, lr
 8083a0e:	fa21 f102 	lsr.w	r1, r1, r2
 8083a12:	4414      	add	r4, r2
 8083a14:	e6bd      	b.n	8083792 <__adddf3+0xe6>
 8083a16:	bf00      	nop

08083a18 <__aeabi_dmul>:
 8083a18:	b570      	push	{r4, r5, r6, lr}
 8083a1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083a1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083a22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083a26:	bf1d      	ittte	ne
 8083a28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083a2c:	ea94 0f0c 	teqne	r4, ip
 8083a30:	ea95 0f0c 	teqne	r5, ip
 8083a34:	f000 f8de 	bleq	8083bf4 <__aeabi_dmul+0x1dc>
 8083a38:	442c      	add	r4, r5
 8083a3a:	ea81 0603 	eor.w	r6, r1, r3
 8083a3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083a42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083a46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083a4a:	bf18      	it	ne
 8083a4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083a50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083a58:	d038      	beq.n	8083acc <__aeabi_dmul+0xb4>
 8083a5a:	fba0 ce02 	umull	ip, lr, r0, r2
 8083a5e:	f04f 0500 	mov.w	r5, #0
 8083a62:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083a66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083a6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083a6e:	f04f 0600 	mov.w	r6, #0
 8083a72:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083a76:	f09c 0f00 	teq	ip, #0
 8083a7a:	bf18      	it	ne
 8083a7c:	f04e 0e01 	orrne.w	lr, lr, #1
 8083a80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083a84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083a88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083a8c:	d204      	bcs.n	8083a98 <__aeabi_dmul+0x80>
 8083a8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083a92:	416d      	adcs	r5, r5
 8083a94:	eb46 0606 	adc.w	r6, r6, r6
 8083a98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083a9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083aa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083aa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083aa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083aac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083ab0:	bf88      	it	hi
 8083ab2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083ab6:	d81e      	bhi.n	8083af6 <__aeabi_dmul+0xde>
 8083ab8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083abc:	bf08      	it	eq
 8083abe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083ac2:	f150 0000 	adcs.w	r0, r0, #0
 8083ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083aca:	bd70      	pop	{r4, r5, r6, pc}
 8083acc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083ad0:	ea46 0101 	orr.w	r1, r6, r1
 8083ad4:	ea40 0002 	orr.w	r0, r0, r2
 8083ad8:	ea81 0103 	eor.w	r1, r1, r3
 8083adc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083ae0:	bfc2      	ittt	gt
 8083ae2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083ae6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083aea:	bd70      	popgt	{r4, r5, r6, pc}
 8083aec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083af0:	f04f 0e00 	mov.w	lr, #0
 8083af4:	3c01      	subs	r4, #1
 8083af6:	f300 80ab 	bgt.w	8083c50 <__aeabi_dmul+0x238>
 8083afa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083afe:	bfde      	ittt	le
 8083b00:	2000      	movle	r0, #0
 8083b02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083b06:	bd70      	pople	{r4, r5, r6, pc}
 8083b08:	f1c4 0400 	rsb	r4, r4, #0
 8083b0c:	3c20      	subs	r4, #32
 8083b0e:	da35      	bge.n	8083b7c <__aeabi_dmul+0x164>
 8083b10:	340c      	adds	r4, #12
 8083b12:	dc1b      	bgt.n	8083b4c <__aeabi_dmul+0x134>
 8083b14:	f104 0414 	add.w	r4, r4, #20
 8083b18:	f1c4 0520 	rsb	r5, r4, #32
 8083b1c:	fa00 f305 	lsl.w	r3, r0, r5
 8083b20:	fa20 f004 	lsr.w	r0, r0, r4
 8083b24:	fa01 f205 	lsl.w	r2, r1, r5
 8083b28:	ea40 0002 	orr.w	r0, r0, r2
 8083b2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083b30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083b34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083b38:	fa21 f604 	lsr.w	r6, r1, r4
 8083b3c:	eb42 0106 	adc.w	r1, r2, r6
 8083b40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083b44:	bf08      	it	eq
 8083b46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083b4a:	bd70      	pop	{r4, r5, r6, pc}
 8083b4c:	f1c4 040c 	rsb	r4, r4, #12
 8083b50:	f1c4 0520 	rsb	r5, r4, #32
 8083b54:	fa00 f304 	lsl.w	r3, r0, r4
 8083b58:	fa20 f005 	lsr.w	r0, r0, r5
 8083b5c:	fa01 f204 	lsl.w	r2, r1, r4
 8083b60:	ea40 0002 	orr.w	r0, r0, r2
 8083b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083b6c:	f141 0100 	adc.w	r1, r1, #0
 8083b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083b74:	bf08      	it	eq
 8083b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083b7a:	bd70      	pop	{r4, r5, r6, pc}
 8083b7c:	f1c4 0520 	rsb	r5, r4, #32
 8083b80:	fa00 f205 	lsl.w	r2, r0, r5
 8083b84:	ea4e 0e02 	orr.w	lr, lr, r2
 8083b88:	fa20 f304 	lsr.w	r3, r0, r4
 8083b8c:	fa01 f205 	lsl.w	r2, r1, r5
 8083b90:	ea43 0302 	orr.w	r3, r3, r2
 8083b94:	fa21 f004 	lsr.w	r0, r1, r4
 8083b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083b9c:	fa21 f204 	lsr.w	r2, r1, r4
 8083ba0:	ea20 0002 	bic.w	r0, r0, r2
 8083ba4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083ba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083bac:	bf08      	it	eq
 8083bae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083bb2:	bd70      	pop	{r4, r5, r6, pc}
 8083bb4:	f094 0f00 	teq	r4, #0
 8083bb8:	d10f      	bne.n	8083bda <__aeabi_dmul+0x1c2>
 8083bba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083bbe:	0040      	lsls	r0, r0, #1
 8083bc0:	eb41 0101 	adc.w	r1, r1, r1
 8083bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083bc8:	bf08      	it	eq
 8083bca:	3c01      	subeq	r4, #1
 8083bcc:	d0f7      	beq.n	8083bbe <__aeabi_dmul+0x1a6>
 8083bce:	ea41 0106 	orr.w	r1, r1, r6
 8083bd2:	f095 0f00 	teq	r5, #0
 8083bd6:	bf18      	it	ne
 8083bd8:	4770      	bxne	lr
 8083bda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083bde:	0052      	lsls	r2, r2, #1
 8083be0:	eb43 0303 	adc.w	r3, r3, r3
 8083be4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083be8:	bf08      	it	eq
 8083bea:	3d01      	subeq	r5, #1
 8083bec:	d0f7      	beq.n	8083bde <__aeabi_dmul+0x1c6>
 8083bee:	ea43 0306 	orr.w	r3, r3, r6
 8083bf2:	4770      	bx	lr
 8083bf4:	ea94 0f0c 	teq	r4, ip
 8083bf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083bfc:	bf18      	it	ne
 8083bfe:	ea95 0f0c 	teqne	r5, ip
 8083c02:	d00c      	beq.n	8083c1e <__aeabi_dmul+0x206>
 8083c04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083c08:	bf18      	it	ne
 8083c0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083c0e:	d1d1      	bne.n	8083bb4 <__aeabi_dmul+0x19c>
 8083c10:	ea81 0103 	eor.w	r1, r1, r3
 8083c14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c18:	f04f 0000 	mov.w	r0, #0
 8083c1c:	bd70      	pop	{r4, r5, r6, pc}
 8083c1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083c22:	bf06      	itte	eq
 8083c24:	4610      	moveq	r0, r2
 8083c26:	4619      	moveq	r1, r3
 8083c28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083c2c:	d019      	beq.n	8083c62 <__aeabi_dmul+0x24a>
 8083c2e:	ea94 0f0c 	teq	r4, ip
 8083c32:	d102      	bne.n	8083c3a <__aeabi_dmul+0x222>
 8083c34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083c38:	d113      	bne.n	8083c62 <__aeabi_dmul+0x24a>
 8083c3a:	ea95 0f0c 	teq	r5, ip
 8083c3e:	d105      	bne.n	8083c4c <__aeabi_dmul+0x234>
 8083c40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083c44:	bf1c      	itt	ne
 8083c46:	4610      	movne	r0, r2
 8083c48:	4619      	movne	r1, r3
 8083c4a:	d10a      	bne.n	8083c62 <__aeabi_dmul+0x24a>
 8083c4c:	ea81 0103 	eor.w	r1, r1, r3
 8083c50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083c54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083c58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083c5c:	f04f 0000 	mov.w	r0, #0
 8083c60:	bd70      	pop	{r4, r5, r6, pc}
 8083c62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083c66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083c6a:	bd70      	pop	{r4, r5, r6, pc}

08083c6c <__aeabi_ddiv>:
 8083c6c:	b570      	push	{r4, r5, r6, lr}
 8083c6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083c72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083c76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083c7a:	bf1d      	ittte	ne
 8083c7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083c80:	ea94 0f0c 	teqne	r4, ip
 8083c84:	ea95 0f0c 	teqne	r5, ip
 8083c88:	f000 f8a7 	bleq	8083dda <__aeabi_ddiv+0x16e>
 8083c8c:	eba4 0405 	sub.w	r4, r4, r5
 8083c90:	ea81 0e03 	eor.w	lr, r1, r3
 8083c94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083c98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083c9c:	f000 8088 	beq.w	8083db0 <__aeabi_ddiv+0x144>
 8083ca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083ca4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083ca8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083cac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083cb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083cb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083cb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083cbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083cc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083cc4:	429d      	cmp	r5, r3
 8083cc6:	bf08      	it	eq
 8083cc8:	4296      	cmpeq	r6, r2
 8083cca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083cce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083cd2:	d202      	bcs.n	8083cda <__aeabi_ddiv+0x6e>
 8083cd4:	085b      	lsrs	r3, r3, #1
 8083cd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083cda:	1ab6      	subs	r6, r6, r2
 8083cdc:	eb65 0503 	sbc.w	r5, r5, r3
 8083ce0:	085b      	lsrs	r3, r3, #1
 8083ce2:	ea4f 0232 	mov.w	r2, r2, rrx
 8083ce6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083cea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083cee:	ebb6 0e02 	subs.w	lr, r6, r2
 8083cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083cf6:	bf22      	ittt	cs
 8083cf8:	1ab6      	subcs	r6, r6, r2
 8083cfa:	4675      	movcs	r5, lr
 8083cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8083d00:	085b      	lsrs	r3, r3, #1
 8083d02:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d06:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d0e:	bf22      	ittt	cs
 8083d10:	1ab6      	subcs	r6, r6, r2
 8083d12:	4675      	movcs	r5, lr
 8083d14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083d18:	085b      	lsrs	r3, r3, #1
 8083d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d26:	bf22      	ittt	cs
 8083d28:	1ab6      	subcs	r6, r6, r2
 8083d2a:	4675      	movcs	r5, lr
 8083d2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083d30:	085b      	lsrs	r3, r3, #1
 8083d32:	ea4f 0232 	mov.w	r2, r2, rrx
 8083d36:	ebb6 0e02 	subs.w	lr, r6, r2
 8083d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083d3e:	bf22      	ittt	cs
 8083d40:	1ab6      	subcs	r6, r6, r2
 8083d42:	4675      	movcs	r5, lr
 8083d44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083d48:	ea55 0e06 	orrs.w	lr, r5, r6
 8083d4c:	d018      	beq.n	8083d80 <__aeabi_ddiv+0x114>
 8083d4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083d52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083d56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083d5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083d5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083d62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083d66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083d6a:	d1c0      	bne.n	8083cee <__aeabi_ddiv+0x82>
 8083d6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083d70:	d10b      	bne.n	8083d8a <__aeabi_ddiv+0x11e>
 8083d72:	ea41 0100 	orr.w	r1, r1, r0
 8083d76:	f04f 0000 	mov.w	r0, #0
 8083d7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083d7e:	e7b6      	b.n	8083cee <__aeabi_ddiv+0x82>
 8083d80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083d84:	bf04      	itt	eq
 8083d86:	4301      	orreq	r1, r0
 8083d88:	2000      	moveq	r0, #0
 8083d8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083d8e:	bf88      	it	hi
 8083d90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083d94:	f63f aeaf 	bhi.w	8083af6 <__aeabi_dmul+0xde>
 8083d98:	ebb5 0c03 	subs.w	ip, r5, r3
 8083d9c:	bf04      	itt	eq
 8083d9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083da2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083da6:	f150 0000 	adcs.w	r0, r0, #0
 8083daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083dae:	bd70      	pop	{r4, r5, r6, pc}
 8083db0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083db4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083db8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083dbc:	bfc2      	ittt	gt
 8083dbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083dc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083dc6:	bd70      	popgt	{r4, r5, r6, pc}
 8083dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083dcc:	f04f 0e00 	mov.w	lr, #0
 8083dd0:	3c01      	subs	r4, #1
 8083dd2:	e690      	b.n	8083af6 <__aeabi_dmul+0xde>
 8083dd4:	ea45 0e06 	orr.w	lr, r5, r6
 8083dd8:	e68d      	b.n	8083af6 <__aeabi_dmul+0xde>
 8083dda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083dde:	ea94 0f0c 	teq	r4, ip
 8083de2:	bf08      	it	eq
 8083de4:	ea95 0f0c 	teqeq	r5, ip
 8083de8:	f43f af3b 	beq.w	8083c62 <__aeabi_dmul+0x24a>
 8083dec:	ea94 0f0c 	teq	r4, ip
 8083df0:	d10a      	bne.n	8083e08 <__aeabi_ddiv+0x19c>
 8083df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083df6:	f47f af34 	bne.w	8083c62 <__aeabi_dmul+0x24a>
 8083dfa:	ea95 0f0c 	teq	r5, ip
 8083dfe:	f47f af25 	bne.w	8083c4c <__aeabi_dmul+0x234>
 8083e02:	4610      	mov	r0, r2
 8083e04:	4619      	mov	r1, r3
 8083e06:	e72c      	b.n	8083c62 <__aeabi_dmul+0x24a>
 8083e08:	ea95 0f0c 	teq	r5, ip
 8083e0c:	d106      	bne.n	8083e1c <__aeabi_ddiv+0x1b0>
 8083e0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083e12:	f43f aefd 	beq.w	8083c10 <__aeabi_dmul+0x1f8>
 8083e16:	4610      	mov	r0, r2
 8083e18:	4619      	mov	r1, r3
 8083e1a:	e722      	b.n	8083c62 <__aeabi_dmul+0x24a>
 8083e1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083e20:	bf18      	it	ne
 8083e22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083e26:	f47f aec5 	bne.w	8083bb4 <__aeabi_dmul+0x19c>
 8083e2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083e2e:	f47f af0d 	bne.w	8083c4c <__aeabi_dmul+0x234>
 8083e32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083e36:	f47f aeeb 	bne.w	8083c10 <__aeabi_dmul+0x1f8>
 8083e3a:	e712      	b.n	8083c62 <__aeabi_dmul+0x24a>

08083e3c <__gedf2>:
 8083e3c:	f04f 3cff 	mov.w	ip, #4294967295
 8083e40:	e006      	b.n	8083e50 <__cmpdf2+0x4>
 8083e42:	bf00      	nop

08083e44 <__ledf2>:
 8083e44:	f04f 0c01 	mov.w	ip, #1
 8083e48:	e002      	b.n	8083e50 <__cmpdf2+0x4>
 8083e4a:	bf00      	nop

08083e4c <__cmpdf2>:
 8083e4c:	f04f 0c01 	mov.w	ip, #1
 8083e50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083e54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083e58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083e5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083e60:	bf18      	it	ne
 8083e62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8083e66:	d01b      	beq.n	8083ea0 <__cmpdf2+0x54>
 8083e68:	b001      	add	sp, #4
 8083e6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8083e6e:	bf0c      	ite	eq
 8083e70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8083e74:	ea91 0f03 	teqne	r1, r3
 8083e78:	bf02      	ittt	eq
 8083e7a:	ea90 0f02 	teqeq	r0, r2
 8083e7e:	2000      	moveq	r0, #0
 8083e80:	4770      	bxeq	lr
 8083e82:	f110 0f00 	cmn.w	r0, #0
 8083e86:	ea91 0f03 	teq	r1, r3
 8083e8a:	bf58      	it	pl
 8083e8c:	4299      	cmppl	r1, r3
 8083e8e:	bf08      	it	eq
 8083e90:	4290      	cmpeq	r0, r2
 8083e92:	bf2c      	ite	cs
 8083e94:	17d8      	asrcs	r0, r3, #31
 8083e96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8083e9a:	f040 0001 	orr.w	r0, r0, #1
 8083e9e:	4770      	bx	lr
 8083ea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083ea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083ea8:	d102      	bne.n	8083eb0 <__cmpdf2+0x64>
 8083eaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083eae:	d107      	bne.n	8083ec0 <__cmpdf2+0x74>
 8083eb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083eb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083eb8:	d1d6      	bne.n	8083e68 <__cmpdf2+0x1c>
 8083eba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083ebe:	d0d3      	beq.n	8083e68 <__cmpdf2+0x1c>
 8083ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8083ec4:	4770      	bx	lr
 8083ec6:	bf00      	nop

08083ec8 <__aeabi_cdrcmple>:
 8083ec8:	4684      	mov	ip, r0
 8083eca:	4610      	mov	r0, r2
 8083ecc:	4662      	mov	r2, ip
 8083ece:	468c      	mov	ip, r1
 8083ed0:	4619      	mov	r1, r3
 8083ed2:	4663      	mov	r3, ip
 8083ed4:	e000      	b.n	8083ed8 <__aeabi_cdcmpeq>
 8083ed6:	bf00      	nop

08083ed8 <__aeabi_cdcmpeq>:
 8083ed8:	b501      	push	{r0, lr}
 8083eda:	f7ff ffb7 	bl	8083e4c <__cmpdf2>
 8083ede:	2800      	cmp	r0, #0
 8083ee0:	bf48      	it	mi
 8083ee2:	f110 0f00 	cmnmi.w	r0, #0
 8083ee6:	bd01      	pop	{r0, pc}

08083ee8 <__aeabi_dcmpeq>:
 8083ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083eec:	f7ff fff4 	bl	8083ed8 <__aeabi_cdcmpeq>
 8083ef0:	bf0c      	ite	eq
 8083ef2:	2001      	moveq	r0, #1
 8083ef4:	2000      	movne	r0, #0
 8083ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8083efa:	bf00      	nop

08083efc <__aeabi_dcmplt>:
 8083efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f00:	f7ff ffea 	bl	8083ed8 <__aeabi_cdcmpeq>
 8083f04:	bf34      	ite	cc
 8083f06:	2001      	movcc	r0, #1
 8083f08:	2000      	movcs	r0, #0
 8083f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f0e:	bf00      	nop

08083f10 <__aeabi_dcmple>:
 8083f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f14:	f7ff ffe0 	bl	8083ed8 <__aeabi_cdcmpeq>
 8083f18:	bf94      	ite	ls
 8083f1a:	2001      	movls	r0, #1
 8083f1c:	2000      	movhi	r0, #0
 8083f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f22:	bf00      	nop

08083f24 <__aeabi_dcmpge>:
 8083f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f28:	f7ff ffce 	bl	8083ec8 <__aeabi_cdrcmple>
 8083f2c:	bf94      	ite	ls
 8083f2e:	2001      	movls	r0, #1
 8083f30:	2000      	movhi	r0, #0
 8083f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f36:	bf00      	nop

08083f38 <__aeabi_dcmpgt>:
 8083f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083f3c:	f7ff ffc4 	bl	8083ec8 <__aeabi_cdrcmple>
 8083f40:	bf34      	ite	cc
 8083f42:	2001      	movcc	r0, #1
 8083f44:	2000      	movcs	r0, #0
 8083f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8083f4a:	bf00      	nop

08083f4c <__aeabi_dcmpun>:
 8083f4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f54:	d102      	bne.n	8083f5c <__aeabi_dcmpun+0x10>
 8083f56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8083f5a:	d10a      	bne.n	8083f72 <__aeabi_dcmpun+0x26>
 8083f5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083f60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083f64:	d102      	bne.n	8083f6c <__aeabi_dcmpun+0x20>
 8083f66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8083f6a:	d102      	bne.n	8083f72 <__aeabi_dcmpun+0x26>
 8083f6c:	f04f 0000 	mov.w	r0, #0
 8083f70:	4770      	bx	lr
 8083f72:	f04f 0001 	mov.w	r0, #1
 8083f76:	4770      	bx	lr

08083f78 <__aeabi_d2uiz>:
 8083f78:	004a      	lsls	r2, r1, #1
 8083f7a:	d211      	bcs.n	8083fa0 <__aeabi_d2uiz+0x28>
 8083f7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083f80:	d211      	bcs.n	8083fa6 <__aeabi_d2uiz+0x2e>
 8083f82:	d50d      	bpl.n	8083fa0 <__aeabi_d2uiz+0x28>
 8083f84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083f88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083f8c:	d40e      	bmi.n	8083fac <__aeabi_d2uiz+0x34>
 8083f8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083f96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083f9a:	fa23 f002 	lsr.w	r0, r3, r2
 8083f9e:	4770      	bx	lr
 8083fa0:	f04f 0000 	mov.w	r0, #0
 8083fa4:	4770      	bx	lr
 8083fa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083faa:	d102      	bne.n	8083fb2 <__aeabi_d2uiz+0x3a>
 8083fac:	f04f 30ff 	mov.w	r0, #4294967295
 8083fb0:	4770      	bx	lr
 8083fb2:	f04f 0000 	mov.w	r0, #0
 8083fb6:	4770      	bx	lr

08083fb8 <__aeabi_d2f>:
 8083fb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083fbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083fc0:	bf24      	itt	cs
 8083fc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083fc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083fca:	d90d      	bls.n	8083fe8 <__aeabi_d2f+0x30>
 8083fcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083fd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083fd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083fd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083fdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083fe0:	bf08      	it	eq
 8083fe2:	f020 0001 	biceq.w	r0, r0, #1
 8083fe6:	4770      	bx	lr
 8083fe8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083fec:	d121      	bne.n	8084032 <__aeabi_d2f+0x7a>
 8083fee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083ff2:	bfbc      	itt	lt
 8083ff4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083ff8:	4770      	bxlt	lr
 8083ffa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083ffe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8084002:	f1c2 0218 	rsb	r2, r2, #24
 8084006:	f1c2 0c20 	rsb	ip, r2, #32
 808400a:	fa10 f30c 	lsls.w	r3, r0, ip
 808400e:	fa20 f002 	lsr.w	r0, r0, r2
 8084012:	bf18      	it	ne
 8084014:	f040 0001 	orrne.w	r0, r0, #1
 8084018:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808401c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084020:	fa03 fc0c 	lsl.w	ip, r3, ip
 8084024:	ea40 000c 	orr.w	r0, r0, ip
 8084028:	fa23 f302 	lsr.w	r3, r3, r2
 808402c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084030:	e7cc      	b.n	8083fcc <__aeabi_d2f+0x14>
 8084032:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8084036:	d107      	bne.n	8084048 <__aeabi_d2f+0x90>
 8084038:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808403c:	bf1e      	ittt	ne
 808403e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8084042:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8084046:	4770      	bxne	lr
 8084048:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808404c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084050:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084054:	4770      	bx	lr
 8084056:	bf00      	nop

08084058 <__gesf2>:
 8084058:	f04f 3cff 	mov.w	ip, #4294967295
 808405c:	e006      	b.n	808406c <__cmpsf2+0x4>
 808405e:	bf00      	nop

08084060 <__lesf2>:
 8084060:	f04f 0c01 	mov.w	ip, #1
 8084064:	e002      	b.n	808406c <__cmpsf2+0x4>
 8084066:	bf00      	nop

08084068 <__cmpsf2>:
 8084068:	f04f 0c01 	mov.w	ip, #1
 808406c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808407c:	bf18      	it	ne
 808407e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084082:	d011      	beq.n	80840a8 <__cmpsf2+0x40>
 8084084:	b001      	add	sp, #4
 8084086:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808408a:	bf18      	it	ne
 808408c:	ea90 0f01 	teqne	r0, r1
 8084090:	bf58      	it	pl
 8084092:	ebb2 0003 	subspl.w	r0, r2, r3
 8084096:	bf88      	it	hi
 8084098:	17c8      	asrhi	r0, r1, #31
 808409a:	bf38      	it	cc
 808409c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80840a0:	bf18      	it	ne
 80840a2:	f040 0001 	orrne.w	r0, r0, #1
 80840a6:	4770      	bx	lr
 80840a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80840ac:	d102      	bne.n	80840b4 <__cmpsf2+0x4c>
 80840ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80840b2:	d105      	bne.n	80840c0 <__cmpsf2+0x58>
 80840b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80840b8:	d1e4      	bne.n	8084084 <__cmpsf2+0x1c>
 80840ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80840be:	d0e1      	beq.n	8084084 <__cmpsf2+0x1c>
 80840c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80840c4:	4770      	bx	lr
 80840c6:	bf00      	nop

080840c8 <__aeabi_cfrcmple>:
 80840c8:	4684      	mov	ip, r0
 80840ca:	4608      	mov	r0, r1
 80840cc:	4661      	mov	r1, ip
 80840ce:	e7ff      	b.n	80840d0 <__aeabi_cfcmpeq>

080840d0 <__aeabi_cfcmpeq>:
 80840d0:	b50f      	push	{r0, r1, r2, r3, lr}
 80840d2:	f7ff ffc9 	bl	8084068 <__cmpsf2>
 80840d6:	2800      	cmp	r0, #0
 80840d8:	bf48      	it	mi
 80840da:	f110 0f00 	cmnmi.w	r0, #0
 80840de:	bd0f      	pop	{r0, r1, r2, r3, pc}

080840e0 <__aeabi_fcmpeq>:
 80840e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80840e4:	f7ff fff4 	bl	80840d0 <__aeabi_cfcmpeq>
 80840e8:	bf0c      	ite	eq
 80840ea:	2001      	moveq	r0, #1
 80840ec:	2000      	movne	r0, #0
 80840ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80840f2:	bf00      	nop

080840f4 <__aeabi_fcmplt>:
 80840f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80840f8:	f7ff ffea 	bl	80840d0 <__aeabi_cfcmpeq>
 80840fc:	bf34      	ite	cc
 80840fe:	2001      	movcc	r0, #1
 8084100:	2000      	movcs	r0, #0
 8084102:	f85d fb08 	ldr.w	pc, [sp], #8
 8084106:	bf00      	nop

08084108 <__aeabi_fcmple>:
 8084108:	f84d ed08 	str.w	lr, [sp, #-8]!
 808410c:	f7ff ffe0 	bl	80840d0 <__aeabi_cfcmpeq>
 8084110:	bf94      	ite	ls
 8084112:	2001      	movls	r0, #1
 8084114:	2000      	movhi	r0, #0
 8084116:	f85d fb08 	ldr.w	pc, [sp], #8
 808411a:	bf00      	nop

0808411c <__aeabi_fcmpge>:
 808411c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084120:	f7ff ffd2 	bl	80840c8 <__aeabi_cfrcmple>
 8084124:	bf94      	ite	ls
 8084126:	2001      	movls	r0, #1
 8084128:	2000      	movhi	r0, #0
 808412a:	f85d fb08 	ldr.w	pc, [sp], #8
 808412e:	bf00      	nop

08084130 <__aeabi_fcmpgt>:
 8084130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084134:	f7ff ffc8 	bl	80840c8 <__aeabi_cfrcmple>
 8084138:	bf34      	ite	cc
 808413a:	2001      	movcc	r0, #1
 808413c:	2000      	movcs	r0, #0
 808413e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084142:	bf00      	nop

08084144 <__aeabi_d2ulz>:
 8084144:	b5d0      	push	{r4, r6, r7, lr}
 8084146:	2200      	movs	r2, #0
 8084148:	4b0b      	ldr	r3, [pc, #44]	; (8084178 <__aeabi_d2ulz+0x34>)
 808414a:	4606      	mov	r6, r0
 808414c:	460f      	mov	r7, r1
 808414e:	f7ff fc63 	bl	8083a18 <__aeabi_dmul>
 8084152:	f7ff ff11 	bl	8083f78 <__aeabi_d2uiz>
 8084156:	4604      	mov	r4, r0
 8084158:	f7ff fbe4 	bl	8083924 <__aeabi_ui2d>
 808415c:	2200      	movs	r2, #0
 808415e:	4b07      	ldr	r3, [pc, #28]	; (808417c <__aeabi_d2ulz+0x38>)
 8084160:	f7ff fc5a 	bl	8083a18 <__aeabi_dmul>
 8084164:	4602      	mov	r2, r0
 8084166:	460b      	mov	r3, r1
 8084168:	4630      	mov	r0, r6
 808416a:	4639      	mov	r1, r7
 808416c:	f7ff fa9c 	bl	80836a8 <__aeabi_dsub>
 8084170:	f7ff ff02 	bl	8083f78 <__aeabi_d2uiz>
 8084174:	4621      	mov	r1, r4
 8084176:	bdd0      	pop	{r4, r6, r7, pc}
 8084178:	3df00000 	.word	0x3df00000
 808417c:	41f00000 	.word	0x41f00000

08084180 <asctime_r>:
 8084180:	b510      	push	{r4, lr}
 8084182:	460c      	mov	r4, r1
 8084184:	6941      	ldr	r1, [r0, #20]
 8084186:	b086      	sub	sp, #24
 8084188:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808418c:	6903      	ldr	r3, [r0, #16]
 808418e:	6982      	ldr	r2, [r0, #24]
 8084190:	9104      	str	r1, [sp, #16]
 8084192:	6801      	ldr	r1, [r0, #0]
 8084194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8084198:	9103      	str	r1, [sp, #12]
 808419a:	6841      	ldr	r1, [r0, #4]
 808419c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80841a0:	9102      	str	r1, [sp, #8]
 80841a2:	6881      	ldr	r1, [r0, #8]
 80841a4:	9101      	str	r1, [sp, #4]
 80841a6:	68c1      	ldr	r1, [r0, #12]
 80841a8:	4620      	mov	r0, r4
 80841aa:	9100      	str	r1, [sp, #0]
 80841ac:	4904      	ldr	r1, [pc, #16]	; (80841c0 <asctime_r+0x40>)
 80841ae:	440b      	add	r3, r1
 80841b0:	4904      	ldr	r1, [pc, #16]	; (80841c4 <asctime_r+0x44>)
 80841b2:	440a      	add	r2, r1
 80841b4:	4904      	ldr	r1, [pc, #16]	; (80841c8 <asctime_r+0x48>)
 80841b6:	f7fd ff0b 	bl	8081fd0 <siprintf>
 80841ba:	4620      	mov	r0, r4
 80841bc:	b006      	add	sp, #24
 80841be:	bd10      	pop	{r4, pc}
 80841c0:	080865fe 	.word	0x080865fe
 80841c4:	080865e9 	.word	0x080865e9
 80841c8:	080865c9 	.word	0x080865c9

080841cc <atol>:
 80841cc:	220a      	movs	r2, #10
 80841ce:	2100      	movs	r1, #0
 80841d0:	f000 bfaa 	b.w	8085128 <strtol>

080841d4 <__cxa_atexit>:
 80841d4:	b510      	push	{r4, lr}
 80841d6:	4604      	mov	r4, r0
 80841d8:	4804      	ldr	r0, [pc, #16]	; (80841ec <__cxa_atexit+0x18>)
 80841da:	4613      	mov	r3, r2
 80841dc:	b120      	cbz	r0, 80841e8 <__cxa_atexit+0x14>
 80841de:	460a      	mov	r2, r1
 80841e0:	2002      	movs	r0, #2
 80841e2:	4621      	mov	r1, r4
 80841e4:	f3af 8000 	nop.w
 80841e8:	bd10      	pop	{r4, pc}
 80841ea:	bf00      	nop
 80841ec:	00000000 	.word	0x00000000

080841f0 <memcpy>:
 80841f0:	440a      	add	r2, r1
 80841f2:	4291      	cmp	r1, r2
 80841f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80841f8:	d100      	bne.n	80841fc <memcpy+0xc>
 80841fa:	4770      	bx	lr
 80841fc:	b510      	push	{r4, lr}
 80841fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084202:	4291      	cmp	r1, r2
 8084204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8084208:	d1f9      	bne.n	80841fe <memcpy+0xe>
 808420a:	bd10      	pop	{r4, pc}

0808420c <memset>:
 808420c:	4603      	mov	r3, r0
 808420e:	4402      	add	r2, r0
 8084210:	4293      	cmp	r3, r2
 8084212:	d100      	bne.n	8084216 <memset+0xa>
 8084214:	4770      	bx	lr
 8084216:	f803 1b01 	strb.w	r1, [r3], #1
 808421a:	e7f9      	b.n	8084210 <memset+0x4>

0808421c <srand>:
 808421c:	b538      	push	{r3, r4, r5, lr}
 808421e:	4b0d      	ldr	r3, [pc, #52]	; (8084254 <srand+0x38>)
 8084220:	4604      	mov	r4, r0
 8084222:	681d      	ldr	r5, [r3, #0]
 8084224:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8084226:	b97b      	cbnz	r3, 8084248 <srand+0x2c>
 8084228:	2018      	movs	r0, #24
 808422a:	f7fd feb9 	bl	8081fa0 <malloc>
 808422e:	4a0a      	ldr	r2, [pc, #40]	; (8084258 <srand+0x3c>)
 8084230:	4b0a      	ldr	r3, [pc, #40]	; (808425c <srand+0x40>)
 8084232:	63a8      	str	r0, [r5, #56]	; 0x38
 8084234:	e9c0 2300 	strd	r2, r3, [r0]
 8084238:	4b09      	ldr	r3, [pc, #36]	; (8084260 <srand+0x44>)
 808423a:	2201      	movs	r2, #1
 808423c:	6083      	str	r3, [r0, #8]
 808423e:	230b      	movs	r3, #11
 8084240:	8183      	strh	r3, [r0, #12]
 8084242:	2300      	movs	r3, #0
 8084244:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084248:	2200      	movs	r2, #0
 808424a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808424c:	611c      	str	r4, [r3, #16]
 808424e:	615a      	str	r2, [r3, #20]
 8084250:	bd38      	pop	{r3, r4, r5, pc}
 8084252:	bf00      	nop
 8084254:	20000014 	.word	0x20000014
 8084258:	abcd330e 	.word	0xabcd330e
 808425c:	e66d1234 	.word	0xe66d1234
 8084260:	0005deec 	.word	0x0005deec

08084264 <strchr>:
 8084264:	4603      	mov	r3, r0
 8084266:	b2c9      	uxtb	r1, r1
 8084268:	4618      	mov	r0, r3
 808426a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808426e:	b112      	cbz	r2, 8084276 <strchr+0x12>
 8084270:	428a      	cmp	r2, r1
 8084272:	d1f9      	bne.n	8084268 <strchr+0x4>
 8084274:	4770      	bx	lr
 8084276:	2900      	cmp	r1, #0
 8084278:	bf18      	it	ne
 808427a:	2000      	movne	r0, #0
 808427c:	4770      	bx	lr

0808427e <strcmp>:
 808427e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8084282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8084286:	2a01      	cmp	r2, #1
 8084288:	bf28      	it	cs
 808428a:	429a      	cmpcs	r2, r3
 808428c:	d0f7      	beq.n	808427e <strcmp>
 808428e:	1ad0      	subs	r0, r2, r3
 8084290:	4770      	bx	lr

08084292 <strcpy>:
 8084292:	4603      	mov	r3, r0
 8084294:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084298:	f803 2b01 	strb.w	r2, [r3], #1
 808429c:	2a00      	cmp	r2, #0
 808429e:	d1f9      	bne.n	8084294 <strcpy+0x2>
 80842a0:	4770      	bx	lr
	...

080842a4 <strdup>:
 80842a4:	4b02      	ldr	r3, [pc, #8]	; (80842b0 <strdup+0xc>)
 80842a6:	4601      	mov	r1, r0
 80842a8:	6818      	ldr	r0, [r3, #0]
 80842aa:	f000 b803 	b.w	80842b4 <_strdup_r>
 80842ae:	bf00      	nop
 80842b0:	20000014 	.word	0x20000014

080842b4 <_strdup_r>:
 80842b4:	b570      	push	{r4, r5, r6, lr}
 80842b6:	4604      	mov	r4, r0
 80842b8:	4608      	mov	r0, r1
 80842ba:	460d      	mov	r5, r1
 80842bc:	f000 f80d 	bl	80842da <strlen>
 80842c0:	1c46      	adds	r6, r0, #1
 80842c2:	4631      	mov	r1, r6
 80842c4:	4620      	mov	r0, r4
 80842c6:	f7fd feab 	bl	8082020 <_malloc_r>
 80842ca:	4604      	mov	r4, r0
 80842cc:	b118      	cbz	r0, 80842d6 <_strdup_r+0x22>
 80842ce:	4632      	mov	r2, r6
 80842d0:	4629      	mov	r1, r5
 80842d2:	f7ff ff8d 	bl	80841f0 <memcpy>
 80842d6:	4620      	mov	r0, r4
 80842d8:	bd70      	pop	{r4, r5, r6, pc}

080842da <strlen>:
 80842da:	4603      	mov	r3, r0
 80842dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80842e0:	2a00      	cmp	r2, #0
 80842e2:	d1fb      	bne.n	80842dc <strlen+0x2>
 80842e4:	1a18      	subs	r0, r3, r0
 80842e6:	3801      	subs	r0, #1
 80842e8:	4770      	bx	lr

080842ea <strncmp>:
 80842ea:	b510      	push	{r4, lr}
 80842ec:	b16a      	cbz	r2, 808430a <strncmp+0x20>
 80842ee:	3901      	subs	r1, #1
 80842f0:	1884      	adds	r4, r0, r2
 80842f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80842f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80842fa:	4293      	cmp	r3, r2
 80842fc:	d103      	bne.n	8084306 <strncmp+0x1c>
 80842fe:	42a0      	cmp	r0, r4
 8084300:	d001      	beq.n	8084306 <strncmp+0x1c>
 8084302:	2b00      	cmp	r3, #0
 8084304:	d1f5      	bne.n	80842f2 <strncmp+0x8>
 8084306:	1a98      	subs	r0, r3, r2
 8084308:	bd10      	pop	{r4, pc}
 808430a:	4610      	mov	r0, r2
 808430c:	e7fc      	b.n	8084308 <strncmp+0x1e>

0808430e <strncpy>:
 808430e:	4603      	mov	r3, r0
 8084310:	b510      	push	{r4, lr}
 8084312:	3901      	subs	r1, #1
 8084314:	b132      	cbz	r2, 8084324 <strncpy+0x16>
 8084316:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808431a:	3a01      	subs	r2, #1
 808431c:	f803 4b01 	strb.w	r4, [r3], #1
 8084320:	2c00      	cmp	r4, #0
 8084322:	d1f7      	bne.n	8084314 <strncpy+0x6>
 8084324:	2100      	movs	r1, #0
 8084326:	441a      	add	r2, r3
 8084328:	4293      	cmp	r3, r2
 808432a:	d100      	bne.n	808432e <strncpy+0x20>
 808432c:	bd10      	pop	{r4, pc}
 808432e:	f803 1b01 	strb.w	r1, [r3], #1
 8084332:	e7f9      	b.n	8084328 <strncpy+0x1a>

08084334 <strstr>:
 8084334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084336:	780c      	ldrb	r4, [r1, #0]
 8084338:	b164      	cbz	r4, 8084354 <strstr+0x20>
 808433a:	4603      	mov	r3, r0
 808433c:	781a      	ldrb	r2, [r3, #0]
 808433e:	4618      	mov	r0, r3
 8084340:	1c5e      	adds	r6, r3, #1
 8084342:	b90a      	cbnz	r2, 8084348 <strstr+0x14>
 8084344:	4610      	mov	r0, r2
 8084346:	e005      	b.n	8084354 <strstr+0x20>
 8084348:	4294      	cmp	r4, r2
 808434a:	d108      	bne.n	808435e <strstr+0x2a>
 808434c:	460d      	mov	r5, r1
 808434e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8084352:	b902      	cbnz	r2, 8084356 <strstr+0x22>
 8084354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084356:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 808435a:	4297      	cmp	r7, r2
 808435c:	d0f7      	beq.n	808434e <strstr+0x1a>
 808435e:	4633      	mov	r3, r6
 8084360:	e7ec      	b.n	808433c <strstr+0x8>

08084362 <sulp>:
 8084362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084366:	460f      	mov	r7, r1
 8084368:	4690      	mov	r8, r2
 808436a:	f001 fd4b 	bl	8085e04 <__ulp>
 808436e:	4604      	mov	r4, r0
 8084370:	460d      	mov	r5, r1
 8084372:	f1b8 0f00 	cmp.w	r8, #0
 8084376:	d011      	beq.n	808439c <sulp+0x3a>
 8084378:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808437c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8084380:	2b00      	cmp	r3, #0
 8084382:	dd0b      	ble.n	808439c <sulp+0x3a>
 8084384:	2400      	movs	r4, #0
 8084386:	051b      	lsls	r3, r3, #20
 8084388:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808438c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8084390:	4622      	mov	r2, r4
 8084392:	462b      	mov	r3, r5
 8084394:	f7ff fb40 	bl	8083a18 <__aeabi_dmul>
 8084398:	4604      	mov	r4, r0
 808439a:	460d      	mov	r5, r1
 808439c:	4620      	mov	r0, r4
 808439e:	4629      	mov	r1, r5
 80843a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80843a4:	0000      	movs	r0, r0
	...

080843a8 <_strtod_l>:
 80843a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80843ac:	469b      	mov	fp, r3
 80843ae:	2300      	movs	r3, #0
 80843b0:	b0a1      	sub	sp, #132	; 0x84
 80843b2:	931c      	str	r3, [sp, #112]	; 0x70
 80843b4:	4ba1      	ldr	r3, [pc, #644]	; (808463c <_strtod_l+0x294>)
 80843b6:	4682      	mov	sl, r0
 80843b8:	681f      	ldr	r7, [r3, #0]
 80843ba:	460e      	mov	r6, r1
 80843bc:	4638      	mov	r0, r7
 80843be:	9217      	str	r2, [sp, #92]	; 0x5c
 80843c0:	f7ff ff8b 	bl	80842da <strlen>
 80843c4:	f04f 0800 	mov.w	r8, #0
 80843c8:	4604      	mov	r4, r0
 80843ca:	f04f 0900 	mov.w	r9, #0
 80843ce:	961b      	str	r6, [sp, #108]	; 0x6c
 80843d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80843d2:	781a      	ldrb	r2, [r3, #0]
 80843d4:	2a2b      	cmp	r2, #43	; 0x2b
 80843d6:	d04c      	beq.n	8084472 <_strtod_l+0xca>
 80843d8:	d83a      	bhi.n	8084450 <_strtod_l+0xa8>
 80843da:	2a0d      	cmp	r2, #13
 80843dc:	d833      	bhi.n	8084446 <_strtod_l+0x9e>
 80843de:	2a08      	cmp	r2, #8
 80843e0:	d833      	bhi.n	808444a <_strtod_l+0xa2>
 80843e2:	2a00      	cmp	r2, #0
 80843e4:	d03d      	beq.n	8084462 <_strtod_l+0xba>
 80843e6:	2300      	movs	r3, #0
 80843e8:	930c      	str	r3, [sp, #48]	; 0x30
 80843ea:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80843ec:	782b      	ldrb	r3, [r5, #0]
 80843ee:	2b30      	cmp	r3, #48	; 0x30
 80843f0:	f040 80af 	bne.w	8084552 <_strtod_l+0x1aa>
 80843f4:	786b      	ldrb	r3, [r5, #1]
 80843f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80843fa:	2b58      	cmp	r3, #88	; 0x58
 80843fc:	d16c      	bne.n	80844d8 <_strtod_l+0x130>
 80843fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8084400:	4650      	mov	r0, sl
 8084402:	9301      	str	r3, [sp, #4]
 8084404:	ab1c      	add	r3, sp, #112	; 0x70
 8084406:	9300      	str	r3, [sp, #0]
 8084408:	4a8d      	ldr	r2, [pc, #564]	; (8084640 <_strtod_l+0x298>)
 808440a:	f8cd b008 	str.w	fp, [sp, #8]
 808440e:	ab1d      	add	r3, sp, #116	; 0x74
 8084410:	a91b      	add	r1, sp, #108	; 0x6c
 8084412:	f000 fefb 	bl	808520c <__gethex>
 8084416:	f010 0607 	ands.w	r6, r0, #7
 808441a:	4604      	mov	r4, r0
 808441c:	d005      	beq.n	808442a <_strtod_l+0x82>
 808441e:	2e06      	cmp	r6, #6
 8084420:	d129      	bne.n	8084476 <_strtod_l+0xce>
 8084422:	2300      	movs	r3, #0
 8084424:	3501      	adds	r5, #1
 8084426:	951b      	str	r5, [sp, #108]	; 0x6c
 8084428:	930c      	str	r3, [sp, #48]	; 0x30
 808442a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808442c:	2b00      	cmp	r3, #0
 808442e:	f040 8596 	bne.w	8084f5e <_strtod_l+0xbb6>
 8084432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8084434:	b1d3      	cbz	r3, 808446c <_strtod_l+0xc4>
 8084436:	4642      	mov	r2, r8
 8084438:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808443c:	4610      	mov	r0, r2
 808443e:	4619      	mov	r1, r3
 8084440:	b021      	add	sp, #132	; 0x84
 8084442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084446:	2a20      	cmp	r2, #32
 8084448:	d1cd      	bne.n	80843e6 <_strtod_l+0x3e>
 808444a:	3301      	adds	r3, #1
 808444c:	931b      	str	r3, [sp, #108]	; 0x6c
 808444e:	e7bf      	b.n	80843d0 <_strtod_l+0x28>
 8084450:	2a2d      	cmp	r2, #45	; 0x2d
 8084452:	d1c8      	bne.n	80843e6 <_strtod_l+0x3e>
 8084454:	2201      	movs	r2, #1
 8084456:	920c      	str	r2, [sp, #48]	; 0x30
 8084458:	1c5a      	adds	r2, r3, #1
 808445a:	921b      	str	r2, [sp, #108]	; 0x6c
 808445c:	785b      	ldrb	r3, [r3, #1]
 808445e:	2b00      	cmp	r3, #0
 8084460:	d1c3      	bne.n	80843ea <_strtod_l+0x42>
 8084462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084464:	961b      	str	r6, [sp, #108]	; 0x6c
 8084466:	2b00      	cmp	r3, #0
 8084468:	f040 8577 	bne.w	8084f5a <_strtod_l+0xbb2>
 808446c:	4642      	mov	r2, r8
 808446e:	464b      	mov	r3, r9
 8084470:	e7e4      	b.n	808443c <_strtod_l+0x94>
 8084472:	2200      	movs	r2, #0
 8084474:	e7ef      	b.n	8084456 <_strtod_l+0xae>
 8084476:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8084478:	b13a      	cbz	r2, 808448a <_strtod_l+0xe2>
 808447a:	2135      	movs	r1, #53	; 0x35
 808447c:	a81e      	add	r0, sp, #120	; 0x78
 808447e:	f001 fdb8 	bl	8085ff2 <__copybits>
 8084482:	4650      	mov	r0, sl
 8084484:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084486:	f001 f9f3 	bl	8085870 <_Bfree>
 808448a:	3e01      	subs	r6, #1
 808448c:	2e05      	cmp	r6, #5
 808448e:	d807      	bhi.n	80844a0 <_strtod_l+0xf8>
 8084490:	e8df f006 	tbb	[pc, r6]
 8084494:	1d180b0e 	.word	0x1d180b0e
 8084498:	030e      	.short	0x030e
 808449a:	f04f 0900 	mov.w	r9, #0
 808449e:	46c8      	mov	r8, r9
 80844a0:	0721      	lsls	r1, r4, #28
 80844a2:	d5c2      	bpl.n	808442a <_strtod_l+0x82>
 80844a4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80844a8:	e7bf      	b.n	808442a <_strtod_l+0x82>
 80844aa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80844ae:	e7f7      	b.n	80844a0 <_strtod_l+0xf8>
 80844b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80844b2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80844b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80844ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80844be:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80844c2:	e7ed      	b.n	80844a0 <_strtod_l+0xf8>
 80844c4:	f04f 0800 	mov.w	r8, #0
 80844c8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8084644 <_strtod_l+0x29c>
 80844cc:	e7e8      	b.n	80844a0 <_strtod_l+0xf8>
 80844ce:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80844d2:	f04f 38ff 	mov.w	r8, #4294967295
 80844d6:	e7e3      	b.n	80844a0 <_strtod_l+0xf8>
 80844d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80844da:	1c5a      	adds	r2, r3, #1
 80844dc:	921b      	str	r2, [sp, #108]	; 0x6c
 80844de:	785b      	ldrb	r3, [r3, #1]
 80844e0:	2b30      	cmp	r3, #48	; 0x30
 80844e2:	d0f9      	beq.n	80844d8 <_strtod_l+0x130>
 80844e4:	2b00      	cmp	r3, #0
 80844e6:	d0a0      	beq.n	808442a <_strtod_l+0x82>
 80844e8:	2301      	movs	r3, #1
 80844ea:	9307      	str	r3, [sp, #28]
 80844ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80844ee:	220a      	movs	r2, #10
 80844f0:	9308      	str	r3, [sp, #32]
 80844f2:	2300      	movs	r3, #0
 80844f4:	469b      	mov	fp, r3
 80844f6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80844fa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80844fc:	7805      	ldrb	r5, [r0, #0]
 80844fe:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8084502:	b2d9      	uxtb	r1, r3
 8084504:	2909      	cmp	r1, #9
 8084506:	d926      	bls.n	8084556 <_strtod_l+0x1ae>
 8084508:	4622      	mov	r2, r4
 808450a:	4639      	mov	r1, r7
 808450c:	f7ff feed 	bl	80842ea <strncmp>
 8084510:	2800      	cmp	r0, #0
 8084512:	d032      	beq.n	808457a <_strtod_l+0x1d2>
 8084514:	2000      	movs	r0, #0
 8084516:	462b      	mov	r3, r5
 8084518:	465c      	mov	r4, fp
 808451a:	4602      	mov	r2, r0
 808451c:	9004      	str	r0, [sp, #16]
 808451e:	2b65      	cmp	r3, #101	; 0x65
 8084520:	d001      	beq.n	8084526 <_strtod_l+0x17e>
 8084522:	2b45      	cmp	r3, #69	; 0x45
 8084524:	d113      	bne.n	808454e <_strtod_l+0x1a6>
 8084526:	b91c      	cbnz	r4, 8084530 <_strtod_l+0x188>
 8084528:	9b07      	ldr	r3, [sp, #28]
 808452a:	4303      	orrs	r3, r0
 808452c:	d099      	beq.n	8084462 <_strtod_l+0xba>
 808452e:	2400      	movs	r4, #0
 8084530:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8084532:	1c73      	adds	r3, r6, #1
 8084534:	931b      	str	r3, [sp, #108]	; 0x6c
 8084536:	7873      	ldrb	r3, [r6, #1]
 8084538:	2b2b      	cmp	r3, #43	; 0x2b
 808453a:	d078      	beq.n	808462e <_strtod_l+0x286>
 808453c:	2b2d      	cmp	r3, #45	; 0x2d
 808453e:	d07b      	beq.n	8084638 <_strtod_l+0x290>
 8084540:	2700      	movs	r7, #0
 8084542:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8084546:	2909      	cmp	r1, #9
 8084548:	f240 8082 	bls.w	8084650 <_strtod_l+0x2a8>
 808454c:	961b      	str	r6, [sp, #108]	; 0x6c
 808454e:	2500      	movs	r5, #0
 8084550:	e09e      	b.n	8084690 <_strtod_l+0x2e8>
 8084552:	2300      	movs	r3, #0
 8084554:	e7c9      	b.n	80844ea <_strtod_l+0x142>
 8084556:	f1bb 0f08 	cmp.w	fp, #8
 808455a:	bfd5      	itete	le
 808455c:	9906      	ldrle	r1, [sp, #24]
 808455e:	9905      	ldrgt	r1, [sp, #20]
 8084560:	fb02 3301 	mlale	r3, r2, r1, r3
 8084564:	fb02 3301 	mlagt	r3, r2, r1, r3
 8084568:	f100 0001 	add.w	r0, r0, #1
 808456c:	bfd4      	ite	le
 808456e:	9306      	strle	r3, [sp, #24]
 8084570:	9305      	strgt	r3, [sp, #20]
 8084572:	f10b 0b01 	add.w	fp, fp, #1
 8084576:	901b      	str	r0, [sp, #108]	; 0x6c
 8084578:	e7bf      	b.n	80844fa <_strtod_l+0x152>
 808457a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808457c:	191a      	adds	r2, r3, r4
 808457e:	921b      	str	r2, [sp, #108]	; 0x6c
 8084580:	5d1b      	ldrb	r3, [r3, r4]
 8084582:	f1bb 0f00 	cmp.w	fp, #0
 8084586:	d036      	beq.n	80845f6 <_strtod_l+0x24e>
 8084588:	465c      	mov	r4, fp
 808458a:	9004      	str	r0, [sp, #16]
 808458c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8084590:	2a09      	cmp	r2, #9
 8084592:	d912      	bls.n	80845ba <_strtod_l+0x212>
 8084594:	2201      	movs	r2, #1
 8084596:	e7c2      	b.n	808451e <_strtod_l+0x176>
 8084598:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808459a:	3001      	adds	r0, #1
 808459c:	1c5a      	adds	r2, r3, #1
 808459e:	921b      	str	r2, [sp, #108]	; 0x6c
 80845a0:	785b      	ldrb	r3, [r3, #1]
 80845a2:	2b30      	cmp	r3, #48	; 0x30
 80845a4:	d0f8      	beq.n	8084598 <_strtod_l+0x1f0>
 80845a6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80845aa:	2a08      	cmp	r2, #8
 80845ac:	f200 84dc 	bhi.w	8084f68 <_strtod_l+0xbc0>
 80845b0:	9004      	str	r0, [sp, #16]
 80845b2:	2000      	movs	r0, #0
 80845b4:	4604      	mov	r4, r0
 80845b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80845b8:	9208      	str	r2, [sp, #32]
 80845ba:	3b30      	subs	r3, #48	; 0x30
 80845bc:	f100 0201 	add.w	r2, r0, #1
 80845c0:	d013      	beq.n	80845ea <_strtod_l+0x242>
 80845c2:	9904      	ldr	r1, [sp, #16]
 80845c4:	1905      	adds	r5, r0, r4
 80845c6:	4411      	add	r1, r2
 80845c8:	9104      	str	r1, [sp, #16]
 80845ca:	4622      	mov	r2, r4
 80845cc:	210a      	movs	r1, #10
 80845ce:	42aa      	cmp	r2, r5
 80845d0:	d113      	bne.n	80845fa <_strtod_l+0x252>
 80845d2:	1822      	adds	r2, r4, r0
 80845d4:	2a08      	cmp	r2, #8
 80845d6:	f104 0401 	add.w	r4, r4, #1
 80845da:	4404      	add	r4, r0
 80845dc:	dc1b      	bgt.n	8084616 <_strtod_l+0x26e>
 80845de:	220a      	movs	r2, #10
 80845e0:	9906      	ldr	r1, [sp, #24]
 80845e2:	fb02 3301 	mla	r3, r2, r1, r3
 80845e6:	9306      	str	r3, [sp, #24]
 80845e8:	2200      	movs	r2, #0
 80845ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80845ec:	4610      	mov	r0, r2
 80845ee:	1c59      	adds	r1, r3, #1
 80845f0:	911b      	str	r1, [sp, #108]	; 0x6c
 80845f2:	785b      	ldrb	r3, [r3, #1]
 80845f4:	e7ca      	b.n	808458c <_strtod_l+0x1e4>
 80845f6:	4658      	mov	r0, fp
 80845f8:	e7d3      	b.n	80845a2 <_strtod_l+0x1fa>
 80845fa:	2a08      	cmp	r2, #8
 80845fc:	dc04      	bgt.n	8084608 <_strtod_l+0x260>
 80845fe:	9f06      	ldr	r7, [sp, #24]
 8084600:	434f      	muls	r7, r1
 8084602:	9706      	str	r7, [sp, #24]
 8084604:	3201      	adds	r2, #1
 8084606:	e7e2      	b.n	80845ce <_strtod_l+0x226>
 8084608:	1c57      	adds	r7, r2, #1
 808460a:	2f10      	cmp	r7, #16
 808460c:	bfde      	ittt	le
 808460e:	9f05      	ldrle	r7, [sp, #20]
 8084610:	434f      	mulle	r7, r1
 8084612:	9705      	strle	r7, [sp, #20]
 8084614:	e7f6      	b.n	8084604 <_strtod_l+0x25c>
 8084616:	2c10      	cmp	r4, #16
 8084618:	bfdf      	itttt	le
 808461a:	220a      	movle	r2, #10
 808461c:	9905      	ldrle	r1, [sp, #20]
 808461e:	fb02 3301 	mlale	r3, r2, r1, r3
 8084622:	9305      	strle	r3, [sp, #20]
 8084624:	e7e0      	b.n	80845e8 <_strtod_l+0x240>
 8084626:	2300      	movs	r3, #0
 8084628:	2201      	movs	r2, #1
 808462a:	9304      	str	r3, [sp, #16]
 808462c:	e77c      	b.n	8084528 <_strtod_l+0x180>
 808462e:	2700      	movs	r7, #0
 8084630:	1cb3      	adds	r3, r6, #2
 8084632:	931b      	str	r3, [sp, #108]	; 0x6c
 8084634:	78b3      	ldrb	r3, [r6, #2]
 8084636:	e784      	b.n	8084542 <_strtod_l+0x19a>
 8084638:	2701      	movs	r7, #1
 808463a:	e7f9      	b.n	8084630 <_strtod_l+0x288>
 808463c:	08086784 	.word	0x08086784
 8084640:	08086630 	.word	0x08086630
 8084644:	7ff00000 	.word	0x7ff00000
 8084648:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808464a:	1c59      	adds	r1, r3, #1
 808464c:	911b      	str	r1, [sp, #108]	; 0x6c
 808464e:	785b      	ldrb	r3, [r3, #1]
 8084650:	2b30      	cmp	r3, #48	; 0x30
 8084652:	d0f9      	beq.n	8084648 <_strtod_l+0x2a0>
 8084654:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8084658:	2908      	cmp	r1, #8
 808465a:	f63f af78 	bhi.w	808454e <_strtod_l+0x1a6>
 808465e:	f04f 0e0a 	mov.w	lr, #10
 8084662:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8084666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084668:	9309      	str	r3, [sp, #36]	; 0x24
 808466a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808466c:	1c59      	adds	r1, r3, #1
 808466e:	911b      	str	r1, [sp, #108]	; 0x6c
 8084670:	785b      	ldrb	r3, [r3, #1]
 8084672:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8084676:	2d09      	cmp	r5, #9
 8084678:	d935      	bls.n	80846e6 <_strtod_l+0x33e>
 808467a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808467c:	1b49      	subs	r1, r1, r5
 808467e:	2908      	cmp	r1, #8
 8084680:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8084684:	dc02      	bgt.n	808468c <_strtod_l+0x2e4>
 8084686:	4565      	cmp	r5, ip
 8084688:	bfa8      	it	ge
 808468a:	4665      	movge	r5, ip
 808468c:	b107      	cbz	r7, 8084690 <_strtod_l+0x2e8>
 808468e:	426d      	negs	r5, r5
 8084690:	2c00      	cmp	r4, #0
 8084692:	d14c      	bne.n	808472e <_strtod_l+0x386>
 8084694:	9907      	ldr	r1, [sp, #28]
 8084696:	4301      	orrs	r1, r0
 8084698:	f47f aec7 	bne.w	808442a <_strtod_l+0x82>
 808469c:	2a00      	cmp	r2, #0
 808469e:	f47f aee0 	bne.w	8084462 <_strtod_l+0xba>
 80846a2:	2b69      	cmp	r3, #105	; 0x69
 80846a4:	d026      	beq.n	80846f4 <_strtod_l+0x34c>
 80846a6:	dc23      	bgt.n	80846f0 <_strtod_l+0x348>
 80846a8:	2b49      	cmp	r3, #73	; 0x49
 80846aa:	d023      	beq.n	80846f4 <_strtod_l+0x34c>
 80846ac:	2b4e      	cmp	r3, #78	; 0x4e
 80846ae:	f47f aed8 	bne.w	8084462 <_strtod_l+0xba>
 80846b2:	499c      	ldr	r1, [pc, #624]	; (8084924 <_strtod_l+0x57c>)
 80846b4:	a81b      	add	r0, sp, #108	; 0x6c
 80846b6:	f000 ffe5 	bl	8085684 <__match>
 80846ba:	2800      	cmp	r0, #0
 80846bc:	f43f aed1 	beq.w	8084462 <_strtod_l+0xba>
 80846c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80846c2:	781b      	ldrb	r3, [r3, #0]
 80846c4:	2b28      	cmp	r3, #40	; 0x28
 80846c6:	d12c      	bne.n	8084722 <_strtod_l+0x37a>
 80846c8:	4997      	ldr	r1, [pc, #604]	; (8084928 <_strtod_l+0x580>)
 80846ca:	aa1e      	add	r2, sp, #120	; 0x78
 80846cc:	a81b      	add	r0, sp, #108	; 0x6c
 80846ce:	f000 ffed 	bl	80856ac <__hexnan>
 80846d2:	2805      	cmp	r0, #5
 80846d4:	d125      	bne.n	8084722 <_strtod_l+0x37a>
 80846d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80846d8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80846dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80846e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80846e4:	e6a1      	b.n	808442a <_strtod_l+0x82>
 80846e6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80846ea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80846ee:	e7bc      	b.n	808466a <_strtod_l+0x2c2>
 80846f0:	2b6e      	cmp	r3, #110	; 0x6e
 80846f2:	e7dc      	b.n	80846ae <_strtod_l+0x306>
 80846f4:	498d      	ldr	r1, [pc, #564]	; (808492c <_strtod_l+0x584>)
 80846f6:	a81b      	add	r0, sp, #108	; 0x6c
 80846f8:	f000 ffc4 	bl	8085684 <__match>
 80846fc:	2800      	cmp	r0, #0
 80846fe:	f43f aeb0 	beq.w	8084462 <_strtod_l+0xba>
 8084702:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084704:	498a      	ldr	r1, [pc, #552]	; (8084930 <_strtod_l+0x588>)
 8084706:	3b01      	subs	r3, #1
 8084708:	a81b      	add	r0, sp, #108	; 0x6c
 808470a:	931b      	str	r3, [sp, #108]	; 0x6c
 808470c:	f000 ffba 	bl	8085684 <__match>
 8084710:	b910      	cbnz	r0, 8084718 <_strtod_l+0x370>
 8084712:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084714:	3301      	adds	r3, #1
 8084716:	931b      	str	r3, [sp, #108]	; 0x6c
 8084718:	f04f 0800 	mov.w	r8, #0
 808471c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8084940 <_strtod_l+0x598>
 8084720:	e683      	b.n	808442a <_strtod_l+0x82>
 8084722:	4884      	ldr	r0, [pc, #528]	; (8084934 <_strtod_l+0x58c>)
 8084724:	f001 fcb8 	bl	8086098 <nan>
 8084728:	4680      	mov	r8, r0
 808472a:	4689      	mov	r9, r1
 808472c:	e67d      	b.n	808442a <_strtod_l+0x82>
 808472e:	9b04      	ldr	r3, [sp, #16]
 8084730:	f1bb 0f00 	cmp.w	fp, #0
 8084734:	bf08      	it	eq
 8084736:	46a3      	moveq	fp, r4
 8084738:	1aeb      	subs	r3, r5, r3
 808473a:	2c10      	cmp	r4, #16
 808473c:	9806      	ldr	r0, [sp, #24]
 808473e:	4626      	mov	r6, r4
 8084740:	9307      	str	r3, [sp, #28]
 8084742:	bfa8      	it	ge
 8084744:	2610      	movge	r6, #16
 8084746:	f7ff f8ed 	bl	8083924 <__aeabi_ui2d>
 808474a:	2c09      	cmp	r4, #9
 808474c:	4680      	mov	r8, r0
 808474e:	4689      	mov	r9, r1
 8084750:	dd13      	ble.n	808477a <_strtod_l+0x3d2>
 8084752:	4b79      	ldr	r3, [pc, #484]	; (8084938 <_strtod_l+0x590>)
 8084754:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8084758:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808475c:	f7ff f95c 	bl	8083a18 <__aeabi_dmul>
 8084760:	4680      	mov	r8, r0
 8084762:	9805      	ldr	r0, [sp, #20]
 8084764:	4689      	mov	r9, r1
 8084766:	f7ff f8dd 	bl	8083924 <__aeabi_ui2d>
 808476a:	4602      	mov	r2, r0
 808476c:	460b      	mov	r3, r1
 808476e:	4640      	mov	r0, r8
 8084770:	4649      	mov	r1, r9
 8084772:	f7fe ff9b 	bl	80836ac <__adddf3>
 8084776:	4680      	mov	r8, r0
 8084778:	4689      	mov	r9, r1
 808477a:	2c0f      	cmp	r4, #15
 808477c:	dc36      	bgt.n	80847ec <_strtod_l+0x444>
 808477e:	9b07      	ldr	r3, [sp, #28]
 8084780:	2b00      	cmp	r3, #0
 8084782:	f43f ae52 	beq.w	808442a <_strtod_l+0x82>
 8084786:	dd22      	ble.n	80847ce <_strtod_l+0x426>
 8084788:	2b16      	cmp	r3, #22
 808478a:	dc09      	bgt.n	80847a0 <_strtod_l+0x3f8>
 808478c:	4c6a      	ldr	r4, [pc, #424]	; (8084938 <_strtod_l+0x590>)
 808478e:	4642      	mov	r2, r8
 8084790:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8084794:	464b      	mov	r3, r9
 8084796:	e9d4 0100 	ldrd	r0, r1, [r4]
 808479a:	f7ff f93d 	bl	8083a18 <__aeabi_dmul>
 808479e:	e7c3      	b.n	8084728 <_strtod_l+0x380>
 80847a0:	9a07      	ldr	r2, [sp, #28]
 80847a2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80847a6:	4293      	cmp	r3, r2
 80847a8:	db20      	blt.n	80847ec <_strtod_l+0x444>
 80847aa:	4d63      	ldr	r5, [pc, #396]	; (8084938 <_strtod_l+0x590>)
 80847ac:	f1c4 040f 	rsb	r4, r4, #15
 80847b0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80847b4:	4642      	mov	r2, r8
 80847b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80847ba:	464b      	mov	r3, r9
 80847bc:	f7ff f92c 	bl	8083a18 <__aeabi_dmul>
 80847c0:	9b07      	ldr	r3, [sp, #28]
 80847c2:	1b1c      	subs	r4, r3, r4
 80847c4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80847c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80847cc:	e7e5      	b.n	808479a <_strtod_l+0x3f2>
 80847ce:	9b07      	ldr	r3, [sp, #28]
 80847d0:	3316      	adds	r3, #22
 80847d2:	db0b      	blt.n	80847ec <_strtod_l+0x444>
 80847d4:	9b04      	ldr	r3, [sp, #16]
 80847d6:	4a58      	ldr	r2, [pc, #352]	; (8084938 <_strtod_l+0x590>)
 80847d8:	1b5d      	subs	r5, r3, r5
 80847da:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80847de:	4640      	mov	r0, r8
 80847e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80847e4:	4649      	mov	r1, r9
 80847e6:	f7ff fa41 	bl	8083c6c <__aeabi_ddiv>
 80847ea:	e79d      	b.n	8084728 <_strtod_l+0x380>
 80847ec:	9b07      	ldr	r3, [sp, #28]
 80847ee:	1ba6      	subs	r6, r4, r6
 80847f0:	441e      	add	r6, r3
 80847f2:	2e00      	cmp	r6, #0
 80847f4:	dd71      	ble.n	80848da <_strtod_l+0x532>
 80847f6:	f016 030f 	ands.w	r3, r6, #15
 80847fa:	d00a      	beq.n	8084812 <_strtod_l+0x46a>
 80847fc:	494e      	ldr	r1, [pc, #312]	; (8084938 <_strtod_l+0x590>)
 80847fe:	4642      	mov	r2, r8
 8084800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8084804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084808:	464b      	mov	r3, r9
 808480a:	f7ff f905 	bl	8083a18 <__aeabi_dmul>
 808480e:	4680      	mov	r8, r0
 8084810:	4689      	mov	r9, r1
 8084812:	f036 060f 	bics.w	r6, r6, #15
 8084816:	d050      	beq.n	80848ba <_strtod_l+0x512>
 8084818:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808481c:	dd27      	ble.n	808486e <_strtod_l+0x4c6>
 808481e:	f04f 0b00 	mov.w	fp, #0
 8084822:	f8cd b010 	str.w	fp, [sp, #16]
 8084826:	f8cd b020 	str.w	fp, [sp, #32]
 808482a:	f8cd b018 	str.w	fp, [sp, #24]
 808482e:	2322      	movs	r3, #34	; 0x22
 8084830:	f04f 0800 	mov.w	r8, #0
 8084834:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8084940 <_strtod_l+0x598>
 8084838:	f8ca 3000 	str.w	r3, [sl]
 808483c:	9b08      	ldr	r3, [sp, #32]
 808483e:	2b00      	cmp	r3, #0
 8084840:	f43f adf3 	beq.w	808442a <_strtod_l+0x82>
 8084844:	4650      	mov	r0, sl
 8084846:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084848:	f001 f812 	bl	8085870 <_Bfree>
 808484c:	4650      	mov	r0, sl
 808484e:	9906      	ldr	r1, [sp, #24]
 8084850:	f001 f80e 	bl	8085870 <_Bfree>
 8084854:	4650      	mov	r0, sl
 8084856:	9904      	ldr	r1, [sp, #16]
 8084858:	f001 f80a 	bl	8085870 <_Bfree>
 808485c:	4650      	mov	r0, sl
 808485e:	9908      	ldr	r1, [sp, #32]
 8084860:	f001 f806 	bl	8085870 <_Bfree>
 8084864:	4659      	mov	r1, fp
 8084866:	4650      	mov	r0, sl
 8084868:	f001 f802 	bl	8085870 <_Bfree>
 808486c:	e5dd      	b.n	808442a <_strtod_l+0x82>
 808486e:	2300      	movs	r3, #0
 8084870:	4640      	mov	r0, r8
 8084872:	4649      	mov	r1, r9
 8084874:	461f      	mov	r7, r3
 8084876:	1136      	asrs	r6, r6, #4
 8084878:	2e01      	cmp	r6, #1
 808487a:	dc21      	bgt.n	80848c0 <_strtod_l+0x518>
 808487c:	b10b      	cbz	r3, 8084882 <_strtod_l+0x4da>
 808487e:	4680      	mov	r8, r0
 8084880:	4689      	mov	r9, r1
 8084882:	4b2e      	ldr	r3, [pc, #184]	; (808493c <_strtod_l+0x594>)
 8084884:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8084888:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808488c:	4642      	mov	r2, r8
 808488e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8084892:	464b      	mov	r3, r9
 8084894:	f7ff f8c0 	bl	8083a18 <__aeabi_dmul>
 8084898:	4b29      	ldr	r3, [pc, #164]	; (8084940 <_strtod_l+0x598>)
 808489a:	460a      	mov	r2, r1
 808489c:	400b      	ands	r3, r1
 808489e:	4929      	ldr	r1, [pc, #164]	; (8084944 <_strtod_l+0x59c>)
 80848a0:	4680      	mov	r8, r0
 80848a2:	428b      	cmp	r3, r1
 80848a4:	d8bb      	bhi.n	808481e <_strtod_l+0x476>
 80848a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80848aa:	428b      	cmp	r3, r1
 80848ac:	bf86      	itte	hi
 80848ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80848b2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8084948 <_strtod_l+0x5a0>
 80848b6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80848ba:	2300      	movs	r3, #0
 80848bc:	9305      	str	r3, [sp, #20]
 80848be:	e07e      	b.n	80849be <_strtod_l+0x616>
 80848c0:	07f2      	lsls	r2, r6, #31
 80848c2:	d507      	bpl.n	80848d4 <_strtod_l+0x52c>
 80848c4:	4b1d      	ldr	r3, [pc, #116]	; (808493c <_strtod_l+0x594>)
 80848c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80848ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848ce:	f7ff f8a3 	bl	8083a18 <__aeabi_dmul>
 80848d2:	2301      	movs	r3, #1
 80848d4:	3701      	adds	r7, #1
 80848d6:	1076      	asrs	r6, r6, #1
 80848d8:	e7ce      	b.n	8084878 <_strtod_l+0x4d0>
 80848da:	d0ee      	beq.n	80848ba <_strtod_l+0x512>
 80848dc:	4276      	negs	r6, r6
 80848de:	f016 020f 	ands.w	r2, r6, #15
 80848e2:	d00a      	beq.n	80848fa <_strtod_l+0x552>
 80848e4:	4b14      	ldr	r3, [pc, #80]	; (8084938 <_strtod_l+0x590>)
 80848e6:	4640      	mov	r0, r8
 80848e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80848ec:	4649      	mov	r1, r9
 80848ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80848f2:	f7ff f9bb 	bl	8083c6c <__aeabi_ddiv>
 80848f6:	4680      	mov	r8, r0
 80848f8:	4689      	mov	r9, r1
 80848fa:	1136      	asrs	r6, r6, #4
 80848fc:	d0dd      	beq.n	80848ba <_strtod_l+0x512>
 80848fe:	2e1f      	cmp	r6, #31
 8084900:	dd24      	ble.n	808494c <_strtod_l+0x5a4>
 8084902:	f04f 0b00 	mov.w	fp, #0
 8084906:	f8cd b010 	str.w	fp, [sp, #16]
 808490a:	f8cd b020 	str.w	fp, [sp, #32]
 808490e:	f8cd b018 	str.w	fp, [sp, #24]
 8084912:	2322      	movs	r3, #34	; 0x22
 8084914:	f04f 0800 	mov.w	r8, #0
 8084918:	f04f 0900 	mov.w	r9, #0
 808491c:	f8ca 3000 	str.w	r3, [sl]
 8084920:	e78c      	b.n	808483c <_strtod_l+0x494>
 8084922:	bf00      	nop
 8084924:	0808662b 	.word	0x0808662b
 8084928:	08086644 	.word	0x08086644
 808492c:	08086622 	.word	0x08086622
 8084930:	08086625 	.word	0x08086625
 8084934:	08086445 	.word	0x08086445
 8084938:	080867c0 	.word	0x080867c0
 808493c:	08086798 	.word	0x08086798
 8084940:	7ff00000 	.word	0x7ff00000
 8084944:	7ca00000 	.word	0x7ca00000
 8084948:	7fefffff 	.word	0x7fefffff
 808494c:	f016 0310 	ands.w	r3, r6, #16
 8084950:	bf18      	it	ne
 8084952:	236a      	movne	r3, #106	; 0x6a
 8084954:	4640      	mov	r0, r8
 8084956:	9305      	str	r3, [sp, #20]
 8084958:	4649      	mov	r1, r9
 808495a:	2300      	movs	r3, #0
 808495c:	4fb2      	ldr	r7, [pc, #712]	; (8084c28 <_strtod_l+0x880>)
 808495e:	07f2      	lsls	r2, r6, #31
 8084960:	d504      	bpl.n	808496c <_strtod_l+0x5c4>
 8084962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8084966:	f7ff f857 	bl	8083a18 <__aeabi_dmul>
 808496a:	2301      	movs	r3, #1
 808496c:	1076      	asrs	r6, r6, #1
 808496e:	f107 0708 	add.w	r7, r7, #8
 8084972:	d1f4      	bne.n	808495e <_strtod_l+0x5b6>
 8084974:	b10b      	cbz	r3, 808497a <_strtod_l+0x5d2>
 8084976:	4680      	mov	r8, r0
 8084978:	4689      	mov	r9, r1
 808497a:	9b05      	ldr	r3, [sp, #20]
 808497c:	b1bb      	cbz	r3, 80849ae <_strtod_l+0x606>
 808497e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8084982:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8084986:	2b00      	cmp	r3, #0
 8084988:	4649      	mov	r1, r9
 808498a:	dd10      	ble.n	80849ae <_strtod_l+0x606>
 808498c:	2b1f      	cmp	r3, #31
 808498e:	f340 812b 	ble.w	8084be8 <_strtod_l+0x840>
 8084992:	2b34      	cmp	r3, #52	; 0x34
 8084994:	bfd8      	it	le
 8084996:	f04f 32ff 	movle.w	r2, #4294967295
 808499a:	f04f 0800 	mov.w	r8, #0
 808499e:	bfcf      	iteee	gt
 80849a0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80849a4:	3b20      	suble	r3, #32
 80849a6:	fa02 f303 	lslle.w	r3, r2, r3
 80849aa:	ea03 0901 	andle.w	r9, r3, r1
 80849ae:	2200      	movs	r2, #0
 80849b0:	2300      	movs	r3, #0
 80849b2:	4640      	mov	r0, r8
 80849b4:	4649      	mov	r1, r9
 80849b6:	f7ff fa97 	bl	8083ee8 <__aeabi_dcmpeq>
 80849ba:	2800      	cmp	r0, #0
 80849bc:	d1a1      	bne.n	8084902 <_strtod_l+0x55a>
 80849be:	9b06      	ldr	r3, [sp, #24]
 80849c0:	465a      	mov	r2, fp
 80849c2:	9300      	str	r3, [sp, #0]
 80849c4:	4650      	mov	r0, sl
 80849c6:	4623      	mov	r3, r4
 80849c8:	9908      	ldr	r1, [sp, #32]
 80849ca:	f000 ffa6 	bl	808591a <__s2b>
 80849ce:	9008      	str	r0, [sp, #32]
 80849d0:	2800      	cmp	r0, #0
 80849d2:	f43f af24 	beq.w	808481e <_strtod_l+0x476>
 80849d6:	9b04      	ldr	r3, [sp, #16]
 80849d8:	f04f 0b00 	mov.w	fp, #0
 80849dc:	1b5d      	subs	r5, r3, r5
 80849de:	9b07      	ldr	r3, [sp, #28]
 80849e0:	f8cd b010 	str.w	fp, [sp, #16]
 80849e4:	2b00      	cmp	r3, #0
 80849e6:	bfb4      	ite	lt
 80849e8:	462b      	movlt	r3, r5
 80849ea:	2300      	movge	r3, #0
 80849ec:	930e      	str	r3, [sp, #56]	; 0x38
 80849ee:	9b07      	ldr	r3, [sp, #28]
 80849f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80849f4:	9316      	str	r3, [sp, #88]	; 0x58
 80849f6:	9b08      	ldr	r3, [sp, #32]
 80849f8:	4650      	mov	r0, sl
 80849fa:	6859      	ldr	r1, [r3, #4]
 80849fc:	f000 ff04 	bl	8085808 <_Balloc>
 8084a00:	9006      	str	r0, [sp, #24]
 8084a02:	2800      	cmp	r0, #0
 8084a04:	f43f af13 	beq.w	808482e <_strtod_l+0x486>
 8084a08:	9b08      	ldr	r3, [sp, #32]
 8084a0a:	300c      	adds	r0, #12
 8084a0c:	691a      	ldr	r2, [r3, #16]
 8084a0e:	f103 010c 	add.w	r1, r3, #12
 8084a12:	3202      	adds	r2, #2
 8084a14:	0092      	lsls	r2, r2, #2
 8084a16:	f7ff fbeb 	bl	80841f0 <memcpy>
 8084a1a:	ab1e      	add	r3, sp, #120	; 0x78
 8084a1c:	9301      	str	r3, [sp, #4]
 8084a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8084a20:	9300      	str	r3, [sp, #0]
 8084a22:	4642      	mov	r2, r8
 8084a24:	464b      	mov	r3, r9
 8084a26:	4650      	mov	r0, sl
 8084a28:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8084a2c:	f001 fa64 	bl	8085ef8 <__d2b>
 8084a30:	901c      	str	r0, [sp, #112]	; 0x70
 8084a32:	2800      	cmp	r0, #0
 8084a34:	f43f aefb 	beq.w	808482e <_strtod_l+0x486>
 8084a38:	2101      	movs	r1, #1
 8084a3a:	4650      	mov	r0, sl
 8084a3c:	f000 fff9 	bl	8085a32 <__i2b>
 8084a40:	4603      	mov	r3, r0
 8084a42:	9004      	str	r0, [sp, #16]
 8084a44:	2800      	cmp	r0, #0
 8084a46:	f43f aef2 	beq.w	808482e <_strtod_l+0x486>
 8084a4a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8084a4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8084a4e:	2d00      	cmp	r5, #0
 8084a50:	bfab      	itete	ge
 8084a52:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8084a54:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8084a56:	18ee      	addge	r6, r5, r3
 8084a58:	1b5c      	sublt	r4, r3, r5
 8084a5a:	9b05      	ldr	r3, [sp, #20]
 8084a5c:	bfa8      	it	ge
 8084a5e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8084a60:	eba5 0503 	sub.w	r5, r5, r3
 8084a64:	4415      	add	r5, r2
 8084a66:	4b71      	ldr	r3, [pc, #452]	; (8084c2c <_strtod_l+0x884>)
 8084a68:	f105 35ff 	add.w	r5, r5, #4294967295
 8084a6c:	bfb8      	it	lt
 8084a6e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8084a70:	429d      	cmp	r5, r3
 8084a72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8084a76:	f280 80c9 	bge.w	8084c0c <_strtod_l+0x864>
 8084a7a:	1b5b      	subs	r3, r3, r5
 8084a7c:	2b1f      	cmp	r3, #31
 8084a7e:	f04f 0701 	mov.w	r7, #1
 8084a82:	eba2 0203 	sub.w	r2, r2, r3
 8084a86:	f300 80b6 	bgt.w	8084bf6 <_strtod_l+0x84e>
 8084a8a:	2500      	movs	r5, #0
 8084a8c:	fa07 f303 	lsl.w	r3, r7, r3
 8084a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8084a92:	18b7      	adds	r7, r6, r2
 8084a94:	9b05      	ldr	r3, [sp, #20]
 8084a96:	42be      	cmp	r6, r7
 8084a98:	4414      	add	r4, r2
 8084a9a:	441c      	add	r4, r3
 8084a9c:	4633      	mov	r3, r6
 8084a9e:	bfa8      	it	ge
 8084aa0:	463b      	movge	r3, r7
 8084aa2:	42a3      	cmp	r3, r4
 8084aa4:	bfa8      	it	ge
 8084aa6:	4623      	movge	r3, r4
 8084aa8:	2b00      	cmp	r3, #0
 8084aaa:	bfc2      	ittt	gt
 8084aac:	1aff      	subgt	r7, r7, r3
 8084aae:	1ae4      	subgt	r4, r4, r3
 8084ab0:	1af6      	subgt	r6, r6, r3
 8084ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8084ab4:	2b00      	cmp	r3, #0
 8084ab6:	dd17      	ble.n	8084ae8 <_strtod_l+0x740>
 8084ab8:	461a      	mov	r2, r3
 8084aba:	4650      	mov	r0, sl
 8084abc:	9904      	ldr	r1, [sp, #16]
 8084abe:	f001 f85d 	bl	8085b7c <__pow5mult>
 8084ac2:	9004      	str	r0, [sp, #16]
 8084ac4:	2800      	cmp	r0, #0
 8084ac6:	f43f aeb2 	beq.w	808482e <_strtod_l+0x486>
 8084aca:	4601      	mov	r1, r0
 8084acc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8084ace:	4650      	mov	r0, sl
 8084ad0:	f000 ffb8 	bl	8085a44 <__multiply>
 8084ad4:	9009      	str	r0, [sp, #36]	; 0x24
 8084ad6:	2800      	cmp	r0, #0
 8084ad8:	f43f aea9 	beq.w	808482e <_strtod_l+0x486>
 8084adc:	4650      	mov	r0, sl
 8084ade:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084ae0:	f000 fec6 	bl	8085870 <_Bfree>
 8084ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084ae6:	931c      	str	r3, [sp, #112]	; 0x70
 8084ae8:	2f00      	cmp	r7, #0
 8084aea:	f300 8093 	bgt.w	8084c14 <_strtod_l+0x86c>
 8084aee:	9b07      	ldr	r3, [sp, #28]
 8084af0:	2b00      	cmp	r3, #0
 8084af2:	dd08      	ble.n	8084b06 <_strtod_l+0x75e>
 8084af4:	4650      	mov	r0, sl
 8084af6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8084af8:	9906      	ldr	r1, [sp, #24]
 8084afa:	f001 f83f 	bl	8085b7c <__pow5mult>
 8084afe:	9006      	str	r0, [sp, #24]
 8084b00:	2800      	cmp	r0, #0
 8084b02:	f43f ae94 	beq.w	808482e <_strtod_l+0x486>
 8084b06:	2c00      	cmp	r4, #0
 8084b08:	dd08      	ble.n	8084b1c <_strtod_l+0x774>
 8084b0a:	4622      	mov	r2, r4
 8084b0c:	4650      	mov	r0, sl
 8084b0e:	9906      	ldr	r1, [sp, #24]
 8084b10:	f001 f882 	bl	8085c18 <__lshift>
 8084b14:	9006      	str	r0, [sp, #24]
 8084b16:	2800      	cmp	r0, #0
 8084b18:	f43f ae89 	beq.w	808482e <_strtod_l+0x486>
 8084b1c:	2e00      	cmp	r6, #0
 8084b1e:	dd08      	ble.n	8084b32 <_strtod_l+0x78a>
 8084b20:	4632      	mov	r2, r6
 8084b22:	4650      	mov	r0, sl
 8084b24:	9904      	ldr	r1, [sp, #16]
 8084b26:	f001 f877 	bl	8085c18 <__lshift>
 8084b2a:	9004      	str	r0, [sp, #16]
 8084b2c:	2800      	cmp	r0, #0
 8084b2e:	f43f ae7e 	beq.w	808482e <_strtod_l+0x486>
 8084b32:	4650      	mov	r0, sl
 8084b34:	9a06      	ldr	r2, [sp, #24]
 8084b36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084b38:	f001 f8e8 	bl	8085d0c <__mdiff>
 8084b3c:	4683      	mov	fp, r0
 8084b3e:	2800      	cmp	r0, #0
 8084b40:	f43f ae75 	beq.w	808482e <_strtod_l+0x486>
 8084b44:	2400      	movs	r4, #0
 8084b46:	68c3      	ldr	r3, [r0, #12]
 8084b48:	9904      	ldr	r1, [sp, #16]
 8084b4a:	60c4      	str	r4, [r0, #12]
 8084b4c:	930d      	str	r3, [sp, #52]	; 0x34
 8084b4e:	f001 f8c2 	bl	8085cd6 <__mcmp>
 8084b52:	42a0      	cmp	r0, r4
 8084b54:	da70      	bge.n	8084c38 <_strtod_l+0x890>
 8084b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084b58:	ea53 0308 	orrs.w	r3, r3, r8
 8084b5c:	f040 8096 	bne.w	8084c8c <_strtod_l+0x8e4>
 8084b60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8084b64:	2b00      	cmp	r3, #0
 8084b66:	f040 8091 	bne.w	8084c8c <_strtod_l+0x8e4>
 8084b6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8084b6e:	0d1b      	lsrs	r3, r3, #20
 8084b70:	051b      	lsls	r3, r3, #20
 8084b72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8084b76:	f240 8089 	bls.w	8084c8c <_strtod_l+0x8e4>
 8084b7a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8084b7e:	b923      	cbnz	r3, 8084b8a <_strtod_l+0x7e2>
 8084b80:	f8db 3010 	ldr.w	r3, [fp, #16]
 8084b84:	2b01      	cmp	r3, #1
 8084b86:	f340 8081 	ble.w	8084c8c <_strtod_l+0x8e4>
 8084b8a:	4659      	mov	r1, fp
 8084b8c:	2201      	movs	r2, #1
 8084b8e:	4650      	mov	r0, sl
 8084b90:	f001 f842 	bl	8085c18 <__lshift>
 8084b94:	9904      	ldr	r1, [sp, #16]
 8084b96:	4683      	mov	fp, r0
 8084b98:	f001 f89d 	bl	8085cd6 <__mcmp>
 8084b9c:	2800      	cmp	r0, #0
 8084b9e:	dd75      	ble.n	8084c8c <_strtod_l+0x8e4>
 8084ba0:	9905      	ldr	r1, [sp, #20]
 8084ba2:	464b      	mov	r3, r9
 8084ba4:	4a22      	ldr	r2, [pc, #136]	; (8084c30 <_strtod_l+0x888>)
 8084ba6:	2900      	cmp	r1, #0
 8084ba8:	f000 8091 	beq.w	8084cce <_strtod_l+0x926>
 8084bac:	ea02 0109 	and.w	r1, r2, r9
 8084bb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8084bb4:	f300 808b 	bgt.w	8084cce <_strtod_l+0x926>
 8084bb8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8084bbc:	f77f aea9 	ble.w	8084912 <_strtod_l+0x56a>
 8084bc0:	2300      	movs	r3, #0
 8084bc2:	4a1c      	ldr	r2, [pc, #112]	; (8084c34 <_strtod_l+0x88c>)
 8084bc4:	4640      	mov	r0, r8
 8084bc6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8084bca:	4649      	mov	r1, r9
 8084bcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8084bd0:	f7fe ff22 	bl	8083a18 <__aeabi_dmul>
 8084bd4:	460b      	mov	r3, r1
 8084bd6:	4303      	orrs	r3, r0
 8084bd8:	bf08      	it	eq
 8084bda:	2322      	moveq	r3, #34	; 0x22
 8084bdc:	4680      	mov	r8, r0
 8084bde:	4689      	mov	r9, r1
 8084be0:	bf08      	it	eq
 8084be2:	f8ca 3000 	streq.w	r3, [sl]
 8084be6:	e62d      	b.n	8084844 <_strtod_l+0x49c>
 8084be8:	f04f 32ff 	mov.w	r2, #4294967295
 8084bec:	fa02 f303 	lsl.w	r3, r2, r3
 8084bf0:	ea03 0808 	and.w	r8, r3, r8
 8084bf4:	e6db      	b.n	80849ae <_strtod_l+0x606>
 8084bf6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8084bfa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8084bfe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8084c02:	35e2      	adds	r5, #226	; 0xe2
 8084c04:	fa07 f505 	lsl.w	r5, r7, r5
 8084c08:	970f      	str	r7, [sp, #60]	; 0x3c
 8084c0a:	e742      	b.n	8084a92 <_strtod_l+0x6ea>
 8084c0c:	2301      	movs	r3, #1
 8084c0e:	2500      	movs	r5, #0
 8084c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8084c12:	e73e      	b.n	8084a92 <_strtod_l+0x6ea>
 8084c14:	463a      	mov	r2, r7
 8084c16:	4650      	mov	r0, sl
 8084c18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084c1a:	f000 fffd 	bl	8085c18 <__lshift>
 8084c1e:	901c      	str	r0, [sp, #112]	; 0x70
 8084c20:	2800      	cmp	r0, #0
 8084c22:	f47f af64 	bne.w	8084aee <_strtod_l+0x746>
 8084c26:	e602      	b.n	808482e <_strtod_l+0x486>
 8084c28:	08086658 	.word	0x08086658
 8084c2c:	fffffc02 	.word	0xfffffc02
 8084c30:	7ff00000 	.word	0x7ff00000
 8084c34:	39500000 	.word	0x39500000
 8084c38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8084c3c:	d166      	bne.n	8084d0c <_strtod_l+0x964>
 8084c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8084c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8084c44:	b35a      	cbz	r2, 8084c9e <_strtod_l+0x8f6>
 8084c46:	4a9c      	ldr	r2, [pc, #624]	; (8084eb8 <_strtod_l+0xb10>)
 8084c48:	4293      	cmp	r3, r2
 8084c4a:	d12c      	bne.n	8084ca6 <_strtod_l+0x8fe>
 8084c4c:	9b05      	ldr	r3, [sp, #20]
 8084c4e:	4640      	mov	r0, r8
 8084c50:	b303      	cbz	r3, 8084c94 <_strtod_l+0x8ec>
 8084c52:	464b      	mov	r3, r9
 8084c54:	4a99      	ldr	r2, [pc, #612]	; (8084ebc <_strtod_l+0xb14>)
 8084c56:	f04f 31ff 	mov.w	r1, #4294967295
 8084c5a:	401a      	ands	r2, r3
 8084c5c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8084c60:	d81b      	bhi.n	8084c9a <_strtod_l+0x8f2>
 8084c62:	0d12      	lsrs	r2, r2, #20
 8084c64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8084c68:	fa01 f303 	lsl.w	r3, r1, r3
 8084c6c:	4298      	cmp	r0, r3
 8084c6e:	d11a      	bne.n	8084ca6 <_strtod_l+0x8fe>
 8084c70:	4b93      	ldr	r3, [pc, #588]	; (8084ec0 <_strtod_l+0xb18>)
 8084c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8084c74:	429a      	cmp	r2, r3
 8084c76:	d102      	bne.n	8084c7e <_strtod_l+0x8d6>
 8084c78:	3001      	adds	r0, #1
 8084c7a:	f43f add8 	beq.w	808482e <_strtod_l+0x486>
 8084c7e:	f04f 0800 	mov.w	r8, #0
 8084c82:	4b8e      	ldr	r3, [pc, #568]	; (8084ebc <_strtod_l+0xb14>)
 8084c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8084c86:	401a      	ands	r2, r3
 8084c88:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8084c8c:	9b05      	ldr	r3, [sp, #20]
 8084c8e:	2b00      	cmp	r3, #0
 8084c90:	d196      	bne.n	8084bc0 <_strtod_l+0x818>
 8084c92:	e5d7      	b.n	8084844 <_strtod_l+0x49c>
 8084c94:	f04f 33ff 	mov.w	r3, #4294967295
 8084c98:	e7e8      	b.n	8084c6c <_strtod_l+0x8c4>
 8084c9a:	460b      	mov	r3, r1
 8084c9c:	e7e6      	b.n	8084c6c <_strtod_l+0x8c4>
 8084c9e:	ea53 0308 	orrs.w	r3, r3, r8
 8084ca2:	f43f af7d 	beq.w	8084ba0 <_strtod_l+0x7f8>
 8084ca6:	b1e5      	cbz	r5, 8084ce2 <_strtod_l+0x93a>
 8084ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084caa:	421d      	tst	r5, r3
 8084cac:	d0ee      	beq.n	8084c8c <_strtod_l+0x8e4>
 8084cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084cb0:	4640      	mov	r0, r8
 8084cb2:	4649      	mov	r1, r9
 8084cb4:	9a05      	ldr	r2, [sp, #20]
 8084cb6:	b1c3      	cbz	r3, 8084cea <_strtod_l+0x942>
 8084cb8:	f7ff fb53 	bl	8084362 <sulp>
 8084cbc:	4602      	mov	r2, r0
 8084cbe:	460b      	mov	r3, r1
 8084cc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084cc4:	f7fe fcf2 	bl	80836ac <__adddf3>
 8084cc8:	4680      	mov	r8, r0
 8084cca:	4689      	mov	r9, r1
 8084ccc:	e7de      	b.n	8084c8c <_strtod_l+0x8e4>
 8084cce:	4013      	ands	r3, r2
 8084cd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8084cd4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8084cd8:	f04f 38ff 	mov.w	r8, #4294967295
 8084cdc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8084ce0:	e7d4      	b.n	8084c8c <_strtod_l+0x8e4>
 8084ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8084ce4:	ea13 0f08 	tst.w	r3, r8
 8084ce8:	e7e0      	b.n	8084cac <_strtod_l+0x904>
 8084cea:	f7ff fb3a 	bl	8084362 <sulp>
 8084cee:	4602      	mov	r2, r0
 8084cf0:	460b      	mov	r3, r1
 8084cf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084cf6:	f7fe fcd7 	bl	80836a8 <__aeabi_dsub>
 8084cfa:	2200      	movs	r2, #0
 8084cfc:	2300      	movs	r3, #0
 8084cfe:	4680      	mov	r8, r0
 8084d00:	4689      	mov	r9, r1
 8084d02:	f7ff f8f1 	bl	8083ee8 <__aeabi_dcmpeq>
 8084d06:	2800      	cmp	r0, #0
 8084d08:	d0c0      	beq.n	8084c8c <_strtod_l+0x8e4>
 8084d0a:	e602      	b.n	8084912 <_strtod_l+0x56a>
 8084d0c:	4658      	mov	r0, fp
 8084d0e:	9904      	ldr	r1, [sp, #16]
 8084d10:	f001 f941 	bl	8085f96 <__ratio>
 8084d14:	2200      	movs	r2, #0
 8084d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8084d1a:	4606      	mov	r6, r0
 8084d1c:	460f      	mov	r7, r1
 8084d1e:	f7ff f8f7 	bl	8083f10 <__aeabi_dcmple>
 8084d22:	2800      	cmp	r0, #0
 8084d24:	d075      	beq.n	8084e12 <_strtod_l+0xa6a>
 8084d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084d28:	2b00      	cmp	r3, #0
 8084d2a:	d047      	beq.n	8084dbc <_strtod_l+0xa14>
 8084d2c:	2600      	movs	r6, #0
 8084d2e:	4f65      	ldr	r7, [pc, #404]	; (8084ec4 <_strtod_l+0xb1c>)
 8084d30:	4d64      	ldr	r5, [pc, #400]	; (8084ec4 <_strtod_l+0xb1c>)
 8084d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084d34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8084d38:	0d1b      	lsrs	r3, r3, #20
 8084d3a:	051b      	lsls	r3, r3, #20
 8084d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8084d3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084d40:	4b61      	ldr	r3, [pc, #388]	; (8084ec8 <_strtod_l+0xb20>)
 8084d42:	429a      	cmp	r2, r3
 8084d44:	f040 80c8 	bne.w	8084ed8 <_strtod_l+0xb30>
 8084d48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8084d4c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8084d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084d52:	4640      	mov	r0, r8
 8084d54:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8084d58:	4649      	mov	r1, r9
 8084d5a:	f001 f853 	bl	8085e04 <__ulp>
 8084d5e:	4602      	mov	r2, r0
 8084d60:	460b      	mov	r3, r1
 8084d62:	4630      	mov	r0, r6
 8084d64:	4639      	mov	r1, r7
 8084d66:	f7fe fe57 	bl	8083a18 <__aeabi_dmul>
 8084d6a:	4642      	mov	r2, r8
 8084d6c:	464b      	mov	r3, r9
 8084d6e:	f7fe fc9d 	bl	80836ac <__adddf3>
 8084d72:	460b      	mov	r3, r1
 8084d74:	4951      	ldr	r1, [pc, #324]	; (8084ebc <_strtod_l+0xb14>)
 8084d76:	4a55      	ldr	r2, [pc, #340]	; (8084ecc <_strtod_l+0xb24>)
 8084d78:	4019      	ands	r1, r3
 8084d7a:	4291      	cmp	r1, r2
 8084d7c:	4680      	mov	r8, r0
 8084d7e:	d95e      	bls.n	8084e3e <_strtod_l+0xa96>
 8084d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8084d82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8084d86:	4293      	cmp	r3, r2
 8084d88:	d103      	bne.n	8084d92 <_strtod_l+0x9ea>
 8084d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084d8c:	3301      	adds	r3, #1
 8084d8e:	f43f ad4e 	beq.w	808482e <_strtod_l+0x486>
 8084d92:	f04f 38ff 	mov.w	r8, #4294967295
 8084d96:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8084ec0 <_strtod_l+0xb18>
 8084d9a:	4650      	mov	r0, sl
 8084d9c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8084d9e:	f000 fd67 	bl	8085870 <_Bfree>
 8084da2:	4650      	mov	r0, sl
 8084da4:	9906      	ldr	r1, [sp, #24]
 8084da6:	f000 fd63 	bl	8085870 <_Bfree>
 8084daa:	4650      	mov	r0, sl
 8084dac:	9904      	ldr	r1, [sp, #16]
 8084dae:	f000 fd5f 	bl	8085870 <_Bfree>
 8084db2:	4659      	mov	r1, fp
 8084db4:	4650      	mov	r0, sl
 8084db6:	f000 fd5b 	bl	8085870 <_Bfree>
 8084dba:	e61c      	b.n	80849f6 <_strtod_l+0x64e>
 8084dbc:	f1b8 0f00 	cmp.w	r8, #0
 8084dc0:	d119      	bne.n	8084df6 <_strtod_l+0xa4e>
 8084dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8084dc8:	b9e3      	cbnz	r3, 8084e04 <_strtod_l+0xa5c>
 8084dca:	2200      	movs	r2, #0
 8084dcc:	4630      	mov	r0, r6
 8084dce:	4639      	mov	r1, r7
 8084dd0:	4b3c      	ldr	r3, [pc, #240]	; (8084ec4 <_strtod_l+0xb1c>)
 8084dd2:	f7ff f893 	bl	8083efc <__aeabi_dcmplt>
 8084dd6:	b9c8      	cbnz	r0, 8084e0c <_strtod_l+0xa64>
 8084dd8:	2200      	movs	r2, #0
 8084dda:	4630      	mov	r0, r6
 8084ddc:	4639      	mov	r1, r7
 8084dde:	4b3c      	ldr	r3, [pc, #240]	; (8084ed0 <_strtod_l+0xb28>)
 8084de0:	f7fe fe1a 	bl	8083a18 <__aeabi_dmul>
 8084de4:	4604      	mov	r4, r0
 8084de6:	460d      	mov	r5, r1
 8084de8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8084dec:	9418      	str	r4, [sp, #96]	; 0x60
 8084dee:	9319      	str	r3, [sp, #100]	; 0x64
 8084df0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8084df4:	e79d      	b.n	8084d32 <_strtod_l+0x98a>
 8084df6:	f1b8 0f01 	cmp.w	r8, #1
 8084dfa:	d103      	bne.n	8084e04 <_strtod_l+0xa5c>
 8084dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084dfe:	2b00      	cmp	r3, #0
 8084e00:	f43f ad87 	beq.w	8084912 <_strtod_l+0x56a>
 8084e04:	2600      	movs	r6, #0
 8084e06:	2400      	movs	r4, #0
 8084e08:	4f32      	ldr	r7, [pc, #200]	; (8084ed4 <_strtod_l+0xb2c>)
 8084e0a:	e791      	b.n	8084d30 <_strtod_l+0x988>
 8084e0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8084e0e:	4d30      	ldr	r5, [pc, #192]	; (8084ed0 <_strtod_l+0xb28>)
 8084e10:	e7ea      	b.n	8084de8 <_strtod_l+0xa40>
 8084e12:	4b2f      	ldr	r3, [pc, #188]	; (8084ed0 <_strtod_l+0xb28>)
 8084e14:	2200      	movs	r2, #0
 8084e16:	4630      	mov	r0, r6
 8084e18:	4639      	mov	r1, r7
 8084e1a:	f7fe fdfd 	bl	8083a18 <__aeabi_dmul>
 8084e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084e20:	4604      	mov	r4, r0
 8084e22:	460d      	mov	r5, r1
 8084e24:	b933      	cbnz	r3, 8084e34 <_strtod_l+0xa8c>
 8084e26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8084e2a:	9010      	str	r0, [sp, #64]	; 0x40
 8084e2c:	9311      	str	r3, [sp, #68]	; 0x44
 8084e2e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8084e32:	e77e      	b.n	8084d32 <_strtod_l+0x98a>
 8084e34:	4602      	mov	r2, r0
 8084e36:	460b      	mov	r3, r1
 8084e38:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8084e3c:	e7f7      	b.n	8084e2e <_strtod_l+0xa86>
 8084e3e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8084e42:	9b05      	ldr	r3, [sp, #20]
 8084e44:	2b00      	cmp	r3, #0
 8084e46:	d1a8      	bne.n	8084d9a <_strtod_l+0x9f2>
 8084e48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8084e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084e4e:	0d1b      	lsrs	r3, r3, #20
 8084e50:	051b      	lsls	r3, r3, #20
 8084e52:	429a      	cmp	r2, r3
 8084e54:	d1a1      	bne.n	8084d9a <_strtod_l+0x9f2>
 8084e56:	4620      	mov	r0, r4
 8084e58:	4629      	mov	r1, r5
 8084e5a:	f001 f94b 	bl	80860f4 <__aeabi_d2lz>
 8084e5e:	f7fe fdad 	bl	80839bc <__aeabi_l2d>
 8084e62:	4602      	mov	r2, r0
 8084e64:	460b      	mov	r3, r1
 8084e66:	4620      	mov	r0, r4
 8084e68:	4629      	mov	r1, r5
 8084e6a:	f7fe fc1d 	bl	80836a8 <__aeabi_dsub>
 8084e6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8084e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8084e74:	ea43 0308 	orr.w	r3, r3, r8
 8084e78:	4313      	orrs	r3, r2
 8084e7a:	4604      	mov	r4, r0
 8084e7c:	460d      	mov	r5, r1
 8084e7e:	d066      	beq.n	8084f4e <_strtod_l+0xba6>
 8084e80:	a309      	add	r3, pc, #36	; (adr r3, 8084ea8 <_strtod_l+0xb00>)
 8084e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084e86:	f7ff f839 	bl	8083efc <__aeabi_dcmplt>
 8084e8a:	2800      	cmp	r0, #0
 8084e8c:	f47f acda 	bne.w	8084844 <_strtod_l+0x49c>
 8084e90:	a307      	add	r3, pc, #28	; (adr r3, 8084eb0 <_strtod_l+0xb08>)
 8084e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084e96:	4620      	mov	r0, r4
 8084e98:	4629      	mov	r1, r5
 8084e9a:	f7ff f84d 	bl	8083f38 <__aeabi_dcmpgt>
 8084e9e:	2800      	cmp	r0, #0
 8084ea0:	f43f af7b 	beq.w	8084d9a <_strtod_l+0x9f2>
 8084ea4:	e4ce      	b.n	8084844 <_strtod_l+0x49c>
 8084ea6:	bf00      	nop
 8084ea8:	94a03595 	.word	0x94a03595
 8084eac:	3fdfffff 	.word	0x3fdfffff
 8084eb0:	35afe535 	.word	0x35afe535
 8084eb4:	3fe00000 	.word	0x3fe00000
 8084eb8:	000fffff 	.word	0x000fffff
 8084ebc:	7ff00000 	.word	0x7ff00000
 8084ec0:	7fefffff 	.word	0x7fefffff
 8084ec4:	3ff00000 	.word	0x3ff00000
 8084ec8:	7fe00000 	.word	0x7fe00000
 8084ecc:	7c9fffff 	.word	0x7c9fffff
 8084ed0:	3fe00000 	.word	0x3fe00000
 8084ed4:	bff00000 	.word	0xbff00000
 8084ed8:	9b05      	ldr	r3, [sp, #20]
 8084eda:	b313      	cbz	r3, 8084f22 <_strtod_l+0xb7a>
 8084edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8084ede:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8084ee2:	d81e      	bhi.n	8084f22 <_strtod_l+0xb7a>
 8084ee4:	a326      	add	r3, pc, #152	; (adr r3, 8084f80 <_strtod_l+0xbd8>)
 8084ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084eea:	4620      	mov	r0, r4
 8084eec:	4629      	mov	r1, r5
 8084eee:	f7ff f80f 	bl	8083f10 <__aeabi_dcmple>
 8084ef2:	b190      	cbz	r0, 8084f1a <_strtod_l+0xb72>
 8084ef4:	4629      	mov	r1, r5
 8084ef6:	4620      	mov	r0, r4
 8084ef8:	f7ff f83e 	bl	8083f78 <__aeabi_d2uiz>
 8084efc:	2801      	cmp	r0, #1
 8084efe:	bf38      	it	cc
 8084f00:	2001      	movcc	r0, #1
 8084f02:	f7fe fd0f 	bl	8083924 <__aeabi_ui2d>
 8084f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084f08:	4604      	mov	r4, r0
 8084f0a:	460d      	mov	r5, r1
 8084f0c:	b9d3      	cbnz	r3, 8084f44 <_strtod_l+0xb9c>
 8084f0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8084f12:	9012      	str	r0, [sp, #72]	; 0x48
 8084f14:	9313      	str	r3, [sp, #76]	; 0x4c
 8084f16:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8084f1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8084f1c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8084f20:	1a9f      	subs	r7, r3, r2
 8084f22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8084f26:	f000 ff6d 	bl	8085e04 <__ulp>
 8084f2a:	4602      	mov	r2, r0
 8084f2c:	460b      	mov	r3, r1
 8084f2e:	4630      	mov	r0, r6
 8084f30:	4639      	mov	r1, r7
 8084f32:	f7fe fd71 	bl	8083a18 <__aeabi_dmul>
 8084f36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8084f3a:	f7fe fbb7 	bl	80836ac <__adddf3>
 8084f3e:	4680      	mov	r8, r0
 8084f40:	4689      	mov	r9, r1
 8084f42:	e77e      	b.n	8084e42 <_strtod_l+0xa9a>
 8084f44:	4602      	mov	r2, r0
 8084f46:	460b      	mov	r3, r1
 8084f48:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8084f4c:	e7e3      	b.n	8084f16 <_strtod_l+0xb6e>
 8084f4e:	a30e      	add	r3, pc, #56	; (adr r3, 8084f88 <_strtod_l+0xbe0>)
 8084f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084f54:	f7fe ffd2 	bl	8083efc <__aeabi_dcmplt>
 8084f58:	e7a1      	b.n	8084e9e <_strtod_l+0xaf6>
 8084f5a:	2300      	movs	r3, #0
 8084f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8084f5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084f60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8084f62:	6013      	str	r3, [r2, #0]
 8084f64:	f7ff ba65 	b.w	8084432 <_strtod_l+0x8a>
 8084f68:	2b65      	cmp	r3, #101	; 0x65
 8084f6a:	f43f ab5c 	beq.w	8084626 <_strtod_l+0x27e>
 8084f6e:	2b45      	cmp	r3, #69	; 0x45
 8084f70:	f43f ab59 	beq.w	8084626 <_strtod_l+0x27e>
 8084f74:	2201      	movs	r2, #1
 8084f76:	f7ff bb8d 	b.w	8084694 <_strtod_l+0x2ec>
 8084f7a:	bf00      	nop
 8084f7c:	f3af 8000 	nop.w
 8084f80:	ffc00000 	.word	0xffc00000
 8084f84:	41dfffff 	.word	0x41dfffff
 8084f88:	94a03595 	.word	0x94a03595
 8084f8c:	3fcfffff 	.word	0x3fcfffff

08084f90 <strtof>:
 8084f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084f94:	4f22      	ldr	r7, [pc, #136]	; (8085020 <strtof+0x90>)
 8084f96:	460a      	mov	r2, r1
 8084f98:	4b22      	ldr	r3, [pc, #136]	; (8085024 <strtof+0x94>)
 8084f9a:	4601      	mov	r1, r0
 8084f9c:	6838      	ldr	r0, [r7, #0]
 8084f9e:	f7ff fa03 	bl	80843a8 <_strtod_l>
 8084fa2:	4602      	mov	r2, r0
 8084fa4:	460b      	mov	r3, r1
 8084fa6:	4606      	mov	r6, r0
 8084fa8:	460c      	mov	r4, r1
 8084faa:	f7fe ffcf 	bl	8083f4c <__aeabi_dcmpun>
 8084fae:	b168      	cbz	r0, 8084fcc <strtof+0x3c>
 8084fb0:	2c00      	cmp	r4, #0
 8084fb2:	481d      	ldr	r0, [pc, #116]	; (8085028 <strtof+0x98>)
 8084fb4:	da06      	bge.n	8084fc4 <strtof+0x34>
 8084fb6:	f001 f875 	bl	80860a4 <nanf>
 8084fba:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8084fbe:	4628      	mov	r0, r5
 8084fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8084fc8:	f001 b86c 	b.w	80860a4 <nanf>
 8084fcc:	4621      	mov	r1, r4
 8084fce:	4630      	mov	r0, r6
 8084fd0:	f7fe fff2 	bl	8083fb8 <__aeabi_d2f>
 8084fd4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8084fd8:	4605      	mov	r5, r0
 8084fda:	4914      	ldr	r1, [pc, #80]	; (808502c <strtof+0x9c>)
 8084fdc:	4640      	mov	r0, r8
 8084fde:	f001 f873 	bl	80860c8 <__aeabi_fcmpun>
 8084fe2:	2800      	cmp	r0, #0
 8084fe4:	d1eb      	bne.n	8084fbe <strtof+0x2e>
 8084fe6:	4640      	mov	r0, r8
 8084fe8:	4910      	ldr	r1, [pc, #64]	; (808502c <strtof+0x9c>)
 8084fea:	f7ff f88d 	bl	8084108 <__aeabi_fcmple>
 8084fee:	2800      	cmp	r0, #0
 8084ff0:	d1e5      	bne.n	8084fbe <strtof+0x2e>
 8084ff2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8084ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8084ffa:	4630      	mov	r0, r6
 8084ffc:	4621      	mov	r1, r4
 8084ffe:	4b0c      	ldr	r3, [pc, #48]	; (8085030 <strtof+0xa0>)
 8085000:	f7fe ffa4 	bl	8083f4c <__aeabi_dcmpun>
 8085004:	b940      	cbnz	r0, 8085018 <strtof+0x88>
 8085006:	f04f 32ff 	mov.w	r2, #4294967295
 808500a:	4630      	mov	r0, r6
 808500c:	4621      	mov	r1, r4
 808500e:	4b08      	ldr	r3, [pc, #32]	; (8085030 <strtof+0xa0>)
 8085010:	f7fe ff7e 	bl	8083f10 <__aeabi_dcmple>
 8085014:	2800      	cmp	r0, #0
 8085016:	d0d2      	beq.n	8084fbe <strtof+0x2e>
 8085018:	2222      	movs	r2, #34	; 0x22
 808501a:	683b      	ldr	r3, [r7, #0]
 808501c:	601a      	str	r2, [r3, #0]
 808501e:	e7ce      	b.n	8084fbe <strtof+0x2e>
 8085020:	20000014 	.word	0x20000014
 8085024:	2000007c 	.word	0x2000007c
 8085028:	08086445 	.word	0x08086445
 808502c:	7f7fffff 	.word	0x7f7fffff
 8085030:	7fefffff 	.word	0x7fefffff

08085034 <_strtol_l.isra.0>:
 8085034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085038:	468c      	mov	ip, r1
 808503a:	4686      	mov	lr, r0
 808503c:	4e39      	ldr	r6, [pc, #228]	; (8085124 <_strtol_l.isra.0+0xf0>)
 808503e:	4660      	mov	r0, ip
 8085040:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8085044:	5da5      	ldrb	r5, [r4, r6]
 8085046:	f015 0508 	ands.w	r5, r5, #8
 808504a:	d1f8      	bne.n	808503e <_strtol_l.isra.0+0xa>
 808504c:	2c2d      	cmp	r4, #45	; 0x2d
 808504e:	d133      	bne.n	80850b8 <_strtol_l.isra.0+0x84>
 8085050:	f04f 0801 	mov.w	r8, #1
 8085054:	f89c 4000 	ldrb.w	r4, [ip]
 8085058:	f100 0c02 	add.w	ip, r0, #2
 808505c:	2b00      	cmp	r3, #0
 808505e:	d05c      	beq.n	808511a <_strtol_l.isra.0+0xe6>
 8085060:	2b10      	cmp	r3, #16
 8085062:	d10c      	bne.n	808507e <_strtol_l.isra.0+0x4a>
 8085064:	2c30      	cmp	r4, #48	; 0x30
 8085066:	d10a      	bne.n	808507e <_strtol_l.isra.0+0x4a>
 8085068:	f89c 0000 	ldrb.w	r0, [ip]
 808506c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085070:	2858      	cmp	r0, #88	; 0x58
 8085072:	d14d      	bne.n	8085110 <_strtol_l.isra.0+0xdc>
 8085074:	2310      	movs	r3, #16
 8085076:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808507a:	f10c 0c02 	add.w	ip, ip, #2
 808507e:	2600      	movs	r6, #0
 8085080:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8085084:	3f01      	subs	r7, #1
 8085086:	fbb7 f9f3 	udiv	r9, r7, r3
 808508a:	4630      	mov	r0, r6
 808508c:	fb03 7a19 	mls	sl, r3, r9, r7
 8085090:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8085094:	2d09      	cmp	r5, #9
 8085096:	d818      	bhi.n	80850ca <_strtol_l.isra.0+0x96>
 8085098:	462c      	mov	r4, r5
 808509a:	42a3      	cmp	r3, r4
 808509c:	dd24      	ble.n	80850e8 <_strtol_l.isra.0+0xb4>
 808509e:	1c75      	adds	r5, r6, #1
 80850a0:	d007      	beq.n	80850b2 <_strtol_l.isra.0+0x7e>
 80850a2:	4581      	cmp	r9, r0
 80850a4:	d31d      	bcc.n	80850e2 <_strtol_l.isra.0+0xae>
 80850a6:	d101      	bne.n	80850ac <_strtol_l.isra.0+0x78>
 80850a8:	45a2      	cmp	sl, r4
 80850aa:	db1a      	blt.n	80850e2 <_strtol_l.isra.0+0xae>
 80850ac:	2601      	movs	r6, #1
 80850ae:	fb00 4003 	mla	r0, r0, r3, r4
 80850b2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80850b6:	e7eb      	b.n	8085090 <_strtol_l.isra.0+0x5c>
 80850b8:	2c2b      	cmp	r4, #43	; 0x2b
 80850ba:	bf08      	it	eq
 80850bc:	f89c 4000 	ldrbeq.w	r4, [ip]
 80850c0:	46a8      	mov	r8, r5
 80850c2:	bf08      	it	eq
 80850c4:	f100 0c02 	addeq.w	ip, r0, #2
 80850c8:	e7c8      	b.n	808505c <_strtol_l.isra.0+0x28>
 80850ca:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80850ce:	2d19      	cmp	r5, #25
 80850d0:	d801      	bhi.n	80850d6 <_strtol_l.isra.0+0xa2>
 80850d2:	3c37      	subs	r4, #55	; 0x37
 80850d4:	e7e1      	b.n	808509a <_strtol_l.isra.0+0x66>
 80850d6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80850da:	2d19      	cmp	r5, #25
 80850dc:	d804      	bhi.n	80850e8 <_strtol_l.isra.0+0xb4>
 80850de:	3c57      	subs	r4, #87	; 0x57
 80850e0:	e7db      	b.n	808509a <_strtol_l.isra.0+0x66>
 80850e2:	f04f 36ff 	mov.w	r6, #4294967295
 80850e6:	e7e4      	b.n	80850b2 <_strtol_l.isra.0+0x7e>
 80850e8:	1c73      	adds	r3, r6, #1
 80850ea:	d106      	bne.n	80850fa <_strtol_l.isra.0+0xc6>
 80850ec:	2322      	movs	r3, #34	; 0x22
 80850ee:	4638      	mov	r0, r7
 80850f0:	f8ce 3000 	str.w	r3, [lr]
 80850f4:	b942      	cbnz	r2, 8085108 <_strtol_l.isra.0+0xd4>
 80850f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80850fa:	f1b8 0f00 	cmp.w	r8, #0
 80850fe:	d000      	beq.n	8085102 <_strtol_l.isra.0+0xce>
 8085100:	4240      	negs	r0, r0
 8085102:	2a00      	cmp	r2, #0
 8085104:	d0f7      	beq.n	80850f6 <_strtol_l.isra.0+0xc2>
 8085106:	b10e      	cbz	r6, 808510c <_strtol_l.isra.0+0xd8>
 8085108:	f10c 31ff 	add.w	r1, ip, #4294967295
 808510c:	6011      	str	r1, [r2, #0]
 808510e:	e7f2      	b.n	80850f6 <_strtol_l.isra.0+0xc2>
 8085110:	2430      	movs	r4, #48	; 0x30
 8085112:	2b00      	cmp	r3, #0
 8085114:	d1b3      	bne.n	808507e <_strtol_l.isra.0+0x4a>
 8085116:	2308      	movs	r3, #8
 8085118:	e7b1      	b.n	808507e <_strtol_l.isra.0+0x4a>
 808511a:	2c30      	cmp	r4, #48	; 0x30
 808511c:	d0a4      	beq.n	8085068 <_strtol_l.isra.0+0x34>
 808511e:	230a      	movs	r3, #10
 8085120:	e7ad      	b.n	808507e <_strtol_l.isra.0+0x4a>
 8085122:	bf00      	nop
 8085124:	08086681 	.word	0x08086681

08085128 <strtol>:
 8085128:	4613      	mov	r3, r2
 808512a:	460a      	mov	r2, r1
 808512c:	4601      	mov	r1, r0
 808512e:	4802      	ldr	r0, [pc, #8]	; (8085138 <strtol+0x10>)
 8085130:	6800      	ldr	r0, [r0, #0]
 8085132:	f7ff bf7f 	b.w	8085034 <_strtol_l.isra.0>
 8085136:	bf00      	nop
 8085138:	20000014 	.word	0x20000014

0808513c <rshift>:
 808513c:	6903      	ldr	r3, [r0, #16]
 808513e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8085142:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8085146:	f100 0414 	add.w	r4, r0, #20
 808514a:	ea4f 1261 	mov.w	r2, r1, asr #5
 808514e:	dd46      	ble.n	80851de <rshift+0xa2>
 8085150:	f011 011f 	ands.w	r1, r1, #31
 8085154:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8085158:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 808515c:	d10c      	bne.n	8085178 <rshift+0x3c>
 808515e:	4629      	mov	r1, r5
 8085160:	f100 0710 	add.w	r7, r0, #16
 8085164:	42b1      	cmp	r1, r6
 8085166:	d335      	bcc.n	80851d4 <rshift+0x98>
 8085168:	1a9b      	subs	r3, r3, r2
 808516a:	009b      	lsls	r3, r3, #2
 808516c:	1eea      	subs	r2, r5, #3
 808516e:	4296      	cmp	r6, r2
 8085170:	bf38      	it	cc
 8085172:	2300      	movcc	r3, #0
 8085174:	4423      	add	r3, r4
 8085176:	e015      	b.n	80851a4 <rshift+0x68>
 8085178:	46a1      	mov	r9, r4
 808517a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 808517e:	f1c1 0820 	rsb	r8, r1, #32
 8085182:	40cf      	lsrs	r7, r1
 8085184:	f105 0e04 	add.w	lr, r5, #4
 8085188:	4576      	cmp	r6, lr
 808518a:	46f4      	mov	ip, lr
 808518c:	d816      	bhi.n	80851bc <rshift+0x80>
 808518e:	1a9b      	subs	r3, r3, r2
 8085190:	009a      	lsls	r2, r3, #2
 8085192:	3a04      	subs	r2, #4
 8085194:	3501      	adds	r5, #1
 8085196:	42ae      	cmp	r6, r5
 8085198:	bf38      	it	cc
 808519a:	2200      	movcc	r2, #0
 808519c:	18a3      	adds	r3, r4, r2
 808519e:	50a7      	str	r7, [r4, r2]
 80851a0:	b107      	cbz	r7, 80851a4 <rshift+0x68>
 80851a2:	3304      	adds	r3, #4
 80851a4:	42a3      	cmp	r3, r4
 80851a6:	eba3 0204 	sub.w	r2, r3, r4
 80851aa:	bf08      	it	eq
 80851ac:	2300      	moveq	r3, #0
 80851ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80851b2:	6102      	str	r2, [r0, #16]
 80851b4:	bf08      	it	eq
 80851b6:	6143      	streq	r3, [r0, #20]
 80851b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80851bc:	f8dc c000 	ldr.w	ip, [ip]
 80851c0:	fa0c fc08 	lsl.w	ip, ip, r8
 80851c4:	ea4c 0707 	orr.w	r7, ip, r7
 80851c8:	f849 7b04 	str.w	r7, [r9], #4
 80851cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80851d0:	40cf      	lsrs	r7, r1
 80851d2:	e7d9      	b.n	8085188 <rshift+0x4c>
 80851d4:	f851 cb04 	ldr.w	ip, [r1], #4
 80851d8:	f847 cf04 	str.w	ip, [r7, #4]!
 80851dc:	e7c2      	b.n	8085164 <rshift+0x28>
 80851de:	4623      	mov	r3, r4
 80851e0:	e7e0      	b.n	80851a4 <rshift+0x68>

080851e2 <__hexdig_fun>:
 80851e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80851e6:	2b09      	cmp	r3, #9
 80851e8:	d802      	bhi.n	80851f0 <__hexdig_fun+0xe>
 80851ea:	3820      	subs	r0, #32
 80851ec:	b2c0      	uxtb	r0, r0
 80851ee:	4770      	bx	lr
 80851f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80851f4:	2b05      	cmp	r3, #5
 80851f6:	d801      	bhi.n	80851fc <__hexdig_fun+0x1a>
 80851f8:	3847      	subs	r0, #71	; 0x47
 80851fa:	e7f7      	b.n	80851ec <__hexdig_fun+0xa>
 80851fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8085200:	2b05      	cmp	r3, #5
 8085202:	d801      	bhi.n	8085208 <__hexdig_fun+0x26>
 8085204:	3827      	subs	r0, #39	; 0x27
 8085206:	e7f1      	b.n	80851ec <__hexdig_fun+0xa>
 8085208:	2000      	movs	r0, #0
 808520a:	4770      	bx	lr

0808520c <__gethex>:
 808520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085210:	b08b      	sub	sp, #44	; 0x2c
 8085212:	9306      	str	r3, [sp, #24]
 8085214:	4bba      	ldr	r3, [pc, #744]	; (8085500 <__gethex+0x2f4>)
 8085216:	9002      	str	r0, [sp, #8]
 8085218:	681b      	ldr	r3, [r3, #0]
 808521a:	468b      	mov	fp, r1
 808521c:	4618      	mov	r0, r3
 808521e:	4690      	mov	r8, r2
 8085220:	9303      	str	r3, [sp, #12]
 8085222:	f7ff f85a 	bl	80842da <strlen>
 8085226:	4682      	mov	sl, r0
 8085228:	9b03      	ldr	r3, [sp, #12]
 808522a:	f8db 2000 	ldr.w	r2, [fp]
 808522e:	4403      	add	r3, r0
 8085230:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8085234:	9307      	str	r3, [sp, #28]
 8085236:	1c93      	adds	r3, r2, #2
 8085238:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 808523c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8085240:	32fe      	adds	r2, #254	; 0xfe
 8085242:	18d1      	adds	r1, r2, r3
 8085244:	461f      	mov	r7, r3
 8085246:	f813 0b01 	ldrb.w	r0, [r3], #1
 808524a:	9101      	str	r1, [sp, #4]
 808524c:	2830      	cmp	r0, #48	; 0x30
 808524e:	d0f8      	beq.n	8085242 <__gethex+0x36>
 8085250:	f7ff ffc7 	bl	80851e2 <__hexdig_fun>
 8085254:	4604      	mov	r4, r0
 8085256:	2800      	cmp	r0, #0
 8085258:	d13a      	bne.n	80852d0 <__gethex+0xc4>
 808525a:	4652      	mov	r2, sl
 808525c:	4638      	mov	r0, r7
 808525e:	9903      	ldr	r1, [sp, #12]
 8085260:	f7ff f843 	bl	80842ea <strncmp>
 8085264:	4605      	mov	r5, r0
 8085266:	2800      	cmp	r0, #0
 8085268:	d166      	bne.n	8085338 <__gethex+0x12c>
 808526a:	f817 000a 	ldrb.w	r0, [r7, sl]
 808526e:	eb07 060a 	add.w	r6, r7, sl
 8085272:	f7ff ffb6 	bl	80851e2 <__hexdig_fun>
 8085276:	2800      	cmp	r0, #0
 8085278:	d060      	beq.n	808533c <__gethex+0x130>
 808527a:	4633      	mov	r3, r6
 808527c:	7818      	ldrb	r0, [r3, #0]
 808527e:	461f      	mov	r7, r3
 8085280:	2830      	cmp	r0, #48	; 0x30
 8085282:	f103 0301 	add.w	r3, r3, #1
 8085286:	d0f9      	beq.n	808527c <__gethex+0x70>
 8085288:	f7ff ffab 	bl	80851e2 <__hexdig_fun>
 808528c:	2301      	movs	r3, #1
 808528e:	fab0 f480 	clz	r4, r0
 8085292:	4635      	mov	r5, r6
 8085294:	0964      	lsrs	r4, r4, #5
 8085296:	9301      	str	r3, [sp, #4]
 8085298:	463a      	mov	r2, r7
 808529a:	4616      	mov	r6, r2
 808529c:	7830      	ldrb	r0, [r6, #0]
 808529e:	3201      	adds	r2, #1
 80852a0:	f7ff ff9f 	bl	80851e2 <__hexdig_fun>
 80852a4:	2800      	cmp	r0, #0
 80852a6:	d1f8      	bne.n	808529a <__gethex+0x8e>
 80852a8:	4652      	mov	r2, sl
 80852aa:	4630      	mov	r0, r6
 80852ac:	9903      	ldr	r1, [sp, #12]
 80852ae:	f7ff f81c 	bl	80842ea <strncmp>
 80852b2:	b980      	cbnz	r0, 80852d6 <__gethex+0xca>
 80852b4:	b94d      	cbnz	r5, 80852ca <__gethex+0xbe>
 80852b6:	eb06 050a 	add.w	r5, r6, sl
 80852ba:	462a      	mov	r2, r5
 80852bc:	4616      	mov	r6, r2
 80852be:	7830      	ldrb	r0, [r6, #0]
 80852c0:	3201      	adds	r2, #1
 80852c2:	f7ff ff8e 	bl	80851e2 <__hexdig_fun>
 80852c6:	2800      	cmp	r0, #0
 80852c8:	d1f8      	bne.n	80852bc <__gethex+0xb0>
 80852ca:	1bad      	subs	r5, r5, r6
 80852cc:	00ad      	lsls	r5, r5, #2
 80852ce:	e004      	b.n	80852da <__gethex+0xce>
 80852d0:	2400      	movs	r4, #0
 80852d2:	4625      	mov	r5, r4
 80852d4:	e7e0      	b.n	8085298 <__gethex+0x8c>
 80852d6:	2d00      	cmp	r5, #0
 80852d8:	d1f7      	bne.n	80852ca <__gethex+0xbe>
 80852da:	7833      	ldrb	r3, [r6, #0]
 80852dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80852e0:	2b50      	cmp	r3, #80	; 0x50
 80852e2:	d139      	bne.n	8085358 <__gethex+0x14c>
 80852e4:	7873      	ldrb	r3, [r6, #1]
 80852e6:	2b2b      	cmp	r3, #43	; 0x2b
 80852e8:	d02a      	beq.n	8085340 <__gethex+0x134>
 80852ea:	2b2d      	cmp	r3, #45	; 0x2d
 80852ec:	d02c      	beq.n	8085348 <__gethex+0x13c>
 80852ee:	f04f 0900 	mov.w	r9, #0
 80852f2:	1c71      	adds	r1, r6, #1
 80852f4:	7808      	ldrb	r0, [r1, #0]
 80852f6:	f7ff ff74 	bl	80851e2 <__hexdig_fun>
 80852fa:	1e43      	subs	r3, r0, #1
 80852fc:	b2db      	uxtb	r3, r3
 80852fe:	2b18      	cmp	r3, #24
 8085300:	d82a      	bhi.n	8085358 <__gethex+0x14c>
 8085302:	f1a0 0210 	sub.w	r2, r0, #16
 8085306:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808530a:	f7ff ff6a 	bl	80851e2 <__hexdig_fun>
 808530e:	1e43      	subs	r3, r0, #1
 8085310:	b2db      	uxtb	r3, r3
 8085312:	2b18      	cmp	r3, #24
 8085314:	d91b      	bls.n	808534e <__gethex+0x142>
 8085316:	f1b9 0f00 	cmp.w	r9, #0
 808531a:	d000      	beq.n	808531e <__gethex+0x112>
 808531c:	4252      	negs	r2, r2
 808531e:	4415      	add	r5, r2
 8085320:	f8cb 1000 	str.w	r1, [fp]
 8085324:	b1d4      	cbz	r4, 808535c <__gethex+0x150>
 8085326:	9b01      	ldr	r3, [sp, #4]
 8085328:	2b00      	cmp	r3, #0
 808532a:	bf14      	ite	ne
 808532c:	2700      	movne	r7, #0
 808532e:	2706      	moveq	r7, #6
 8085330:	4638      	mov	r0, r7
 8085332:	b00b      	add	sp, #44	; 0x2c
 8085334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085338:	463e      	mov	r6, r7
 808533a:	4625      	mov	r5, r4
 808533c:	2401      	movs	r4, #1
 808533e:	e7cc      	b.n	80852da <__gethex+0xce>
 8085340:	f04f 0900 	mov.w	r9, #0
 8085344:	1cb1      	adds	r1, r6, #2
 8085346:	e7d5      	b.n	80852f4 <__gethex+0xe8>
 8085348:	f04f 0901 	mov.w	r9, #1
 808534c:	e7fa      	b.n	8085344 <__gethex+0x138>
 808534e:	230a      	movs	r3, #10
 8085350:	fb03 0202 	mla	r2, r3, r2, r0
 8085354:	3a10      	subs	r2, #16
 8085356:	e7d6      	b.n	8085306 <__gethex+0xfa>
 8085358:	4631      	mov	r1, r6
 808535a:	e7e1      	b.n	8085320 <__gethex+0x114>
 808535c:	4621      	mov	r1, r4
 808535e:	1bf3      	subs	r3, r6, r7
 8085360:	3b01      	subs	r3, #1
 8085362:	2b07      	cmp	r3, #7
 8085364:	dc50      	bgt.n	8085408 <__gethex+0x1fc>
 8085366:	9802      	ldr	r0, [sp, #8]
 8085368:	f000 fa4e 	bl	8085808 <_Balloc>
 808536c:	f04f 0b00 	mov.w	fp, #0
 8085370:	4604      	mov	r4, r0
 8085372:	f100 0914 	add.w	r9, r0, #20
 8085376:	f1ca 0301 	rsb	r3, sl, #1
 808537a:	f8cd 9010 	str.w	r9, [sp, #16]
 808537e:	f8cd b004 	str.w	fp, [sp, #4]
 8085382:	9308      	str	r3, [sp, #32]
 8085384:	42b7      	cmp	r7, r6
 8085386:	d342      	bcc.n	808540e <__gethex+0x202>
 8085388:	9f04      	ldr	r7, [sp, #16]
 808538a:	9b01      	ldr	r3, [sp, #4]
 808538c:	f847 3b04 	str.w	r3, [r7], #4
 8085390:	eba7 0709 	sub.w	r7, r7, r9
 8085394:	10bf      	asrs	r7, r7, #2
 8085396:	6127      	str	r7, [r4, #16]
 8085398:	4618      	mov	r0, r3
 808539a:	f000 fafc 	bl	8085996 <__hi0bits>
 808539e:	017f      	lsls	r7, r7, #5
 80853a0:	f8d8 6000 	ldr.w	r6, [r8]
 80853a4:	1a3f      	subs	r7, r7, r0
 80853a6:	42b7      	cmp	r7, r6
 80853a8:	dd65      	ble.n	8085476 <__gethex+0x26a>
 80853aa:	1bbf      	subs	r7, r7, r6
 80853ac:	4639      	mov	r1, r7
 80853ae:	4620      	mov	r0, r4
 80853b0:	f000 fe42 	bl	8086038 <__any_on>
 80853b4:	4682      	mov	sl, r0
 80853b6:	b1a8      	cbz	r0, 80853e4 <__gethex+0x1d8>
 80853b8:	f04f 0a01 	mov.w	sl, #1
 80853bc:	1e7b      	subs	r3, r7, #1
 80853be:	1159      	asrs	r1, r3, #5
 80853c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80853c4:	f003 021f 	and.w	r2, r3, #31
 80853c8:	fa0a f202 	lsl.w	r2, sl, r2
 80853cc:	420a      	tst	r2, r1
 80853ce:	d009      	beq.n	80853e4 <__gethex+0x1d8>
 80853d0:	4553      	cmp	r3, sl
 80853d2:	dd05      	ble.n	80853e0 <__gethex+0x1d4>
 80853d4:	4620      	mov	r0, r4
 80853d6:	1eb9      	subs	r1, r7, #2
 80853d8:	f000 fe2e 	bl	8086038 <__any_on>
 80853dc:	2800      	cmp	r0, #0
 80853de:	d147      	bne.n	8085470 <__gethex+0x264>
 80853e0:	f04f 0a02 	mov.w	sl, #2
 80853e4:	4639      	mov	r1, r7
 80853e6:	4620      	mov	r0, r4
 80853e8:	f7ff fea8 	bl	808513c <rshift>
 80853ec:	443d      	add	r5, r7
 80853ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80853f2:	42ab      	cmp	r3, r5
 80853f4:	da4d      	bge.n	8085492 <__gethex+0x286>
 80853f6:	4621      	mov	r1, r4
 80853f8:	9802      	ldr	r0, [sp, #8]
 80853fa:	f000 fa39 	bl	8085870 <_Bfree>
 80853fe:	2300      	movs	r3, #0
 8085400:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8085402:	27a3      	movs	r7, #163	; 0xa3
 8085404:	6013      	str	r3, [r2, #0]
 8085406:	e793      	b.n	8085330 <__gethex+0x124>
 8085408:	3101      	adds	r1, #1
 808540a:	105b      	asrs	r3, r3, #1
 808540c:	e7a9      	b.n	8085362 <__gethex+0x156>
 808540e:	1e73      	subs	r3, r6, #1
 8085410:	9a07      	ldr	r2, [sp, #28]
 8085412:	9305      	str	r3, [sp, #20]
 8085414:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8085418:	4293      	cmp	r3, r2
 808541a:	d019      	beq.n	8085450 <__gethex+0x244>
 808541c:	f1bb 0f20 	cmp.w	fp, #32
 8085420:	d107      	bne.n	8085432 <__gethex+0x226>
 8085422:	9b04      	ldr	r3, [sp, #16]
 8085424:	9a01      	ldr	r2, [sp, #4]
 8085426:	f843 2b04 	str.w	r2, [r3], #4
 808542a:	9304      	str	r3, [sp, #16]
 808542c:	2300      	movs	r3, #0
 808542e:	469b      	mov	fp, r3
 8085430:	9301      	str	r3, [sp, #4]
 8085432:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8085436:	f7ff fed4 	bl	80851e2 <__hexdig_fun>
 808543a:	9b01      	ldr	r3, [sp, #4]
 808543c:	f000 000f 	and.w	r0, r0, #15
 8085440:	fa00 f00b 	lsl.w	r0, r0, fp
 8085444:	4303      	orrs	r3, r0
 8085446:	9301      	str	r3, [sp, #4]
 8085448:	f10b 0b04 	add.w	fp, fp, #4
 808544c:	9b05      	ldr	r3, [sp, #20]
 808544e:	e00d      	b.n	808546c <__gethex+0x260>
 8085450:	9b05      	ldr	r3, [sp, #20]
 8085452:	9a08      	ldr	r2, [sp, #32]
 8085454:	4413      	add	r3, r2
 8085456:	42bb      	cmp	r3, r7
 8085458:	d3e0      	bcc.n	808541c <__gethex+0x210>
 808545a:	4618      	mov	r0, r3
 808545c:	4652      	mov	r2, sl
 808545e:	9903      	ldr	r1, [sp, #12]
 8085460:	9309      	str	r3, [sp, #36]	; 0x24
 8085462:	f7fe ff42 	bl	80842ea <strncmp>
 8085466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8085468:	2800      	cmp	r0, #0
 808546a:	d1d7      	bne.n	808541c <__gethex+0x210>
 808546c:	461e      	mov	r6, r3
 808546e:	e789      	b.n	8085384 <__gethex+0x178>
 8085470:	f04f 0a03 	mov.w	sl, #3
 8085474:	e7b6      	b.n	80853e4 <__gethex+0x1d8>
 8085476:	da09      	bge.n	808548c <__gethex+0x280>
 8085478:	1bf7      	subs	r7, r6, r7
 808547a:	4621      	mov	r1, r4
 808547c:	463a      	mov	r2, r7
 808547e:	9802      	ldr	r0, [sp, #8]
 8085480:	f000 fbca 	bl	8085c18 <__lshift>
 8085484:	4604      	mov	r4, r0
 8085486:	1bed      	subs	r5, r5, r7
 8085488:	f100 0914 	add.w	r9, r0, #20
 808548c:	f04f 0a00 	mov.w	sl, #0
 8085490:	e7ad      	b.n	80853ee <__gethex+0x1e2>
 8085492:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8085496:	42a8      	cmp	r0, r5
 8085498:	dd6e      	ble.n	8085578 <__gethex+0x36c>
 808549a:	1b45      	subs	r5, r0, r5
 808549c:	42ae      	cmp	r6, r5
 808549e:	dc31      	bgt.n	8085504 <__gethex+0x2f8>
 80854a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80854a4:	2b02      	cmp	r3, #2
 80854a6:	d022      	beq.n	80854ee <__gethex+0x2e2>
 80854a8:	2b03      	cmp	r3, #3
 80854aa:	d024      	beq.n	80854f6 <__gethex+0x2ea>
 80854ac:	2b01      	cmp	r3, #1
 80854ae:	d115      	bne.n	80854dc <__gethex+0x2d0>
 80854b0:	42ae      	cmp	r6, r5
 80854b2:	d113      	bne.n	80854dc <__gethex+0x2d0>
 80854b4:	2e01      	cmp	r6, #1
 80854b6:	d10b      	bne.n	80854d0 <__gethex+0x2c4>
 80854b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80854bc:	9a06      	ldr	r2, [sp, #24]
 80854be:	2762      	movs	r7, #98	; 0x62
 80854c0:	6013      	str	r3, [r2, #0]
 80854c2:	2301      	movs	r3, #1
 80854c4:	6123      	str	r3, [r4, #16]
 80854c6:	f8c9 3000 	str.w	r3, [r9]
 80854ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80854cc:	601c      	str	r4, [r3, #0]
 80854ce:	e72f      	b.n	8085330 <__gethex+0x124>
 80854d0:	4620      	mov	r0, r4
 80854d2:	1e71      	subs	r1, r6, #1
 80854d4:	f000 fdb0 	bl	8086038 <__any_on>
 80854d8:	2800      	cmp	r0, #0
 80854da:	d1ed      	bne.n	80854b8 <__gethex+0x2ac>
 80854dc:	4621      	mov	r1, r4
 80854de:	9802      	ldr	r0, [sp, #8]
 80854e0:	f000 f9c6 	bl	8085870 <_Bfree>
 80854e4:	2300      	movs	r3, #0
 80854e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80854e8:	2750      	movs	r7, #80	; 0x50
 80854ea:	6013      	str	r3, [r2, #0]
 80854ec:	e720      	b.n	8085330 <__gethex+0x124>
 80854ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80854f0:	2b00      	cmp	r3, #0
 80854f2:	d1f3      	bne.n	80854dc <__gethex+0x2d0>
 80854f4:	e7e0      	b.n	80854b8 <__gethex+0x2ac>
 80854f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80854f8:	2b00      	cmp	r3, #0
 80854fa:	d1dd      	bne.n	80854b8 <__gethex+0x2ac>
 80854fc:	e7ee      	b.n	80854dc <__gethex+0x2d0>
 80854fe:	bf00      	nop
 8085500:	08086784 	.word	0x08086784
 8085504:	1e6f      	subs	r7, r5, #1
 8085506:	f1ba 0f00 	cmp.w	sl, #0
 808550a:	d132      	bne.n	8085572 <__gethex+0x366>
 808550c:	b127      	cbz	r7, 8085518 <__gethex+0x30c>
 808550e:	4639      	mov	r1, r7
 8085510:	4620      	mov	r0, r4
 8085512:	f000 fd91 	bl	8086038 <__any_on>
 8085516:	4682      	mov	sl, r0
 8085518:	2101      	movs	r1, #1
 808551a:	117b      	asrs	r3, r7, #5
 808551c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8085520:	f007 071f 	and.w	r7, r7, #31
 8085524:	fa01 f707 	lsl.w	r7, r1, r7
 8085528:	421f      	tst	r7, r3
 808552a:	f04f 0702 	mov.w	r7, #2
 808552e:	4629      	mov	r1, r5
 8085530:	4620      	mov	r0, r4
 8085532:	bf18      	it	ne
 8085534:	f04a 0a02 	orrne.w	sl, sl, #2
 8085538:	1b76      	subs	r6, r6, r5
 808553a:	f7ff fdff 	bl	808513c <rshift>
 808553e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8085542:	f1ba 0f00 	cmp.w	sl, #0
 8085546:	d048      	beq.n	80855da <__gethex+0x3ce>
 8085548:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808554c:	2b02      	cmp	r3, #2
 808554e:	d015      	beq.n	808557c <__gethex+0x370>
 8085550:	2b03      	cmp	r3, #3
 8085552:	d017      	beq.n	8085584 <__gethex+0x378>
 8085554:	2b01      	cmp	r3, #1
 8085556:	d109      	bne.n	808556c <__gethex+0x360>
 8085558:	f01a 0f02 	tst.w	sl, #2
 808555c:	d006      	beq.n	808556c <__gethex+0x360>
 808555e:	f8d9 0000 	ldr.w	r0, [r9]
 8085562:	ea4a 0a00 	orr.w	sl, sl, r0
 8085566:	f01a 0f01 	tst.w	sl, #1
 808556a:	d10e      	bne.n	808558a <__gethex+0x37e>
 808556c:	f047 0710 	orr.w	r7, r7, #16
 8085570:	e033      	b.n	80855da <__gethex+0x3ce>
 8085572:	f04f 0a01 	mov.w	sl, #1
 8085576:	e7cf      	b.n	8085518 <__gethex+0x30c>
 8085578:	2701      	movs	r7, #1
 808557a:	e7e2      	b.n	8085542 <__gethex+0x336>
 808557c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808557e:	f1c3 0301 	rsb	r3, r3, #1
 8085582:	9315      	str	r3, [sp, #84]	; 0x54
 8085584:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8085586:	2b00      	cmp	r3, #0
 8085588:	d0f0      	beq.n	808556c <__gethex+0x360>
 808558a:	f04f 0c00 	mov.w	ip, #0
 808558e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8085592:	f104 0314 	add.w	r3, r4, #20
 8085596:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 808559a:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 808559e:	4618      	mov	r0, r3
 80855a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80855a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80855a8:	d01c      	beq.n	80855e4 <__gethex+0x3d8>
 80855aa:	3201      	adds	r2, #1
 80855ac:	6002      	str	r2, [r0, #0]
 80855ae:	2f02      	cmp	r7, #2
 80855b0:	f104 0314 	add.w	r3, r4, #20
 80855b4:	d138      	bne.n	8085628 <__gethex+0x41c>
 80855b6:	f8d8 2000 	ldr.w	r2, [r8]
 80855ba:	3a01      	subs	r2, #1
 80855bc:	42b2      	cmp	r2, r6
 80855be:	d10a      	bne.n	80855d6 <__gethex+0x3ca>
 80855c0:	2201      	movs	r2, #1
 80855c2:	1171      	asrs	r1, r6, #5
 80855c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80855c8:	f006 061f 	and.w	r6, r6, #31
 80855cc:	fa02 f606 	lsl.w	r6, r2, r6
 80855d0:	421e      	tst	r6, r3
 80855d2:	bf18      	it	ne
 80855d4:	4617      	movne	r7, r2
 80855d6:	f047 0720 	orr.w	r7, r7, #32
 80855da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80855dc:	601c      	str	r4, [r3, #0]
 80855de:	9b06      	ldr	r3, [sp, #24]
 80855e0:	601d      	str	r5, [r3, #0]
 80855e2:	e6a5      	b.n	8085330 <__gethex+0x124>
 80855e4:	4299      	cmp	r1, r3
 80855e6:	f843 cc04 	str.w	ip, [r3, #-4]
 80855ea:	d8d8      	bhi.n	808559e <__gethex+0x392>
 80855ec:	68a3      	ldr	r3, [r4, #8]
 80855ee:	4599      	cmp	r9, r3
 80855f0:	db12      	blt.n	8085618 <__gethex+0x40c>
 80855f2:	6861      	ldr	r1, [r4, #4]
 80855f4:	9802      	ldr	r0, [sp, #8]
 80855f6:	3101      	adds	r1, #1
 80855f8:	f000 f906 	bl	8085808 <_Balloc>
 80855fc:	4682      	mov	sl, r0
 80855fe:	6922      	ldr	r2, [r4, #16]
 8085600:	f104 010c 	add.w	r1, r4, #12
 8085604:	3202      	adds	r2, #2
 8085606:	0092      	lsls	r2, r2, #2
 8085608:	300c      	adds	r0, #12
 808560a:	f7fe fdf1 	bl	80841f0 <memcpy>
 808560e:	4621      	mov	r1, r4
 8085610:	9802      	ldr	r0, [sp, #8]
 8085612:	f000 f92d 	bl	8085870 <_Bfree>
 8085616:	4654      	mov	r4, sl
 8085618:	6923      	ldr	r3, [r4, #16]
 808561a:	1c5a      	adds	r2, r3, #1
 808561c:	6122      	str	r2, [r4, #16]
 808561e:	2201      	movs	r2, #1
 8085620:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8085624:	615a      	str	r2, [r3, #20]
 8085626:	e7c2      	b.n	80855ae <__gethex+0x3a2>
 8085628:	6922      	ldr	r2, [r4, #16]
 808562a:	454a      	cmp	r2, r9
 808562c:	dd0b      	ble.n	8085646 <__gethex+0x43a>
 808562e:	2101      	movs	r1, #1
 8085630:	4620      	mov	r0, r4
 8085632:	f7ff fd83 	bl	808513c <rshift>
 8085636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808563a:	3501      	adds	r5, #1
 808563c:	42ab      	cmp	r3, r5
 808563e:	f6ff aeda 	blt.w	80853f6 <__gethex+0x1ea>
 8085642:	2701      	movs	r7, #1
 8085644:	e7c7      	b.n	80855d6 <__gethex+0x3ca>
 8085646:	f016 061f 	ands.w	r6, r6, #31
 808564a:	d0fa      	beq.n	8085642 <__gethex+0x436>
 808564c:	449b      	add	fp, r3
 808564e:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8085652:	f000 f9a0 	bl	8085996 <__hi0bits>
 8085656:	f1c6 0620 	rsb	r6, r6, #32
 808565a:	42b0      	cmp	r0, r6
 808565c:	dbe7      	blt.n	808562e <__gethex+0x422>
 808565e:	e7f0      	b.n	8085642 <__gethex+0x436>

08085660 <L_shift>:
 8085660:	f1c2 0208 	rsb	r2, r2, #8
 8085664:	0092      	lsls	r2, r2, #2
 8085666:	b570      	push	{r4, r5, r6, lr}
 8085668:	f1c2 0620 	rsb	r6, r2, #32
 808566c:	6843      	ldr	r3, [r0, #4]
 808566e:	6804      	ldr	r4, [r0, #0]
 8085670:	fa03 f506 	lsl.w	r5, r3, r6
 8085674:	432c      	orrs	r4, r5
 8085676:	40d3      	lsrs	r3, r2
 8085678:	6004      	str	r4, [r0, #0]
 808567a:	f840 3f04 	str.w	r3, [r0, #4]!
 808567e:	4288      	cmp	r0, r1
 8085680:	d3f4      	bcc.n	808566c <L_shift+0xc>
 8085682:	bd70      	pop	{r4, r5, r6, pc}

08085684 <__match>:
 8085684:	b530      	push	{r4, r5, lr}
 8085686:	6803      	ldr	r3, [r0, #0]
 8085688:	3301      	adds	r3, #1
 808568a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808568e:	b914      	cbnz	r4, 8085696 <__match+0x12>
 8085690:	6003      	str	r3, [r0, #0]
 8085692:	2001      	movs	r0, #1
 8085694:	bd30      	pop	{r4, r5, pc}
 8085696:	f813 2b01 	ldrb.w	r2, [r3], #1
 808569a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808569e:	2d19      	cmp	r5, #25
 80856a0:	bf98      	it	ls
 80856a2:	3220      	addls	r2, #32
 80856a4:	42a2      	cmp	r2, r4
 80856a6:	d0f0      	beq.n	808568a <__match+0x6>
 80856a8:	2000      	movs	r0, #0
 80856aa:	e7f3      	b.n	8085694 <__match+0x10>

080856ac <__hexnan>:
 80856ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80856b0:	2500      	movs	r5, #0
 80856b2:	680b      	ldr	r3, [r1, #0]
 80856b4:	4682      	mov	sl, r0
 80856b6:	115e      	asrs	r6, r3, #5
 80856b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80856bc:	f013 031f 	ands.w	r3, r3, #31
 80856c0:	bf18      	it	ne
 80856c2:	3604      	addne	r6, #4
 80856c4:	1f37      	subs	r7, r6, #4
 80856c6:	4690      	mov	r8, r2
 80856c8:	46b9      	mov	r9, r7
 80856ca:	463c      	mov	r4, r7
 80856cc:	46ab      	mov	fp, r5
 80856ce:	b087      	sub	sp, #28
 80856d0:	6801      	ldr	r1, [r0, #0]
 80856d2:	9301      	str	r3, [sp, #4]
 80856d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80856d8:	9502      	str	r5, [sp, #8]
 80856da:	784a      	ldrb	r2, [r1, #1]
 80856dc:	1c4b      	adds	r3, r1, #1
 80856de:	9303      	str	r3, [sp, #12]
 80856e0:	b342      	cbz	r2, 8085734 <__hexnan+0x88>
 80856e2:	4610      	mov	r0, r2
 80856e4:	9105      	str	r1, [sp, #20]
 80856e6:	9204      	str	r2, [sp, #16]
 80856e8:	f7ff fd7b 	bl	80851e2 <__hexdig_fun>
 80856ec:	2800      	cmp	r0, #0
 80856ee:	d14f      	bne.n	8085790 <__hexnan+0xe4>
 80856f0:	9a04      	ldr	r2, [sp, #16]
 80856f2:	9905      	ldr	r1, [sp, #20]
 80856f4:	2a20      	cmp	r2, #32
 80856f6:	d818      	bhi.n	808572a <__hexnan+0x7e>
 80856f8:	9b02      	ldr	r3, [sp, #8]
 80856fa:	459b      	cmp	fp, r3
 80856fc:	dd13      	ble.n	8085726 <__hexnan+0x7a>
 80856fe:	454c      	cmp	r4, r9
 8085700:	d206      	bcs.n	8085710 <__hexnan+0x64>
 8085702:	2d07      	cmp	r5, #7
 8085704:	dc04      	bgt.n	8085710 <__hexnan+0x64>
 8085706:	462a      	mov	r2, r5
 8085708:	4649      	mov	r1, r9
 808570a:	4620      	mov	r0, r4
 808570c:	f7ff ffa8 	bl	8085660 <L_shift>
 8085710:	4544      	cmp	r4, r8
 8085712:	d950      	bls.n	80857b6 <__hexnan+0x10a>
 8085714:	2300      	movs	r3, #0
 8085716:	f1a4 0904 	sub.w	r9, r4, #4
 808571a:	f844 3c04 	str.w	r3, [r4, #-4]
 808571e:	461d      	mov	r5, r3
 8085720:	464c      	mov	r4, r9
 8085722:	f8cd b008 	str.w	fp, [sp, #8]
 8085726:	9903      	ldr	r1, [sp, #12]
 8085728:	e7d7      	b.n	80856da <__hexnan+0x2e>
 808572a:	2a29      	cmp	r2, #41	; 0x29
 808572c:	d156      	bne.n	80857dc <__hexnan+0x130>
 808572e:	3102      	adds	r1, #2
 8085730:	f8ca 1000 	str.w	r1, [sl]
 8085734:	f1bb 0f00 	cmp.w	fp, #0
 8085738:	d050      	beq.n	80857dc <__hexnan+0x130>
 808573a:	454c      	cmp	r4, r9
 808573c:	d206      	bcs.n	808574c <__hexnan+0xa0>
 808573e:	2d07      	cmp	r5, #7
 8085740:	dc04      	bgt.n	808574c <__hexnan+0xa0>
 8085742:	462a      	mov	r2, r5
 8085744:	4649      	mov	r1, r9
 8085746:	4620      	mov	r0, r4
 8085748:	f7ff ff8a 	bl	8085660 <L_shift>
 808574c:	4544      	cmp	r4, r8
 808574e:	d934      	bls.n	80857ba <__hexnan+0x10e>
 8085750:	4623      	mov	r3, r4
 8085752:	f1a8 0204 	sub.w	r2, r8, #4
 8085756:	f853 1b04 	ldr.w	r1, [r3], #4
 808575a:	429f      	cmp	r7, r3
 808575c:	f842 1f04 	str.w	r1, [r2, #4]!
 8085760:	d2f9      	bcs.n	8085756 <__hexnan+0xaa>
 8085762:	1b3b      	subs	r3, r7, r4
 8085764:	f023 0303 	bic.w	r3, r3, #3
 8085768:	3304      	adds	r3, #4
 808576a:	3401      	adds	r4, #1
 808576c:	3e03      	subs	r6, #3
 808576e:	42b4      	cmp	r4, r6
 8085770:	bf88      	it	hi
 8085772:	2304      	movhi	r3, #4
 8085774:	2200      	movs	r2, #0
 8085776:	4443      	add	r3, r8
 8085778:	f843 2b04 	str.w	r2, [r3], #4
 808577c:	429f      	cmp	r7, r3
 808577e:	d2fb      	bcs.n	8085778 <__hexnan+0xcc>
 8085780:	683b      	ldr	r3, [r7, #0]
 8085782:	b91b      	cbnz	r3, 808578c <__hexnan+0xe0>
 8085784:	4547      	cmp	r7, r8
 8085786:	d127      	bne.n	80857d8 <__hexnan+0x12c>
 8085788:	2301      	movs	r3, #1
 808578a:	603b      	str	r3, [r7, #0]
 808578c:	2005      	movs	r0, #5
 808578e:	e026      	b.n	80857de <__hexnan+0x132>
 8085790:	3501      	adds	r5, #1
 8085792:	2d08      	cmp	r5, #8
 8085794:	f10b 0b01 	add.w	fp, fp, #1
 8085798:	dd06      	ble.n	80857a8 <__hexnan+0xfc>
 808579a:	4544      	cmp	r4, r8
 808579c:	d9c3      	bls.n	8085726 <__hexnan+0x7a>
 808579e:	2300      	movs	r3, #0
 80857a0:	2501      	movs	r5, #1
 80857a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80857a6:	3c04      	subs	r4, #4
 80857a8:	6822      	ldr	r2, [r4, #0]
 80857aa:	f000 000f 	and.w	r0, r0, #15
 80857ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80857b2:	6022      	str	r2, [r4, #0]
 80857b4:	e7b7      	b.n	8085726 <__hexnan+0x7a>
 80857b6:	2508      	movs	r5, #8
 80857b8:	e7b5      	b.n	8085726 <__hexnan+0x7a>
 80857ba:	9b01      	ldr	r3, [sp, #4]
 80857bc:	2b00      	cmp	r3, #0
 80857be:	d0df      	beq.n	8085780 <__hexnan+0xd4>
 80857c0:	f04f 32ff 	mov.w	r2, #4294967295
 80857c4:	f1c3 0320 	rsb	r3, r3, #32
 80857c8:	fa22 f303 	lsr.w	r3, r2, r3
 80857cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80857d0:	401a      	ands	r2, r3
 80857d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80857d6:	e7d3      	b.n	8085780 <__hexnan+0xd4>
 80857d8:	3f04      	subs	r7, #4
 80857da:	e7d1      	b.n	8085780 <__hexnan+0xd4>
 80857dc:	2004      	movs	r0, #4
 80857de:	b007      	add	sp, #28
 80857e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080857e4 <__ascii_mbtowc>:
 80857e4:	b082      	sub	sp, #8
 80857e6:	b901      	cbnz	r1, 80857ea <__ascii_mbtowc+0x6>
 80857e8:	a901      	add	r1, sp, #4
 80857ea:	b142      	cbz	r2, 80857fe <__ascii_mbtowc+0x1a>
 80857ec:	b14b      	cbz	r3, 8085802 <__ascii_mbtowc+0x1e>
 80857ee:	7813      	ldrb	r3, [r2, #0]
 80857f0:	600b      	str	r3, [r1, #0]
 80857f2:	7812      	ldrb	r2, [r2, #0]
 80857f4:	1e10      	subs	r0, r2, #0
 80857f6:	bf18      	it	ne
 80857f8:	2001      	movne	r0, #1
 80857fa:	b002      	add	sp, #8
 80857fc:	4770      	bx	lr
 80857fe:	4610      	mov	r0, r2
 8085800:	e7fb      	b.n	80857fa <__ascii_mbtowc+0x16>
 8085802:	f06f 0001 	mvn.w	r0, #1
 8085806:	e7f8      	b.n	80857fa <__ascii_mbtowc+0x16>

08085808 <_Balloc>:
 8085808:	b570      	push	{r4, r5, r6, lr}
 808580a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808580c:	4604      	mov	r4, r0
 808580e:	460d      	mov	r5, r1
 8085810:	b93e      	cbnz	r6, 8085822 <_Balloc+0x1a>
 8085812:	2010      	movs	r0, #16
 8085814:	f7fc fbc4 	bl	8081fa0 <malloc>
 8085818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808581c:	6260      	str	r0, [r4, #36]	; 0x24
 808581e:	6006      	str	r6, [r0, #0]
 8085820:	60c6      	str	r6, [r0, #12]
 8085822:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8085824:	68f3      	ldr	r3, [r6, #12]
 8085826:	b183      	cbz	r3, 808584a <_Balloc+0x42>
 8085828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808582a:	68db      	ldr	r3, [r3, #12]
 808582c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8085830:	b9b8      	cbnz	r0, 8085862 <_Balloc+0x5a>
 8085832:	2101      	movs	r1, #1
 8085834:	fa01 f605 	lsl.w	r6, r1, r5
 8085838:	1d72      	adds	r2, r6, #5
 808583a:	4620      	mov	r0, r4
 808583c:	0092      	lsls	r2, r2, #2
 808583e:	f000 fc1c 	bl	808607a <_calloc_r>
 8085842:	b160      	cbz	r0, 808585e <_Balloc+0x56>
 8085844:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8085848:	e00e      	b.n	8085868 <_Balloc+0x60>
 808584a:	2221      	movs	r2, #33	; 0x21
 808584c:	2104      	movs	r1, #4
 808584e:	4620      	mov	r0, r4
 8085850:	f000 fc13 	bl	808607a <_calloc_r>
 8085854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8085856:	60f0      	str	r0, [r6, #12]
 8085858:	68db      	ldr	r3, [r3, #12]
 808585a:	2b00      	cmp	r3, #0
 808585c:	d1e4      	bne.n	8085828 <_Balloc+0x20>
 808585e:	2000      	movs	r0, #0
 8085860:	bd70      	pop	{r4, r5, r6, pc}
 8085862:	6802      	ldr	r2, [r0, #0]
 8085864:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8085868:	2300      	movs	r3, #0
 808586a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 808586e:	e7f7      	b.n	8085860 <_Balloc+0x58>

08085870 <_Bfree>:
 8085870:	b570      	push	{r4, r5, r6, lr}
 8085872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8085874:	4605      	mov	r5, r0
 8085876:	460c      	mov	r4, r1
 8085878:	b93e      	cbnz	r6, 808588a <_Bfree+0x1a>
 808587a:	2010      	movs	r0, #16
 808587c:	f7fc fb90 	bl	8081fa0 <malloc>
 8085880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8085884:	6268      	str	r0, [r5, #36]	; 0x24
 8085886:	6006      	str	r6, [r0, #0]
 8085888:	60c6      	str	r6, [r0, #12]
 808588a:	b13c      	cbz	r4, 808589c <_Bfree+0x2c>
 808588c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808588e:	6862      	ldr	r2, [r4, #4]
 8085890:	68db      	ldr	r3, [r3, #12]
 8085892:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8085896:	6021      	str	r1, [r4, #0]
 8085898:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 808589c:	bd70      	pop	{r4, r5, r6, pc}

0808589e <__multadd>:
 808589e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80858a2:	4698      	mov	r8, r3
 80858a4:	460c      	mov	r4, r1
 80858a6:	2300      	movs	r3, #0
 80858a8:	690e      	ldr	r6, [r1, #16]
 80858aa:	4607      	mov	r7, r0
 80858ac:	f101 0014 	add.w	r0, r1, #20
 80858b0:	6805      	ldr	r5, [r0, #0]
 80858b2:	3301      	adds	r3, #1
 80858b4:	b2a9      	uxth	r1, r5
 80858b6:	fb02 8101 	mla	r1, r2, r1, r8
 80858ba:	0c2d      	lsrs	r5, r5, #16
 80858bc:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80858c0:	fb02 c505 	mla	r5, r2, r5, ip
 80858c4:	b289      	uxth	r1, r1
 80858c6:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80858ca:	429e      	cmp	r6, r3
 80858cc:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80858d0:	f840 1b04 	str.w	r1, [r0], #4
 80858d4:	dcec      	bgt.n	80858b0 <__multadd+0x12>
 80858d6:	f1b8 0f00 	cmp.w	r8, #0
 80858da:	d01b      	beq.n	8085914 <__multadd+0x76>
 80858dc:	68a3      	ldr	r3, [r4, #8]
 80858de:	42b3      	cmp	r3, r6
 80858e0:	dc12      	bgt.n	8085908 <__multadd+0x6a>
 80858e2:	6861      	ldr	r1, [r4, #4]
 80858e4:	4638      	mov	r0, r7
 80858e6:	3101      	adds	r1, #1
 80858e8:	f7ff ff8e 	bl	8085808 <_Balloc>
 80858ec:	4605      	mov	r5, r0
 80858ee:	6922      	ldr	r2, [r4, #16]
 80858f0:	f104 010c 	add.w	r1, r4, #12
 80858f4:	3202      	adds	r2, #2
 80858f6:	0092      	lsls	r2, r2, #2
 80858f8:	300c      	adds	r0, #12
 80858fa:	f7fe fc79 	bl	80841f0 <memcpy>
 80858fe:	4621      	mov	r1, r4
 8085900:	4638      	mov	r0, r7
 8085902:	f7ff ffb5 	bl	8085870 <_Bfree>
 8085906:	462c      	mov	r4, r5
 8085908:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 808590c:	3601      	adds	r6, #1
 808590e:	f8c3 8014 	str.w	r8, [r3, #20]
 8085912:	6126      	str	r6, [r4, #16]
 8085914:	4620      	mov	r0, r4
 8085916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808591a <__s2b>:
 808591a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808591e:	4615      	mov	r5, r2
 8085920:	2209      	movs	r2, #9
 8085922:	461f      	mov	r7, r3
 8085924:	3308      	adds	r3, #8
 8085926:	460c      	mov	r4, r1
 8085928:	fb93 f3f2 	sdiv	r3, r3, r2
 808592c:	4606      	mov	r6, r0
 808592e:	2201      	movs	r2, #1
 8085930:	2100      	movs	r1, #0
 8085932:	429a      	cmp	r2, r3
 8085934:	db20      	blt.n	8085978 <__s2b+0x5e>
 8085936:	4630      	mov	r0, r6
 8085938:	f7ff ff66 	bl	8085808 <_Balloc>
 808593c:	9b08      	ldr	r3, [sp, #32]
 808593e:	2d09      	cmp	r5, #9
 8085940:	6143      	str	r3, [r0, #20]
 8085942:	f04f 0301 	mov.w	r3, #1
 8085946:	6103      	str	r3, [r0, #16]
 8085948:	dd19      	ble.n	808597e <__s2b+0x64>
 808594a:	f104 0909 	add.w	r9, r4, #9
 808594e:	46c8      	mov	r8, r9
 8085950:	442c      	add	r4, r5
 8085952:	f818 3b01 	ldrb.w	r3, [r8], #1
 8085956:	4601      	mov	r1, r0
 8085958:	220a      	movs	r2, #10
 808595a:	4630      	mov	r0, r6
 808595c:	3b30      	subs	r3, #48	; 0x30
 808595e:	f7ff ff9e 	bl	808589e <__multadd>
 8085962:	45a0      	cmp	r8, r4
 8085964:	d1f5      	bne.n	8085952 <__s2b+0x38>
 8085966:	f1a5 0408 	sub.w	r4, r5, #8
 808596a:	444c      	add	r4, r9
 808596c:	1b2d      	subs	r5, r5, r4
 808596e:	1963      	adds	r3, r4, r5
 8085970:	42bb      	cmp	r3, r7
 8085972:	db07      	blt.n	8085984 <__s2b+0x6a>
 8085974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085978:	0052      	lsls	r2, r2, #1
 808597a:	3101      	adds	r1, #1
 808597c:	e7d9      	b.n	8085932 <__s2b+0x18>
 808597e:	2509      	movs	r5, #9
 8085980:	340a      	adds	r4, #10
 8085982:	e7f3      	b.n	808596c <__s2b+0x52>
 8085984:	f814 3b01 	ldrb.w	r3, [r4], #1
 8085988:	4601      	mov	r1, r0
 808598a:	220a      	movs	r2, #10
 808598c:	4630      	mov	r0, r6
 808598e:	3b30      	subs	r3, #48	; 0x30
 8085990:	f7ff ff85 	bl	808589e <__multadd>
 8085994:	e7eb      	b.n	808596e <__s2b+0x54>

08085996 <__hi0bits>:
 8085996:	0c02      	lsrs	r2, r0, #16
 8085998:	0412      	lsls	r2, r2, #16
 808599a:	4603      	mov	r3, r0
 808599c:	b9ca      	cbnz	r2, 80859d2 <__hi0bits+0x3c>
 808599e:	0403      	lsls	r3, r0, #16
 80859a0:	2010      	movs	r0, #16
 80859a2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80859a6:	bf04      	itt	eq
 80859a8:	021b      	lsleq	r3, r3, #8
 80859aa:	3008      	addeq	r0, #8
 80859ac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80859b0:	bf04      	itt	eq
 80859b2:	011b      	lsleq	r3, r3, #4
 80859b4:	3004      	addeq	r0, #4
 80859b6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80859ba:	bf04      	itt	eq
 80859bc:	009b      	lsleq	r3, r3, #2
 80859be:	3002      	addeq	r0, #2
 80859c0:	2b00      	cmp	r3, #0
 80859c2:	db05      	blt.n	80859d0 <__hi0bits+0x3a>
 80859c4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80859c8:	f100 0001 	add.w	r0, r0, #1
 80859cc:	bf08      	it	eq
 80859ce:	2020      	moveq	r0, #32
 80859d0:	4770      	bx	lr
 80859d2:	2000      	movs	r0, #0
 80859d4:	e7e5      	b.n	80859a2 <__hi0bits+0xc>

080859d6 <__lo0bits>:
 80859d6:	6803      	ldr	r3, [r0, #0]
 80859d8:	4602      	mov	r2, r0
 80859da:	f013 0007 	ands.w	r0, r3, #7
 80859de:	d00b      	beq.n	80859f8 <__lo0bits+0x22>
 80859e0:	07d9      	lsls	r1, r3, #31
 80859e2:	d422      	bmi.n	8085a2a <__lo0bits+0x54>
 80859e4:	0798      	lsls	r0, r3, #30
 80859e6:	bf49      	itett	mi
 80859e8:	085b      	lsrmi	r3, r3, #1
 80859ea:	089b      	lsrpl	r3, r3, #2
 80859ec:	2001      	movmi	r0, #1
 80859ee:	6013      	strmi	r3, [r2, #0]
 80859f0:	bf5c      	itt	pl
 80859f2:	2002      	movpl	r0, #2
 80859f4:	6013      	strpl	r3, [r2, #0]
 80859f6:	4770      	bx	lr
 80859f8:	b299      	uxth	r1, r3
 80859fa:	b909      	cbnz	r1, 8085a00 <__lo0bits+0x2a>
 80859fc:	2010      	movs	r0, #16
 80859fe:	0c1b      	lsrs	r3, r3, #16
 8085a00:	f013 0fff 	tst.w	r3, #255	; 0xff
 8085a04:	bf04      	itt	eq
 8085a06:	0a1b      	lsreq	r3, r3, #8
 8085a08:	3008      	addeq	r0, #8
 8085a0a:	0719      	lsls	r1, r3, #28
 8085a0c:	bf04      	itt	eq
 8085a0e:	091b      	lsreq	r3, r3, #4
 8085a10:	3004      	addeq	r0, #4
 8085a12:	0799      	lsls	r1, r3, #30
 8085a14:	bf04      	itt	eq
 8085a16:	089b      	lsreq	r3, r3, #2
 8085a18:	3002      	addeq	r0, #2
 8085a1a:	07d9      	lsls	r1, r3, #31
 8085a1c:	d403      	bmi.n	8085a26 <__lo0bits+0x50>
 8085a1e:	085b      	lsrs	r3, r3, #1
 8085a20:	f100 0001 	add.w	r0, r0, #1
 8085a24:	d003      	beq.n	8085a2e <__lo0bits+0x58>
 8085a26:	6013      	str	r3, [r2, #0]
 8085a28:	4770      	bx	lr
 8085a2a:	2000      	movs	r0, #0
 8085a2c:	4770      	bx	lr
 8085a2e:	2020      	movs	r0, #32
 8085a30:	4770      	bx	lr

08085a32 <__i2b>:
 8085a32:	b510      	push	{r4, lr}
 8085a34:	460c      	mov	r4, r1
 8085a36:	2101      	movs	r1, #1
 8085a38:	f7ff fee6 	bl	8085808 <_Balloc>
 8085a3c:	2201      	movs	r2, #1
 8085a3e:	6144      	str	r4, [r0, #20]
 8085a40:	6102      	str	r2, [r0, #16]
 8085a42:	bd10      	pop	{r4, pc}

08085a44 <__multiply>:
 8085a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085a48:	4615      	mov	r5, r2
 8085a4a:	690a      	ldr	r2, [r1, #16]
 8085a4c:	692b      	ldr	r3, [r5, #16]
 8085a4e:	460c      	mov	r4, r1
 8085a50:	429a      	cmp	r2, r3
 8085a52:	bfbe      	ittt	lt
 8085a54:	460b      	movlt	r3, r1
 8085a56:	462c      	movlt	r4, r5
 8085a58:	461d      	movlt	r5, r3
 8085a5a:	6927      	ldr	r7, [r4, #16]
 8085a5c:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8085a60:	68a3      	ldr	r3, [r4, #8]
 8085a62:	6861      	ldr	r1, [r4, #4]
 8085a64:	eb07 0609 	add.w	r6, r7, r9
 8085a68:	42b3      	cmp	r3, r6
 8085a6a:	bfb8      	it	lt
 8085a6c:	3101      	addlt	r1, #1
 8085a6e:	b085      	sub	sp, #20
 8085a70:	f7ff feca 	bl	8085808 <_Balloc>
 8085a74:	f100 0114 	add.w	r1, r0, #20
 8085a78:	460b      	mov	r3, r1
 8085a7a:	2200      	movs	r2, #0
 8085a7c:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 8085a80:	4543      	cmp	r3, r8
 8085a82:	d31d      	bcc.n	8085ac0 <__multiply+0x7c>
 8085a84:	f104 0314 	add.w	r3, r4, #20
 8085a88:	f105 0214 	add.w	r2, r5, #20
 8085a8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8085a90:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8085a94:	9302      	str	r3, [sp, #8]
 8085a96:	1b3b      	subs	r3, r7, r4
 8085a98:	3b15      	subs	r3, #21
 8085a9a:	f023 0303 	bic.w	r3, r3, #3
 8085a9e:	3304      	adds	r3, #4
 8085aa0:	f104 0515 	add.w	r5, r4, #21
 8085aa4:	42af      	cmp	r7, r5
 8085aa6:	bf38      	it	cc
 8085aa8:	2304      	movcc	r3, #4
 8085aaa:	9301      	str	r3, [sp, #4]
 8085aac:	9b02      	ldr	r3, [sp, #8]
 8085aae:	9203      	str	r2, [sp, #12]
 8085ab0:	4293      	cmp	r3, r2
 8085ab2:	d808      	bhi.n	8085ac6 <__multiply+0x82>
 8085ab4:	2e00      	cmp	r6, #0
 8085ab6:	dc5a      	bgt.n	8085b6e <__multiply+0x12a>
 8085ab8:	6106      	str	r6, [r0, #16]
 8085aba:	b005      	add	sp, #20
 8085abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085ac0:	f843 2b04 	str.w	r2, [r3], #4
 8085ac4:	e7dc      	b.n	8085a80 <__multiply+0x3c>
 8085ac6:	f8b2 a000 	ldrh.w	sl, [r2]
 8085aca:	f1ba 0f00 	cmp.w	sl, #0
 8085ace:	d024      	beq.n	8085b1a <__multiply+0xd6>
 8085ad0:	4689      	mov	r9, r1
 8085ad2:	f04f 0c00 	mov.w	ip, #0
 8085ad6:	f104 0e14 	add.w	lr, r4, #20
 8085ada:	f85e 5b04 	ldr.w	r5, [lr], #4
 8085ade:	f8d9 b000 	ldr.w	fp, [r9]
 8085ae2:	b2ab      	uxth	r3, r5
 8085ae4:	fa1f fb8b 	uxth.w	fp, fp
 8085ae8:	fb0a b303 	mla	r3, sl, r3, fp
 8085aec:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 8085af0:	f8d9 5000 	ldr.w	r5, [r9]
 8085af4:	4463      	add	r3, ip
 8085af6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8085afa:	fb0a c50b 	mla	r5, sl, fp, ip
 8085afe:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 8085b02:	b29b      	uxth	r3, r3
 8085b04:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8085b08:	4577      	cmp	r7, lr
 8085b0a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8085b0e:	f849 3b04 	str.w	r3, [r9], #4
 8085b12:	d8e2      	bhi.n	8085ada <__multiply+0x96>
 8085b14:	9b01      	ldr	r3, [sp, #4]
 8085b16:	f841 c003 	str.w	ip, [r1, r3]
 8085b1a:	9b03      	ldr	r3, [sp, #12]
 8085b1c:	3204      	adds	r2, #4
 8085b1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8085b22:	f1b9 0f00 	cmp.w	r9, #0
 8085b26:	d020      	beq.n	8085b6a <__multiply+0x126>
 8085b28:	468e      	mov	lr, r1
 8085b2a:	f04f 0a00 	mov.w	sl, #0
 8085b2e:	680b      	ldr	r3, [r1, #0]
 8085b30:	f104 0c14 	add.w	ip, r4, #20
 8085b34:	f8bc 5000 	ldrh.w	r5, [ip]
 8085b38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8085b3c:	b29b      	uxth	r3, r3
 8085b3e:	fb09 b505 	mla	r5, r9, r5, fp
 8085b42:	44aa      	add	sl, r5
 8085b44:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8085b48:	f84e 3b04 	str.w	r3, [lr], #4
 8085b4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8085b50:	f8be 5000 	ldrh.w	r5, [lr]
 8085b54:	0c1b      	lsrs	r3, r3, #16
 8085b56:	fb09 5303 	mla	r3, r9, r3, r5
 8085b5a:	4567      	cmp	r7, ip
 8085b5c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8085b60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8085b64:	d8e6      	bhi.n	8085b34 <__multiply+0xf0>
 8085b66:	9d01      	ldr	r5, [sp, #4]
 8085b68:	514b      	str	r3, [r1, r5]
 8085b6a:	3104      	adds	r1, #4
 8085b6c:	e79e      	b.n	8085aac <__multiply+0x68>
 8085b6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8085b72:	2b00      	cmp	r3, #0
 8085b74:	d1a0      	bne.n	8085ab8 <__multiply+0x74>
 8085b76:	3e01      	subs	r6, #1
 8085b78:	e79c      	b.n	8085ab4 <__multiply+0x70>
	...

08085b7c <__pow5mult>:
 8085b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085b80:	4615      	mov	r5, r2
 8085b82:	f012 0203 	ands.w	r2, r2, #3
 8085b86:	4606      	mov	r6, r0
 8085b88:	460f      	mov	r7, r1
 8085b8a:	d007      	beq.n	8085b9c <__pow5mult+0x20>
 8085b8c:	4c21      	ldr	r4, [pc, #132]	; (8085c14 <__pow5mult+0x98>)
 8085b8e:	3a01      	subs	r2, #1
 8085b90:	2300      	movs	r3, #0
 8085b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8085b96:	f7ff fe82 	bl	808589e <__multadd>
 8085b9a:	4607      	mov	r7, r0
 8085b9c:	10ad      	asrs	r5, r5, #2
 8085b9e:	d035      	beq.n	8085c0c <__pow5mult+0x90>
 8085ba0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8085ba2:	b93c      	cbnz	r4, 8085bb4 <__pow5mult+0x38>
 8085ba4:	2010      	movs	r0, #16
 8085ba6:	f7fc f9fb 	bl	8081fa0 <malloc>
 8085baa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8085bae:	6270      	str	r0, [r6, #36]	; 0x24
 8085bb0:	6004      	str	r4, [r0, #0]
 8085bb2:	60c4      	str	r4, [r0, #12]
 8085bb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8085bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8085bbc:	b94c      	cbnz	r4, 8085bd2 <__pow5mult+0x56>
 8085bbe:	f240 2171 	movw	r1, #625	; 0x271
 8085bc2:	4630      	mov	r0, r6
 8085bc4:	f7ff ff35 	bl	8085a32 <__i2b>
 8085bc8:	2300      	movs	r3, #0
 8085bca:	4604      	mov	r4, r0
 8085bcc:	f8c8 0008 	str.w	r0, [r8, #8]
 8085bd0:	6003      	str	r3, [r0, #0]
 8085bd2:	f04f 0900 	mov.w	r9, #0
 8085bd6:	07eb      	lsls	r3, r5, #31
 8085bd8:	d50a      	bpl.n	8085bf0 <__pow5mult+0x74>
 8085bda:	4639      	mov	r1, r7
 8085bdc:	4622      	mov	r2, r4
 8085bde:	4630      	mov	r0, r6
 8085be0:	f7ff ff30 	bl	8085a44 <__multiply>
 8085be4:	4680      	mov	r8, r0
 8085be6:	4639      	mov	r1, r7
 8085be8:	4630      	mov	r0, r6
 8085bea:	f7ff fe41 	bl	8085870 <_Bfree>
 8085bee:	4647      	mov	r7, r8
 8085bf0:	106d      	asrs	r5, r5, #1
 8085bf2:	d00b      	beq.n	8085c0c <__pow5mult+0x90>
 8085bf4:	6820      	ldr	r0, [r4, #0]
 8085bf6:	b938      	cbnz	r0, 8085c08 <__pow5mult+0x8c>
 8085bf8:	4622      	mov	r2, r4
 8085bfa:	4621      	mov	r1, r4
 8085bfc:	4630      	mov	r0, r6
 8085bfe:	f7ff ff21 	bl	8085a44 <__multiply>
 8085c02:	6020      	str	r0, [r4, #0]
 8085c04:	f8c0 9000 	str.w	r9, [r0]
 8085c08:	4604      	mov	r4, r0
 8085c0a:	e7e4      	b.n	8085bd6 <__pow5mult+0x5a>
 8085c0c:	4638      	mov	r0, r7
 8085c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085c12:	bf00      	nop
 8085c14:	08086888 	.word	0x08086888

08085c18 <__lshift>:
 8085c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085c1c:	460c      	mov	r4, r1
 8085c1e:	4607      	mov	r7, r0
 8085c20:	4691      	mov	r9, r2
 8085c22:	6923      	ldr	r3, [r4, #16]
 8085c24:	6849      	ldr	r1, [r1, #4]
 8085c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8085c2a:	68a3      	ldr	r3, [r4, #8]
 8085c2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8085c30:	f108 0601 	add.w	r6, r8, #1
 8085c34:	42b3      	cmp	r3, r6
 8085c36:	db3f      	blt.n	8085cb8 <__lshift+0xa0>
 8085c38:	4638      	mov	r0, r7
 8085c3a:	f7ff fde5 	bl	8085808 <_Balloc>
 8085c3e:	2300      	movs	r3, #0
 8085c40:	4605      	mov	r5, r0
 8085c42:	f100 0114 	add.w	r1, r0, #20
 8085c46:	f100 0210 	add.w	r2, r0, #16
 8085c4a:	4618      	mov	r0, r3
 8085c4c:	4553      	cmp	r3, sl
 8085c4e:	db36      	blt.n	8085cbe <__lshift+0xa6>
 8085c50:	6920      	ldr	r0, [r4, #16]
 8085c52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8085c56:	f104 0314 	add.w	r3, r4, #20
 8085c5a:	f019 091f 	ands.w	r9, r9, #31
 8085c5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8085c62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8085c66:	d02e      	beq.n	8085cc6 <__lshift+0xae>
 8085c68:	468a      	mov	sl, r1
 8085c6a:	2200      	movs	r2, #0
 8085c6c:	f1c9 0e20 	rsb	lr, r9, #32
 8085c70:	6818      	ldr	r0, [r3, #0]
 8085c72:	fa00 f009 	lsl.w	r0, r0, r9
 8085c76:	4302      	orrs	r2, r0
 8085c78:	f84a 2b04 	str.w	r2, [sl], #4
 8085c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8085c80:	459c      	cmp	ip, r3
 8085c82:	fa22 f20e 	lsr.w	r2, r2, lr
 8085c86:	d8f3      	bhi.n	8085c70 <__lshift+0x58>
 8085c88:	ebac 0304 	sub.w	r3, ip, r4
 8085c8c:	3b15      	subs	r3, #21
 8085c8e:	f023 0303 	bic.w	r3, r3, #3
 8085c92:	3304      	adds	r3, #4
 8085c94:	f104 0015 	add.w	r0, r4, #21
 8085c98:	4560      	cmp	r0, ip
 8085c9a:	bf88      	it	hi
 8085c9c:	2304      	movhi	r3, #4
 8085c9e:	50ca      	str	r2, [r1, r3]
 8085ca0:	b10a      	cbz	r2, 8085ca6 <__lshift+0x8e>
 8085ca2:	f108 0602 	add.w	r6, r8, #2
 8085ca6:	3e01      	subs	r6, #1
 8085ca8:	4638      	mov	r0, r7
 8085caa:	4621      	mov	r1, r4
 8085cac:	612e      	str	r6, [r5, #16]
 8085cae:	f7ff fddf 	bl	8085870 <_Bfree>
 8085cb2:	4628      	mov	r0, r5
 8085cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085cb8:	3101      	adds	r1, #1
 8085cba:	005b      	lsls	r3, r3, #1
 8085cbc:	e7ba      	b.n	8085c34 <__lshift+0x1c>
 8085cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8085cc2:	3301      	adds	r3, #1
 8085cc4:	e7c2      	b.n	8085c4c <__lshift+0x34>
 8085cc6:	3904      	subs	r1, #4
 8085cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8085ccc:	459c      	cmp	ip, r3
 8085cce:	f841 2f04 	str.w	r2, [r1, #4]!
 8085cd2:	d8f9      	bhi.n	8085cc8 <__lshift+0xb0>
 8085cd4:	e7e7      	b.n	8085ca6 <__lshift+0x8e>

08085cd6 <__mcmp>:
 8085cd6:	4603      	mov	r3, r0
 8085cd8:	690a      	ldr	r2, [r1, #16]
 8085cda:	6900      	ldr	r0, [r0, #16]
 8085cdc:	b530      	push	{r4, r5, lr}
 8085cde:	1a80      	subs	r0, r0, r2
 8085ce0:	d10d      	bne.n	8085cfe <__mcmp+0x28>
 8085ce2:	3314      	adds	r3, #20
 8085ce4:	3114      	adds	r1, #20
 8085ce6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8085cea:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8085cee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8085cf2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8085cf6:	4295      	cmp	r5, r2
 8085cf8:	d002      	beq.n	8085d00 <__mcmp+0x2a>
 8085cfa:	d304      	bcc.n	8085d06 <__mcmp+0x30>
 8085cfc:	2001      	movs	r0, #1
 8085cfe:	bd30      	pop	{r4, r5, pc}
 8085d00:	42a3      	cmp	r3, r4
 8085d02:	d3f4      	bcc.n	8085cee <__mcmp+0x18>
 8085d04:	e7fb      	b.n	8085cfe <__mcmp+0x28>
 8085d06:	f04f 30ff 	mov.w	r0, #4294967295
 8085d0a:	e7f8      	b.n	8085cfe <__mcmp+0x28>

08085d0c <__mdiff>:
 8085d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085d10:	460c      	mov	r4, r1
 8085d12:	4606      	mov	r6, r0
 8085d14:	4611      	mov	r1, r2
 8085d16:	4620      	mov	r0, r4
 8085d18:	4692      	mov	sl, r2
 8085d1a:	f7ff ffdc 	bl	8085cd6 <__mcmp>
 8085d1e:	1e05      	subs	r5, r0, #0
 8085d20:	d108      	bne.n	8085d34 <__mdiff+0x28>
 8085d22:	4629      	mov	r1, r5
 8085d24:	4630      	mov	r0, r6
 8085d26:	f7ff fd6f 	bl	8085808 <_Balloc>
 8085d2a:	2301      	movs	r3, #1
 8085d2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8085d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085d34:	bfa4      	itt	ge
 8085d36:	4653      	movge	r3, sl
 8085d38:	46a2      	movge	sl, r4
 8085d3a:	4630      	mov	r0, r6
 8085d3c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8085d40:	bfa6      	itte	ge
 8085d42:	461c      	movge	r4, r3
 8085d44:	2500      	movge	r5, #0
 8085d46:	2501      	movlt	r5, #1
 8085d48:	f7ff fd5e 	bl	8085808 <_Balloc>
 8085d4c:	f100 0814 	add.w	r8, r0, #20
 8085d50:	f8da 7010 	ldr.w	r7, [sl, #16]
 8085d54:	60c5      	str	r5, [r0, #12]
 8085d56:	f10a 0210 	add.w	r2, sl, #16
 8085d5a:	f10a 0514 	add.w	r5, sl, #20
 8085d5e:	f04f 0c00 	mov.w	ip, #0
 8085d62:	46c2      	mov	sl, r8
 8085d64:	6926      	ldr	r6, [r4, #16]
 8085d66:	f104 0914 	add.w	r9, r4, #20
 8085d6a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8085d6e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8085d72:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8085d76:	f859 3b04 	ldr.w	r3, [r9], #4
 8085d7a:	fa1f f18b 	uxth.w	r1, fp
 8085d7e:	4461      	add	r1, ip
 8085d80:	fa1f fc83 	uxth.w	ip, r3
 8085d84:	0c1b      	lsrs	r3, r3, #16
 8085d86:	eba1 010c 	sub.w	r1, r1, ip
 8085d8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8085d8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8085d92:	b289      	uxth	r1, r1
 8085d94:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8085d98:	454e      	cmp	r6, r9
 8085d9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8085d9e:	f84a 3b04 	str.w	r3, [sl], #4
 8085da2:	d8e6      	bhi.n	8085d72 <__mdiff+0x66>
 8085da4:	1b33      	subs	r3, r6, r4
 8085da6:	3b15      	subs	r3, #21
 8085da8:	f023 0303 	bic.w	r3, r3, #3
 8085dac:	3415      	adds	r4, #21
 8085dae:	3304      	adds	r3, #4
 8085db0:	42a6      	cmp	r6, r4
 8085db2:	bf38      	it	cc
 8085db4:	2304      	movcc	r3, #4
 8085db6:	441d      	add	r5, r3
 8085db8:	4443      	add	r3, r8
 8085dba:	461e      	mov	r6, r3
 8085dbc:	462c      	mov	r4, r5
 8085dbe:	4574      	cmp	r4, lr
 8085dc0:	d30e      	bcc.n	8085de0 <__mdiff+0xd4>
 8085dc2:	f10e 0203 	add.w	r2, lr, #3
 8085dc6:	1b52      	subs	r2, r2, r5
 8085dc8:	f022 0203 	bic.w	r2, r2, #3
 8085dcc:	3d03      	subs	r5, #3
 8085dce:	45ae      	cmp	lr, r5
 8085dd0:	bf38      	it	cc
 8085dd2:	2200      	movcc	r2, #0
 8085dd4:	441a      	add	r2, r3
 8085dd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8085dda:	b18b      	cbz	r3, 8085e00 <__mdiff+0xf4>
 8085ddc:	6107      	str	r7, [r0, #16]
 8085dde:	e7a7      	b.n	8085d30 <__mdiff+0x24>
 8085de0:	f854 8b04 	ldr.w	r8, [r4], #4
 8085de4:	fa1f f288 	uxth.w	r2, r8
 8085de8:	4462      	add	r2, ip
 8085dea:	1411      	asrs	r1, r2, #16
 8085dec:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8085df0:	b292      	uxth	r2, r2
 8085df2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8085df6:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8085dfa:	f846 2b04 	str.w	r2, [r6], #4
 8085dfe:	e7de      	b.n	8085dbe <__mdiff+0xb2>
 8085e00:	3f01      	subs	r7, #1
 8085e02:	e7e8      	b.n	8085dd6 <__mdiff+0xca>

08085e04 <__ulp>:
 8085e04:	4b11      	ldr	r3, [pc, #68]	; (8085e4c <__ulp+0x48>)
 8085e06:	400b      	ands	r3, r1
 8085e08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8085e0c:	2b00      	cmp	r3, #0
 8085e0e:	dd02      	ble.n	8085e16 <__ulp+0x12>
 8085e10:	2000      	movs	r0, #0
 8085e12:	4619      	mov	r1, r3
 8085e14:	4770      	bx	lr
 8085e16:	425b      	negs	r3, r3
 8085e18:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8085e1c:	f04f 0000 	mov.w	r0, #0
 8085e20:	f04f 0100 	mov.w	r1, #0
 8085e24:	ea4f 5223 	mov.w	r2, r3, asr #20
 8085e28:	da04      	bge.n	8085e34 <__ulp+0x30>
 8085e2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8085e2e:	fa43 f102 	asr.w	r1, r3, r2
 8085e32:	4770      	bx	lr
 8085e34:	f1a2 0314 	sub.w	r3, r2, #20
 8085e38:	2b1e      	cmp	r3, #30
 8085e3a:	bfd6      	itet	le
 8085e3c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8085e40:	2301      	movgt	r3, #1
 8085e42:	fa22 f303 	lsrle.w	r3, r2, r3
 8085e46:	4618      	mov	r0, r3
 8085e48:	4770      	bx	lr
 8085e4a:	bf00      	nop
 8085e4c:	7ff00000 	.word	0x7ff00000

08085e50 <__b2d>:
 8085e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085e54:	6907      	ldr	r7, [r0, #16]
 8085e56:	f100 0914 	add.w	r9, r0, #20
 8085e5a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8085e5e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8085e62:	f1a7 0804 	sub.w	r8, r7, #4
 8085e66:	4630      	mov	r0, r6
 8085e68:	f7ff fd95 	bl	8085996 <__hi0bits>
 8085e6c:	f1c0 0320 	rsb	r3, r0, #32
 8085e70:	280a      	cmp	r0, #10
 8085e72:	600b      	str	r3, [r1, #0]
 8085e74:	491f      	ldr	r1, [pc, #124]	; (8085ef4 <__b2d+0xa4>)
 8085e76:	dc17      	bgt.n	8085ea8 <__b2d+0x58>
 8085e78:	45c1      	cmp	r9, r8
 8085e7a:	bf28      	it	cs
 8085e7c:	2200      	movcs	r2, #0
 8085e7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8085e82:	fa26 f30c 	lsr.w	r3, r6, ip
 8085e86:	bf38      	it	cc
 8085e88:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8085e8c:	ea43 0501 	orr.w	r5, r3, r1
 8085e90:	f100 0315 	add.w	r3, r0, #21
 8085e94:	fa06 f303 	lsl.w	r3, r6, r3
 8085e98:	fa22 f20c 	lsr.w	r2, r2, ip
 8085e9c:	ea43 0402 	orr.w	r4, r3, r2
 8085ea0:	4620      	mov	r0, r4
 8085ea2:	4629      	mov	r1, r5
 8085ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085ea8:	45c1      	cmp	r9, r8
 8085eaa:	bf2e      	itee	cs
 8085eac:	2200      	movcs	r2, #0
 8085eae:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8085eb2:	f1a7 0808 	subcc.w	r8, r7, #8
 8085eb6:	f1b0 030b 	subs.w	r3, r0, #11
 8085eba:	d016      	beq.n	8085eea <__b2d+0x9a>
 8085ebc:	f1c3 0720 	rsb	r7, r3, #32
 8085ec0:	fa22 f107 	lsr.w	r1, r2, r7
 8085ec4:	45c8      	cmp	r8, r9
 8085ec6:	fa06 f603 	lsl.w	r6, r6, r3
 8085eca:	ea46 0601 	orr.w	r6, r6, r1
 8085ece:	bf94      	ite	ls
 8085ed0:	2100      	movls	r1, #0
 8085ed2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8085ed6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8085eda:	fa02 f003 	lsl.w	r0, r2, r3
 8085ede:	40f9      	lsrs	r1, r7
 8085ee0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8085ee4:	ea40 0401 	orr.w	r4, r0, r1
 8085ee8:	e7da      	b.n	8085ea0 <__b2d+0x50>
 8085eea:	4614      	mov	r4, r2
 8085eec:	ea46 0501 	orr.w	r5, r6, r1
 8085ef0:	e7d6      	b.n	8085ea0 <__b2d+0x50>
 8085ef2:	bf00      	nop
 8085ef4:	3ff00000 	.word	0x3ff00000

08085ef8 <__d2b>:
 8085ef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8085efc:	461c      	mov	r4, r3
 8085efe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8085f02:	2101      	movs	r1, #1
 8085f04:	4690      	mov	r8, r2
 8085f06:	f7ff fc7f 	bl	8085808 <_Balloc>
 8085f0a:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8085f0e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8085f12:	4607      	mov	r7, r0
 8085f14:	bb2c      	cbnz	r4, 8085f62 <__d2b+0x6a>
 8085f16:	9301      	str	r3, [sp, #4]
 8085f18:	f1b8 0300 	subs.w	r3, r8, #0
 8085f1c:	d026      	beq.n	8085f6c <__d2b+0x74>
 8085f1e:	4668      	mov	r0, sp
 8085f20:	9300      	str	r3, [sp, #0]
 8085f22:	f7ff fd58 	bl	80859d6 <__lo0bits>
 8085f26:	9900      	ldr	r1, [sp, #0]
 8085f28:	b1f0      	cbz	r0, 8085f68 <__d2b+0x70>
 8085f2a:	9a01      	ldr	r2, [sp, #4]
 8085f2c:	f1c0 0320 	rsb	r3, r0, #32
 8085f30:	fa02 f303 	lsl.w	r3, r2, r3
 8085f34:	430b      	orrs	r3, r1
 8085f36:	40c2      	lsrs	r2, r0
 8085f38:	617b      	str	r3, [r7, #20]
 8085f3a:	9201      	str	r2, [sp, #4]
 8085f3c:	9b01      	ldr	r3, [sp, #4]
 8085f3e:	2b00      	cmp	r3, #0
 8085f40:	bf14      	ite	ne
 8085f42:	2102      	movne	r1, #2
 8085f44:	2101      	moveq	r1, #1
 8085f46:	61bb      	str	r3, [r7, #24]
 8085f48:	6139      	str	r1, [r7, #16]
 8085f4a:	b1c4      	cbz	r4, 8085f7e <__d2b+0x86>
 8085f4c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8085f50:	4404      	add	r4, r0
 8085f52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8085f56:	6034      	str	r4, [r6, #0]
 8085f58:	6028      	str	r0, [r5, #0]
 8085f5a:	4638      	mov	r0, r7
 8085f5c:	b002      	add	sp, #8
 8085f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8085f66:	e7d6      	b.n	8085f16 <__d2b+0x1e>
 8085f68:	6179      	str	r1, [r7, #20]
 8085f6a:	e7e7      	b.n	8085f3c <__d2b+0x44>
 8085f6c:	a801      	add	r0, sp, #4
 8085f6e:	f7ff fd32 	bl	80859d6 <__lo0bits>
 8085f72:	2101      	movs	r1, #1
 8085f74:	9b01      	ldr	r3, [sp, #4]
 8085f76:	6139      	str	r1, [r7, #16]
 8085f78:	617b      	str	r3, [r7, #20]
 8085f7a:	3020      	adds	r0, #32
 8085f7c:	e7e5      	b.n	8085f4a <__d2b+0x52>
 8085f7e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8085f82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8085f86:	6030      	str	r0, [r6, #0]
 8085f88:	6918      	ldr	r0, [r3, #16]
 8085f8a:	f7ff fd04 	bl	8085996 <__hi0bits>
 8085f8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8085f92:	6029      	str	r1, [r5, #0]
 8085f94:	e7e1      	b.n	8085f5a <__d2b+0x62>

08085f96 <__ratio>:
 8085f96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085f9a:	4688      	mov	r8, r1
 8085f9c:	4669      	mov	r1, sp
 8085f9e:	4681      	mov	r9, r0
 8085fa0:	f7ff ff56 	bl	8085e50 <__b2d>
 8085fa4:	460f      	mov	r7, r1
 8085fa6:	4604      	mov	r4, r0
 8085fa8:	460d      	mov	r5, r1
 8085faa:	4640      	mov	r0, r8
 8085fac:	a901      	add	r1, sp, #4
 8085fae:	f7ff ff4f 	bl	8085e50 <__b2d>
 8085fb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8085fb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8085fba:	468b      	mov	fp, r1
 8085fbc:	eba3 0c02 	sub.w	ip, r3, r2
 8085fc0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8085fc4:	1a9b      	subs	r3, r3, r2
 8085fc6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8085fca:	2b00      	cmp	r3, #0
 8085fcc:	bfd5      	itete	le
 8085fce:	460a      	movle	r2, r1
 8085fd0:	462a      	movgt	r2, r5
 8085fd2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8085fd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8085fda:	bfd8      	it	le
 8085fdc:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8085fe0:	465b      	mov	r3, fp
 8085fe2:	4602      	mov	r2, r0
 8085fe4:	4639      	mov	r1, r7
 8085fe6:	4620      	mov	r0, r4
 8085fe8:	f7fd fe40 	bl	8083c6c <__aeabi_ddiv>
 8085fec:	b003      	add	sp, #12
 8085fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08085ff2 <__copybits>:
 8085ff2:	3901      	subs	r1, #1
 8085ff4:	b570      	push	{r4, r5, r6, lr}
 8085ff6:	1149      	asrs	r1, r1, #5
 8085ff8:	6914      	ldr	r4, [r2, #16]
 8085ffa:	3101      	adds	r1, #1
 8085ffc:	f102 0314 	add.w	r3, r2, #20
 8086000:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8086004:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8086008:	1f05      	subs	r5, r0, #4
 808600a:	42a3      	cmp	r3, r4
 808600c:	d30c      	bcc.n	8086028 <__copybits+0x36>
 808600e:	1aa3      	subs	r3, r4, r2
 8086010:	3b11      	subs	r3, #17
 8086012:	f023 0303 	bic.w	r3, r3, #3
 8086016:	3211      	adds	r2, #17
 8086018:	42a2      	cmp	r2, r4
 808601a:	bf88      	it	hi
 808601c:	2300      	movhi	r3, #0
 808601e:	4418      	add	r0, r3
 8086020:	2300      	movs	r3, #0
 8086022:	4288      	cmp	r0, r1
 8086024:	d305      	bcc.n	8086032 <__copybits+0x40>
 8086026:	bd70      	pop	{r4, r5, r6, pc}
 8086028:	f853 6b04 	ldr.w	r6, [r3], #4
 808602c:	f845 6f04 	str.w	r6, [r5, #4]!
 8086030:	e7eb      	b.n	808600a <__copybits+0x18>
 8086032:	f840 3b04 	str.w	r3, [r0], #4
 8086036:	e7f4      	b.n	8086022 <__copybits+0x30>

08086038 <__any_on>:
 8086038:	f100 0214 	add.w	r2, r0, #20
 808603c:	6900      	ldr	r0, [r0, #16]
 808603e:	114b      	asrs	r3, r1, #5
 8086040:	4298      	cmp	r0, r3
 8086042:	b510      	push	{r4, lr}
 8086044:	db11      	blt.n	808606a <__any_on+0x32>
 8086046:	dd0a      	ble.n	808605e <__any_on+0x26>
 8086048:	f011 011f 	ands.w	r1, r1, #31
 808604c:	d007      	beq.n	808605e <__any_on+0x26>
 808604e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8086052:	fa24 f001 	lsr.w	r0, r4, r1
 8086056:	fa00 f101 	lsl.w	r1, r0, r1
 808605a:	428c      	cmp	r4, r1
 808605c:	d10b      	bne.n	8086076 <__any_on+0x3e>
 808605e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8086062:	4293      	cmp	r3, r2
 8086064:	d803      	bhi.n	808606e <__any_on+0x36>
 8086066:	2000      	movs	r0, #0
 8086068:	bd10      	pop	{r4, pc}
 808606a:	4603      	mov	r3, r0
 808606c:	e7f7      	b.n	808605e <__any_on+0x26>
 808606e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8086072:	2900      	cmp	r1, #0
 8086074:	d0f5      	beq.n	8086062 <__any_on+0x2a>
 8086076:	2001      	movs	r0, #1
 8086078:	e7f6      	b.n	8086068 <__any_on+0x30>

0808607a <_calloc_r>:
 808607a:	b538      	push	{r3, r4, r5, lr}
 808607c:	fb02 f501 	mul.w	r5, r2, r1
 8086080:	4629      	mov	r1, r5
 8086082:	f7fb ffcd 	bl	8082020 <_malloc_r>
 8086086:	4604      	mov	r4, r0
 8086088:	b118      	cbz	r0, 8086092 <_calloc_r+0x18>
 808608a:	462a      	mov	r2, r5
 808608c:	2100      	movs	r1, #0
 808608e:	f7fe f8bd 	bl	808420c <memset>
 8086092:	4620      	mov	r0, r4
 8086094:	bd38      	pop	{r3, r4, r5, pc}
	...

08086098 <nan>:
 8086098:	2000      	movs	r0, #0
 808609a:	4901      	ldr	r1, [pc, #4]	; (80860a0 <nan+0x8>)
 808609c:	4770      	bx	lr
 808609e:	bf00      	nop
 80860a0:	7ff80000 	.word	0x7ff80000

080860a4 <nanf>:
 80860a4:	4800      	ldr	r0, [pc, #0]	; (80860a8 <nanf+0x4>)
 80860a6:	4770      	bx	lr
 80860a8:	7fc00000 	.word	0x7fc00000

080860ac <__ascii_wctomb>:
 80860ac:	4603      	mov	r3, r0
 80860ae:	4608      	mov	r0, r1
 80860b0:	b141      	cbz	r1, 80860c4 <__ascii_wctomb+0x18>
 80860b2:	2aff      	cmp	r2, #255	; 0xff
 80860b4:	d904      	bls.n	80860c0 <__ascii_wctomb+0x14>
 80860b6:	228a      	movs	r2, #138	; 0x8a
 80860b8:	f04f 30ff 	mov.w	r0, #4294967295
 80860bc:	601a      	str	r2, [r3, #0]
 80860be:	4770      	bx	lr
 80860c0:	2001      	movs	r0, #1
 80860c2:	700a      	strb	r2, [r1, #0]
 80860c4:	4770      	bx	lr
	...

080860c8 <__aeabi_fcmpun>:
 80860c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80860cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80860d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80860d4:	d102      	bne.n	80860dc <__aeabi_fcmpun+0x14>
 80860d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80860da:	d108      	bne.n	80860ee <__aeabi_fcmpun+0x26>
 80860dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80860e0:	d102      	bne.n	80860e8 <__aeabi_fcmpun+0x20>
 80860e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80860e6:	d102      	bne.n	80860ee <__aeabi_fcmpun+0x26>
 80860e8:	f04f 0000 	mov.w	r0, #0
 80860ec:	4770      	bx	lr
 80860ee:	f04f 0001 	mov.w	r0, #1
 80860f2:	4770      	bx	lr

080860f4 <__aeabi_d2lz>:
 80860f4:	b538      	push	{r3, r4, r5, lr}
 80860f6:	460c      	mov	r4, r1
 80860f8:	4605      	mov	r5, r0
 80860fa:	4621      	mov	r1, r4
 80860fc:	4628      	mov	r0, r5
 80860fe:	2200      	movs	r2, #0
 8086100:	2300      	movs	r3, #0
 8086102:	f7fd fefb 	bl	8083efc <__aeabi_dcmplt>
 8086106:	b928      	cbnz	r0, 8086114 <__aeabi_d2lz+0x20>
 8086108:	4628      	mov	r0, r5
 808610a:	4621      	mov	r1, r4
 808610c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8086110:	f7fe b818 	b.w	8084144 <__aeabi_d2ulz>
 8086114:	4628      	mov	r0, r5
 8086116:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 808611a:	f7fe f813 	bl	8084144 <__aeabi_d2ulz>
 808611e:	4240      	negs	r0, r0
 8086120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086124:	bd38      	pop	{r3, r4, r5, pc}
 8086126:	bf00      	nop

08086128 <dynalib_user>:
 8086128:	0041 0808 0081 0808 00a9 0808 00ad 0808     A...............
 8086138:	0000 0000 6553 2074 655a 6f72 4620 6e75     ....Set Zero Fun
 8086148:	7463 6f69 206e 6163 6c6c 6465 6620 6f72     ction called fro
 8086158:	206d 6c63 756f 0064 6552 7473 7261 2074     m cloud.Restart 
 8086168:	7274 6769 6567 6572 0064 6f4c 706f 4420     triggered.Loop D
 8086178:	6c65 7961 7520 6470 7461 6465 7420 3a6f     elay updated to:
 8086188:	0020 7525 7b00 2200 6f4c 706f 6544 616c      .%u.{."LoopDela
 8086198:	2279 003a 0022 7d22 4c00 6f6f 2070 6544     y":."."}.Loop De
 80861a8:	616c 2079 7075 6164 6574 0064 7453 7261     lay updated.Star
 80861b8:	7574 3a70 5220 6e75 696e 676e 5320 7465     tup: Running Set
 80861c8:	7075 4300 6f6c 6475 6552 6573 4674 6e75     up.CloudResetFun
 80861d8:	7463 6f69 006e 6553 4c74 6f6f 4470 6c65     ction.SetLoopDel
 80861e8:	7961 5300 7465 655a 6f72 6800 6f6f 2d6b     ay.SetZero.hook-
 80861f8:	6572 7073 6e6f 6573 732f 6174 7472 7075     response/startup
 8086208:	5200 6265 6f6f 2074 6e69 6974 7461 6465     .Reboot intiated
 8086218:	4400 6265 6775 5200 6d65 746f 2065 6552     .Debug.Remote Re
 8086228:	6573 2074 6e49 7469 6169 6574 0064 6925     set Initiated.%i
 8086238:	2c00 0020 3425 312e 0066 5a22 7265 4f6f     ., .%4.1f."ZeroO
 8086248:	6666 6573 4974 4d6e 226d 003a 6173 6576     ffsetInMm":.save
 8086258:	655a 6f72 4e00 7765 7a20 7265 4f6f 6666     Zero.New zeroOff
 8086268:	6573 2074 7328 7661 6465 7420 206f 6c63     set (saved to cl
 8086278:	756f 2964 203a 2200 5444 3a22 2200 002c     oud): ."DT":.",.
 8086288:	5322 2253 003a 7372 6973 253d 2c64 7120     "SS":.rssi=%d, q
 8086298:	6175 3d6c 6425 2200 734c 6942 7374 3a22     ual=%d."LsBits":
 80862a8:	2200 734c 6d4d 3a22 2200 734c 7641 3a22     ."LsMm":."LsAv":
 80862b8:	2200 734c 6853 7641 3a22 7400 6369 4c6b     ."LsShAv":.tickL
 80862c8:	7665 6c65 6c00 6e75 7265 6300 756f 646c     evel.luner.could
 80862d8:	6e20 746f 7020 7261 6573 6a20 6f73 006e      not parse json.
 80862e8:	7265 6f72 0072 657a 6f72 664f 7366 7465     error.zeroOffset
 80862f8:	6e49 6d4d 2820 7361 7320 6f74 6572 2064     InMm (as stored 
 8086308:	6e6f 4120 757a 6572 3a29 0020 6553 7474     on Azure): .Sett
 8086318:	6e69 2067 657a 6f72 664f 7366 7465 6e49     ing zeroOffsetIn
 8086328:	6d4d 0000                                   Mm..

0808632c <_ZTV16JsonParserStaticILj256ELj20EE>:
	...
 8086334:	00d9 0808 00ed 0808 3025 7834 0000 0000     ........%04x....

08086344 <_ZTV10JsonBuffer>:
	...
 808634c:	0d81 0808 0d9d 0808                         ........

08086354 <_ZTV10JsonParser>:
	...
 808635c:	0db1 0808 0dd5 0808                         ........

08086364 <_ZTV13JsonReference>:
	...
 808636c:	0d71 0808 0d73 0808 5954 4550 555f 4b4e     q...s...TYPE_UNK
 808637c:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 808638c:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 808639c:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 80863ac:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 80863bc:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 80863cc:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 80863dc:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 80863ec:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 80863fc:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 808640c:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 808641c:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 808642c:	7830 3025 7832 2500 2c64 6425 4300 5153     0x%02x.%d,%d.CSQ
 808643c:	4100 2b54 5343 0d51 000a 2b0a 7325 203a     .AT+CSQ....+%s: 
 808644c:	0000 0000                                   ....

08086450 <_ZTV30CellularHelperRSSIQualResponse>:
	...
 8086458:	1aad 0808                                   ....

0808645c <_ZTV32CellularHelperPlusStringResponse>:
	...
 8086464:	1aad 0808 7061 0070 005a 2b25 3330 3a64     ....app.Z.%+03d:
 8086474:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8086484:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8086494:	0000 0000                                   ....

08086498 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80864a0:	2961 0808 2967 0808 29a5 0808 2975 0808     a)..g)...)..u)..
 80864b0:	2963 0808                                   c)..

080864b4 <_ZTV9IPAddress>:
	...
 80864bc:	2ef9 0808 2ee9 0808 2eeb 0808               ............

080864c8 <_ZTV9USBSerial>:
	...
 80864d0:	2f8d 0808 2ff3 0808 2fcb 0808 241d 0808     ./.../.../...$..
 80864e0:	2fbd 0808 2f8f 0808 2f9f 0808 2fed 0808     ./.../.../.../..
 80864f0:	2faf 0808 2f89 0808                         ./.../..

080864f8 <_ZTVN5spark13CellularClassE>:
	...
 8086500:	31bb 0808 31b1 0808 31a7 0808 3121 0808     .1...1...1..!1..
 8086510:	319b 0808 318f 0808 3447 0808 344f 0808     .1...1..G4..O4..
 8086520:	3183 0808 317b 0808 3171 0808 3167 0808     .1..{1..q1..g1..
 8086530:	312b 0808                                   +1..

08086534 <_ZTV11USARTSerial>:
	...
 808653c:	31f5 0808 325d 0808 3239 0808 241d 0808     .1..]2..92...$..
 808654c:	3209 0808 3225 0808 3217 0808 3233 0808     .2..%2...2..32..
 808655c:	31f7 0808 31fb 0808                         .1...1..

08086564 <_ZTV7TwoWire>:
	...
 808656c:	3311 0808 335b 0808 3333 0808 3313 0808     .3..[3..33...3..
 808657c:	333b 0808 3343 0808 334b 0808 3353 0808     ;3..C3..K3..S3..

0808658c <_ZTVN5spark12NetworkClassE>:
	...
 8086594:	3407 0808 3411 0808 341b 0808 3425 0808     .4...4...4..%4..
 80865a4:	342f 0808 343b 0808 3447 0808 344f 0808     /4..;4..G4..O4..
 80865b4:	3457 0808 3463 0808 346b 0808 3475 0808     W4..c4..k4..u4..
 80865c4:	3481 0808                                   .4..

080865c8 <_ZSt7nothrow>:
 80865c8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80865d8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080865e9 <day_name.4782>:
 80865e9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80865f9:	6972 6153                                    riSat

080865fe <mon_name.4783>:
 80865fe:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808660e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808661e:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

08086630 <fpi.6203>:
 8086630:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8086640:	0000 0000                                   ....

08086644 <fpinan.6239>:
 8086644:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8086654:	0000 0000                                   ....

08086658 <tinytens>:
 8086658:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8086668:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8086678:	6f43 64ac 0628 1168                         Co.d(.h.

08086680 <_ctype_>:
 8086680:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8086690:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80866a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80866b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80866c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80866d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80866e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80866f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8086700:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 8086780:	2e00 0000                                   ....

08086784 <_C_numeric_locale>:
 8086784:	6781 0808 6445 0808 0078 2000 0043 4f50     .g..Ed..x.. C.PO
 8086794:	4953 0058                                   SIX.

08086798 <__mprec_bigtens>:
 8086798:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80867a8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80867b8:	bf3c 7f73 4fdd 7515                         <.s..O.u

080867c0 <__mprec_tens>:
 80867c0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80867d0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80867e0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80867f0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8086800:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8086810:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8086820:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8086830:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8086840:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8086850:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8086860:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8086870:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8086880:	9db4 79d9 7843 44ea                         ...yCx.D

08086888 <p05.6127>:
 8086888:	0005 0000 0019 0000 007d 0000               ........}...

08086894 <link_const_variable_data_end>:
 8086894:	08080af5 	.word	0x08080af5
 8086898:	080820a5 	.word	0x080820a5
 808689c:	08082531 	.word	0x08082531
 80868a0:	08082785 	.word	0x08082785
 80868a4:	080827e1 	.word	0x080827e1
 80868a8:	080831c5 	.word	0x080831c5
 80868ac:	080834c9 	.word	0x080834c9
 80868b0:	080835cd 	.word	0x080835cd

080868b4 <link_constructors_end>:
	...
